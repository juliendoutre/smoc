
sources_expliques.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ede8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bb0  0800ef78  0800ef78  0001ef78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012b28  08012b28  00022b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012b30  08012b30  00022b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012b34  08012b34  00022b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000078c  20000000  08012b38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0003078c  2**0
                  CONTENTS
  8 .bss          00009d9c  20000790  20000790  00030790  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  2000a52c  2000a52c  00030790  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003078c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005137d  00000000  00000000  000307bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000ab64  00000000  00000000  00081b39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001d1bd  00000000  00000000  0008c69d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f98  00000000  00000000  000a9860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002f50  00000000  00000000  000ab7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001545e  00000000  00000000  000ae748  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000b4ce  00000000  00000000  000c3ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000cf074  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006b44  00000000  00000000  000cf0f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000790 	.word	0x20000790
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ef60 	.word	0x0800ef60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000794 	.word	0x20000794
 80001cc:	0800ef60 	.word	0x0800ef60

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_d2iz>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b4c:	d215      	bcs.n	8000b7a <__aeabi_d2iz+0x36>
 8000b4e:	d511      	bpl.n	8000b74 <__aeabi_d2iz+0x30>
 8000b50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b58:	d912      	bls.n	8000b80 <__aeabi_d2iz+0x3c>
 8000b5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d105      	bne.n	8000b8c <__aeabi_d2iz+0x48>
 8000b80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	bf08      	it	eq
 8000b86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <__aeabi_d2uiz>:
 8000b94:	004a      	lsls	r2, r1, #1
 8000b96:	d211      	bcs.n	8000bbc <__aeabi_d2uiz+0x28>
 8000b98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b9c:	d211      	bcs.n	8000bc2 <__aeabi_d2uiz+0x2e>
 8000b9e:	d50d      	bpl.n	8000bbc <__aeabi_d2uiz+0x28>
 8000ba0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba8:	d40e      	bmi.n	8000bc8 <__aeabi_d2uiz+0x34>
 8000baa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d102      	bne.n	8000bce <__aeabi_d2uiz+0x3a>
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	4770      	bx	lr
 8000bce:	f04f 0000 	mov.w	r0, #0
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_uldivmod>:
 8000bd4:	b953      	cbnz	r3, 8000bec <__aeabi_uldivmod+0x18>
 8000bd6:	b94a      	cbnz	r2, 8000bec <__aeabi_uldivmod+0x18>
 8000bd8:	2900      	cmp	r1, #0
 8000bda:	bf08      	it	eq
 8000bdc:	2800      	cmpeq	r0, #0
 8000bde:	bf1c      	itt	ne
 8000be0:	f04f 31ff 	movne.w	r1, #4294967295
 8000be4:	f04f 30ff 	movne.w	r0, #4294967295
 8000be8:	f000 b97a 	b.w	8000ee0 <__aeabi_idiv0>
 8000bec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf4:	f000 f806 	bl	8000c04 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4770      	bx	lr

08000c04 <__udivmoddi4>:
 8000c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c08:	468c      	mov	ip, r1
 8000c0a:	460d      	mov	r5, r1
 8000c0c:	4604      	mov	r4, r0
 8000c0e:	9e08      	ldr	r6, [sp, #32]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d151      	bne.n	8000cb8 <__udivmoddi4+0xb4>
 8000c14:	428a      	cmp	r2, r1
 8000c16:	4617      	mov	r7, r2
 8000c18:	d96d      	bls.n	8000cf6 <__udivmoddi4+0xf2>
 8000c1a:	fab2 fe82 	clz	lr, r2
 8000c1e:	f1be 0f00 	cmp.w	lr, #0
 8000c22:	d00b      	beq.n	8000c3c <__udivmoddi4+0x38>
 8000c24:	f1ce 0c20 	rsb	ip, lr, #32
 8000c28:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c2c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c30:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c34:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c38:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c3c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c40:	0c25      	lsrs	r5, r4, #16
 8000c42:	fbbc f8fa 	udiv	r8, ip, sl
 8000c46:	fa1f f987 	uxth.w	r9, r7
 8000c4a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c4e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c52:	fb08 f309 	mul.w	r3, r8, r9
 8000c56:	42ab      	cmp	r3, r5
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x6c>
 8000c5a:	19ed      	adds	r5, r5, r7
 8000c5c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c60:	f080 8123 	bcs.w	8000eaa <__udivmoddi4+0x2a6>
 8000c64:	42ab      	cmp	r3, r5
 8000c66:	f240 8120 	bls.w	8000eaa <__udivmoddi4+0x2a6>
 8000c6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6e:	443d      	add	r5, r7
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c78:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c80:	fb00 f909 	mul.w	r9, r0, r9
 8000c84:	45a1      	cmp	r9, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x98>
 8000c88:	19e4      	adds	r4, r4, r7
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	f080 810a 	bcs.w	8000ea6 <__udivmoddi4+0x2a2>
 8000c92:	45a1      	cmp	r9, r4
 8000c94:	f240 8107 	bls.w	8000ea6 <__udivmoddi4+0x2a2>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	443c      	add	r4, r7
 8000c9c:	eba4 0409 	sub.w	r4, r4, r9
 8000ca0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d061      	beq.n	8000d6e <__udivmoddi4+0x16a>
 8000caa:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cae:	2300      	movs	r3, #0
 8000cb0:	6034      	str	r4, [r6, #0]
 8000cb2:	6073      	str	r3, [r6, #4]
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xc8>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d054      	beq.n	8000d6a <__udivmoddi4+0x166>
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ccc:	fab3 f183 	clz	r1, r3
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	f040 808e 	bne.w	8000df2 <__udivmoddi4+0x1ee>
 8000cd6:	42ab      	cmp	r3, r5
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xdc>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2d0>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb65 0503 	sbc.w	r5, r5, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	46ac      	mov	ip, r5
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d03f      	beq.n	8000d6e <__udivmoddi4+0x16a>
 8000cee:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	b912      	cbnz	r2, 8000cfe <__udivmoddi4+0xfa>
 8000cf8:	2701      	movs	r7, #1
 8000cfa:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cfe:	fab7 fe87 	clz	lr, r7
 8000d02:	f1be 0f00 	cmp.w	lr, #0
 8000d06:	d134      	bne.n	8000d72 <__udivmoddi4+0x16e>
 8000d08:	1beb      	subs	r3, r5, r7
 8000d0a:	0c3a      	lsrs	r2, r7, #16
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d16:	0c25      	lsrs	r5, r4, #16
 8000d18:	fb02 3318 	mls	r3, r2, r8, r3
 8000d1c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d20:	fb0c f308 	mul.w	r3, ip, r8
 8000d24:	42ab      	cmp	r3, r5
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x134>
 8000d28:	19ed      	adds	r5, r5, r7
 8000d2a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x132>
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	f200 80d1 	bhi.w	8000ed8 <__udivmoddi4+0x2d4>
 8000d36:	4680      	mov	r8, r0
 8000d38:	1aed      	subs	r5, r5, r3
 8000d3a:	b2a3      	uxth	r3, r4
 8000d3c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d40:	fb02 5510 	mls	r5, r2, r0, r5
 8000d44:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d48:	fb0c fc00 	mul.w	ip, ip, r0
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x15c>
 8000d50:	19e4      	adds	r4, r4, r7
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x15a>
 8000d58:	45a4      	cmp	ip, r4
 8000d5a:	f200 80b8 	bhi.w	8000ece <__udivmoddi4+0x2ca>
 8000d5e:	4618      	mov	r0, r3
 8000d60:	eba4 040c 	sub.w	r4, r4, ip
 8000d64:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d68:	e79d      	b.n	8000ca6 <__udivmoddi4+0xa2>
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	f1ce 0420 	rsb	r4, lr, #32
 8000d76:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d7a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d7e:	fa20 f804 	lsr.w	r8, r0, r4
 8000d82:	0c3a      	lsrs	r2, r7, #16
 8000d84:	fa25 f404 	lsr.w	r4, r5, r4
 8000d88:	ea48 0803 	orr.w	r8, r8, r3
 8000d8c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d90:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d94:	fb02 4411 	mls	r4, r2, r1, r4
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000da0:	fb01 f30c 	mul.w	r3, r1, ip
 8000da4:	42ab      	cmp	r3, r5
 8000da6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x1bc>
 8000dac:	19ed      	adds	r5, r5, r7
 8000dae:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db2:	f080 808a 	bcs.w	8000eca <__udivmoddi4+0x2c6>
 8000db6:	42ab      	cmp	r3, r5
 8000db8:	f240 8087 	bls.w	8000eca <__udivmoddi4+0x2c6>
 8000dbc:	3902      	subs	r1, #2
 8000dbe:	443d      	add	r5, r7
 8000dc0:	1aeb      	subs	r3, r5, r3
 8000dc2:	fa1f f588 	uxth.w	r5, r8
 8000dc6:	fbb3 f0f2 	udiv	r0, r3, r2
 8000dca:	fb02 3310 	mls	r3, r2, r0, r3
 8000dce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dd2:	fb00 f30c 	mul.w	r3, r0, ip
 8000dd6:	42ab      	cmp	r3, r5
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1e6>
 8000dda:	19ed      	adds	r5, r5, r7
 8000ddc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de0:	d26f      	bcs.n	8000ec2 <__udivmoddi4+0x2be>
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	d96d      	bls.n	8000ec2 <__udivmoddi4+0x2be>
 8000de6:	3802      	subs	r0, #2
 8000de8:	443d      	add	r5, r7
 8000dea:	1aeb      	subs	r3, r5, r3
 8000dec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df0:	e78f      	b.n	8000d12 <__udivmoddi4+0x10e>
 8000df2:	f1c1 0720 	rsb	r7, r1, #32
 8000df6:	fa22 f807 	lsr.w	r8, r2, r7
 8000dfa:	408b      	lsls	r3, r1
 8000dfc:	fa05 f401 	lsl.w	r4, r5, r1
 8000e00:	ea48 0303 	orr.w	r3, r8, r3
 8000e04:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e08:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e0c:	40fd      	lsrs	r5, r7
 8000e0e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e12:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e16:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e1a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e1e:	fa1f f883 	uxth.w	r8, r3
 8000e22:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e26:	fb09 f408 	mul.w	r4, r9, r8
 8000e2a:	42ac      	cmp	r4, r5
 8000e2c:	fa02 f201 	lsl.w	r2, r2, r1
 8000e30:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x244>
 8000e36:	18ed      	adds	r5, r5, r3
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d243      	bcs.n	8000ec6 <__udivmoddi4+0x2c2>
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	d941      	bls.n	8000ec6 <__udivmoddi4+0x2c2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	441d      	add	r5, r3
 8000e48:	1b2d      	subs	r5, r5, r4
 8000e4a:	fa1f fe8e 	uxth.w	lr, lr
 8000e4e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e52:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e56:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45a0      	cmp	r8, r4
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x26e>
 8000e62:	18e4      	adds	r4, r4, r3
 8000e64:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e68:	d229      	bcs.n	8000ebe <__udivmoddi4+0x2ba>
 8000e6a:	45a0      	cmp	r8, r4
 8000e6c:	d927      	bls.n	8000ebe <__udivmoddi4+0x2ba>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	441c      	add	r4, r3
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba4 0408 	sub.w	r4, r4, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	464d      	mov	r5, r9
 8000e84:	d315      	bcc.n	8000eb2 <__udivmoddi4+0x2ae>
 8000e86:	d012      	beq.n	8000eae <__udivmoddi4+0x2aa>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x29c>
 8000e8a:	ebba 030e 	subs.w	r3, sl, lr
 8000e8e:	eb64 0405 	sbc.w	r4, r4, r5
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40cb      	lsrs	r3, r1
 8000e98:	431f      	orrs	r7, r3
 8000e9a:	40cc      	lsrs	r4, r1
 8000e9c:	6037      	str	r7, [r6, #0]
 8000e9e:	6074      	str	r4, [r6, #4]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	e6f8      	b.n	8000c9c <__udivmoddi4+0x98>
 8000eaa:	4690      	mov	r8, r2
 8000eac:	e6e0      	b.n	8000c70 <__udivmoddi4+0x6c>
 8000eae:	45c2      	cmp	sl, r8
 8000eb0:	d2ea      	bcs.n	8000e88 <__udivmoddi4+0x284>
 8000eb2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb6:	eb69 0503 	sbc.w	r5, r9, r3
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7e4      	b.n	8000e88 <__udivmoddi4+0x284>
 8000ebe:	4628      	mov	r0, r5
 8000ec0:	e7d7      	b.n	8000e72 <__udivmoddi4+0x26e>
 8000ec2:	4640      	mov	r0, r8
 8000ec4:	e791      	b.n	8000dea <__udivmoddi4+0x1e6>
 8000ec6:	4681      	mov	r9, r0
 8000ec8:	e7be      	b.n	8000e48 <__udivmoddi4+0x244>
 8000eca:	4601      	mov	r1, r0
 8000ecc:	e778      	b.n	8000dc0 <__udivmoddi4+0x1bc>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	443c      	add	r4, r7
 8000ed2:	e745      	b.n	8000d60 <__udivmoddi4+0x15c>
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xe6>
 8000ed8:	f1a8 0802 	sub.w	r8, r8, #2
 8000edc:	443d      	add	r5, r7
 8000ede:	e72b      	b.n	8000d38 <__udivmoddi4+0x134>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <HAL_InitTick+0x3c>)
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_InitTick+0x40>)
{
 8000eea:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eec:	7818      	ldrb	r0, [r3, #0]
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ef6:	6810      	ldr	r0, [r2, #0]
 8000ef8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000efc:	f000 fa6e 	bl	80013dc <HAL_SYSTICK_Config>
 8000f00:	4604      	mov	r4, r0
 8000f02:	b958      	cbnz	r0, 8000f1c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f04:	2d0f      	cmp	r5, #15
 8000f06:	d809      	bhi.n	8000f1c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f08:	4602      	mov	r2, r0
 8000f0a:	4629      	mov	r1, r5
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f000 fa22 	bl	8001358 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_InitTick+0x44>)
 8000f16:	4620      	mov	r0, r4
 8000f18:	601d      	str	r5, [r3, #0]
 8000f1a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f1c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f1e:	bd38      	pop	{r3, r4, r5, pc}
 8000f20:	200005b4 	.word	0x200005b4
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000004 	.word	0x20000004

08000f2c <HAL_Init>:
{
 8000f2c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_Init+0x30>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f36:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f3e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f46:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f000 f9f3 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ffc8 	bl	8000ee4 <HAL_InitTick>
  HAL_MspInit();
 8000f54:	f00b fdd0 	bl	800caf8 <HAL_MspInit>
}
 8000f58:	2000      	movs	r0, #0
 8000f5a:	bd08      	pop	{r3, pc}
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f60:	4a03      	ldr	r2, [pc, #12]	; (8000f70 <HAL_IncTick+0x10>)
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <HAL_IncTick+0x14>)
 8000f64:	6811      	ldr	r1, [r2, #0]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	440b      	add	r3, r1
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20001ac4 	.word	0x20001ac4
 8000f74:	20000000 	.word	0x20000000

08000f78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f78:	4b01      	ldr	r3, [pc, #4]	; (8000f80 <HAL_GetTick+0x8>)
 8000f7a:	6818      	ldr	r0, [r3, #0]
}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20001ac4 	.word	0x20001ac4

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b538      	push	{r3, r4, r5, lr}
 8000f86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff fff6 	bl	8000f78 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	bf1c      	itt	ne
 8000f90:	4b05      	ldrne	r3, [pc, #20]	; (8000fa8 <HAL_Delay+0x24>)
 8000f92:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000f96:	bf18      	it	ne
 8000f98:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9a:	f7ff ffed 	bl	8000f78 <HAL_GetTick>
 8000f9e:	1b40      	subs	r0, r0, r5
 8000fa0:	4284      	cmp	r4, r0
 8000fa2:	d8fa      	bhi.n	8000f9a <HAL_Delay+0x16>
  {
  }
}
 8000fa4:	bd38      	pop	{r3, r4, r5, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000000 	.word	0x20000000

08000fac <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8000fac:	4b01      	ldr	r3, [pc, #4]	; (8000fb4 <HAL_GetUIDw0+0x8>)
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	1fff7a10 	.word	0x1fff7a10

08000fb8 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8000fb8:	4b01      	ldr	r3, [pc, #4]	; (8000fc0 <HAL_GetUIDw1+0x8>)
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	1fff7a14 	.word	0x1fff7a14

08000fc4 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8000fc4:	4b01      	ldr	r3, [pc, #4]	; (8000fcc <HAL_GetUIDw2+0x8>)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	1fff7a18 	.word	0x1fff7a18

08000fd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fd0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	f000 809b 	beq.w	8001110 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fda:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000fdc:	b925      	cbnz	r5, 8000fe8 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fde:	f00b fda7 	bl	800cb30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe2:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fe4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fea:	06db      	lsls	r3, r3, #27
 8000fec:	f100 808e 	bmi.w	800110c <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ff2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ff6:	f023 0302 	bic.w	r3, r3, #2
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001000:	4b44      	ldr	r3, [pc, #272]	; (8001114 <HAL_ADC_Init+0x144>)
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001008:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	6861      	ldr	r1, [r4, #4]
 800100e:	430a      	orrs	r2, r1
 8001010:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001012:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001014:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800101c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001024:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001026:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001028:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800102a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800102e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	430a      	orrs	r2, r1
 8001034:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001036:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001038:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800103a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800103e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	430a      	orrs	r2, r1
 8001044:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001046:	4934      	ldr	r1, [pc, #208]	; (8001118 <HAL_ADC_Init+0x148>)
 8001048:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800104a:	428a      	cmp	r2, r1
 800104c:	d052      	beq.n	80010f4 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800104e:	6899      	ldr	r1, [r3, #8]
 8001050:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001054:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001056:	6899      	ldr	r1, [r3, #8]
 8001058:	430a      	orrs	r2, r1
 800105a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800105c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800105e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001060:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001064:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800106a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800106c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800106e:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001070:	f022 0202 	bic.w	r2, r2, #2
 8001074:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800107c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800107e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001082:	2a00      	cmp	r2, #0
 8001084:	d03e      	beq.n	8001104 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001086:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001088:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800108a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800108e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001096:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	3901      	subs	r1, #1
 800109c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010a0:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010a4:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ae:	3901      	subs	r1, #1
 80010b0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80010b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010b6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010b8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80010c8:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010ca:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010cc:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010d4:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010d6:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010d8:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80010dc:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010de:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80010e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010e2:	f023 0303 	bic.w	r3, r3, #3
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80010ec:	2300      	movs	r3, #0
 80010ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80010f2:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001102:	e7b2      	b.n	800106a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800110a:	e7c9      	b.n	80010a0 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800110c:	2001      	movs	r0, #1
 800110e:	e7ed      	b.n	80010ec <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001110:	2001      	movs	r0, #1
}
 8001112:	bd38      	pop	{r3, r4, r5, pc}
 8001114:	40012300 	.word	0x40012300
 8001118:	0f000001 	.word	0x0f000001

0800111c <HAL_ADC_Start>:
{
 800111c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800111e:	2300      	movs	r3, #0
 8001120:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001122:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001126:	2b01      	cmp	r3, #1
 8001128:	d061      	beq.n	80011ee <HAL_ADC_Start+0xd2>
 800112a:	2301      	movs	r3, #1
 800112c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001130:	6803      	ldr	r3, [r0, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	07d1      	lsls	r1, r2, #31
 8001136:	d505      	bpl.n	8001144 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	07d2      	lsls	r2, r2, #31
 800113c:	d414      	bmi.n	8001168 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 800113e:	2000      	movs	r0, #0
}
 8001140:	b002      	add	sp, #8
 8001142:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8001144:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001146:	492b      	ldr	r1, [pc, #172]	; (80011f4 <HAL_ADC_Start+0xd8>)
    __HAL_ADC_ENABLE(hadc);
 8001148:	f042 0201 	orr.w	r2, r2, #1
 800114c:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800114e:	4a2a      	ldr	r2, [pc, #168]	; (80011f8 <HAL_ADC_Start+0xdc>)
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	fbb2 f2f1 	udiv	r2, r2, r1
 8001156:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 800115a:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 800115c:	9a01      	ldr	r2, [sp, #4]
 800115e:	2a00      	cmp	r2, #0
 8001160:	d0ea      	beq.n	8001138 <HAL_ADC_Start+0x1c>
      counter--;
 8001162:	9a01      	ldr	r2, [sp, #4]
 8001164:	3a01      	subs	r2, #1
 8001166:	e7f8      	b.n	800115a <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8001168:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800116a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001176:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117c:	bf41      	itttt	mi
 800117e:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8001180:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001184:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001188:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800118c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001190:	bf1c      	itt	ne
 8001192:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8001194:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001198:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800119a:	2200      	movs	r2, #0
 800119c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011a4:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011a6:	4a15      	ldr	r2, [pc, #84]	; (80011fc <HAL_ADC_Start+0xe0>)
 80011a8:	6851      	ldr	r1, [r2, #4]
 80011aa:	f011 0f1f 	tst.w	r1, #31
 80011ae:	4914      	ldr	r1, [pc, #80]	; (8001200 <HAL_ADC_Start+0xe4>)
 80011b0:	d11a      	bne.n	80011e8 <HAL_ADC_Start+0xcc>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011b2:	428b      	cmp	r3, r1
 80011b4:	d006      	beq.n	80011c4 <HAL_ADC_Start+0xa8>
 80011b6:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80011ba:	428b      	cmp	r3, r1
 80011bc:	d10b      	bne.n	80011d6 <HAL_ADC_Start+0xba>
 80011be:	6852      	ldr	r2, [r2, #4]
 80011c0:	06d2      	lsls	r2, r2, #27
 80011c2:	d1bc      	bne.n	800113e <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011c4:	6898      	ldr	r0, [r3, #8]
 80011c6:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80011ca:	d1b8      	bne.n	800113e <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	e7b4      	b.n	8001140 <HAL_ADC_Start+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011d6:	490b      	ldr	r1, [pc, #44]	; (8001204 <HAL_ADC_Start+0xe8>)
 80011d8:	428b      	cmp	r3, r1
 80011da:	d1b0      	bne.n	800113e <HAL_ADC_Start+0x22>
 80011dc:	6852      	ldr	r2, [r2, #4]
 80011de:	f002 021f 	and.w	r2, r2, #31
 80011e2:	2a0f      	cmp	r2, #15
 80011e4:	d9ee      	bls.n	80011c4 <HAL_ADC_Start+0xa8>
 80011e6:	e7aa      	b.n	800113e <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011e8:	428b      	cmp	r3, r1
 80011ea:	d1a8      	bne.n	800113e <HAL_ADC_Start+0x22>
 80011ec:	e7ea      	b.n	80011c4 <HAL_ADC_Start+0xa8>
  __HAL_LOCK(hadc);
 80011ee:	2002      	movs	r0, #2
 80011f0:	e7a6      	b.n	8001140 <HAL_ADC_Start+0x24>
 80011f2:	bf00      	nop
 80011f4:	000f4240 	.word	0x000f4240
 80011f8:	200005b4 	.word	0x200005b4
 80011fc:	40012300 	.word	0x40012300
 8001200:	40012000 	.word	0x40012000
 8001204:	40012200 	.word	0x40012200

08001208 <HAL_ADC_ConfigChannel>:
{
 8001208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800120e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001212:	2b01      	cmp	r3, #1
 8001214:	f000 8083 	beq.w	800131e <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001218:	680d      	ldr	r5, [r1, #0]
 800121a:	6804      	ldr	r4, [r0, #0]
 800121c:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800121e:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001220:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001222:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8001226:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001228:	d92a      	bls.n	8001280 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800122a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800122e:	68e7      	ldr	r7, [r4, #12]
 8001230:	3b1e      	subs	r3, #30
 8001232:	f04f 0e07 	mov.w	lr, #7
 8001236:	fa0e fe03 	lsl.w	lr, lr, r3
 800123a:	ea27 070e 	bic.w	r7, r7, lr
 800123e:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001240:	68e7      	ldr	r7, [r4, #12]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	433b      	orrs	r3, r7
 8001248:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800124a:	684a      	ldr	r2, [r1, #4]
 800124c:	2a06      	cmp	r2, #6
 800124e:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8001252:	d825      	bhi.n	80012a0 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001254:	4413      	add	r3, r2
 8001256:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001258:	1f59      	subs	r1, r3, #5
 800125a:	231f      	movs	r3, #31
 800125c:	408b      	lsls	r3, r1
 800125e:	ea27 0303 	bic.w	r3, r7, r3
 8001262:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001264:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001266:	fa06 f101 	lsl.w	r1, r6, r1
 800126a:	4311      	orrs	r1, r2
 800126c:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800126e:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <HAL_ADC_ConfigChannel+0x11c>)
 8001270:	429c      	cmp	r4, r3
 8001272:	d034      	beq.n	80012de <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8001274:	2300      	movs	r3, #0
 8001276:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800127a:	4618      	mov	r0, r3
}
 800127c:	b003      	add	sp, #12
 800127e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001280:	6927      	ldr	r7, [r4, #16]
 8001282:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001286:	f04f 0e07 	mov.w	lr, #7
 800128a:	fa0e fe03 	lsl.w	lr, lr, r3
 800128e:	ea27 070e 	bic.w	r7, r7, lr
 8001292:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001294:	6927      	ldr	r7, [r4, #16]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	433b      	orrs	r3, r7
 800129c:	6123      	str	r3, [r4, #16]
 800129e:	e7d4      	b.n	800124a <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80012a0:	2a0c      	cmp	r2, #12
 80012a2:	d80e      	bhi.n	80012c2 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012a4:	4413      	add	r3, r2
 80012a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80012a8:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80012ac:	231f      	movs	r3, #31
 80012ae:	4093      	lsls	r3, r2
 80012b0:	ea21 0303 	bic.w	r3, r1, r3
 80012b4:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012b8:	fa06 f202 	lsl.w	r2, r6, r2
 80012bc:	431a      	orrs	r2, r3
 80012be:	6322      	str	r2, [r4, #48]	; 0x30
 80012c0:	e7d5      	b.n	800126e <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012c2:	4413      	add	r3, r2
 80012c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80012c6:	3b41      	subs	r3, #65	; 0x41
 80012c8:	221f      	movs	r2, #31
 80012ca:	409a      	lsls	r2, r3
 80012cc:	ea21 0202 	bic.w	r2, r1, r2
 80012d0:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012d4:	fa06 f103 	lsl.w	r1, r6, r3
 80012d8:	4311      	orrs	r1, r2
 80012da:	62e1      	str	r1, [r4, #44]	; 0x2c
 80012dc:	e7c7      	b.n	800126e <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012de:	2d12      	cmp	r5, #18
 80012e0:	d104      	bne.n	80012ec <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <HAL_ADC_ConfigChannel+0x120>)
 80012e4:	6853      	ldr	r3, [r2, #4]
 80012e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012ea:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012ec:	f1a5 0310 	sub.w	r3, r5, #16
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d8bf      	bhi.n	8001274 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012f4:	4a0c      	ldr	r2, [pc, #48]	; (8001328 <HAL_ADC_ConfigChannel+0x120>)
 80012f6:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012f8:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012fe:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001300:	d1b8      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_ADC_ConfigChannel+0x124>)
 8001304:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <HAL_ADC_ConfigChannel+0x128>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	fbb3 f2f2 	udiv	r2, r3, r2
 800130c:	230a      	movs	r3, #10
 800130e:	4353      	muls	r3, r2
        counter--;
 8001310:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001312:	9b01      	ldr	r3, [sp, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0ad      	beq.n	8001274 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8001318:	9b01      	ldr	r3, [sp, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	e7f8      	b.n	8001310 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 800131e:	2002      	movs	r0, #2
 8001320:	e7ac      	b.n	800127c <HAL_ADC_ConfigChannel+0x74>
 8001322:	bf00      	nop
 8001324:	40012000 	.word	0x40012000
 8001328:	40012300 	.word	0x40012300
 800132c:	200005b4 	.word	0x200005b4
 8001330:	000f4240 	.word	0x000f4240

08001334 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001336:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001338:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800133c:	041b      	lsls	r3, r3, #16
 800133e:	0c1b      	lsrs	r3, r3, #16
 8001340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001344:	0200      	lsls	r0, r0, #8
 8001346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800134e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001350:	60d3      	str	r3, [r2, #12]
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135a:	b530      	push	{r4, r5, lr}
 800135c:	68dc      	ldr	r4, [r3, #12]
 800135e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001362:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	2b04      	cmp	r3, #4
 800136a:	bf28      	it	cs
 800136c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 0501 	mov.w	r5, #1
 8001374:	fa05 f303 	lsl.w	r3, r5, r3
 8001378:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137c:	bf8c      	ite	hi
 800137e:	3c03      	subhi	r4, #3
 8001380:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001382:	4019      	ands	r1, r3
 8001384:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001386:	fa05 f404 	lsl.w	r4, r5, r4
 800138a:	3c01      	subs	r4, #1
 800138c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800138e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	ea42 0201 	orr.w	r2, r2, r1
 8001394:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	bfad      	iteet	ge
 800139a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	f000 000f 	andlt.w	r0, r0, #15
 80013a2:	4b06      	ldrlt	r3, [pc, #24]	; (80013bc <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	bfb5      	itete	lt
 80013aa:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80013b4:	bd30      	pop	{r4, r5, pc}
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00
 80013bc:	e000ed14 	.word	0xe000ed14

080013c0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80013c0:	2800      	cmp	r0, #0
 80013c2:	db08      	blt.n	80013d6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c4:	0942      	lsrs	r2, r0, #5
 80013c6:	2301      	movs	r3, #1
 80013c8:	f000 001f 	and.w	r0, r0, #31
 80013cc:	fa03 f000 	lsl.w	r0, r3, r0
 80013d0:	4b01      	ldr	r3, [pc, #4]	; (80013d8 <HAL_NVIC_EnableIRQ+0x18>)
 80013d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100

080013dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	3801      	subs	r0, #1
 80013de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013e2:	d20a      	bcs.n	80013fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	21f0      	movs	r1, #240	; 0xf0
 80013ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001408:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 800140a:	4604      	mov	r4, r0
 800140c:	b168      	cbz	r0, 800142a <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800140e:	7903      	ldrb	r3, [r0, #4]
 8001410:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001414:	b913      	cbnz	r3, 800141c <HAL_DAC_Init+0x14>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001416:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001418:	f00b fbbc 	bl	800cb94 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800141c:	2302      	movs	r3, #2
 800141e:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001420:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001422:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001424:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001426:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8001428:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800142a:	2001      	movs	r0, #1
}
 800142c:	bd10      	pop	{r4, pc}

0800142e <HAL_DAC_Start>:
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800142e:	7943      	ldrb	r3, [r0, #5]
 8001430:	2b01      	cmp	r3, #1
{
 8001432:	b510      	push	{r4, lr}
 8001434:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8001438:	d018      	beq.n	800146c <HAL_DAC_Start+0x3e>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800143a:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800143c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 800143e:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 8001440:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 8001442:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8001444:	408a      	lsls	r2, r1
 8001446:	4322      	orrs	r2, r4
 8001448:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 800144a:	b989      	cbnz	r1, 8001470 <HAL_DAC_Start+0x42>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800144c:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 800144e:	681a      	ldr	r2, [r3, #0]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001450:	074c      	lsls	r4, r1, #29
 8001452:	d507      	bpl.n	8001464 <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001454:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001458:	2a38      	cmp	r2, #56	; 0x38
 800145a:	d103      	bne.n	8001464 <HAL_DAC_Start+0x36>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	f042 0201 	orr.w	r2, r2, #1
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001462:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001464:	2301      	movs	r3, #1
 8001466:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001468:	2300      	movs	r3, #0
 800146a:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 800146c:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 800146e:	bd10      	pop	{r4, pc}
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8001470:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001472:	681a      	ldr	r2, [r3, #0]
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001474:	0349      	lsls	r1, r1, #13
 8001476:	d5f5      	bpl.n	8001464 <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001478:	f402 1260 	and.w	r2, r2, #3670016	; 0x380000
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 800147c:	f5b2 1f60 	cmp.w	r2, #3670016	; 0x380000
 8001480:	d1f0      	bne.n	8001464 <HAL_DAC_Start+0x36>
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	f042 0202 	orr.w	r2, r2, #2
 8001488:	e7eb      	b.n	8001462 <HAL_DAC_Start+0x34>

0800148a <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800148a:	7943      	ldrb	r3, [r0, #5]
 800148c:	2b01      	cmp	r3, #1
{
 800148e:	b530      	push	{r4, r5, lr}
 8001490:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8001494:	d017      	beq.n	80014c6 <HAL_DAC_ConfigChannel+0x3c>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001496:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001498:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 800149a:	6823      	ldr	r3, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800149c:	f640 75fe 	movw	r5, #4094	; 0xffe
 80014a0:	4095      	lsls	r5, r2
 80014a2:	ea23 0505 	bic.w	r5, r3, r5
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80014a6:	c90a      	ldmia	r1, {r1, r3}
 80014a8:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80014aa:	4093      	lsls	r3, r2
 80014ac:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80014ae:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	21c0      	movs	r1, #192	; 0xc0
 80014b4:	fa01 f202 	lsl.w	r2, r1, r2
 80014b8:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80014bc:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80014be:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80014c0:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80014c2:	2300      	movs	r3, #0
 80014c4:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 80014c6:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 80014c8:	bd30      	pop	{r4, r5, pc}

080014ca <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ca:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d003      	beq.n	80014da <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80014d6:	2001      	movs	r0, #1
 80014d8:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014da:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80014dc:	2305      	movs	r3, #5
 80014de:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80014e2:	6813      	ldr	r3, [r2, #0]
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80014ea:	2000      	movs	r0, #0
}
 80014ec:	4770      	bx	lr
	...

080014f0 <ETH_Delay.constprop.4>:
/**
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
 80014f0:	b082      	sub	sp, #8
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <ETH_Delay.constprop.4+0x20>)
 80014f4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80014fe:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 8001500:	bf00      	nop
  } 
  while (Delay --);
 8001502:	9b01      	ldr	r3, [sp, #4]
 8001504:	1e5a      	subs	r2, r3, #1
 8001506:	9201      	str	r2, [sp, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f9      	bne.n	8001500 <ETH_Delay.constprop.4+0x10>
}
 800150c:	b002      	add	sp, #8
 800150e:	4770      	bx	lr
 8001510:	200005b4 	.word	0x200005b4

08001514 <ETH_FlushTransmitFIFO>:
{
 8001514:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t tmpreg1 = 0U;
 8001516:	2300      	movs	r3, #0
 8001518:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800151a:	f241 0118 	movw	r1, #4120	; 0x1018
 800151e:	6803      	ldr	r3, [r0, #0]
 8001520:	585a      	ldr	r2, [r3, r1]
 8001522:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001526:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001528:	585b      	ldr	r3, [r3, r1]
 800152a:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800152c:	f7ff ffe0 	bl	80014f0 <ETH_Delay.constprop.4>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001530:	9a01      	ldr	r2, [sp, #4]
 8001532:	6803      	ldr	r3, [r0, #0]
 8001534:	505a      	str	r2, [r3, r1]
}
 8001536:	b003      	add	sp, #12
 8001538:	f85d fb04 	ldr.w	pc, [sp], #4

0800153c <ETH_MACDMAConfig>:
{
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001540:	b129      	cbz	r1, 800154e <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001542:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001546:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8001548:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800154c:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800154e:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8001550:	6822      	ldr	r2, [r4, #0]
                       macinit.LoopbackMode |
 8001552:	68e0      	ldr	r0, [r4, #12]
  tmpreg1 = (heth->Instance)->MACCR;
 8001554:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001556:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8001558:	68a3      	ldr	r3, [r4, #8]
 800155a:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800155e:	4830      	ldr	r0, [pc, #192]	; (8001620 <ETH_MACDMAConfig+0xe4>)
 8001560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001564:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001568:	bf0c      	ite	eq
 800156a:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 800156e:	2100      	movne	r1, #0
 8001570:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001572:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001574:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001576:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 8001578:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800157a:	f7ff fd03 	bl	8000f84 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800157e:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001580:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 8001582:	601d      	str	r5, [r3, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001584:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001586:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8001588:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800158a:	f7ff fcfb 	bl	8000f84 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001592:	2500      	movs	r5, #0
 8001594:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001596:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8001598:	699a      	ldr	r2, [r3, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800159a:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 800159e:	0412      	lsls	r2, r2, #16
 80015a0:	0c12      	lsrs	r2, r2, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80015a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015a6:	619a      	str	r2, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80015a8:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 80015aa:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ac:	f7ff fcea 	bl	8000f84 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80015b0:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015b2:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 80015b4:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80015b6:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80015b8:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ba:	f7ff fce3 	bl	8000f84 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80015be:	6822      	ldr	r2, [r4, #0]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015c0:	4b18      	ldr	r3, [pc, #96]	; (8001624 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 80015c2:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80015c4:	f241 0518 	movw	r5, #4120	; 0x1018
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015c8:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 80015ca:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015cc:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80015ce:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80015d2:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015d6:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80015d8:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015da:	f7ff fcd3 	bl	8000f84 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80015de:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015e0:	4a11      	ldr	r2, [pc, #68]	; (8001628 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 80015e2:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80015e8:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015ea:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 80015ec:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ee:	f7ff fcc9 	bl	8000f84 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80015f2:	6822      	ldr	r2, [r4, #0]
 80015f4:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80015f8:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80015fa:	69a3      	ldr	r3, [r4, #24]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d107      	bne.n	8001610 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001600:	f241 011c 	movw	r1, #4124	; 0x101c
 8001604:	5853      	ldr	r3, [r2, r1]
 8001606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800160e:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001610:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001612:	4a06      	ldr	r2, [pc, #24]	; (800162c <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001614:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001616:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001618:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <ETH_MACDMAConfig+0xf4>)
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	bd70      	pop	{r4, r5, r6, pc}
 8001620:	ff20810f 	.word	0xff20810f
 8001624:	f8de3f23 	.word	0xf8de3f23
 8001628:	02c12080 	.word	0x02c12080
 800162c:	40028040 	.word	0x40028040
 8001630:	40028044 	.word	0x40028044

08001634 <HAL_ETH_DMATxDescListInit>:
{
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8001636:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800163a:	2c01      	cmp	r4, #1
 800163c:	f04f 0402 	mov.w	r4, #2
 8001640:	d033      	beq.n	80016aa <HAL_ETH_DMATxDescListInit+0x76>
 8001642:	2501      	movs	r5, #1
 8001644:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8001648:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 800164c:	62c1      	str	r1, [r0, #44]	; 0x2c
 800164e:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < TxBuffCount; i++)
 8001652:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001654:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001658:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (TxBuffCount-1U))
 800165c:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < TxBuffCount; i++)
 8001660:	429d      	cmp	r5, r3
 8001662:	d10b      	bne.n	800167c <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001664:	6802      	ldr	r2, [r0, #0]
 8001666:	f241 0310 	movw	r3, #4112	; 0x1010
 800166a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800166c:	2301      	movs	r3, #1
 800166e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001672:	2300      	movs	r3, #0
 8001674:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8001678:	4618      	mov	r0, r3
 800167a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800167c:	fb0e 2605 	mla	r6, lr, r5, r2
 8001680:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001684:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001686:	f844 7c20 	str.w	r7, [r4, #-32]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800168a:	b92e      	cbnz	r6, 8001698 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800168c:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8001690:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8001694:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001698:	4565      	cmp	r5, ip
 800169a:	bf2c      	ite	cs
 800169c:	460e      	movcs	r6, r1
 800169e:	4626      	movcc	r6, r4
 80016a0:	f844 6c14 	str.w	r6, [r4, #-20]
  for(i=0U; i < TxBuffCount; i++)
 80016a4:	3501      	adds	r5, #1
 80016a6:	3420      	adds	r4, #32
 80016a8:	e7da      	b.n	8001660 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 80016aa:	4620      	mov	r0, r4
}
 80016ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016ae <HAL_ETH_DMARxDescListInit>:
{
 80016ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 80016b2:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80016b6:	2c01      	cmp	r4, #1
 80016b8:	f04f 0402 	mov.w	r4, #2
 80016bc:	d030      	beq.n	8001720 <HAL_ETH_DMARxDescListInit+0x72>
 80016be:	2501      	movs	r5, #1
 80016c0:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80016c4:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 80016c8:	6281      	str	r1, [r0, #40]	; 0x28
 80016ca:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < RxBuffCount; i++)
 80016ce:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80016d0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80016d4:	f244 57f4 	movw	r7, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80016d8:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1U))
 80016dc:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < RxBuffCount; i++)
 80016e0:	429d      	cmp	r5, r3
 80016e2:	d10c      	bne.n	80016fe <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80016e4:	6802      	ldr	r2, [r0, #0]
 80016e6:	f241 030c 	movw	r3, #4108	; 0x100c
 80016ea:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80016f2:	2300      	movs	r3, #0
 80016f4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80016f8:	4618      	mov	r0, r3
 80016fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80016fe:	fb0e 2805 	mla	r8, lr, r5, r2
 8001702:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001706:	4565      	cmp	r5, ip
 8001708:	bf2c      	ite	cs
 800170a:	4688      	movcs	r8, r1
 800170c:	46a0      	movcc	r8, r4
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800170e:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001712:	f844 7c1c 	str.w	r7, [r4, #-28]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001716:	f844 8c14 	str.w	r8, [r4, #-20]
  for(i=0U; i < RxBuffCount; i++)
 800171a:	3501      	adds	r5, #1
 800171c:	3420      	adds	r4, #32
 800171e:	e7df      	b.n	80016e0 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 8001720:	4620      	mov	r0, r4
}
 8001722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001728 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8001728:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800172c:	2b01      	cmp	r3, #1
{
 800172e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001730:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8001734:	d068      	beq.n	8001808 <HAL_ETH_TransmitFrame+0xe0>
 8001736:	2201      	movs	r2, #1
 8001738:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800173c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8001740:	b929      	cbnz	r1, 800174e <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8001742:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001746:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 800174a:	4610      	mov	r0, r2
 800174c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800174e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001750:	681c      	ldr	r4, [r3, #0]
 8001752:	2c00      	cmp	r4, #0
 8001754:	da06      	bge.n	8001764 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001756:	2312      	movs	r3, #18
 8001758:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800175c:	2300      	movs	r3, #0
 800175e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8001762:	e7f2      	b.n	800174a <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001764:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8001768:	42a1      	cmp	r1, r4
 800176a:	d92e      	bls.n	80017ca <HAL_ETH_TransmitFrame+0xa2>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800176c:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001770:	fb04 1412 	mls	r4, r4, r2, r1
 8001774:	b33c      	cbz	r4, 80017c6 <HAL_ETH_TransmitFrame+0x9e>
      bufcount++;
 8001776:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001778:	4c24      	ldr	r4, [pc, #144]	; (800180c <HAL_ETH_TransmitFrame+0xe4>)
 800177a:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 800177e:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001782:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8001786:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001788:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1U))
 800178c:	1e57      	subs	r7, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800178e:	681d      	ldr	r5, [r3, #0]
 8001790:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8001794:	601d      	str	r5, [r3, #0]
      if (i == 0U) 
 8001796:	b91c      	cbnz	r4, 80017a0 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001798:	681d      	ldr	r5, [r3, #0]
 800179a:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 800179e:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1U))
 80017a0:	42a7      	cmp	r7, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80017a2:	bf08      	it	eq
 80017a4:	681d      	ldreq	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80017a6:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80017a8:	bf04      	itt	eq
 80017aa:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 80017ae:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017b0:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80017b2:	bf08      	it	eq
 80017b4:	6059      	streq	r1, [r3, #4]
    for (i=0U; i< bufcount; i++)
 80017b6:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017b8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 80017bc:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017be:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017c0:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 80017c2:	d1e4      	bne.n	800178e <HAL_ETH_TransmitFrame+0x66>
 80017c4:	e00d      	b.n	80017e2 <HAL_ETH_TransmitFrame+0xba>
  if (bufcount == 1U)
 80017c6:	2a01      	cmp	r2, #1
 80017c8:	d1d6      	bne.n	8001778 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80017d0:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017d2:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80017d4:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80017dc:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017de:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80017e4:	f241 0214 	movw	r2, #4116	; 0x1014
 80017e8:	6803      	ldr	r3, [r0, #0]
 80017ea:	5899      	ldr	r1, [r3, r2]
 80017ec:	0749      	lsls	r1, r1, #29
 80017ee:	d505      	bpl.n	80017fc <HAL_ETH_TransmitFrame+0xd4>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80017f0:	2104      	movs	r1, #4
 80017f2:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 80017f4:	f241 0204 	movw	r2, #4100	; 0x1004
 80017f8:	2100      	movs	r1, #0
 80017fa:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 80017fc:	2301      	movs	r3, #1
 80017fe:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001802:	2300      	movs	r3, #0
 8001804:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8001808:	4618      	mov	r0, r3
}
 800180a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800180c:	fffffa0c 	.word	0xfffffa0c

08001810 <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 8001810:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001814:	2b01      	cmp	r3, #1
{
 8001816:	b530      	push	{r4, r5, lr}
 8001818:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 800181c:	d023      	beq.n	8001866 <HAL_ETH_GetReceivedFrame+0x56>
  heth->State = HAL_ETH_STATE_BUSY;
 800181e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001822:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001824:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8001826:	2401      	movs	r4, #1
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001828:	2a00      	cmp	r2, #0
  __HAL_LOCK(heth);
 800182a:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800182e:	db27      	blt.n	8001880 <HAL_ETH_GetReceivedFrame+0x70>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68d9      	ldr	r1, [r3, #12]
 8001834:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001838:	d017      	beq.n	800186a <HAL_ETH_GetReceivedFrame+0x5a>
      (heth->RxFrameInfos).SegCount++;
 800183a:	6b82      	ldr	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800183c:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount++;
 800183e:	4422      	add	r2, r4
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001840:	42a2      	cmp	r2, r4
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001842:	bf08      	it	eq
 8001844:	6303      	streq	r3, [r0, #48]	; 0x30
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001846:	681b      	ldr	r3, [r3, #0]
      (heth->RxFrameInfos).SegCount++;
 8001848:	6382      	str	r2, [r0, #56]	; 0x38
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800184a:	f3c3 430d 	ubfx	r3, r3, #16, #14
 800184e:	3b04      	subs	r3, #4
      heth->RxFrameInfos.length = framelength;
 8001850:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001852:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8001858:	2301      	movs	r3, #1
 800185a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800185e:	2300      	movs	r3, #0
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001860:	6281      	str	r1, [r0, #40]	; 0x28
      __HAL_UNLOCK(heth);
 8001862:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8001866:	4618      	mov	r0, r3
 8001868:	bd30      	pop	{r4, r5, pc}
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800186a:	681d      	ldr	r5, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800186c:	6281      	str	r1, [r0, #40]	; 0x28
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800186e:	05ad      	lsls	r5, r5, #22
      (heth->RxFrameInfos).SegCount++;
 8001870:	bf55      	itete	pl
 8001872:	6b83      	ldrpl	r3, [r0, #56]	; 0x38
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001874:	6303      	strmi	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).SegCount++;
 8001876:	3301      	addpl	r3, #1
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001878:	6342      	strmi	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 800187a:	bf4c      	ite	mi
 800187c:	6384      	strmi	r4, [r0, #56]	; 0x38
      (heth->RxFrameInfos).SegCount++;
 800187e:	6383      	strpl	r3, [r0, #56]	; 0x38
  heth->State = HAL_ETH_STATE_READY;
 8001880:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8001882:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8001884:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001888:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 800188c:	e7eb      	b.n	8001866 <HAL_ETH_GetReceivedFrame+0x56>

0800188e <HAL_ETH_ReadPHYRegister>:
{
 800188e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001890:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8001894:	2b82      	cmp	r3, #130	; 0x82
{
 8001896:	4605      	mov	r5, r0
 8001898:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800189a:	d030      	beq.n	80018fe <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg1 = heth->Instance->MACMIIAR;
 800189c:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800189e:	2382      	movs	r3, #130	; 0x82
 80018a0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 80018a4:	6913      	ldr	r3, [r2, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80018a6:	0189      	lsls	r1, r1, #6
 80018a8:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018ac:	f003 011c 	and.w	r1, r3, #28
 80018b0:	4321      	orrs	r1, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80018b2:	8a04      	ldrh	r4, [r0, #16]
 80018b4:	02e4      	lsls	r4, r4, #11
 80018b6:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80018b8:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80018ba:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 80018be:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 80018c0:	f7ff fb5a 	bl	8000f78 <HAL_GetTick>
 80018c4:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018c6:	f014 0001 	ands.w	r0, r4, #1
 80018ca:	d107      	bne.n	80018dc <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80018cc:	682b      	ldr	r3, [r5, #0]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 80018d4:	2301      	movs	r3, #1
 80018d6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80018da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80018dc:	f7ff fb4c 	bl	8000f78 <HAL_GetTick>
 80018e0:	1bc0      	subs	r0, r0, r7
 80018e2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80018e6:	d307      	bcc.n	80018f8 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 80018e8:	2301      	movs	r3, #1
 80018ea:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80018ee:	2300      	movs	r3, #0
 80018f0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80018f4:	2003      	movs	r0, #3
 80018f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 80018f8:	682b      	ldr	r3, [r5, #0]
 80018fa:	691c      	ldr	r4, [r3, #16]
 80018fc:	e7e3      	b.n	80018c6 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 80018fe:	2002      	movs	r0, #2
}
 8001900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001902 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001902:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8001906:	2b42      	cmp	r3, #66	; 0x42
{
 8001908:	b570      	push	{r4, r5, r6, lr}
 800190a:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800190c:	d02e      	beq.n	800196c <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800190e:	2342      	movs	r3, #66	; 0x42
 8001910:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8001914:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001916:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8001918:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800191a:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 800191e:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001922:	f000 001c 	and.w	r0, r0, #28
 8001926:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001928:	8a2c      	ldrh	r4, [r5, #16]
 800192a:	02e4      	lsls	r4, r4, #11
 800192c:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800192e:	4304      	orrs	r4, r0
 8001930:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001932:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8001934:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8001936:	f7ff fb1f 	bl	8000f78 <HAL_GetTick>
 800193a:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800193c:	f014 0001 	ands.w	r0, r4, #1
 8001940:	d103      	bne.n	800194a <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8001942:	2301      	movs	r3, #1
 8001944:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8001948:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800194a:	f7ff fb15 	bl	8000f78 <HAL_GetTick>
 800194e:	1b80      	subs	r0, r0, r6
 8001950:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001954:	d307      	bcc.n	8001966 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8001956:	2301      	movs	r3, #1
 8001958:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800195c:	2300      	movs	r3, #0
 800195e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8001962:	2003      	movs	r0, #3
 8001964:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8001966:	682b      	ldr	r3, [r5, #0]
 8001968:	691c      	ldr	r4, [r3, #16]
 800196a:	e7e7      	b.n	800193c <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 800196c:	2002      	movs	r0, #2
}
 800196e:	bd70      	pop	{r4, r5, r6, pc}

08001970 <HAL_ETH_Init>:
{
 8001970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8001976:	4604      	mov	r4, r0
 8001978:	2800      	cmp	r0, #0
 800197a:	f000 80de 	beq.w	8001b3a <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 800197e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8001982:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001986:	b91b      	cbnz	r3, 8001990 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8001988:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800198c:	f00a fa30 	bl	800bdf0 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001990:	2300      	movs	r3, #0
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	4b6a      	ldr	r3, [pc, #424]	; (8001b40 <HAL_ETH_Init+0x1d0>)
 8001996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001998:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800199c:	645a      	str	r2, [r3, #68]	; 0x44
 800199e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019a8:	4b66      	ldr	r3, [pc, #408]	; (8001b44 <HAL_ETH_Init+0x1d4>)
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80019b0:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	6a21      	ldr	r1, [r4, #32]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	f042 0201 	orr.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80019c8:	f7ff fad6 	bl	8000f78 <HAL_GetTick>
 80019cc:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	07d0      	lsls	r0, r2, #31
 80019d8:	d41d      	bmi.n	8001a16 <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80019da:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80019dc:	f001 f928 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80019e0:	4b59      	ldr	r3, [pc, #356]	; (8001b48 <HAL_ETH_Init+0x1d8>)
 80019e2:	4a5a      	ldr	r2, [pc, #360]	; (8001b4c <HAL_ETH_Init+0x1dc>)
 80019e4:	4403      	add	r3, r0
 80019e6:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80019e8:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80019ec:	d822      	bhi.n	8001a34 <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80019ee:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80019f2:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80019f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80019f8:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80019fa:	2100      	movs	r1, #0
 80019fc:	4620      	mov	r0, r4
 80019fe:	f7ff ff80 	bl	8001902 <HAL_ETH_WritePHYRegister>
 8001a02:	4605      	mov	r5, r0
 8001a04:	b368      	cbz	r0, 8001a62 <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 8001a06:	2101      	movs	r1, #1
 8001a08:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 8001a0a:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8001a0c:	f7ff fd96 	bl	800153c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8001a10:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001a14:	e00b      	b.n	8001a2e <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001a16:	f7ff faaf 	bl	8000f78 <HAL_GetTick>
 8001a1a:	1b40      	subs	r0, r0, r5
 8001a1c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001a20:	d9d5      	bls.n	80019ce <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001a22:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8001a24:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001a26:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001a2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8001a2e:	4628      	mov	r0, r5
 8001a30:	b003      	add	sp, #12
 8001a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001a34:	4b46      	ldr	r3, [pc, #280]	; (8001b50 <HAL_ETH_Init+0x1e0>)
 8001a36:	4a47      	ldr	r2, [pc, #284]	; (8001b54 <HAL_ETH_Init+0x1e4>)
 8001a38:	4403      	add	r3, r0
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d802      	bhi.n	8001a44 <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001a3e:	f045 050c 	orr.w	r5, r5, #12
 8001a42:	e7d6      	b.n	80019f2 <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001a44:	4b44      	ldr	r3, [pc, #272]	; (8001b58 <HAL_ETH_Init+0x1e8>)
 8001a46:	4a45      	ldr	r2, [pc, #276]	; (8001b5c <HAL_ETH_Init+0x1ec>)
 8001a48:	4403      	add	r3, r0
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d9d1      	bls.n	80019f2 <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001a4e:	4b44      	ldr	r3, [pc, #272]	; (8001b60 <HAL_ETH_Init+0x1f0>)
 8001a50:	4a44      	ldr	r2, [pc, #272]	; (8001b64 <HAL_ETH_Init+0x1f4>)
 8001a52:	4403      	add	r3, r0
 8001a54:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001a56:	bf94      	ite	ls
 8001a58:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001a5c:	f045 0510 	orrhi.w	r5, r5, #16
 8001a60:	e7c7      	b.n	80019f2 <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 8001a62:	20ff      	movs	r0, #255	; 0xff
 8001a64:	f7ff fa8e 	bl	8000f84 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001a68:	6863      	ldr	r3, [r4, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d053      	beq.n	8001b16 <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8001a6e:	f7ff fa83 	bl	8000f78 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001a72:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001a76:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001a78:	466a      	mov	r2, sp
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f7ff ff06 	bl	800188e <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001a82:	f7ff fa79 	bl	8000f78 <HAL_GetTick>
 8001a86:	1b80      	subs	r0, r0, r6
 8001a88:	42b8      	cmp	r0, r7
 8001a8a:	d90b      	bls.n	8001aa4 <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f7ff fd54 	bl	800153c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8001a94:	2301      	movs	r3, #1
 8001a96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8001aa0:	2503      	movs	r5, #3
 8001aa2:	e7c4      	b.n	8001a2e <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001aa4:	9b00      	ldr	r3, [sp, #0]
 8001aa6:	0759      	lsls	r1, r3, #29
 8001aa8:	d5e6      	bpl.n	8001a78 <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001aaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f7ff ff26 	bl	8001902 <HAL_ETH_WritePHYRegister>
 8001ab6:	2800      	cmp	r0, #0
 8001ab8:	d1a5      	bne.n	8001a06 <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 8001aba:	f7ff fa5d 	bl	8000f78 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001abe:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001ac2:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ac4:	466a      	mov	r2, sp
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f7ff fee0 	bl	800188e <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001ace:	f7ff fa53 	bl	8000f78 <HAL_GetTick>
 8001ad2:	1b80      	subs	r0, r0, r6
 8001ad4:	42b8      	cmp	r0, r7
 8001ad6:	d8d9      	bhi.n	8001a8c <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001ad8:	9b00      	ldr	r3, [sp, #0]
 8001ada:	069a      	lsls	r2, r3, #26
 8001adc:	d5f2      	bpl.n	8001ac4 <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001ade:	466a      	mov	r2, sp
 8001ae0:	211f      	movs	r1, #31
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f7ff fed3 	bl	800188e <HAL_ETH_ReadPHYRegister>
 8001ae8:	2800      	cmp	r0, #0
 8001aea:	d18c      	bne.n	8001a06 <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001aec:	9b00      	ldr	r3, [sp, #0]
 8001aee:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001af2:	bf18      	it	ne
 8001af4:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001af8:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001afa:	bf4c      	ite	mi
 8001afc:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8001afe:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001b02:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8001b04:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8001b06:	2100      	movs	r1, #0
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f7ff fd17 	bl	800153c <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8001b14:	e78b      	b.n	8001a2e <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001b16:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001b18:	68e2      	ldr	r2, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001b1a:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001b1c:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8001b20:	b292      	uxth	r2, r2
 8001b22:	4629      	mov	r1, r5
 8001b24:	4620      	mov	r0, r4
 8001b26:	f7ff feec 	bl	8001902 <HAL_ETH_WritePHYRegister>
 8001b2a:	2800      	cmp	r0, #0
 8001b2c:	f47f af6b 	bne.w	8001a06 <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8001b30:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001b34:	f7ff fa26 	bl	8000f84 <HAL_Delay>
 8001b38:	e7e5      	b.n	8001b06 <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 8001b3a:	2501      	movs	r5, #1
 8001b3c:	e777      	b.n	8001a2e <HAL_ETH_Init+0xbe>
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40013800 	.word	0x40013800
 8001b48:	feced300 	.word	0xfeced300
 8001b4c:	00e4e1bf 	.word	0x00e4e1bf
 8001b50:	fde9f140 	.word	0xfde9f140
 8001b54:	017d783f 	.word	0x017d783f
 8001b58:	fc6c7900 	.word	0xfc6c7900
 8001b5c:	026259ff 	.word	0x026259ff
 8001b60:	fa0a1f00 	.word	0xfa0a1f00
 8001b64:	02faf07f 	.word	0x02faf07f

08001b68 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8001b68:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001b6c:	2b01      	cmp	r3, #1
{  
 8001b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b70:	4605      	mov	r5, r0
 8001b72:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8001b76:	d031      	beq.n	8001bdc <HAL_ETH_Start+0x74>
  __IO uint32_t tmpreg1 = 0U;
 8001b78:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001b7a:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8001b7c:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8001b80:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001b82:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8001b84:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001b86:	f042 0208 	orr.w	r2, r2, #8
  __HAL_LOCK(heth);
 8001b8a:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001b8e:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001b94:	f7ff fcac 	bl	80014f0 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8001b98:	682b      	ldr	r3, [r5, #0]
 8001b9a:	9a01      	ldr	r2, [sp, #4]
 8001b9c:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8001b9e:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	f042 0204 	orr.w	r2, r2, #4
 8001ba6:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001bac:	f7ff fca0 	bl	80014f0 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8001bb0:	682b      	ldr	r3, [r5, #0]
 8001bb2:	9a00      	ldr	r2, [sp, #0]
 8001bb4:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	f7ff fcac 	bl	8001514 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001bbc:	682a      	ldr	r2, [r5, #0]
 8001bbe:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8001bc2:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001bc4:	58d1      	ldr	r1, [r2, r3]
 8001bc6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8001bca:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001bcc:	58d1      	ldr	r1, [r2, r3]
 8001bce:	f041 0102 	orr.w	r1, r1, #2
 8001bd2:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8001bd4:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001bd8:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8001bdc:	b002      	add	sp, #8
 8001bde:	bd70      	pop	{r4, r5, r6, pc}

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001be4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001d98 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bec:	4a68      	ldr	r2, [pc, #416]	; (8001d90 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bee:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001d9c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bf2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001bf6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfa:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001bfc:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c00:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001c04:	45b6      	cmp	lr, r6
 8001c06:	f040 80ae 	bne.w	8001d66 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c0a:	684c      	ldr	r4, [r1, #4]
 8001c0c:	f024 0710 	bic.w	r7, r4, #16
 8001c10:	2f02      	cmp	r7, #2
 8001c12:	d116      	bne.n	8001c42 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001c14:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001c18:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c1c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001c20:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c24:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001c28:	f04f 0c0f 	mov.w	ip, #15
 8001c2c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001c30:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c34:	690d      	ldr	r5, [r1, #16]
 8001c36:	fa05 f50b 	lsl.w	r5, r5, fp
 8001c3a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001c3e:	f8ca 5020 	str.w	r5, [sl, #32]
 8001c42:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c46:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001c48:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c4c:	fa05 f50a 	lsl.w	r5, r5, sl
 8001c50:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c52:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c56:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c5a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c5e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c60:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c64:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001c66:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c6a:	d811      	bhi.n	8001c90 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001c6c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c6e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c72:	68cf      	ldr	r7, [r1, #12]
 8001c74:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001c78:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001c7c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c7e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c80:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c84:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001c88:	409f      	lsls	r7, r3
 8001c8a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001c8e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001c90:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c92:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c94:	688f      	ldr	r7, [r1, #8]
 8001c96:	fa07 f70a 	lsl.w	r7, r7, sl
 8001c9a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001c9c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c9e:	00e5      	lsls	r5, r4, #3
 8001ca0:	d561      	bpl.n	8001d66 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca2:	f04f 0b00 	mov.w	fp, #0
 8001ca6:	f8cd b00c 	str.w	fp, [sp, #12]
 8001caa:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cae:	4d39      	ldr	r5, [pc, #228]	; (8001d94 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001cb4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001cb8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001cbc:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001cc0:	9703      	str	r7, [sp, #12]
 8001cc2:	9f03      	ldr	r7, [sp, #12]
 8001cc4:	f023 0703 	bic.w	r7, r3, #3
 8001cc8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001ccc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd0:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001cdc:	f04f 0e0f 	mov.w	lr, #15
 8001ce0:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ce4:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce6:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cea:	d043      	beq.n	8001d74 <HAL_GPIO_Init+0x194>
 8001cec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cf0:	42a8      	cmp	r0, r5
 8001cf2:	d041      	beq.n	8001d78 <HAL_GPIO_Init+0x198>
 8001cf4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cf8:	42a8      	cmp	r0, r5
 8001cfa:	d03f      	beq.n	8001d7c <HAL_GPIO_Init+0x19c>
 8001cfc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d00:	42a8      	cmp	r0, r5
 8001d02:	d03d      	beq.n	8001d80 <HAL_GPIO_Init+0x1a0>
 8001d04:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d08:	42a8      	cmp	r0, r5
 8001d0a:	d03b      	beq.n	8001d84 <HAL_GPIO_Init+0x1a4>
 8001d0c:	4548      	cmp	r0, r9
 8001d0e:	d03b      	beq.n	8001d88 <HAL_GPIO_Init+0x1a8>
 8001d10:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001d14:	42a8      	cmp	r0, r5
 8001d16:	d039      	beq.n	8001d8c <HAL_GPIO_Init+0x1ac>
 8001d18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d1c:	42a8      	cmp	r0, r5
 8001d1e:	bf14      	ite	ne
 8001d20:	2508      	movne	r5, #8
 8001d22:	2507      	moveq	r5, #7
 8001d24:	fa05 f50c 	lsl.w	r5, r5, ip
 8001d28:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d2c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001d2e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d32:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001d36:	bf0c      	ite	eq
 8001d38:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001d3a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001d3c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001d3e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d40:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001d44:	bf0c      	ite	eq
 8001d46:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001d48:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001d4a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d4e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001d52:	bf0c      	ite	eq
 8001d54:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001d56:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001d58:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001d5a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d5c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001d5e:	bf54      	ite	pl
 8001d60:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001d62:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001d64:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d66:	3301      	adds	r3, #1
 8001d68:	2b10      	cmp	r3, #16
 8001d6a:	f47f af44 	bne.w	8001bf6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001d6e:	b005      	add	sp, #20
 8001d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d74:	465d      	mov	r5, fp
 8001d76:	e7d5      	b.n	8001d24 <HAL_GPIO_Init+0x144>
 8001d78:	2501      	movs	r5, #1
 8001d7a:	e7d3      	b.n	8001d24 <HAL_GPIO_Init+0x144>
 8001d7c:	2502      	movs	r5, #2
 8001d7e:	e7d1      	b.n	8001d24 <HAL_GPIO_Init+0x144>
 8001d80:	2503      	movs	r5, #3
 8001d82:	e7cf      	b.n	8001d24 <HAL_GPIO_Init+0x144>
 8001d84:	2504      	movs	r5, #4
 8001d86:	e7cd      	b.n	8001d24 <HAL_GPIO_Init+0x144>
 8001d88:	2505      	movs	r5, #5
 8001d8a:	e7cb      	b.n	8001d24 <HAL_GPIO_Init+0x144>
 8001d8c:	2506      	movs	r5, #6
 8001d8e:	e7c9      	b.n	8001d24 <HAL_GPIO_Init+0x144>
 8001d90:	40013c00 	.word	0x40013c00
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40021400 	.word	0x40021400

08001da0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da0:	b10a      	cbz	r2, 8001da6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001da2:	6181      	str	r1, [r0, #24]
 8001da4:	4770      	bx	lr
 8001da6:	0409      	lsls	r1, r1, #16
 8001da8:	e7fb      	b.n	8001da2 <HAL_GPIO_WritePin+0x2>

08001daa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001daa:	6943      	ldr	r3, [r0, #20]
 8001dac:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001db0:	bf08      	it	eq
 8001db2:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db4:	6181      	str	r1, [r0, #24]
 8001db6:	4770      	bx	lr

08001db8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001dbc:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001dbe:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 8001dc2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8001dc6:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8001dca:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8001dce:	2801      	cmp	r0, #1
 8001dd0:	d028      	beq.n	8001e24 <HAL_HCD_HC_Init+0x6c>
  hhcd->hc[ch_num].do_ping = 0U;
 8001dd2:	2028      	movs	r0, #40	; 0x28
 8001dd4:	fb00 4001 	mla	r0, r0, r1, r4
  __HAL_LOCK(hhcd);
 8001dd8:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8001dda:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ddc:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 8001de0:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001de4:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001de8:	bf08      	it	eq
 8001dea:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 8001dec:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001df0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8001df4:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8001df8:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001dfc:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001e00:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8001e04:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8001e08:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 8001e0c:	f8cd c008 	str.w	ip, [sp, #8]
 8001e10:	e88d 4080 	stmia.w	sp, {r7, lr}
 8001e14:	6820      	ldr	r0, [r4, #0]
 8001e16:	f001 ff99 	bl	8003d4c <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001e1a:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8001e1e:	b004      	add	sp, #16
 8001e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8001e24:	2002      	movs	r0, #2
 8001e26:	e7fa      	b.n	8001e1e <HAL_HCD_HC_Init+0x66>

08001e28 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8001e28:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001e2c:	2b01      	cmp	r3, #1
{
 8001e2e:	b510      	push	{r4, lr}
 8001e30:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001e32:	d009      	beq.n	8001e48 <HAL_HCD_HC_Halt+0x20>
 8001e34:	2301      	movs	r3, #1
 8001e36:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e3a:	6800      	ldr	r0, [r0, #0]
 8001e3c:	f002 f810 	bl	8003e60 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e40:	2000      	movs	r0, #0
 8001e42:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 8001e46:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001e48:	2002      	movs	r0, #2
}
 8001e4a:	bd10      	pop	{r4, pc}

08001e4c <HAL_HCD_Init>:
{
 8001e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8001e50:	4607      	mov	r7, r0
{
 8001e52:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d041      	beq.n	8001edc <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e58:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 8001e5c:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e62:	b91b      	cbnz	r3, 8001e6c <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 8001e64:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8001e68:	f00b f92a 	bl	800d0c0 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 8001e74:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e76:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8001e7a:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8001e7e:	bf08      	it	eq
 8001e80:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8001e82:	f001 fe1f 	bl	8003ac4 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e88:	466d      	mov	r5, sp
 8001e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e94:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e98:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e9c:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e9e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001ea2:	6838      	ldr	r0, [r7, #0]
 8001ea4:	f001 fdc8 	bl	8003a38 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ea8:	f856 0b10 	ldr.w	r0, [r6], #16
 8001eac:	2101      	movs	r1, #1
 8001eae:	f001 fe0f 	bl	8003ad0 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001eb2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001eb4:	466d      	mov	r5, sp
 8001eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ec4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001ec8:	6838      	ldr	r0, [r7, #0]
 8001eca:	f001 febf 	bl	8003c4c <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  return HAL_OK;
 8001ed4:	2000      	movs	r0, #0
}
 8001ed6:	b00a      	add	sp, #40	; 0x28
 8001ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001edc:	2001      	movs	r0, #1
 8001ede:	e7fa      	b.n	8001ed6 <HAL_HCD_Init+0x8a>

08001ee0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001ee2:	2428      	movs	r4, #40	; 0x28
 8001ee4:	fb04 0401 	mla	r4, r4, r1, r0
{
 8001ee8:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8001eec:	9e06      	ldr	r6, [sp, #24]
 8001eee:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ef2:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ef6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8001efa:	b96f      	cbnz	r7, 8001f18 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001efc:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001efe:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8001f04:	d02b      	beq.n	8001f5e <HAL_HCD_HC_SubmitRequest+0x7e>
 8001f06:	42bb      	cmp	r3, r7
 8001f08:	d029      	beq.n	8001f5e <HAL_HCD_HC_SubmitRequest+0x7e>
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d131      	bne.n	8001f72 <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f0e:	2328      	movs	r3, #40	; 0x28
 8001f10:	fb03 0301 	mla	r3, r3, r1, r0
 8001f14:	2200      	movs	r2, #0
 8001f16:	e02a      	b.n	8001f6e <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f18:	f04f 0e02 	mov.w	lr, #2
 8001f1c:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d826      	bhi.n	8001f72 <HAL_HCD_HC_SubmitRequest+0x92>
 8001f24:	a401      	add	r4, pc, #4	; (adr r4, 8001f2c <HAL_HCD_HC_SubmitRequest+0x4c>)
 8001f26:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8001f2a:	bf00      	nop
 8001f2c:	08001f3d 	.word	0x08001f3d
 8001f30:	08001f0f 	.word	0x08001f0f
 8001f34:	08001f5f 	.word	0x08001f5f
 8001f38:	08001f5f 	.word	0x08001f5f
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001f3c:	2f01      	cmp	r7, #1
 8001f3e:	d118      	bne.n	8001f72 <HAL_HCD_HC_SubmitRequest+0x92>
 8001f40:	b9ba      	cbnz	r2, 8001f72 <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 8001f42:	b925      	cbnz	r5, 8001f4e <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 8001f44:	2328      	movs	r3, #40	; 0x28
 8001f46:	fb03 0301 	mla	r3, r3, r1, r0
 8001f4a:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f4e:	2328      	movs	r3, #40	; 0x28
 8001f50:	fb03 0301 	mla	r3, r3, r1, r0
 8001f54:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f58:	b14a      	cbz	r2, 8001f6e <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	e007      	b.n	8001f6e <HAL_HCD_HC_SubmitRequest+0x8e>
 8001f5e:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f60:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8001f64:	b9d2      	cbnz	r2, 8001f9c <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f66:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 8001f6a:	2c00      	cmp	r4, #0
 8001f6c:	d1f5      	bne.n	8001f5a <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f72:	2428      	movs	r4, #40	; 0x28
 8001f74:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f78:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f7a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f7e:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f80:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8001f82:	649d      	str	r5, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8001f88:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8001f8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f8e:	3138      	adds	r1, #56	; 0x38
 8001f90:	7c02      	ldrb	r2, [r0, #16]
 8001f92:	6800      	ldr	r0, [r0, #0]
}
 8001f94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f98:	f001 bfc6 	b.w	8003f28 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f9c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001fa0:	e7da      	b.n	8001f58 <HAL_HCD_HC_SubmitRequest+0x78>
 8001fa2:	bf00      	nop

08001fa4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fa8:	6806      	ldr	r6, [r0, #0]
{
 8001faa:	b087      	sub	sp, #28
 8001fac:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001fae:	4630      	mov	r0, r6
 8001fb0:	f001 fdee 	bl	8003b90 <USB_GetMode>
 8001fb4:	2801      	cmp	r0, #1
 8001fb6:	f040 80b4 	bne.w	8002122 <HAL_HCD_IRQHandler+0x17e>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001fba:	6820      	ldr	r0, [r4, #0]
 8001fbc:	f001 fde4 	bl	8003b88 <USB_ReadInterrupts>
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	f000 80ae 	beq.w	8002122 <HAL_HCD_IRQHandler+0x17e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fc6:	6820      	ldr	r0, [r4, #0]
 8001fc8:	f001 fdde 	bl	8003b88 <USB_ReadInterrupts>
 8001fcc:	0287      	lsls	r7, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fce:	bf48      	it	mi
 8001fd0:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fd2:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fd4:	bf44      	itt	mi
 8001fd6:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8001fda:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fdc:	f001 fdd4 	bl	8003b88 <USB_ReadInterrupts>
 8001fe0:	02c5      	lsls	r5, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fe2:	bf48      	it	mi
 8001fe4:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001fe6:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fe8:	bf44      	itt	mi
 8001fea:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8001fee:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ff0:	f001 fdca 	bl	8003b88 <USB_ReadInterrupts>
 8001ff4:	0140      	lsls	r0, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ff6:	bf48      	it	mi
 8001ff8:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ffa:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ffc:	bf44      	itt	mi
 8001ffe:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8002002:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002004:	f001 fdc0 	bl	8003b88 <USB_ReadInterrupts>
 8002008:	0781      	lsls	r1, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800200a:	bf48      	it	mi
 800200c:	6823      	ldrmi	r3, [r4, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800200e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002010:	bf44      	itt	mi
 8002012:	2202      	movmi	r2, #2
 8002014:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002016:	f001 fdb7 	bl	8003b88 <USB_ReadInterrupts>
 800201a:	0082      	lsls	r2, r0, #2
 800201c:	d510      	bpl.n	8002040 <HAL_HCD_IRQHandler+0x9c>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800201e:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8002022:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002026:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800202a:	4620      	mov	r0, r4
 800202c:	f00b f898 	bl	800d160 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002030:	2101      	movs	r1, #1
 8002032:	6820      	ldr	r0, [r4, #0]
 8002034:	f001 fdb0 	bl	8003b98 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800203e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002040:	6820      	ldr	r0, [r4, #0]
 8002042:	f001 fda1 	bl	8003b88 <USB_ReadInterrupts>
 8002046:	01c3      	lsls	r3, r0, #7
 8002048:	d542      	bpl.n	80020d0 <HAL_HCD_IRQHandler+0x12c>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800204a:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800204c:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002050:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8002052:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002056:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002058:	9b05      	ldr	r3, [sp, #20]
 800205a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800205e:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002060:	9b04      	ldr	r3, [sp, #16]
 8002062:	079f      	lsls	r7, r3, #30
 8002064:	d50d      	bpl.n	8002082 <HAL_HCD_IRQHandler+0xde>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002066:	9b04      	ldr	r3, [sp, #16]
 8002068:	07d8      	lsls	r0, r3, #31
 800206a:	d506      	bpl.n	800207a <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800206c:	69ab      	ldr	r3, [r5, #24]
 800206e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002072:	61ab      	str	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002074:	4620      	mov	r0, r4
 8002076:	f00b f86f 	bl	800d158 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800207a:	9b05      	ldr	r3, [sp, #20]
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002082:	9b04      	ldr	r3, [sp, #16]
 8002084:	0719      	lsls	r1, r3, #28
 8002086:	d519      	bpl.n	80020bc <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002088:	9b05      	ldr	r3, [sp, #20]
 800208a:	f043 0308 	orr.w	r3, r3, #8
 800208e:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002090:	9b04      	ldr	r3, [sp, #16]
 8002092:	075a      	lsls	r2, r3, #29
 8002094:	d550      	bpl.n	8002138 <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002096:	69a1      	ldr	r1, [r4, #24]
 8002098:	2902      	cmp	r1, #2
 800209a:	d145      	bne.n	8002128 <HAL_HCD_IRQHandler+0x184>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800209c:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800209e:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80020a0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80020a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020a8:	bf18      	it	ne
 80020aa:	2101      	movne	r1, #1
 80020ac:	f001 fd74 	bl	8003b98 <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80020b0:	4620      	mov	r0, r4
 80020b2:	f00b f85a 	bl	800d16a <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80020b6:	4620      	mov	r0, r4
 80020b8:	f00b f84e 	bl	800d158 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80020bc:	9b04      	ldr	r3, [sp, #16]
 80020be:	069b      	lsls	r3, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80020c0:	bf42      	ittt	mi
 80020c2:	9b05      	ldrmi	r3, [sp, #20]
 80020c4:	f043 0320 	orrmi.w	r3, r3, #32
 80020c8:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80020ca:	9b05      	ldr	r3, [sp, #20]
 80020cc:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80020d0:	6820      	ldr	r0, [r4, #0]
 80020d2:	f001 fd59 	bl	8003b88 <USB_ReadInterrupts>
 80020d6:	0707      	lsls	r7, r0, #28
 80020d8:	d505      	bpl.n	80020e6 <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 80020da:	4620      	mov	r0, r4
 80020dc:	f00b f838 	bl	800d150 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	2208      	movs	r2, #8
 80020e4:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80020e6:	6820      	ldr	r0, [r4, #0]
 80020e8:	f001 fd4e 	bl	8003b88 <USB_ReadInterrupts>
 80020ec:	0185      	lsls	r5, r0, #6
 80020ee:	d512      	bpl.n	8002116 <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80020f0:	6820      	ldr	r0, [r4, #0]
 80020f2:	f001 feb0 	bl	8003e56 <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020f6:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80020fa:	9001      	str	r0, [sp, #4]
 80020fc:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002100:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002102:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002106:	46d3      	mov	fp, sl
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002108:	68a3      	ldr	r3, [r4, #8]
 800210a:	459a      	cmp	sl, r3
 800210c:	d323      	bcc.n	8002156 <HAL_HCD_IRQHandler+0x1b2>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002114:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002116:	6820      	ldr	r0, [r4, #0]
 8002118:	f001 fd36 	bl	8003b88 <USB_ReadInterrupts>
 800211c:	06c3      	lsls	r3, r0, #27
 800211e:	f100 8220 	bmi.w	8002562 <HAL_HCD_IRQHandler+0x5be>
}
 8002122:	b007      	add	sp, #28
 8002124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002128:	68e3      	ldr	r3, [r4, #12]
 800212a:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 800212c:	bf04      	itt	eq
 800212e:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8002132:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8002136:	e7bb      	b.n	80020b0 <HAL_HCD_IRQHandler+0x10c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002138:	4620      	mov	r0, r4
 800213a:	f00b f81a 	bl	800d172 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800213e:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002142:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002144:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002148:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800214c:	6993      	ldr	r3, [r2, #24]
 800214e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002152:	6193      	str	r3, [r2, #24]
 8002154:	e7b2      	b.n	80020bc <HAL_HCD_IRQHandler+0x118>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002156:	9a01      	ldr	r2, [sp, #4]
 8002158:	f00a 030f 	and.w	r3, sl, #15
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
 8002160:	07d8      	lsls	r0, r3, #31
 8002162:	f140 808a 	bpl.w	800227a <HAL_HCD_IRQHandler+0x2d6>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002166:	f8d8 3000 	ldr.w	r3, [r8]
 800216a:	6820      	ldr	r0, [r4, #0]
 800216c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002170:	fa5f f58a 	uxtb.w	r5, sl
 8002174:	f000 8104 	beq.w	8002380 <HAL_HCD_IRQHandler+0x3dc>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002178:	016a      	lsls	r2, r5, #5
 800217a:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 800217e:	18d6      	adds	r6, r2, r3
 8002180:	68b1      	ldr	r1, [r6, #8]
 8002182:	0749      	lsls	r1, r1, #29
 8002184:	d513      	bpl.n	80021ae <HAL_HCD_IRQHandler+0x20a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002186:	2104      	movs	r1, #4
 8002188:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800218a:	68f1      	ldr	r1, [r6, #12]
 800218c:	f041 0102 	orr.w	r1, r1, #2
 8002190:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002192:	68b1      	ldr	r1, [r6, #8]
 8002194:	0589      	lsls	r1, r1, #22
 8002196:	d542      	bpl.n	800221e <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002198:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800219a:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a2:	4629      	mov	r1, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a4:	f001 fe5c 	bl	8003e60 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ac:	e0c7      	b.n	800233e <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021ae:	68b1      	ldr	r1, [r6, #8]
 80021b0:	0689      	lsls	r1, r1, #26
 80021b2:	d502      	bpl.n	80021ba <HAL_HCD_IRQHandler+0x216>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021b4:	2120      	movs	r1, #32
 80021b6:	60b1      	str	r1, [r6, #8]
 80021b8:	e7eb      	b.n	8002192 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021ba:	68b1      	ldr	r1, [r6, #8]
 80021bc:	0709      	lsls	r1, r1, #28
 80021be:	d515      	bpl.n	80021ec <HAL_HCD_IRQHandler+0x248>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021c0:	68f1      	ldr	r1, [r6, #12]
 80021c2:	9303      	str	r3, [sp, #12]
 80021c4:	f041 0102 	orr.w	r1, r1, #2
 80021c8:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80021ca:	fb07 4105 	mla	r1, r7, r5, r4
 80021ce:	f04f 0e05 	mov.w	lr, #5
 80021d2:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021d6:	2110      	movs	r1, #16
 80021d8:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021da:	2108      	movs	r1, #8
 80021dc:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021de:	4629      	mov	r1, r5
 80021e0:	9202      	str	r2, [sp, #8]
 80021e2:	f001 fe3d 	bl	8003e60 <USB_HC_Halt>
 80021e6:	9a02      	ldr	r2, [sp, #8]
 80021e8:	9b03      	ldr	r3, [sp, #12]
 80021ea:	e7d2      	b.n	8002192 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021ec:	68b1      	ldr	r1, [r6, #8]
 80021ee:	0549      	lsls	r1, r1, #21
 80021f0:	d5cf      	bpl.n	8002192 <HAL_HCD_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021f2:	68f1      	ldr	r1, [r6, #12]
 80021f4:	9303      	str	r3, [sp, #12]
 80021f6:	f041 0102 	orr.w	r1, r1, #2
 80021fa:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021fc:	4629      	mov	r1, r5
 80021fe:	9202      	str	r2, [sp, #8]
 8002200:	f001 fe2e 	bl	8003e60 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002204:	2110      	movs	r1, #16
 8002206:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002208:	fb07 4105 	mla	r1, r7, r5, r4
 800220c:	2008      	movs	r0, #8
 800220e:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002212:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002216:	60b1      	str	r1, [r6, #8]
 8002218:	9b03      	ldr	r3, [sp, #12]
 800221a:	9a02      	ldr	r2, [sp, #8]
 800221c:	e7b9      	b.n	8002192 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800221e:	68b1      	ldr	r1, [r6, #8]
 8002220:	07c8      	lsls	r0, r1, #31
 8002222:	d53d      	bpl.n	80022a0 <HAL_HCD_IRQHandler+0x2fc>
    if (hhcd->Init.dma_enable != 0U)
 8002224:	6921      	ldr	r1, [r4, #16]
 8002226:	b149      	cbz	r1, 800223c <HAL_HCD_IRQHandler+0x298>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002228:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800222c:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800222e:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002232:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002236:	1a09      	subs	r1, r1, r0
 8002238:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 800223c:	fb07 4e05 	mla	lr, r7, r5, r4
 8002240:	2001      	movs	r0, #1
 8002242:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002246:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800224a:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800224c:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 8002250:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8002254:	d116      	bne.n	8002284 <HAL_HCD_IRQHandler+0x2e0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002256:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002258:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002260:	4629      	mov	r1, r5
 8002262:	f001 fdfd 	bl	8003e60 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002266:	2310      	movs	r3, #16
 8002268:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800226a:	fb07 4505 	mla	r5, r7, r5, r4
 800226e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8002272:	f083 0301 	eor.w	r3, r3, #1
 8002276:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800227a:	f10a 0a01 	add.w	sl, sl, #1
 800227e:	f108 0820 	add.w	r8, r8, #32
 8002282:	e741      	b.n	8002108 <HAL_HCD_IRQHandler+0x164>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002284:	2903      	cmp	r1, #3
 8002286:	d1f0      	bne.n	800226a <HAL_HCD_IRQHandler+0x2c6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002288:	58d1      	ldr	r1, [r2, r3]
 800228a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800228e:	50d1      	str	r1, [r2, r3]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002290:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002294:	4602      	mov	r2, r0
 8002296:	4629      	mov	r1, r5
 8002298:	4620      	mov	r0, r4
 800229a:	f00a ff65 	bl	800d168 <HAL_HCD_HC_NotifyURBChange_Callback>
 800229e:	e7e4      	b.n	800226a <HAL_HCD_IRQHandler+0x2c6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80022a0:	68b1      	ldr	r1, [r6, #8]
 80022a2:	0789      	lsls	r1, r1, #30
 80022a4:	d536      	bpl.n	8002314 <HAL_HCD_IRQHandler+0x370>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80022a6:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022a8:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80022ac:	f021 0102 	bic.w	r1, r1, #2
 80022b0:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022b2:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 80022b6:	2901      	cmp	r1, #1
 80022b8:	d10c      	bne.n	80022d4 <HAL_HCD_IRQHandler+0x330>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80022ba:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022be:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022c2:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022c6:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80022ca:	4629      	mov	r1, r5
 80022cc:	4620      	mov	r0, r4
 80022ce:	f00a ff4b 	bl	800d168 <HAL_HCD_HC_NotifyURBChange_Callback>
 80022d2:	e7d2      	b.n	800227a <HAL_HCD_IRQHandler+0x2d6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022d4:	2905      	cmp	r1, #5
 80022d6:	d0f0      	beq.n	80022ba <HAL_HCD_IRQHandler+0x316>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022d8:	2906      	cmp	r1, #6
 80022da:	d001      	beq.n	80022e0 <HAL_HCD_IRQHandler+0x33c>
 80022dc:	2908      	cmp	r1, #8
 80022de:	d114      	bne.n	800230a <HAL_HCD_IRQHandler+0x366>
      hhcd->hc[ch_num].ErrCnt++;
 80022e0:	fb07 4105 	mla	r1, r7, r5, r4
 80022e4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80022e6:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80022e8:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 80022ea:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022ec:	bf83      	ittte	hi
 80022ee:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022f0:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022f4:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022f8:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022fc:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022fe:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002302:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002306:	50d1      	str	r1, [r2, r3]
 8002308:	e7d9      	b.n	80022be <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800230a:	2903      	cmp	r1, #3
 800230c:	d1d7      	bne.n	80022be <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800230e:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8002312:	e7f3      	b.n	80022fc <HAL_HCD_IRQHandler+0x358>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002314:	68b1      	ldr	r1, [r6, #8]
 8002316:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 800231a:	d012      	beq.n	8002342 <HAL_HCD_IRQHandler+0x39e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800231c:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800231e:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002326:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800232a:	4629      	mov	r1, r5
    hhcd->hc[ch_num].ErrCnt++;
 800232c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800232e:	3201      	adds	r2, #1
 8002330:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002332:	2206      	movs	r2, #6
 8002334:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002338:	f001 fd92 	bl	8003e60 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	60b3      	str	r3, [r6, #8]
 8002340:	e79b      	b.n	800227a <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002342:	68b3      	ldr	r3, [r6, #8]
 8002344:	06da      	lsls	r2, r3, #27
 8002346:	d598      	bpl.n	800227a <HAL_HCD_IRQHandler+0x2d6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002348:	fb07 4205 	mla	r2, r7, r5, r4
 800234c:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8002350:	2b03      	cmp	r3, #3
 8002352:	d10a      	bne.n	800236a <HAL_HCD_IRQHandler+0x3c6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002354:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002356:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002358:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800235a:	f043 0302 	orr.w	r3, r3, #2
 800235e:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002360:	4629      	mov	r1, r5
 8002362:	f001 fd7d 	bl	8003e60 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002366:	2310      	movs	r3, #16
 8002368:	e7e9      	b.n	800233e <HAL_HCD_IRQHandler+0x39a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800236a:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 800236e:	d1fa      	bne.n	8002366 <HAL_HCD_IRQHandler+0x3c2>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002370:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8002372:	6923      	ldr	r3, [r4, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f6      	bne.n	8002366 <HAL_HCD_IRQHandler+0x3c2>
        hhcd->hc[ch_num].state = HC_NAK;
 8002378:	2303      	movs	r3, #3
 800237a:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 800237e:	e7ea      	b.n	8002356 <HAL_HCD_IRQHandler+0x3b2>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002380:	0169      	lsls	r1, r5, #5
 8002382:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8002386:	188e      	adds	r6, r1, r2
 8002388:	68b3      	ldr	r3, [r6, #8]
 800238a:	f013 0e04 	ands.w	lr, r3, #4
 800238e:	d006      	beq.n	800239e <HAL_HCD_IRQHandler+0x3fa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002390:	2304      	movs	r3, #4
 8002392:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002394:	68f3      	ldr	r3, [r6, #12]
 8002396:	f043 0302 	orr.w	r3, r3, #2
 800239a:	60f3      	str	r3, [r6, #12]
 800239c:	e76d      	b.n	800227a <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800239e:	68b3      	ldr	r3, [r6, #8]
 80023a0:	f013 0320 	ands.w	r3, r3, #32
 80023a4:	d014      	beq.n	80023d0 <HAL_HCD_IRQHandler+0x42c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023a6:	2320      	movs	r3, #32
 80023a8:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80023aa:	fb07 4305 	mla	r3, r7, r5, r4
 80023ae:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80023b2:	2a01      	cmp	r2, #1
 80023b4:	f47f af61 	bne.w	800227a <HAL_HCD_IRQHandler+0x2d6>
      hhcd->hc[ch_num].do_ping = 0U;
 80023b8:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023bc:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023c0:	68f3      	ldr	r3, [r6, #12]
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c8:	4629      	mov	r1, r5
 80023ca:	f001 fd49 	bl	8003e60 <USB_HC_Halt>
 80023ce:	e754      	b.n	800227a <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023d0:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80023d4:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80023d8:	d011      	beq.n	80023fe <HAL_HCD_IRQHandler+0x45a>
    hhcd->hc[ch_num].state = HC_NYET;
 80023da:	fb07 4205 	mla	r2, r7, r5, r4
 80023de:	2104      	movs	r1, #4
 80023e0:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 80023e4:	2101      	movs	r1, #1
 80023e6:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023ea:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ec:	68f3      	ldr	r3, [r6, #12]
 80023ee:	f043 0302 	orr.w	r3, r3, #2
 80023f2:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023f4:	4629      	mov	r1, r5
 80023f6:	f001 fd33 	bl	8003e60 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80023fa:	2340      	movs	r3, #64	; 0x40
 80023fc:	e79f      	b.n	800233e <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023fe:	68b3      	ldr	r3, [r6, #8]
 8002400:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 8002404:	d005      	beq.n	8002412 <HAL_HCD_IRQHandler+0x46e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002406:	68f3      	ldr	r3, [r6, #12]
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800240e:	4629      	mov	r1, r5
 8002410:	e6c8      	b.n	80021a4 <HAL_HCD_IRQHandler+0x200>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002412:	68b3      	ldr	r3, [r6, #8]
 8002414:	07db      	lsls	r3, r3, #31
 8002416:	d511      	bpl.n	800243c <HAL_HCD_IRQHandler+0x498>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002418:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800241a:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800241e:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002422:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002426:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002428:	60f2      	str	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800242a:	9302      	str	r3, [sp, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800242c:	f001 fd18 	bl	8003e60 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002430:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002432:	2201      	movs	r2, #1
 8002434:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002436:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800243a:	e71e      	b.n	800227a <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800243c:	68b3      	ldr	r3, [r6, #8]
 800243e:	071b      	lsls	r3, r3, #28
 8002440:	d50e      	bpl.n	8002460 <HAL_HCD_IRQHandler+0x4bc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002442:	2308      	movs	r3, #8
 8002444:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002446:	68f3      	ldr	r3, [r6, #12]
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800244e:	4629      	mov	r1, r5
 8002450:	f001 fd06 	bl	8003e60 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002454:	fb07 4505 	mla	r5, r7, r5, r4
 8002458:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800245a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 800245e:	e70c      	b.n	800227a <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002460:	68b3      	ldr	r3, [r6, #8]
 8002462:	06db      	lsls	r3, r3, #27
 8002464:	d515      	bpl.n	8002492 <HAL_HCD_IRQHandler+0x4ee>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002466:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 800246a:	2203      	movs	r2, #3
 800246c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002470:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002474:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002478:	b92a      	cbnz	r2, 8002486 <HAL_HCD_IRQHandler+0x4e2>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800247a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800247e:	b912      	cbnz	r2, 8002486 <HAL_HCD_IRQHandler+0x4e2>
        hhcd->hc[ch_num].do_ping = 1U;
 8002480:	2201      	movs	r2, #1
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002486:	68f3      	ldr	r3, [r6, #12]
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800248e:	4629      	mov	r1, r5
 8002490:	e767      	b.n	8002362 <HAL_HCD_IRQHandler+0x3be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002492:	68b3      	ldr	r3, [r6, #8]
 8002494:	061b      	lsls	r3, r3, #24
 8002496:	d50c      	bpl.n	80024b2 <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002498:	68f3      	ldr	r3, [r6, #12]
 800249a:	f043 0302 	orr.w	r3, r3, #2
 800249e:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a0:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024a2:	fb07 4505 	mla	r5, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a6:	f001 fcdb 	bl	8003e60 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024aa:	2306      	movs	r3, #6
 80024ac:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 80024b0:	e744      	b.n	800233c <HAL_HCD_IRQHandler+0x398>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024b2:	68b3      	ldr	r3, [r6, #8]
 80024b4:	055b      	lsls	r3, r3, #21
 80024b6:	d50f      	bpl.n	80024d8 <HAL_HCD_IRQHandler+0x534>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024b8:	68f3      	ldr	r3, [r6, #12]
 80024ba:	f043 0302 	orr.w	r3, r3, #2
 80024be:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c0:	4629      	mov	r1, r5
 80024c2:	f001 fccd 	bl	8003e60 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024c6:	2310      	movs	r3, #16
 80024c8:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ce:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80024d0:	fb07 4505 	mla	r5, r7, r5, r4
 80024d4:	2308      	movs	r3, #8
 80024d6:	e7c0      	b.n	800245a <HAL_HCD_IRQHandler+0x4b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024d8:	68b3      	ldr	r3, [r6, #8]
 80024da:	0798      	lsls	r0, r3, #30
 80024dc:	f57f aecd 	bpl.w	800227a <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80024e0:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024e2:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80024e6:	f023 0302 	bic.w	r3, r3, #2
 80024ea:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024ec:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d10e      	bne.n	8002512 <HAL_HCD_IRQHandler+0x56e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80024f4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80024f8:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80024fc:	3b02      	subs	r3, #2
 80024fe:	2b01      	cmp	r3, #1
 8002500:	f63f aedd 	bhi.w	80022be <HAL_HCD_IRQHandler+0x31a>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002504:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002508:	f083 0301 	eor.w	r3, r3, #1
 800250c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8002510:	e6d5      	b.n	80022be <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002512:	2b03      	cmp	r3, #3
 8002514:	d102      	bne.n	800251c <HAL_HCD_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002516:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 800251a:	e6d0      	b.n	80022be <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800251c:	2b04      	cmp	r3, #4
 800251e:	d0fa      	beq.n	8002516 <HAL_HCD_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002520:	2b05      	cmp	r3, #5
 8002522:	d102      	bne.n	800252a <HAL_HCD_IRQHandler+0x586>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002524:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8002528:	e6c9      	b.n	80022be <HAL_HCD_IRQHandler+0x31a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800252a:	2b06      	cmp	r3, #6
 800252c:	d002      	beq.n	8002534 <HAL_HCD_IRQHandler+0x590>
 800252e:	2b08      	cmp	r3, #8
 8002530:	f47f aec5 	bne.w	80022be <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].ErrCnt++;
 8002534:	fb07 4005 	mla	r0, r7, r5, r4
 8002538:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800253a:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800253c:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 800253e:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002540:	bf84      	itt	hi
 8002542:	2304      	movhi	r3, #4
 8002544:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002548:	588b      	ldr	r3, [r1, r2]
        hhcd->hc[ch_num].ErrCnt = 0U;
 800254a:	bf88      	it	hi
 800254c:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002550:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002558:	bf98      	it	ls
 800255a:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800255e:	508b      	str	r3, [r1, r2]
 8002560:	e6ad      	b.n	80022be <HAL_HCD_IRQHandler+0x31a>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002562:	6826      	ldr	r6, [r4, #0]
 8002564:	69b3      	ldr	r3, [r6, #24]
 8002566:	f023 0310 	bic.w	r3, r3, #16
 800256a:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 800256c:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800256e:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 8002572:	2a02      	cmp	r2, #2
 8002574:	d129      	bne.n	80025ca <HAL_HCD_IRQHandler+0x626>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002576:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800257a:	f1b8 0f00 	cmp.w	r8, #0
 800257e:	d024      	beq.n	80025ca <HAL_HCD_IRQHandler+0x626>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002580:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002584:	2728      	movs	r7, #40	; 0x28
 8002586:	fb07 4705 	mla	r7, r7, r5, r4
 800258a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800258c:	b1e9      	cbz	r1, 80025ca <HAL_HCD_IRQHandler+0x626>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800258e:	4642      	mov	r2, r8
 8002590:	4630      	mov	r0, r6
 8002592:	f001 faeb 	bl	8003b6c <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002598:	4443      	add	r3, r8
 800259a:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800259c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800259e:	4443      	add	r3, r8
 80025a0:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80025a2:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 80025a6:	016b      	lsls	r3, r5, #5
 80025a8:	199a      	adds	r2, r3, r6
 80025aa:	6911      	ldr	r1, [r2, #16]
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_HCD_IRQHandler+0x634>)
 80025ae:	400a      	ands	r2, r1
 80025b0:	b15a      	cbz	r2, 80025ca <HAL_HCD_IRQHandler+0x626>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025b2:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025b4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025bc:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80025be:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80025c2:	f083 0301 	eor.w	r3, r3, #1
 80025c6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025ca:	6822      	ldr	r2, [r4, #0]
 80025cc:	6993      	ldr	r3, [r2, #24]
 80025ce:	f043 0310 	orr.w	r3, r3, #16
 80025d2:	6193      	str	r3, [r2, #24]
 80025d4:	e5a5      	b.n	8002122 <HAL_HCD_IRQHandler+0x17e>
 80025d6:	bf00      	nop
 80025d8:	1ff80000 	.word	0x1ff80000

080025dc <HAL_HCD_Start>:
{
 80025dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 80025de:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80025e2:	2b01      	cmp	r3, #1
{
 80025e4:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80025e6:	d00d      	beq.n	8002604 <HAL_HCD_Start+0x28>
 80025e8:	2501      	movs	r5, #1
 80025ea:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80025ee:	6800      	ldr	r0, [r0, #0]
 80025f0:	f001 fa62 	bl	8003ab8 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80025f4:	4629      	mov	r1, r5
 80025f6:	6820      	ldr	r0, [r4, #0]
 80025f8:	f001 fb08 	bl	8003c0c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80025fc:	2000      	movs	r0, #0
 80025fe:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8002602:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8002604:	2002      	movs	r0, #2
}
 8002606:	bd38      	pop	{r3, r4, r5, pc}

08002608 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8002608:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800260c:	2b01      	cmp	r3, #1
{
 800260e:	b510      	push	{r4, lr}
 8002610:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002612:	d009      	beq.n	8002628 <HAL_HCD_Stop+0x20>
 8002614:	2301      	movs	r3, #1
 8002616:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800261a:	6800      	ldr	r0, [r0, #0]
 800261c:	f001 fd36 	bl	800408c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002620:	2000      	movs	r0, #0
 8002622:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8002626:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002628:	2002      	movs	r0, #2
}
 800262a:	bd10      	pop	{r4, pc}

0800262c <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 800262c:	6800      	ldr	r0, [r0, #0]
 800262e:	f001 bacf 	b.w	8003bd0 <USB_ResetPort>

08002632 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8002632:	2328      	movs	r3, #40	; 0x28
 8002634:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002638:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 800263c:	4770      	bx	lr

0800263e <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 800263e:	2328      	movs	r3, #40	; 0x28
 8002640:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002644:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8002646:	4770      	bx	lr

08002648 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002648:	6800      	ldr	r0, [r0, #0]
 800264a:	f001 bb7a 	b.w	8003d42 <USB_GetCurrentFrame>

0800264e <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 800264e:	6800      	ldr	r0, [r0, #0]
 8002650:	f001 bb6c 	b.w	8003d2c <USB_GetHostSpeed>

08002654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002654:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002656:	4604      	mov	r4, r0
 8002658:	b908      	cbnz	r0, 800265e <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 800265a:	2001      	movs	r0, #1
 800265c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800265e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002662:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002666:	b91b      	cbnz	r3, 8002670 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002668:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800266c:	f00a fac4 	bl	800cbf8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002670:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002672:	2324      	movs	r3, #36	; 0x24
 8002674:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002678:	6813      	ldr	r3, [r2, #0]
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002680:	f000 fadc 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002684:	6865      	ldr	r5, [r4, #4]
 8002686:	4b41      	ldr	r3, [pc, #260]	; (800278c <HAL_I2C_Init+0x138>)
 8002688:	429d      	cmp	r5, r3
 800268a:	d84d      	bhi.n	8002728 <HAL_I2C_Init+0xd4>
 800268c:	4b40      	ldr	r3, [pc, #256]	; (8002790 <HAL_I2C_Init+0x13c>)
 800268e:	4298      	cmp	r0, r3
 8002690:	d9e3      	bls.n	800265a <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002692:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002694:	493f      	ldr	r1, [pc, #252]	; (8002794 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002696:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002698:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800269c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026a0:	430b      	orrs	r3, r1
 80026a2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026a4:	6a13      	ldr	r3, [r2, #32]
 80026a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026aa:	3101      	adds	r1, #1
 80026ac:	4319      	orrs	r1, r3
 80026ae:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026b0:	69d1      	ldr	r1, [r2, #28]
 80026b2:	4b36      	ldr	r3, [pc, #216]	; (800278c <HAL_I2C_Init+0x138>)
 80026b4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80026b8:	429d      	cmp	r5, r3
 80026ba:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80026be:	f100 30ff 	add.w	r0, r0, #4294967295
 80026c2:	d848      	bhi.n	8002756 <HAL_I2C_Init+0x102>
 80026c4:	006d      	lsls	r5, r5, #1
 80026c6:	fbb0 f0f5 	udiv	r0, r0, r5
 80026ca:	3001      	adds	r0, #1
 80026cc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	bf38      	it	cc
 80026d4:	2304      	movcc	r3, #4
 80026d6:	430b      	orrs	r3, r1
 80026d8:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026da:	6811      	ldr	r1, [r2, #0]
 80026dc:	6a20      	ldr	r0, [r4, #32]
 80026de:	69e3      	ldr	r3, [r4, #28]
 80026e0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80026e4:	4303      	orrs	r3, r0
 80026e6:	430b      	orrs	r3, r1
 80026e8:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026ea:	6891      	ldr	r1, [r2, #8]
 80026ec:	68e0      	ldr	r0, [r4, #12]
 80026ee:	6923      	ldr	r3, [r4, #16]
 80026f0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80026f4:	4303      	orrs	r3, r0
 80026f6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80026fa:	430b      	orrs	r3, r1
 80026fc:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026fe:	68d1      	ldr	r1, [r2, #12]
 8002700:	69a0      	ldr	r0, [r4, #24]
 8002702:	6963      	ldr	r3, [r4, #20]
 8002704:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002708:	4303      	orrs	r3, r0
 800270a:	430b      	orrs	r3, r1
 800270c:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800270e:	6813      	ldr	r3, [r2, #0]
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002716:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002718:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800271a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800271c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002720:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002722:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8002726:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_I2C_Init+0x144>)
 800272a:	4298      	cmp	r0, r3
 800272c:	d995      	bls.n	800265a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800272e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002730:	4e18      	ldr	r6, [pc, #96]	; (8002794 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002732:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002734:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800273c:	4333      	orrs	r3, r6
 800273e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002740:	6a13      	ldr	r3, [r2, #32]
 8002742:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002746:	4371      	muls	r1, r6
 8002748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800274c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002750:	fbb1 f1f6 	udiv	r1, r1, r6
 8002754:	e7a9      	b.n	80026aa <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002756:	68a3      	ldr	r3, [r4, #8]
 8002758:	b953      	cbnz	r3, 8002770 <HAL_I2C_Init+0x11c>
 800275a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800275e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002762:	1c43      	adds	r3, r0, #1
 8002764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002768:	b16b      	cbz	r3, 8002786 <HAL_I2C_Init+0x132>
 800276a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800276e:	e7b2      	b.n	80026d6 <HAL_I2C_Init+0x82>
 8002770:	2319      	movs	r3, #25
 8002772:	436b      	muls	r3, r5
 8002774:	fbb0 f0f3 	udiv	r0, r0, r3
 8002778:	1c43      	adds	r3, r0, #1
 800277a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277e:	b113      	cbz	r3, 8002786 <HAL_I2C_Init+0x132>
 8002780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002784:	e7a7      	b.n	80026d6 <HAL_I2C_Init+0x82>
 8002786:	2301      	movs	r3, #1
 8002788:	e7a5      	b.n	80026d6 <HAL_I2C_Init+0x82>
 800278a:	bf00      	nop
 800278c:	000186a0 	.word	0x000186a0
 8002790:	001e847f 	.word	0x001e847f
 8002794:	000f4240 	.word	0x000f4240
 8002798:	003d08ff 	.word	0x003d08ff

0800279c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800279c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a0:	4604      	mov	r4, r0
 80027a2:	b918      	cbnz	r0, 80027ac <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80027a4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80027a6:	b002      	add	sp, #8
 80027a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ac:	6803      	ldr	r3, [r0, #0]
 80027ae:	07dd      	lsls	r5, r3, #31
 80027b0:	d410      	bmi.n	80027d4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	0798      	lsls	r0, r3, #30
 80027b6:	d458      	bmi.n	800286a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	071a      	lsls	r2, r3, #28
 80027bc:	f100 809a 	bmi.w	80028f4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c0:	6823      	ldr	r3, [r4, #0]
 80027c2:	075b      	lsls	r3, r3, #29
 80027c4:	f100 80b8 	bmi.w	8002938 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c8:	69a2      	ldr	r2, [r4, #24]
 80027ca:	2a00      	cmp	r2, #0
 80027cc:	f040 8119 	bne.w	8002a02 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80027d0:	2000      	movs	r0, #0
 80027d2:	e7e8      	b.n	80027a6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027d4:	4ba6      	ldr	r3, [pc, #664]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	f002 020c 	and.w	r2, r2, #12
 80027dc:	2a04      	cmp	r2, #4
 80027de:	d007      	beq.n	80027f0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027e6:	2a08      	cmp	r2, #8
 80027e8:	d10a      	bne.n	8002800 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	0259      	lsls	r1, r3, #9
 80027ee:	d507      	bpl.n	8002800 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f0:	4b9f      	ldr	r3, [pc, #636]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	039a      	lsls	r2, r3, #14
 80027f6:	d5dc      	bpl.n	80027b2 <HAL_RCC_OscConfig+0x16>
 80027f8:	6863      	ldr	r3, [r4, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1d9      	bne.n	80027b2 <HAL_RCC_OscConfig+0x16>
 80027fe:	e7d1      	b.n	80027a4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002800:	6863      	ldr	r3, [r4, #4]
 8002802:	4d9b      	ldr	r5, [pc, #620]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 8002804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002808:	d111      	bne.n	800282e <HAL_RCC_OscConfig+0x92>
 800280a:	682b      	ldr	r3, [r5, #0]
 800280c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002810:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002812:	f7fe fbb1 	bl	8000f78 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	4d96      	ldr	r5, [pc, #600]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002818:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	682b      	ldr	r3, [r5, #0]
 800281c:	039b      	lsls	r3, r3, #14
 800281e:	d4c8      	bmi.n	80027b2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002820:	f7fe fbaa 	bl	8000f78 <HAL_GetTick>
 8002824:	1b80      	subs	r0, r0, r6
 8002826:	2864      	cmp	r0, #100	; 0x64
 8002828:	d9f7      	bls.n	800281a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800282a:	2003      	movs	r0, #3
 800282c:	e7bb      	b.n	80027a6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002832:	d104      	bne.n	800283e <HAL_RCC_OscConfig+0xa2>
 8002834:	682b      	ldr	r3, [r5, #0]
 8002836:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800283a:	602b      	str	r3, [r5, #0]
 800283c:	e7e5      	b.n	800280a <HAL_RCC_OscConfig+0x6e>
 800283e:	682a      	ldr	r2, [r5, #0]
 8002840:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002844:	602a      	str	r2, [r5, #0]
 8002846:	682a      	ldr	r2, [r5, #0]
 8002848:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800284c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1df      	bne.n	8002812 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002852:	f7fe fb91 	bl	8000f78 <HAL_GetTick>
 8002856:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002858:	682b      	ldr	r3, [r5, #0]
 800285a:	039f      	lsls	r7, r3, #14
 800285c:	d5a9      	bpl.n	80027b2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800285e:	f7fe fb8b 	bl	8000f78 <HAL_GetTick>
 8002862:	1b80      	subs	r0, r0, r6
 8002864:	2864      	cmp	r0, #100	; 0x64
 8002866:	d9f7      	bls.n	8002858 <HAL_RCC_OscConfig+0xbc>
 8002868:	e7df      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800286a:	4b81      	ldr	r3, [pc, #516]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	f012 0f0c 	tst.w	r2, #12
 8002872:	d007      	beq.n	8002884 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800287a:	2a08      	cmp	r2, #8
 800287c:	d111      	bne.n	80028a2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	025e      	lsls	r6, r3, #9
 8002882:	d40e      	bmi.n	80028a2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002884:	4b7a      	ldr	r3, [pc, #488]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	0795      	lsls	r5, r2, #30
 800288a:	d502      	bpl.n	8002892 <HAL_RCC_OscConfig+0xf6>
 800288c:	68e2      	ldr	r2, [r4, #12]
 800288e:	2a01      	cmp	r2, #1
 8002890:	d188      	bne.n	80027a4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	6921      	ldr	r1, [r4, #16]
 8002896:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800289a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800289e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a0:	e78a      	b.n	80027b8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028a2:	68e2      	ldr	r2, [r4, #12]
 80028a4:	4b73      	ldr	r3, [pc, #460]	; (8002a74 <HAL_RCC_OscConfig+0x2d8>)
 80028a6:	b1b2      	cbz	r2, 80028d6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80028a8:	2201      	movs	r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028ac:	f7fe fb64 	bl	8000f78 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	4d6f      	ldr	r5, [pc, #444]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80028b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b4:	682b      	ldr	r3, [r5, #0]
 80028b6:	0798      	lsls	r0, r3, #30
 80028b8:	d507      	bpl.n	80028ca <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ba:	682b      	ldr	r3, [r5, #0]
 80028bc:	6922      	ldr	r2, [r4, #16]
 80028be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80028c2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80028c6:	602b      	str	r3, [r5, #0]
 80028c8:	e776      	b.n	80027b8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ca:	f7fe fb55 	bl	8000f78 <HAL_GetTick>
 80028ce:	1b80      	subs	r0, r0, r6
 80028d0:	2802      	cmp	r0, #2
 80028d2:	d9ef      	bls.n	80028b4 <HAL_RCC_OscConfig+0x118>
 80028d4:	e7a9      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80028d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028d8:	f7fe fb4e 	bl	8000f78 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028dc:	4d64      	ldr	r5, [pc, #400]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80028de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e0:	682b      	ldr	r3, [r5, #0]
 80028e2:	0799      	lsls	r1, r3, #30
 80028e4:	f57f af68 	bpl.w	80027b8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e8:	f7fe fb46 	bl	8000f78 <HAL_GetTick>
 80028ec:	1b80      	subs	r0, r0, r6
 80028ee:	2802      	cmp	r0, #2
 80028f0:	d9f6      	bls.n	80028e0 <HAL_RCC_OscConfig+0x144>
 80028f2:	e79a      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028f4:	6962      	ldr	r2, [r4, #20]
 80028f6:	4b60      	ldr	r3, [pc, #384]	; (8002a78 <HAL_RCC_OscConfig+0x2dc>)
 80028f8:	b17a      	cbz	r2, 800291a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80028fe:	f7fe fb3b 	bl	8000f78 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002902:	4d5b      	ldr	r5, [pc, #364]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002904:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002906:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002908:	079f      	lsls	r7, r3, #30
 800290a:	f53f af59 	bmi.w	80027c0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290e:	f7fe fb33 	bl	8000f78 <HAL_GetTick>
 8002912:	1b80      	subs	r0, r0, r6
 8002914:	2802      	cmp	r0, #2
 8002916:	d9f6      	bls.n	8002906 <HAL_RCC_OscConfig+0x16a>
 8002918:	e787      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800291a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800291c:	f7fe fb2c 	bl	8000f78 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002920:	4d53      	ldr	r5, [pc, #332]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002922:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002924:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002926:	0798      	lsls	r0, r3, #30
 8002928:	f57f af4a 	bpl.w	80027c0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800292c:	f7fe fb24 	bl	8000f78 <HAL_GetTick>
 8002930:	1b80      	subs	r0, r0, r6
 8002932:	2802      	cmp	r0, #2
 8002934:	d9f6      	bls.n	8002924 <HAL_RCC_OscConfig+0x188>
 8002936:	e778      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002938:	4b4d      	ldr	r3, [pc, #308]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 800293a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002940:	d128      	bne.n	8002994 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	9201      	str	r2, [sp, #4]
 8002944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002946:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002956:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	4d48      	ldr	r5, [pc, #288]	; (8002a7c <HAL_RCC_OscConfig+0x2e0>)
 800295a:	682b      	ldr	r3, [r5, #0]
 800295c:	05d9      	lsls	r1, r3, #23
 800295e:	d51b      	bpl.n	8002998 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002960:	68a3      	ldr	r3, [r4, #8]
 8002962:	4d43      	ldr	r5, [pc, #268]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 8002964:	2b01      	cmp	r3, #1
 8002966:	d127      	bne.n	80029b8 <HAL_RCC_OscConfig+0x21c>
 8002968:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002970:	f7fe fb02 	bl	8000f78 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002974:	4d3e      	ldr	r5, [pc, #248]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002976:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800297e:	079b      	lsls	r3, r3, #30
 8002980:	d539      	bpl.n	80029f6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002982:	2e00      	cmp	r6, #0
 8002984:	f43f af20 	beq.w	80027c8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002988:	4a39      	ldr	r2, [pc, #228]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 800298a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800298c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002990:	6413      	str	r3, [r2, #64]	; 0x40
 8002992:	e719      	b.n	80027c8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002994:	2600      	movs	r6, #0
 8002996:	e7df      	b.n	8002958 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002998:	682b      	ldr	r3, [r5, #0]
 800299a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80029a0:	f7fe faea 	bl	8000f78 <HAL_GetTick>
 80029a4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a6:	682b      	ldr	r3, [r5, #0]
 80029a8:	05da      	lsls	r2, r3, #23
 80029aa:	d4d9      	bmi.n	8002960 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ac:	f7fe fae4 	bl	8000f78 <HAL_GetTick>
 80029b0:	1bc0      	subs	r0, r0, r7
 80029b2:	2802      	cmp	r0, #2
 80029b4:	d9f7      	bls.n	80029a6 <HAL_RCC_OscConfig+0x20a>
 80029b6:	e738      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	d104      	bne.n	80029c6 <HAL_RCC_OscConfig+0x22a>
 80029bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	672b      	str	r3, [r5, #112]	; 0x70
 80029c4:	e7d0      	b.n	8002968 <HAL_RCC_OscConfig+0x1cc>
 80029c6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80029c8:	f022 0201 	bic.w	r2, r2, #1
 80029cc:	672a      	str	r2, [r5, #112]	; 0x70
 80029ce:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80029d0:	f022 0204 	bic.w	r2, r2, #4
 80029d4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1ca      	bne.n	8002970 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80029da:	f7fe facd 	bl	8000f78 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80029e2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80029e6:	0798      	lsls	r0, r3, #30
 80029e8:	d5cb      	bpl.n	8002982 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7fe fac5 	bl	8000f78 <HAL_GetTick>
 80029ee:	1bc0      	subs	r0, r0, r7
 80029f0:	4540      	cmp	r0, r8
 80029f2:	d9f7      	bls.n	80029e4 <HAL_RCC_OscConfig+0x248>
 80029f4:	e719      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7fe fabf 	bl	8000f78 <HAL_GetTick>
 80029fa:	1bc0      	subs	r0, r0, r7
 80029fc:	4540      	cmp	r0, r8
 80029fe:	d9bd      	bls.n	800297c <HAL_RCC_OscConfig+0x1e0>
 8002a00:	e713      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a02:	4d1b      	ldr	r5, [pc, #108]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 8002a04:	68ab      	ldr	r3, [r5, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	f43f aeca 	beq.w	80027a4 <HAL_RCC_OscConfig+0x8>
 8002a10:	4e1b      	ldr	r6, [pc, #108]	; (8002a80 <HAL_RCC_OscConfig+0x2e4>)
 8002a12:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a14:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002a16:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a18:	d134      	bne.n	8002a84 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002a1a:	f7fe faad 	bl	8000f78 <HAL_GetTick>
 8002a1e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	0199      	lsls	r1, r3, #6
 8002a24:	d41e      	bmi.n	8002a64 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a26:	6a22      	ldr	r2, [r4, #32]
 8002a28:	69e3      	ldr	r3, [r4, #28]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a2e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002a32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002a38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3a:	4c0d      	ldr	r4, [pc, #52]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a3c:	0852      	lsrs	r2, r2, #1
 8002a3e:	3a01      	subs	r2, #1
 8002a40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a44:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002a46:	2301      	movs	r3, #1
 8002a48:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fa95 	bl	8000f78 <HAL_GetTick>
 8002a4e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	019a      	lsls	r2, r3, #6
 8002a54:	f53f aebc 	bmi.w	80027d0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a58:	f7fe fa8e 	bl	8000f78 <HAL_GetTick>
 8002a5c:	1b40      	subs	r0, r0, r5
 8002a5e:	2802      	cmp	r0, #2
 8002a60:	d9f6      	bls.n	8002a50 <HAL_RCC_OscConfig+0x2b4>
 8002a62:	e6e2      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fe fa88 	bl	8000f78 <HAL_GetTick>
 8002a68:	1bc0      	subs	r0, r0, r7
 8002a6a:	2802      	cmp	r0, #2
 8002a6c:	d9d8      	bls.n	8002a20 <HAL_RCC_OscConfig+0x284>
 8002a6e:	e6dc      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
 8002a70:	40023800 	.word	0x40023800
 8002a74:	42470000 	.word	0x42470000
 8002a78:	42470e80 	.word	0x42470e80
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002a84:	f7fe fa78 	bl	8000f78 <HAL_GetTick>
 8002a88:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	682b      	ldr	r3, [r5, #0]
 8002a8c:	019b      	lsls	r3, r3, #6
 8002a8e:	f57f ae9f 	bpl.w	80027d0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a92:	f7fe fa71 	bl	8000f78 <HAL_GetTick>
 8002a96:	1b00      	subs	r0, r0, r4
 8002a98:	2802      	cmp	r0, #2
 8002a9a:	d9f6      	bls.n	8002a8a <HAL_RCC_OscConfig+0x2ee>
 8002a9c:	e6c5      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
 8002a9e:	bf00      	nop

08002aa0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa0:	4913      	ldr	r1, [pc, #76]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002aa2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa4:	688b      	ldr	r3, [r1, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x16>
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d003      	beq.n	8002aba <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ab2:	4810      	ldr	r0, [pc, #64]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002ab4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002ab6:	4810      	ldr	r0, [pc, #64]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x58>)
 8002ab8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002abc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002abe:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ac0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac4:	bf14      	ite	ne
 8002ac6:	480c      	ldrne	r0, [pc, #48]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac8:	480a      	ldreq	r0, [pc, #40]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002ace:	bf18      	it	ne
 8002ad0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad6:	fba1 0100 	umull	r0, r1, r1, r0
 8002ada:	f7fe f87b 	bl	8000bd4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x50>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002aea:	fbb0 f0f3 	udiv	r0, r0, r3
 8002aee:	bd08      	pop	{r3, pc}
 8002af0:	40023800 	.word	0x40023800
 8002af4:	00f42400 	.word	0x00f42400
 8002af8:	007a1200 	.word	0x007a1200

08002afc <HAL_RCC_ClockConfig>:
{
 8002afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b00:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002b02:	4604      	mov	r4, r0
 8002b04:	b910      	cbnz	r0, 8002b0c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002b06:	2001      	movs	r0, #1
 8002b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b44      	ldr	r3, [pc, #272]	; (8002c20 <HAL_RCC_ClockConfig+0x124>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	f002 020f 	and.w	r2, r2, #15
 8002b14:	428a      	cmp	r2, r1
 8002b16:	d328      	bcc.n	8002b6a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b18:	6821      	ldr	r1, [r4, #0]
 8002b1a:	078f      	lsls	r7, r1, #30
 8002b1c:	d42d      	bmi.n	8002b7a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1e:	07c8      	lsls	r0, r1, #31
 8002b20:	d440      	bmi.n	8002ba4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b22:	4b3f      	ldr	r3, [pc, #252]	; (8002c20 <HAL_RCC_ClockConfig+0x124>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	f002 020f 	and.w	r2, r2, #15
 8002b2a:	4295      	cmp	r5, r2
 8002b2c:	d366      	bcc.n	8002bfc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2e:	6822      	ldr	r2, [r4, #0]
 8002b30:	0751      	lsls	r1, r2, #29
 8002b32:	d46c      	bmi.n	8002c0e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b34:	0713      	lsls	r3, r2, #28
 8002b36:	d507      	bpl.n	8002b48 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b38:	4a3a      	ldr	r2, [pc, #232]	; (8002c24 <HAL_RCC_ClockConfig+0x128>)
 8002b3a:	6921      	ldr	r1, [r4, #16]
 8002b3c:	6893      	ldr	r3, [r2, #8]
 8002b3e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b42:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002b46:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b48:	f7ff ffaa 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002b4c:	4b35      	ldr	r3, [pc, #212]	; (8002c24 <HAL_RCC_ClockConfig+0x128>)
 8002b4e:	4a36      	ldr	r2, [pc, #216]	; (8002c28 <HAL_RCC_ClockConfig+0x12c>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b56:	5cd3      	ldrb	r3, [r2, r3]
 8002b58:	40d8      	lsrs	r0, r3
 8002b5a:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <HAL_RCC_ClockConfig+0x130>)
 8002b5c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f7fe f9c0 	bl	8000ee4 <HAL_InitTick>
  return HAL_OK;
 8002b64:	2000      	movs	r0, #0
 8002b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	b2ca      	uxtb	r2, r1
 8002b6c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	4299      	cmp	r1, r3
 8002b76:	d1c6      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xa>
 8002b78:	e7ce      	b.n	8002b18 <HAL_RCC_ClockConfig+0x1c>
 8002b7a:	4b2a      	ldr	r3, [pc, #168]	; (8002c24 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b80:	bf1e      	ittt	ne
 8002b82:	689a      	ldrne	r2, [r3, #8]
 8002b84:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002b88:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b8c:	bf42      	ittt	mi
 8002b8e:	689a      	ldrmi	r2, [r3, #8]
 8002b90:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002b94:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	68a0      	ldr	r0, [r4, #8]
 8002b9a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b9e:	4302      	orrs	r2, r0
 8002ba0:	609a      	str	r2, [r3, #8]
 8002ba2:	e7bc      	b.n	8002b1e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba4:	6862      	ldr	r2, [r4, #4]
 8002ba6:	4b1f      	ldr	r3, [pc, #124]	; (8002c24 <HAL_RCC_ClockConfig+0x128>)
 8002ba8:	2a01      	cmp	r2, #1
 8002baa:	d11d      	bne.n	8002be8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	d0a8      	beq.n	8002b06 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb4:	4e1b      	ldr	r6, [pc, #108]	; (8002c24 <HAL_RCC_ClockConfig+0x128>)
 8002bb6:	68b3      	ldr	r3, [r6, #8]
 8002bb8:	f023 0303 	bic.w	r3, r3, #3
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002bc0:	f7fe f9da 	bl	8000f78 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002bc8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bca:	68b3      	ldr	r3, [r6, #8]
 8002bcc:	6862      	ldr	r2, [r4, #4]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002bd6:	d0a4      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7fe f9ce 	bl	8000f78 <HAL_GetTick>
 8002bdc:	1bc0      	subs	r0, r0, r7
 8002bde:	4540      	cmp	r0, r8
 8002be0:	d9f3      	bls.n	8002bca <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002be2:	2003      	movs	r0, #3
}
 8002be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002be8:	1e91      	subs	r1, r2, #2
 8002bea:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bec:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bee:	d802      	bhi.n	8002bf6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bf4:	e7dd      	b.n	8002bb2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf6:	f013 0f02 	tst.w	r3, #2
 8002bfa:	e7da      	b.n	8002bb2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfc:	b2ea      	uxtb	r2, r5
 8002bfe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	429d      	cmp	r5, r3
 8002c08:	f47f af7d 	bne.w	8002b06 <HAL_RCC_ClockConfig+0xa>
 8002c0c:	e78f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c0e:	4905      	ldr	r1, [pc, #20]	; (8002c24 <HAL_RCC_ClockConfig+0x128>)
 8002c10:	68e0      	ldr	r0, [r4, #12]
 8002c12:	688b      	ldr	r3, [r1, #8]
 8002c14:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002c18:	4303      	orrs	r3, r0
 8002c1a:	608b      	str	r3, [r1, #8]
 8002c1c:	e78a      	b.n	8002b34 <HAL_RCC_ClockConfig+0x38>
 8002c1e:	bf00      	nop
 8002c20:	40023c00 	.word	0x40023c00
 8002c24:	40023800 	.word	0x40023800
 8002c28:	08012935 	.word	0x08012935
 8002c2c:	200005b4 	.word	0x200005b4

08002c30 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002c30:	4b01      	ldr	r3, [pc, #4]	; (8002c38 <HAL_RCC_GetHCLKFreq+0x8>)
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	200005b4 	.word	0x200005b4

08002c3c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002c3e:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002c46:	5cd3      	ldrb	r3, [r2, r3]
 8002c48:	4a03      	ldr	r2, [pc, #12]	; (8002c58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002c4a:	6810      	ldr	r0, [r2, #0]
}
 8002c4c:	40d8      	lsrs	r0, r3
 8002c4e:	4770      	bx	lr
 8002c50:	40023800 	.word	0x40023800
 8002c54:	08012945 	.word	0x08012945
 8002c58:	200005b4 	.word	0x200005b4

08002c5c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c5c:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002c5e:	4a05      	ldr	r2, [pc, #20]	; (8002c74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002c66:	5cd3      	ldrb	r3, [r2, r3]
 8002c68:	4a03      	ldr	r2, [pc, #12]	; (8002c78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002c6a:	6810      	ldr	r0, [r2, #0]
}
 8002c6c:	40d8      	lsrs	r0, r3
 8002c6e:	4770      	bx	lr
 8002c70:	40023800 	.word	0x40023800
 8002c74:	08012945 	.word	0x08012945
 8002c78:	200005b4 	.word	0x200005b4

08002c7c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002c7c:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002c7e:	4604      	mov	r4, r0
 8002c80:	b190      	cbz	r0, 8002ca8 <HAL_RNG_Init+0x2c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002c82:	7943      	ldrb	r3, [r0, #5]
 8002c84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c88:	b913      	cbnz	r3, 8002c90 <HAL_RNG_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002c8a:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002c8c:	f009 ffec 	bl	800cc68 <HAL_RNG_MspInit>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002c90:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8002c92:	2302      	movs	r3, #2
 8002c94:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 8002c96:	6813      	ldr	r3, [r2, #0]
 8002c98:	f043 0304 	orr.w	r3, r3, #4
 8002c9c:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002c9e:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	7163      	strb	r3, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002ca4:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
 8002ca6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ca8:	2001      	movs	r0, #1
}
 8002caa:	bd10      	pop	{r4, pc}

08002cac <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002cae:	7903      	ldrb	r3, [r0, #4]
 8002cb0:	2b01      	cmp	r3, #1
{
 8002cb2:	4604      	mov	r4, r0
 8002cb4:	460e      	mov	r6, r1
  __HAL_LOCK(hrng);
 8002cb6:	d025      	beq.n	8002d04 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002cb8:	7963      	ldrb	r3, [r4, #5]
  __HAL_LOCK(hrng);
 8002cba:	2001      	movs	r0, #1
  if (hrng->State == HAL_RNG_STATE_READY)
 8002cbc:	4283      	cmp	r3, r0
  __HAL_LOCK(hrng);
 8002cbe:	7120      	strb	r0, [r4, #4]
  if (hrng->State == HAL_RNG_STATE_READY)
 8002cc0:	d11d      	bne.n	8002cfe <HAL_RNG_GenerateRandomNumber+0x52>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	7163      	strb	r3, [r4, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cc6:	f7fe f957 	bl	8000f78 <HAL_GetTick>
 8002cca:	4607      	mov	r7, r0

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002ccc:	6822      	ldr	r2, [r4, #0]
 8002cce:	6855      	ldr	r5, [r2, #4]
 8002cd0:	f015 0501 	ands.w	r5, r5, #1
 8002cd4:	d008      	beq.n	8002ce8 <HAL_RNG_GenerateRandomNumber+0x3c>
        return HAL_ERROR;
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002cd6:	6893      	ldr	r3, [r2, #8]
 8002cd8:	60e3      	str	r3, [r4, #12]
    *random32bit = hrng->RandomNumber;
 8002cda:	6033      	str	r3, [r6, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	7163      	strb	r3, [r4, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce0:	2000      	movs	r0, #0
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	7123      	strb	r3, [r4, #4]
 8002ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002ce8:	f7fe f946 	bl	8000f78 <HAL_GetTick>
 8002cec:	1bc0      	subs	r0, r0, r7
 8002cee:	2802      	cmp	r0, #2
 8002cf0:	d9ec      	bls.n	8002ccc <HAL_RNG_GenerateRandomNumber+0x20>
        hrng->State = HAL_RNG_STATE_READY;
 8002cf2:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002cf4:	2302      	movs	r3, #2
        hrng->State = HAL_RNG_STATE_READY;
 8002cf6:	7160      	strb	r0, [r4, #5]
        __HAL_UNLOCK(hrng);
 8002cf8:	7125      	strb	r5, [r4, #4]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002cfa:	60a3      	str	r3, [r4, #8]
 8002cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002cfe:	2304      	movs	r3, #4
 8002d00:	60a3      	str	r3, [r4, #8]
 8002d02:	e7ee      	b.n	8002ce2 <HAL_RNG_GenerateRandomNumber+0x36>
  __HAL_LOCK(hrng);
 8002d04:	2002      	movs	r0, #2

  return status;
}
 8002d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d08 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d08:	6a03      	ldr	r3, [r0, #32]
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d10:	6a03      	ldr	r3, [r0, #32]
{
 8002d12:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d14:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d16:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d18:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d1a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002d1e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d20:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002d22:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002d26:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d28:	4d0e      	ldr	r5, [pc, #56]	; (8002d64 <TIM_OC1_SetConfig+0x5c>)
 8002d2a:	42a8      	cmp	r0, r5
 8002d2c:	d002      	beq.n	8002d34 <TIM_OC1_SetConfig+0x2c>
 8002d2e:	4e0e      	ldr	r6, [pc, #56]	; (8002d68 <TIM_OC1_SetConfig+0x60>)
 8002d30:	42b0      	cmp	r0, r6
 8002d32:	d110      	bne.n	8002d56 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d34:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d36:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002d3a:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d3e:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d42:	d002      	beq.n	8002d4a <TIM_OC1_SetConfig+0x42>
 8002d44:	4d08      	ldr	r5, [pc, #32]	; (8002d68 <TIM_OC1_SetConfig+0x60>)
 8002d46:	42a8      	cmp	r0, r5
 8002d48:	d105      	bne.n	8002d56 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d4a:	694d      	ldr	r5, [r1, #20]
 8002d4c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d4e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d52:	4335      	orrs	r5, r6
 8002d54:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d56:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d58:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d5a:	684a      	ldr	r2, [r1, #4]
 8002d5c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d5e:	6203      	str	r3, [r0, #32]
 8002d60:	bd70      	pop	{r4, r5, r6, pc}
 8002d62:	bf00      	nop
 8002d64:	40010000 	.word	0x40010000
 8002d68:	40010400 	.word	0x40010400

08002d6c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d6c:	6a03      	ldr	r3, [r0, #32]
 8002d6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d72:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d74:	6a03      	ldr	r3, [r0, #32]
{
 8002d76:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d78:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d7a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d7c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d7e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002d82:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d84:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002d86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d8a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d8e:	4d11      	ldr	r5, [pc, #68]	; (8002dd4 <TIM_OC3_SetConfig+0x68>)
 8002d90:	42a8      	cmp	r0, r5
 8002d92:	d003      	beq.n	8002d9c <TIM_OC3_SetConfig+0x30>
 8002d94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d98:	42a8      	cmp	r0, r5
 8002d9a:	d114      	bne.n	8002dc6 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d9c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002da2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da6:	4d0b      	ldr	r5, [pc, #44]	; (8002dd4 <TIM_OC3_SetConfig+0x68>)
 8002da8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dae:	d003      	beq.n	8002db8 <TIM_OC3_SetConfig+0x4c>
 8002db0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002db4:	42a8      	cmp	r0, r5
 8002db6:	d106      	bne.n	8002dc6 <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002db8:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dba:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dbc:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dc0:	4335      	orrs	r5, r6
 8002dc2:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dc6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dc8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dca:	684a      	ldr	r2, [r1, #4]
 8002dcc:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dce:	6203      	str	r3, [r0, #32]
 8002dd0:	bd70      	pop	{r4, r5, r6, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40010000 	.word	0x40010000

08002dd8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dd8:	6a03      	ldr	r3, [r0, #32]
 8002dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dde:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002de0:	6a03      	ldr	r3, [r0, #32]
{
 8002de2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002de6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002de8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dea:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002df2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002df4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002df8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dfc:	4d08      	ldr	r5, [pc, #32]	; (8002e20 <TIM_OC4_SetConfig+0x48>)
 8002dfe:	42a8      	cmp	r0, r5
 8002e00:	d003      	beq.n	8002e0a <TIM_OC4_SetConfig+0x32>
 8002e02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e06:	42a8      	cmp	r0, r5
 8002e08:	d104      	bne.n	8002e14 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e0a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e0c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e10:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e14:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e16:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e18:	684a      	ldr	r2, [r1, #4]
 8002e1a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1c:	6203      	str	r3, [r0, #32]
 8002e1e:	bd30      	pop	{r4, r5, pc}
 8002e20:	40010000 	.word	0x40010000

08002e24 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8002e24:	2302      	movs	r3, #2
 8002e26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e2a:	6803      	ldr	r3, [r0, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e32:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002e34:	bf1e      	ittt	ne
 8002e36:	681a      	ldrne	r2, [r3, #0]
 8002e38:	f042 0201 	orrne.w	r2, r2, #1
 8002e3c:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8002e44:	2000      	movs	r0, #0
 8002e46:	4770      	bx	lr

08002e48 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e48:	6803      	ldr	r3, [r0, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	f042 0201 	orr.w	r2, r2, #1
 8002e50:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e58:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002e5a:	bf1e      	ittt	ne
 8002e5c:	681a      	ldrne	r2, [r3, #0]
 8002e5e:	f042 0201 	orrne.w	r2, r2, #1
 8002e62:	601a      	strne	r2, [r3, #0]
}
 8002e64:	2000      	movs	r0, #0
 8002e66:	4770      	bx	lr

08002e68 <HAL_TIM_PWM_MspInit>:
 8002e68:	4770      	bx	lr

08002e6a <HAL_TIM_PeriodElapsedCallback>:
 8002e6a:	4770      	bx	lr

08002e6c <HAL_TIM_OC_DelayElapsedCallback>:
 8002e6c:	4770      	bx	lr

08002e6e <HAL_TIM_IC_CaptureCallback>:
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002e70:	4770      	bx	lr

08002e72 <HAL_TIM_TriggerCallback>:
 8002e72:	4770      	bx	lr

08002e74 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e74:	6803      	ldr	r3, [r0, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	0791      	lsls	r1, r2, #30
{
 8002e7a:	b510      	push	{r4, lr}
 8002e7c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e7e:	d50e      	bpl.n	8002e9e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	0792      	lsls	r2, r2, #30
 8002e84:	d50b      	bpl.n	8002e9e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e86:	f06f 0202 	mvn.w	r2, #2
 8002e8a:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e8c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e8e:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e90:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e92:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e94:	d077      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	f7ff ffea 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	0750      	lsls	r0, r2, #29
 8002ea4:	d510      	bpl.n	8002ec8 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	0751      	lsls	r1, r2, #29
 8002eaa:	d50d      	bpl.n	8002ec8 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eac:	f06f 0204 	mvn.w	r2, #4
 8002eb0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eb2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eb4:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eb6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eba:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002ebc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ebe:	d068      	beq.n	8002f92 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec0:	f7ff ffd5 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	0712      	lsls	r2, r2, #28
 8002ece:	d50f      	bpl.n	8002ef0 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	0710      	lsls	r0, r2, #28
 8002ed4:	d50c      	bpl.n	8002ef0 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ed6:	f06f 0208 	mvn.w	r2, #8
 8002eda:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002edc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ede:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee0:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ee2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee6:	d05a      	beq.n	8002f9e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee8:	f7ff ffc1 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eec:	2300      	movs	r3, #0
 8002eee:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	06d2      	lsls	r2, r2, #27
 8002ef6:	d510      	bpl.n	8002f1a <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	06d0      	lsls	r0, r2, #27
 8002efc:	d50d      	bpl.n	8002f1a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002efe:	f06f 0210 	mvn.w	r2, #16
 8002f02:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f04:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f06:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f08:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f0c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f10:	d04b      	beq.n	8002faa <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f12:	f7ff ffac 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	2300      	movs	r3, #0
 8002f18:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	07d1      	lsls	r1, r2, #31
 8002f20:	d508      	bpl.n	8002f34 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	07d2      	lsls	r2, r2, #31
 8002f26:	d505      	bpl.n	8002f34 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f28:	f06f 0201 	mvn.w	r2, #1
 8002f2c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f7ff ff9b 	bl	8002e6a <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	0610      	lsls	r0, r2, #24
 8002f3a:	d508      	bpl.n	8002f4e <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	0611      	lsls	r1, r2, #24
 8002f40:	d505      	bpl.n	8002f4e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f46:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002f48:	4620      	mov	r0, r4
 8002f4a:	f000 fa52 	bl	80033f2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	0652      	lsls	r2, r2, #25
 8002f54:	d508      	bpl.n	8002f68 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	0650      	lsls	r0, r2, #25
 8002f5a:	d505      	bpl.n	8002f68 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f60:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002f62:	4620      	mov	r0, r4
 8002f64:	f7ff ff85 	bl	8002e72 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	0691      	lsls	r1, r2, #26
 8002f6e:	d522      	bpl.n	8002fb6 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	0692      	lsls	r2, r2, #26
 8002f74:	d51f      	bpl.n	8002fb6 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f76:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002f7a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f7c:	611a      	str	r2, [r3, #16]
}
 8002f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002f82:	f000 ba35 	b.w	80033f0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f86:	f7ff ff71 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f7ff ff70 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f90:	e783      	b.n	8002e9a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f92:	f7ff ff6b 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f96:	4620      	mov	r0, r4
 8002f98:	f7ff ff6a 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f9c:	e792      	b.n	8002ec4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9e:	f7ff ff65 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f7ff ff64 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
 8002fa8:	e7a0      	b.n	8002eec <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	f7ff ff5f 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f7ff ff5e 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
 8002fb4:	e7af      	b.n	8002f16 <HAL_TIM_IRQHandler+0xa2>
 8002fb6:	bd10      	pop	{r4, pc}

08002fb8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb8:	4a30      	ldr	r2, [pc, #192]	; (800307c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002fba:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fbc:	4290      	cmp	r0, r2
 8002fbe:	d012      	beq.n	8002fe6 <TIM_Base_SetConfig+0x2e>
 8002fc0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002fc4:	d00f      	beq.n	8002fe6 <TIM_Base_SetConfig+0x2e>
 8002fc6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002fca:	4290      	cmp	r0, r2
 8002fcc:	d00b      	beq.n	8002fe6 <TIM_Base_SetConfig+0x2e>
 8002fce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fd2:	4290      	cmp	r0, r2
 8002fd4:	d007      	beq.n	8002fe6 <TIM_Base_SetConfig+0x2e>
 8002fd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fda:	4290      	cmp	r0, r2
 8002fdc:	d003      	beq.n	8002fe6 <TIM_Base_SetConfig+0x2e>
 8002fde:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002fe2:	4290      	cmp	r0, r2
 8002fe4:	d119      	bne.n	800301a <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8002fe6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002fec:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fee:	4a23      	ldr	r2, [pc, #140]	; (800307c <TIM_Base_SetConfig+0xc4>)
 8002ff0:	4290      	cmp	r0, r2
 8002ff2:	d029      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8002ff4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002ff8:	d026      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8002ffa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002ffe:	4290      	cmp	r0, r2
 8003000:	d022      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8003002:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003006:	4290      	cmp	r0, r2
 8003008:	d01e      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 800300a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800300e:	4290      	cmp	r0, r2
 8003010:	d01a      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8003012:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003016:	4290      	cmp	r0, r2
 8003018:	d016      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 800301a:	4a19      	ldr	r2, [pc, #100]	; (8003080 <TIM_Base_SetConfig+0xc8>)
 800301c:	4290      	cmp	r0, r2
 800301e:	d013      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8003020:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003024:	4290      	cmp	r0, r2
 8003026:	d00f      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8003028:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800302c:	4290      	cmp	r0, r2
 800302e:	d00b      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8003030:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003034:	4290      	cmp	r0, r2
 8003036:	d007      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8003038:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800303c:	4290      	cmp	r0, r2
 800303e:	d003      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8003040:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003044:	4290      	cmp	r0, r2
 8003046:	d103      	bne.n	8003050 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003048:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800304a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800304e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003050:	694a      	ldr	r2, [r1, #20]
 8003052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003056:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003058:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800305a:	688b      	ldr	r3, [r1, #8]
 800305c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800305e:	680b      	ldr	r3, [r1, #0]
 8003060:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <TIM_Base_SetConfig+0xc4>)
 8003064:	4298      	cmp	r0, r3
 8003066:	d003      	beq.n	8003070 <TIM_Base_SetConfig+0xb8>
 8003068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800306c:	4298      	cmp	r0, r3
 800306e:	d101      	bne.n	8003074 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8003070:	690b      	ldr	r3, [r1, #16]
 8003072:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003074:	2301      	movs	r3, #1
 8003076:	6143      	str	r3, [r0, #20]
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40010000 	.word	0x40010000
 8003080:	40014000 	.word	0x40014000

08003084 <HAL_TIM_Base_Init>:
{
 8003084:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003086:	4604      	mov	r4, r0
 8003088:	b1a0      	cbz	r0, 80030b4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800308a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800308e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003092:	b91b      	cbnz	r3, 800309c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003094:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003098:	f009 fdfe 	bl	800cc98 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	2302      	movs	r3, #2
 800309e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a2:	6820      	ldr	r0, [r4, #0]
 80030a4:	1d21      	adds	r1, r4, #4
 80030a6:	f7ff ff87 	bl	8002fb8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80030aa:	2301      	movs	r3, #1
 80030ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80030b0:	2000      	movs	r0, #0
 80030b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80030b4:	2001      	movs	r0, #1
}
 80030b6:	bd10      	pop	{r4, pc}

080030b8 <HAL_TIM_PWM_Init>:
{
 80030b8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80030ba:	4604      	mov	r4, r0
 80030bc:	b1a0      	cbz	r0, 80030e8 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80030be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80030c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030c6:	b91b      	cbnz	r3, 80030d0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80030c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80030cc:	f7ff fecc 	bl	8002e68 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	2302      	movs	r3, #2
 80030d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d6:	6820      	ldr	r0, [r4, #0]
 80030d8:	1d21      	adds	r1, r4, #4
 80030da:	f7ff ff6d 	bl	8002fb8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80030de:	2301      	movs	r3, #1
 80030e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80030e4:	2000      	movs	r0, #0
 80030e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80030e8:	2001      	movs	r0, #1
}
 80030ea:	bd10      	pop	{r4, pc}

080030ec <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ec:	6a03      	ldr	r3, [r0, #32]
 80030ee:	f023 0310 	bic.w	r3, r3, #16
 80030f2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80030f4:	6a03      	ldr	r3, [r0, #32]
{
 80030f6:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 80030f8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80030fa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030fe:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003102:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003106:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003108:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800310c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003110:	4d10      	ldr	r5, [pc, #64]	; (8003154 <TIM_OC2_SetConfig+0x68>)
 8003112:	42a8      	cmp	r0, r5
 8003114:	d003      	beq.n	800311e <TIM_OC2_SetConfig+0x32>
 8003116:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800311a:	42a8      	cmp	r0, r5
 800311c:	d114      	bne.n	8003148 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800311e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003124:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003128:	4d0a      	ldr	r5, [pc, #40]	; (8003154 <TIM_OC2_SetConfig+0x68>)
 800312a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800312c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003130:	d003      	beq.n	800313a <TIM_OC2_SetConfig+0x4e>
 8003132:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003136:	42a8      	cmp	r0, r5
 8003138:	d106      	bne.n	8003148 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800313a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800313c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800313e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003142:	4335      	orrs	r5, r6
 8003144:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003148:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800314a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800314c:	684a      	ldr	r2, [r1, #4]
 800314e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003150:	6203      	str	r3, [r0, #32]
 8003152:	bd70      	pop	{r4, r5, r6, pc}
 8003154:	40010000 	.word	0x40010000

08003158 <HAL_TIM_PWM_ConfigChannel>:
{
 8003158:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800315a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800315e:	2b01      	cmp	r3, #1
{
 8003160:	4604      	mov	r4, r0
 8003162:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003166:	d025      	beq.n	80031b4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8003168:	2301      	movs	r3, #1
 800316a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800316e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8003172:	2a0c      	cmp	r2, #12
 8003174:	d818      	bhi.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x50>
 8003176:	e8df f002 	tbb	[pc, r2]
 800317a:	1707      	.short	0x1707
 800317c:	171e1717 	.word	0x171e1717
 8003180:	172f1717 	.word	0x172f1717
 8003184:	1717      	.short	0x1717
 8003186:	40          	.byte	0x40
 8003187:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003188:	6820      	ldr	r0, [r4, #0]
 800318a:	f7ff fdbd 	bl	8002d08 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800318e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003190:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003192:	699a      	ldr	r2, [r3, #24]
 8003194:	f042 0208 	orr.w	r2, r2, #8
 8003198:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	f022 0204 	bic.w	r2, r2, #4
 80031a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031a2:	699a      	ldr	r2, [r3, #24]
 80031a4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031a6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80031a8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80031aa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80031ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80031b0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80031b4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031b6:	6820      	ldr	r0, [r4, #0]
 80031b8:	f7ff ff98 	bl	80030ec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031bc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031be:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031c8:	699a      	ldr	r2, [r3, #24]
 80031ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031d6:	e7e6      	b.n	80031a6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031d8:	6820      	ldr	r0, [r4, #0]
 80031da:	f7ff fdc7 	bl	8002d6c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031de:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031e0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031e2:	69da      	ldr	r2, [r3, #28]
 80031e4:	f042 0208 	orr.w	r2, r2, #8
 80031e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ea:	69da      	ldr	r2, [r3, #28]
 80031ec:	f022 0204 	bic.w	r2, r2, #4
 80031f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031f6:	61da      	str	r2, [r3, #28]
      break;
 80031f8:	e7d6      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031fa:	6820      	ldr	r0, [r4, #0]
 80031fc:	f7ff fdec 	bl	8002dd8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003200:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003202:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800320a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800320c:	69da      	ldr	r2, [r3, #28]
 800320e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003212:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800321a:	e7ec      	b.n	80031f6 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800321c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800321c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800321e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003220:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003222:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003226:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800322a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800322c:	6083      	str	r3, [r0, #8]
 800322e:	bd10      	pop	{r4, pc}

08003230 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003230:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003234:	2b01      	cmp	r3, #1
{
 8003236:	b570      	push	{r4, r5, r6, lr}
 8003238:	4604      	mov	r4, r0
 800323a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800323e:	d019      	beq.n	8003274 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8003240:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003244:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003246:	2301      	movs	r3, #1
 8003248:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800324c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800324e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003252:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003256:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003258:	680b      	ldr	r3, [r1, #0]
 800325a:	2b40      	cmp	r3, #64	; 0x40
 800325c:	d065      	beq.n	800332a <HAL_TIM_ConfigClockSource+0xfa>
 800325e:	d815      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x5c>
 8003260:	2b10      	cmp	r3, #16
 8003262:	d00c      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x4e>
 8003264:	d807      	bhi.n	8003276 <HAL_TIM_ConfigClockSource+0x46>
 8003266:	b153      	cbz	r3, 800327e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8003268:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800326a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800326c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003270:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003274:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003276:	2b20      	cmp	r3, #32
 8003278:	d001      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x4e>
 800327a:	2b30      	cmp	r3, #48	; 0x30
 800327c:	d1f4      	bne.n	8003268 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800327e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003280:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8003284:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003288:	4313      	orrs	r3, r2
 800328a:	e01a      	b.n	80032c2 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800328c:	2b60      	cmp	r3, #96	; 0x60
 800328e:	d034      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0xca>
 8003290:	d819      	bhi.n	80032c6 <HAL_TIM_ConfigClockSource+0x96>
 8003292:	2b50      	cmp	r3, #80	; 0x50
 8003294:	d1e8      	bne.n	8003268 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003296:	684a      	ldr	r2, [r1, #4]
 8003298:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800329a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800329c:	6a05      	ldr	r5, [r0, #32]
 800329e:	f025 0501 	bic.w	r5, r5, #1
 80032a2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032a6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032ae:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80032b2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80032b4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80032b6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80032b8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032be:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80032c2:	6083      	str	r3, [r0, #8]
 80032c4:	e7d0      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80032c6:	2b70      	cmp	r3, #112	; 0x70
 80032c8:	d00c      	beq.n	80032e4 <HAL_TIM_ConfigClockSource+0xb4>
 80032ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ce:	d1cb      	bne.n	8003268 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80032d0:	68cb      	ldr	r3, [r1, #12]
 80032d2:	684a      	ldr	r2, [r1, #4]
 80032d4:	6889      	ldr	r1, [r1, #8]
 80032d6:	f7ff ffa1 	bl	800321c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032da:	6822      	ldr	r2, [r4, #0]
 80032dc:	6893      	ldr	r3, [r2, #8]
 80032de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032e2:	e008      	b.n	80032f6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80032e4:	68cb      	ldr	r3, [r1, #12]
 80032e6:	684a      	ldr	r2, [r1, #4]
 80032e8:	6889      	ldr	r1, [r1, #8]
 80032ea:	f7ff ff97 	bl	800321c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032ee:	6822      	ldr	r2, [r4, #0]
 80032f0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032f6:	6093      	str	r3, [r2, #8]
      break;
 80032f8:	e7b6      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032fa:	684d      	ldr	r5, [r1, #4]
 80032fc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032fe:	6a01      	ldr	r1, [r0, #32]
 8003300:	f021 0110 	bic.w	r1, r1, #16
 8003304:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003306:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003308:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800330a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800330e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003312:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003316:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800331a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800331c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800331e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003324:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003328:	e7cb      	b.n	80032c2 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800332a:	684a      	ldr	r2, [r1, #4]
 800332c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800332e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003330:	6a05      	ldr	r5, [r0, #32]
 8003332:	f025 0501 	bic.w	r5, r5, #1
 8003336:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003338:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800333a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800333e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003342:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003346:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003348:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800334a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800334c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800334e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003352:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8003356:	e7b4      	b.n	80032c2 <HAL_TIM_ConfigClockSource+0x92>

08003358 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003358:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800335a:	f001 011f 	and.w	r1, r1, #31
{
 800335e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003360:	2401      	movs	r4, #1
 8003362:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003364:	ea23 0304 	bic.w	r3, r3, r4
 8003368:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800336a:	6a03      	ldr	r3, [r0, #32]
 800336c:	408a      	lsls	r2, r1
 800336e:	431a      	orrs	r2, r3
 8003370:	6202      	str	r2, [r0, #32]
 8003372:	bd10      	pop	{r4, pc}

08003374 <HAL_TIM_PWM_Start>:
{
 8003374:	b510      	push	{r4, lr}
 8003376:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003378:	2201      	movs	r2, #1
 800337a:	6800      	ldr	r0, [r0, #0]
 800337c:	f7ff ffec 	bl	8003358 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	4a0b      	ldr	r2, [pc, #44]	; (80033b0 <HAL_TIM_PWM_Start+0x3c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00e      	beq.n	80033a6 <HAL_TIM_PWM_Start+0x32>
 8003388:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800338c:	4293      	cmp	r3, r2
 800338e:	d00a      	beq.n	80033a6 <HAL_TIM_PWM_Start+0x32>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003396:	2a06      	cmp	r2, #6
 8003398:	d003      	beq.n	80033a2 <HAL_TIM_PWM_Start+0x2e>
    __HAL_TIM_ENABLE(htim);
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	f042 0201 	orr.w	r2, r2, #1
 80033a0:	601a      	str	r2, [r3, #0]
}
 80033a2:	2000      	movs	r0, #0
 80033a4:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80033a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
 80033ae:	e7ef      	b.n	8003390 <HAL_TIM_PWM_Start+0x1c>
 80033b0:	40010000 	.word	0x40010000

080033b4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80033b8:	2b01      	cmp	r3, #1
{
 80033ba:	b530      	push	{r4, r5, lr}
 80033bc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80033c0:	d014      	beq.n	80033ec <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033c2:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80033c8:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033ca:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033cc:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ce:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80033d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80033d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033d8:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033da:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033dc:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033de:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e6:	2300      	movs	r3, #0
 80033e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80033ec:	4618      	mov	r0, r3

  return HAL_OK;
}
 80033ee:	bd30      	pop	{r4, r5, pc}

080033f0 <HAL_TIMEx_CommutCallback>:
 80033f0:	4770      	bx	lr

080033f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033f2:	4770      	bx	lr

080033f4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f4:	6803      	ldr	r3, [r0, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033fc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fe:	695a      	ldr	r2, [r3, #20]
 8003400:	f022 0201 	bic.w	r2, r2, #1
 8003404:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003406:	2320      	movs	r3, #32
 8003408:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800340c:	4770      	bx	lr
	...

08003410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003414:	6806      	ldr	r6, [r0, #0]
 8003416:	68c2      	ldr	r2, [r0, #12]
 8003418:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800341a:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800341c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003420:	4313      	orrs	r3, r2
 8003422:	6133      	str	r3, [r6, #16]
{
 8003424:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003426:	6883      	ldr	r3, [r0, #8]
 8003428:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800342a:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800342c:	4303      	orrs	r3, r0
 800342e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003430:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003434:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003436:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800343a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 800343c:	4313      	orrs	r3, r2
 800343e:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003440:	6973      	ldr	r3, [r6, #20]
 8003442:	69a2      	ldr	r2, [r4, #24]
 8003444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003448:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800344a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800344e:	6173      	str	r3, [r6, #20]
 8003450:	4b7a      	ldr	r3, [pc, #488]	; (800363c <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003452:	d17c      	bne.n	800354e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003454:	429e      	cmp	r6, r3
 8003456:	d003      	beq.n	8003460 <UART_SetConfig+0x50>
 8003458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800345c:	429e      	cmp	r6, r3
 800345e:	d144      	bne.n	80034ea <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003460:	f7ff fbfc 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 8003464:	2519      	movs	r5, #25
 8003466:	fb05 f300 	mul.w	r3, r5, r0
 800346a:	6860      	ldr	r0, [r4, #4]
 800346c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003470:	0040      	lsls	r0, r0, #1
 8003472:	fbb3 f3f0 	udiv	r3, r3, r0
 8003476:	fbb3 f3f9 	udiv	r3, r3, r9
 800347a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800347e:	f7ff fbed 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 8003482:	6863      	ldr	r3, [r4, #4]
 8003484:	4368      	muls	r0, r5
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	fbb0 f7f3 	udiv	r7, r0, r3
 800348c:	f7ff fbe6 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 8003490:	6863      	ldr	r3, [r4, #4]
 8003492:	4368      	muls	r0, r5
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	fbb0 f3f3 	udiv	r3, r0, r3
 800349a:	fbb3 f3f9 	udiv	r3, r3, r9
 800349e:	fb09 7313 	mls	r3, r9, r3, r7
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	3332      	adds	r3, #50	; 0x32
 80034a6:	fbb3 f3f9 	udiv	r3, r3, r9
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80034b0:	f7ff fbd4 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 80034b4:	6862      	ldr	r2, [r4, #4]
 80034b6:	4368      	muls	r0, r5
 80034b8:	0052      	lsls	r2, r2, #1
 80034ba:	fbb0 faf2 	udiv	sl, r0, r2
 80034be:	f7ff fbcd 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80034c2:	6863      	ldr	r3, [r4, #4]
 80034c4:	4368      	muls	r0, r5
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80034cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80034d0:	fb09 a313 	mls	r3, r9, r3, sl
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	3332      	adds	r3, #50	; 0x32
 80034d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80034e2:	443b      	add	r3, r7
 80034e4:	60b3      	str	r3, [r6, #8]
 80034e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80034ea:	f7ff fba7 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 80034ee:	2519      	movs	r5, #25
 80034f0:	fb05 f300 	mul.w	r3, r5, r0
 80034f4:	6860      	ldr	r0, [r4, #4]
 80034f6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80034fa:	0040      	lsls	r0, r0, #1
 80034fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8003500:	fbb3 f3f9 	udiv	r3, r3, r9
 8003504:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003508:	f7ff fb98 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 800350c:	6863      	ldr	r3, [r4, #4]
 800350e:	4368      	muls	r0, r5
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	fbb0 f7f3 	udiv	r7, r0, r3
 8003516:	f7ff fb91 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 800351a:	6863      	ldr	r3, [r4, #4]
 800351c:	4368      	muls	r0, r5
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	fbb0 f3f3 	udiv	r3, r0, r3
 8003524:	fbb3 f3f9 	udiv	r3, r3, r9
 8003528:	fb09 7313 	mls	r3, r9, r3, r7
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	3332      	adds	r3, #50	; 0x32
 8003530:	fbb3 f3f9 	udiv	r3, r3, r9
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800353a:	f7ff fb7f 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 800353e:	6862      	ldr	r2, [r4, #4]
 8003540:	4368      	muls	r0, r5
 8003542:	0052      	lsls	r2, r2, #1
 8003544:	fbb0 faf2 	udiv	sl, r0, r2
 8003548:	f7ff fb78 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 800354c:	e7b9      	b.n	80034c2 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800354e:	429e      	cmp	r6, r3
 8003550:	d002      	beq.n	8003558 <UART_SetConfig+0x148>
 8003552:	4b3b      	ldr	r3, [pc, #236]	; (8003640 <UART_SetConfig+0x230>)
 8003554:	429e      	cmp	r6, r3
 8003556:	d140      	bne.n	80035da <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003558:	f7ff fb80 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 800355c:	6867      	ldr	r7, [r4, #4]
 800355e:	2519      	movs	r5, #25
 8003560:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003564:	fb05 f300 	mul.w	r3, r5, r0
 8003568:	00bf      	lsls	r7, r7, #2
 800356a:	fbb3 f3f7 	udiv	r3, r3, r7
 800356e:	fbb3 f3f9 	udiv	r3, r3, r9
 8003572:	011f      	lsls	r7, r3, #4
 8003574:	f7ff fb72 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 8003578:	6863      	ldr	r3, [r4, #4]
 800357a:	4368      	muls	r0, r5
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	fbb0 f8f3 	udiv	r8, r0, r3
 8003582:	f7ff fb6b 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 8003586:	6863      	ldr	r3, [r4, #4]
 8003588:	4368      	muls	r0, r5
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003590:	fbb3 f3f9 	udiv	r3, r3, r9
 8003594:	fb09 8313 	mls	r3, r9, r3, r8
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	3332      	adds	r3, #50	; 0x32
 800359c:	fbb3 f3f9 	udiv	r3, r3, r9
 80035a0:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80035a4:	f7ff fb5a 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 80035a8:	6862      	ldr	r2, [r4, #4]
 80035aa:	4368      	muls	r0, r5
 80035ac:	0092      	lsls	r2, r2, #2
 80035ae:	fbb0 faf2 	udiv	sl, r0, r2
 80035b2:	f7ff fb53 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80035b6:	6863      	ldr	r3, [r4, #4]
 80035b8:	4368      	muls	r0, r5
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80035c4:	fb09 a313 	mls	r3, r9, r3, sl
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	3332      	adds	r3, #50	; 0x32
 80035cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	ea43 0308 	orr.w	r3, r3, r8
 80035d8:	e783      	b.n	80034e2 <UART_SetConfig+0xd2>
 80035da:	f7ff fb2f 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 80035de:	6867      	ldr	r7, [r4, #4]
 80035e0:	2519      	movs	r5, #25
 80035e2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80035e6:	fb05 f300 	mul.w	r3, r5, r0
 80035ea:	00bf      	lsls	r7, r7, #2
 80035ec:	fbb3 f3f7 	udiv	r3, r3, r7
 80035f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80035f4:	011f      	lsls	r7, r3, #4
 80035f6:	f7ff fb21 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 80035fa:	6863      	ldr	r3, [r4, #4]
 80035fc:	4368      	muls	r0, r5
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	fbb0 f8f3 	udiv	r8, r0, r3
 8003604:	f7ff fb1a 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8003608:	6863      	ldr	r3, [r4, #4]
 800360a:	4368      	muls	r0, r5
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003612:	fbb3 f3f9 	udiv	r3, r3, r9
 8003616:	fb09 8313 	mls	r3, r9, r3, r8
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	3332      	adds	r3, #50	; 0x32
 800361e:	fbb3 f3f9 	udiv	r3, r3, r9
 8003622:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003626:	f7ff fb09 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 800362a:	6862      	ldr	r2, [r4, #4]
 800362c:	4368      	muls	r0, r5
 800362e:	0092      	lsls	r2, r2, #2
 8003630:	fbb0 faf2 	udiv	sl, r0, r2
 8003634:	f7ff fb02 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8003638:	e7bd      	b.n	80035b6 <UART_SetConfig+0x1a6>
 800363a:	bf00      	nop
 800363c:	40011000 	.word	0x40011000
 8003640:	40011400 	.word	0x40011400

08003644 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003646:	4604      	mov	r4, r0
 8003648:	460e      	mov	r6, r1
 800364a:	4617      	mov	r7, r2
 800364c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364e:	6821      	ldr	r1, [r4, #0]
 8003650:	680b      	ldr	r3, [r1, #0]
 8003652:	ea36 0303 	bics.w	r3, r6, r3
 8003656:	d101      	bne.n	800365c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003658:	2000      	movs	r0, #0
}
 800365a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800365c:	1c6b      	adds	r3, r5, #1
 800365e:	d0f7      	beq.n	8003650 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003660:	b995      	cbnz	r5, 8003688 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800366a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003674:	2320      	movs	r3, #32
 8003676:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800367a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800367e:	2300      	movs	r3, #0
 8003680:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8003684:	2003      	movs	r0, #3
 8003686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003688:	f7fd fc76 	bl	8000f78 <HAL_GetTick>
 800368c:	1bc0      	subs	r0, r0, r7
 800368e:	4285      	cmp	r5, r0
 8003690:	d2dd      	bcs.n	800364e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8003692:	e7e6      	b.n	8003662 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08003694 <HAL_UART_Init>:
{
 8003694:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003696:	4604      	mov	r4, r0
 8003698:	b340      	cbz	r0, 80036ec <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800369a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800369e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036a2:	b91b      	cbnz	r3, 80036ac <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80036a4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80036a8:	f009 fb50 	bl	800cd4c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80036ac:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80036ae:	2324      	movs	r3, #36	; 0x24
 80036b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80036b4:	68d3      	ldr	r3, [r2, #12]
 80036b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ba:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80036bc:	4620      	mov	r0, r4
 80036be:	f7ff fea7 	bl	8003410 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036d2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036da:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036dc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80036de:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80036e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80036e6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80036ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80036ec:	2001      	movs	r0, #1
}
 80036ee:	bd10      	pop	{r4, pc}

080036f0 <HAL_UART_Transmit>:
{
 80036f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036f4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80036f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80036fa:	2b20      	cmp	r3, #32
{
 80036fc:	4604      	mov	r4, r0
 80036fe:	460d      	mov	r5, r1
 8003700:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003702:	d14f      	bne.n	80037a4 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8003704:	2900      	cmp	r1, #0
 8003706:	d04a      	beq.n	800379e <HAL_UART_Transmit+0xae>
 8003708:	2a00      	cmp	r2, #0
 800370a:	d048      	beq.n	800379e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800370c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003710:	2b01      	cmp	r3, #1
 8003712:	d047      	beq.n	80037a4 <HAL_UART_Transmit+0xb4>
 8003714:	2301      	movs	r3, #1
 8003716:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371a:	2300      	movs	r3, #0
 800371c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800371e:	2321      	movs	r3, #33	; 0x21
 8003720:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003724:	f7fd fc28 	bl	8000f78 <HAL_GetTick>
    huart->TxXferSize = Size;
 8003728:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800372c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800372e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003732:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003734:	b29b      	uxth	r3, r3
 8003736:	b96b      	cbnz	r3, 8003754 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003738:	463b      	mov	r3, r7
 800373a:	4632      	mov	r2, r6
 800373c:	2140      	movs	r1, #64	; 0x40
 800373e:	4620      	mov	r0, r4
 8003740:	f7ff ff80 	bl	8003644 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003744:	b9b0      	cbnz	r0, 8003774 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8003746:	2320      	movs	r3, #32
 8003748:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800374c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8003750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8003754:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003756:	3b01      	subs	r3, #1
 8003758:	b29b      	uxth	r3, r3
 800375a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800375c:	68a3      	ldr	r3, [r4, #8]
 800375e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003762:	4632      	mov	r2, r6
 8003764:	463b      	mov	r3, r7
 8003766:	f04f 0180 	mov.w	r1, #128	; 0x80
 800376a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800376c:	d10e      	bne.n	800378c <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800376e:	f7ff ff69 	bl	8003644 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003772:	b110      	cbz	r0, 800377a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8003774:	2003      	movs	r0, #3
 8003776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800377a:	882b      	ldrh	r3, [r5, #0]
 800377c:	6822      	ldr	r2, [r4, #0]
 800377e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003782:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003784:	6923      	ldr	r3, [r4, #16]
 8003786:	b943      	cbnz	r3, 800379a <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8003788:	3502      	adds	r5, #2
 800378a:	e7d2      	b.n	8003732 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800378c:	f7ff ff5a 	bl	8003644 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003790:	2800      	cmp	r0, #0
 8003792:	d1ef      	bne.n	8003774 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	782a      	ldrb	r2, [r5, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	3501      	adds	r5, #1
 800379c:	e7c9      	b.n	8003732 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800379e:	2001      	movs	r0, #1
 80037a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80037a4:	2002      	movs	r0, #2
}
 80037a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080037aa <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 80037aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d118      	bne.n	80037e4 <HAL_UART_Transmit_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 80037b2:	b1a9      	cbz	r1, 80037e0 <HAL_UART_Transmit_IT+0x36>
 80037b4:	b1a2      	cbz	r2, 80037e0 <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 80037b6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d012      	beq.n	80037e4 <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 80037be:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->pTxBuffPtr = pData;
 80037c0:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 80037c2:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c4:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80037c6:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ca:	2221      	movs	r2, #33	; 0x21
 80037cc:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80037d0:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 80037d2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80037d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037da:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80037dc:	4618      	mov	r0, r3
 80037de:	4770      	bx	lr
      return HAL_ERROR;
 80037e0:	2001      	movs	r0, #1
 80037e2:	4770      	bx	lr
    return HAL_BUSY;
 80037e4:	2002      	movs	r0, #2
}
 80037e6:	4770      	bx	lr

080037e8 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80037e8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d120      	bne.n	8003832 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80037f0:	b1e9      	cbz	r1, 800382e <HAL_UART_Receive_IT+0x46>
 80037f2:	b1e2      	cbz	r2, 800382e <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80037f4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d01a      	beq.n	8003832 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80037fc:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80037fe:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003800:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003802:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003804:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003806:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800380a:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 800380c:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800380e:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8003810:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003814:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003818:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800381a:	6951      	ldr	r1, [r2, #20]
 800381c:	f041 0101 	orr.w	r1, r1, #1
 8003820:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003822:	68d1      	ldr	r1, [r2, #12]
 8003824:	f041 0120 	orr.w	r1, r1, #32
 8003828:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 800382a:	4618      	mov	r0, r3
 800382c:	4770      	bx	lr
      return HAL_ERROR;
 800382e:	2001      	movs	r0, #1
 8003830:	4770      	bx	lr
    return HAL_BUSY;
 8003832:	2002      	movs	r0, #2
}
 8003834:	4770      	bx	lr

08003836 <HAL_UART_TxCpltCallback>:
 8003836:	4770      	bx	lr

08003838 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003838:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800383c:	2b22      	cmp	r3, #34	; 0x22
{
 800383e:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003840:	d136      	bne.n	80038b0 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003842:	6883      	ldr	r3, [r0, #8]
 8003844:	6901      	ldr	r1, [r0, #16]
 8003846:	6802      	ldr	r2, [r0, #0]
 8003848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800384e:	d123      	bne.n	8003898 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003850:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003852:	b9e9      	cbnz	r1, 8003890 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003858:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800385c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800385e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8003860:	3c01      	subs	r4, #1
 8003862:	b2a4      	uxth	r4, r4
 8003864:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8003866:	b98c      	cbnz	r4, 800388c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003868:	6803      	ldr	r3, [r0, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	f022 0220 	bic.w	r2, r2, #32
 8003870:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003878:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	f022 0201 	bic.w	r2, r2, #1
 8003880:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003882:	2320      	movs	r3, #32
 8003884:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003888:	f008 fdac 	bl	800c3e4 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800388c:	2000      	movs	r0, #0
}
 800388e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	f823 2b01 	strh.w	r2, [r3], #1
 8003896:	e7e1      	b.n	800385c <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003898:	b921      	cbnz	r1, 80038a4 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800389a:	1c59      	adds	r1, r3, #1
 800389c:	6852      	ldr	r2, [r2, #4]
 800389e:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	e7dc      	b.n	800385e <UART_Receive_IT+0x26>
 80038a4:	6852      	ldr	r2, [r2, #4]
 80038a6:	1c59      	adds	r1, r3, #1
 80038a8:	6281      	str	r1, [r0, #40]	; 0x28
 80038aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038ae:	e7f7      	b.n	80038a0 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80038b0:	2002      	movs	r0, #2
 80038b2:	bd10      	pop	{r4, pc}

080038b4 <HAL_UART_ErrorCallback>:
 80038b4:	4770      	bx	lr
	...

080038b8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038b8:	6803      	ldr	r3, [r0, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038bc:	68d9      	ldr	r1, [r3, #12]
{
 80038be:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80038c0:	0716      	lsls	r6, r2, #28
{
 80038c2:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038c4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80038c6:	d107      	bne.n	80038d8 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038c8:	0696      	lsls	r6, r2, #26
 80038ca:	d55a      	bpl.n	8003982 <HAL_UART_IRQHandler+0xca>
 80038cc:	068d      	lsls	r5, r1, #26
 80038ce:	d558      	bpl.n	8003982 <HAL_UART_IRQHandler+0xca>
}
 80038d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80038d4:	f7ff bfb0 	b.w	8003838 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038d8:	f015 0501 	ands.w	r5, r5, #1
 80038dc:	d102      	bne.n	80038e4 <HAL_UART_IRQHandler+0x2c>
 80038de:	f411 7f90 	tst.w	r1, #288	; 0x120
 80038e2:	d04e      	beq.n	8003982 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038e4:	07d3      	lsls	r3, r2, #31
 80038e6:	d505      	bpl.n	80038f4 <HAL_UART_IRQHandler+0x3c>
 80038e8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ea:	bf42      	ittt	mi
 80038ec:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80038ee:	f043 0301 	orrmi.w	r3, r3, #1
 80038f2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038f4:	0750      	lsls	r0, r2, #29
 80038f6:	d504      	bpl.n	8003902 <HAL_UART_IRQHandler+0x4a>
 80038f8:	b11d      	cbz	r5, 8003902 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038fc:	f043 0302 	orr.w	r3, r3, #2
 8003900:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003902:	0793      	lsls	r3, r2, #30
 8003904:	d504      	bpl.n	8003910 <HAL_UART_IRQHandler+0x58>
 8003906:	b11d      	cbz	r5, 8003910 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003908:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800390a:	f043 0304 	orr.w	r3, r3, #4
 800390e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003910:	0716      	lsls	r6, r2, #28
 8003912:	d504      	bpl.n	800391e <HAL_UART_IRQHandler+0x66>
 8003914:	b11d      	cbz	r5, 800391e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003916:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003918:	f043 0308 	orr.w	r3, r3, #8
 800391c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800391e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d066      	beq.n	80039f2 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003924:	0695      	lsls	r5, r2, #26
 8003926:	d504      	bpl.n	8003932 <HAL_UART_IRQHandler+0x7a>
 8003928:	0688      	lsls	r0, r1, #26
 800392a:	d502      	bpl.n	8003932 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800392c:	4620      	mov	r0, r4
 800392e:	f7ff ff83 	bl	8003838 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003936:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003938:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800393a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800393c:	d402      	bmi.n	8003944 <HAL_UART_IRQHandler+0x8c>
 800393e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003942:	d01a      	beq.n	800397a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8003944:	f7ff fd56 	bl	80033f4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	695a      	ldr	r2, [r3, #20]
 800394c:	0652      	lsls	r2, r2, #25
 800394e:	d510      	bpl.n	8003972 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003950:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003952:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003958:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800395a:	b150      	cbz	r0, 8003972 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <HAL_UART_IRQHandler+0x13c>)
 800395e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003960:	f7fd fdb3 	bl	80014ca <HAL_DMA_Abort_IT>
 8003964:	2800      	cmp	r0, #0
 8003966:	d044      	beq.n	80039f2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003968:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800396a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800396e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003970:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003972:	4620      	mov	r0, r4
 8003974:	f7ff ff9e 	bl	80038b4 <HAL_UART_ErrorCallback>
 8003978:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800397a:	f7ff ff9b 	bl	80038b4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003980:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003982:	0616      	lsls	r6, r2, #24
 8003984:	d527      	bpl.n	80039d6 <HAL_UART_IRQHandler+0x11e>
 8003986:	060d      	lsls	r5, r1, #24
 8003988:	d525      	bpl.n	80039d6 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800398a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800398e:	2a21      	cmp	r2, #33	; 0x21
 8003990:	d12f      	bne.n	80039f2 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003992:	68a2      	ldr	r2, [r4, #8]
 8003994:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003998:	6a22      	ldr	r2, [r4, #32]
 800399a:	d117      	bne.n	80039cc <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800399c:	8811      	ldrh	r1, [r2, #0]
 800399e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80039a2:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039a4:	6921      	ldr	r1, [r4, #16]
 80039a6:	b979      	cbnz	r1, 80039c8 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80039a8:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80039aa:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80039ac:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80039ae:	3a01      	subs	r2, #1
 80039b0:	b292      	uxth	r2, r2
 80039b2:	84e2      	strh	r2, [r4, #38]	; 0x26
 80039b4:	b9ea      	cbnz	r2, 80039f2 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039bc:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80039c8:	3201      	adds	r2, #1
 80039ca:	e7ee      	b.n	80039aa <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039cc:	1c51      	adds	r1, r2, #1
 80039ce:	6221      	str	r1, [r4, #32]
 80039d0:	7812      	ldrb	r2, [r2, #0]
 80039d2:	605a      	str	r2, [r3, #4]
 80039d4:	e7ea      	b.n	80039ac <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039d6:	0650      	lsls	r0, r2, #25
 80039d8:	d50b      	bpl.n	80039f2 <HAL_UART_IRQHandler+0x13a>
 80039da:	064a      	lsls	r2, r1, #25
 80039dc:	d509      	bpl.n	80039f2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80039e6:	2320      	movs	r3, #32
 80039e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80039ec:	4620      	mov	r0, r4
 80039ee:	f7ff ff22 	bl	8003836 <HAL_UART_TxCpltCallback>
 80039f2:	bd70      	pop	{r4, r5, r6, pc}
 80039f4:	080039f9 	.word	0x080039f9

080039f8 <UART_DMAAbortOnError>:
{
 80039f8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a00:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003a02:	f7ff ff57 	bl	80038b4 <HAL_UART_ErrorCallback>
 8003a06:	bd08      	pop	{r3, pc}

08003a08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003a08:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8003a0e:	2003      	movs	r0, #3
 8003a10:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a12:	6902      	ldr	r2, [r0, #16]
 8003a14:	2a00      	cmp	r2, #0
 8003a16:	daf8      	bge.n	8003a0a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a18:	6903      	ldr	r3, [r0, #16]
 8003a1a:	4a06      	ldr	r2, [pc, #24]	; (8003a34 <USB_CoreReset+0x2c>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8003a22:	3a01      	subs	r2, #1
 8003a24:	d0f3      	beq.n	8003a0e <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003a26:	6903      	ldr	r3, [r0, #16]
 8003a28:	f013 0301 	ands.w	r3, r3, #1
 8003a2c:	d1f9      	bne.n	8003a22 <USB_CoreReset+0x1a>

  return HAL_OK;
 8003a2e:	4618      	mov	r0, r3
}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	00030d41 	.word	0x00030d41

08003a38 <USB_CoreInit>:
{
 8003a38:	b084      	sub	sp, #16
 8003a3a:	b538      	push	{r3, r4, r5, lr}
 8003a3c:	ad05      	add	r5, sp, #20
 8003a3e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a44:	2b01      	cmp	r3, #1
{
 8003a46:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a48:	d125      	bne.n	8003a96 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a50:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a52:	68c3      	ldr	r3, [r0, #12]
 8003a54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a5c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a5e:	68c3      	ldr	r3, [r0, #12]
 8003a60:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003a64:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8003a66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a68:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a6a:	bf02      	ittt	eq
 8003a6c:	68c3      	ldreq	r3, [r0, #12]
 8003a6e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8003a72:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8003a74:	f7ff ffc8 	bl	8003a08 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8003a78:	9b08      	ldr	r3, [sp, #32]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d107      	bne.n	8003a8e <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a7e:	68a3      	ldr	r3, [r4, #8]
 8003a80:	f043 0306 	orr.w	r3, r3, #6
 8003a84:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a86:	68a3      	ldr	r3, [r4, #8]
 8003a88:	f043 0320 	orr.w	r3, r3, #32
 8003a8c:	60a3      	str	r3, [r4, #8]
}
 8003a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a92:	b004      	add	sp, #16
 8003a94:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a96:	68c3      	ldr	r3, [r0, #12]
 8003a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a9c:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8003a9e:	f7ff ffb3 	bl	8003a08 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8003aa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003aa4:	b923      	cbnz	r3, 8003ab0 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003aa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003aac:	63a3      	str	r3, [r4, #56]	; 0x38
 8003aae:	e7e3      	b.n	8003a78 <USB_CoreInit+0x40>
 8003ab0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab6:	e7f9      	b.n	8003aac <USB_CoreInit+0x74>

08003ab8 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003ab8:	6883      	ldr	r3, [r0, #8]
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	6083      	str	r3, [r0, #8]
}
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	4770      	bx	lr

08003ac4 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ac4:	6883      	ldr	r3, [r0, #8]
 8003ac6:	f023 0301 	bic.w	r3, r3, #1
 8003aca:	6083      	str	r3, [r0, #8]
}
 8003acc:	2000      	movs	r0, #0
 8003ace:	4770      	bx	lr

08003ad0 <USB_SetCurrentMode>:
{
 8003ad0:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ad2:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003ad4:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ad6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003ada:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003adc:	d108      	bne.n	8003af0 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ade:	68c3      	ldr	r3, [r0, #12]
 8003ae0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ae4:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8003ae6:	2032      	movs	r0, #50	; 0x32
 8003ae8:	f7fd fa4c 	bl	8000f84 <HAL_Delay>
  return HAL_OK;
 8003aec:	2000      	movs	r0, #0
 8003aee:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8003af0:	b919      	cbnz	r1, 8003afa <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003af2:	68c3      	ldr	r3, [r0, #12]
 8003af4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003af8:	e7f4      	b.n	8003ae4 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8003afa:	2001      	movs	r0, #1
}
 8003afc:	bd08      	pop	{r3, pc}
	...

08003b00 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b00:	0189      	lsls	r1, r1, #6
 8003b02:	f041 0120 	orr.w	r1, r1, #32
 8003b06:	4a06      	ldr	r2, [pc, #24]	; (8003b20 <USB_FlushTxFifo+0x20>)
 8003b08:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8003b0a:	3a01      	subs	r2, #1
 8003b0c:	d005      	beq.n	8003b1a <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b0e:	6903      	ldr	r3, [r0, #16]
 8003b10:	f013 0320 	ands.w	r3, r3, #32
 8003b14:	d1f9      	bne.n	8003b0a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8003b16:	4618      	mov	r0, r3
 8003b18:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003b1a:	2003      	movs	r0, #3
}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	00030d41 	.word	0x00030d41

08003b24 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b24:	2310      	movs	r3, #16
 8003b26:	4a06      	ldr	r2, [pc, #24]	; (8003b40 <USB_FlushRxFifo+0x1c>)
 8003b28:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8003b2a:	3a01      	subs	r2, #1
 8003b2c:	d005      	beq.n	8003b3a <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b2e:	6903      	ldr	r3, [r0, #16]
 8003b30:	f013 0310 	ands.w	r3, r3, #16
 8003b34:	d1f9      	bne.n	8003b2a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8003b36:	4618      	mov	r0, r3
 8003b38:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003b3a:	2003      	movs	r0, #3
}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	00030d41 	.word	0x00030d41

08003b44 <USB_WritePacket>:
{
 8003b44:	b510      	push	{r4, lr}
 8003b46:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8003b4a:	b94c      	cbnz	r4, 8003b60 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003b4c:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003b4e:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8003b52:	f023 0303 	bic.w	r3, r3, #3
 8003b56:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003b5a:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8003b5c:	4299      	cmp	r1, r3
 8003b5e:	d101      	bne.n	8003b64 <USB_WritePacket+0x20>
}
 8003b60:	2000      	movs	r0, #0
 8003b62:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003b64:	f851 2b04 	ldr.w	r2, [r1], #4
 8003b68:	6002      	str	r2, [r0, #0]
 8003b6a:	e7f7      	b.n	8003b5c <USB_WritePacket+0x18>

08003b6c <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003b6c:	3203      	adds	r2, #3
 8003b6e:	f022 0203 	bic.w	r2, r2, #3
 8003b72:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003b74:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8003b78:	4291      	cmp	r1, r2
 8003b7a:	d101      	bne.n	8003b80 <USB_ReadPacket+0x14>
}
 8003b7c:	4608      	mov	r0, r1
 8003b7e:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003b80:	6803      	ldr	r3, [r0, #0]
 8003b82:	f841 3b04 	str.w	r3, [r1], #4
 8003b86:	e7f7      	b.n	8003b78 <USB_ReadPacket+0xc>

08003b88 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003b88:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003b8a:	6980      	ldr	r0, [r0, #24]
}
 8003b8c:	4010      	ands	r0, r2
 8003b8e:	4770      	bx	lr

08003b90 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003b90:	6940      	ldr	r0, [r0, #20]
}
 8003b92:	f000 0001 	and.w	r0, r0, #1
 8003b96:	4770      	bx	lr

08003b98 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003b98:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8003b9c:	f023 0303 	bic.w	r3, r3, #3
{
 8003ba0:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003ba2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003ba6:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8003baa:	f001 0303 	and.w	r3, r1, #3
 8003bae:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 8003bb0:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003bb2:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003bb6:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8003bba:	d104      	bne.n	8003bc6 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8003bbc:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8003bc0:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8003bc6:	2902      	cmp	r1, #2
 8003bc8:	d1fb      	bne.n	8003bc2 <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 8003bca:	f241 7370 	movw	r3, #6000	; 0x1770
 8003bce:	e7f7      	b.n	8003bc0 <USB_InitFSLSPClkSel+0x28>

08003bd0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8003bd2:	2500      	movs	r5, #0
 8003bd4:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003bd6:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003bda:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003bdc:	9b01      	ldr	r3, [sp, #4]
 8003bde:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003be2:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003be4:	9b01      	ldr	r3, [sp, #4]
 8003be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003bea:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003bec:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8003bf0:	2064      	movs	r0, #100	; 0x64
 8003bf2:	f7fd f9c7 	bl	8000f84 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003bf6:	9b01      	ldr	r3, [sp, #4]
 8003bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bfc:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8003c00:	200a      	movs	r0, #10
 8003c02:	f7fd f9bf 	bl	8000f84 <HAL_Delay>

  return HAL_OK;
}
 8003c06:	4628      	mov	r0, r5
 8003c08:	b003      	add	sp, #12
 8003c0a:	bd30      	pop	{r4, r5, pc}

08003c0c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003c0c:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003c12:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003c16:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003c18:	9b01      	ldr	r3, [sp, #4]
 8003c1a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c1e:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003c20:	9b01      	ldr	r3, [sp, #4]
 8003c22:	04da      	lsls	r2, r3, #19
 8003c24:	d406      	bmi.n	8003c34 <USB_DriveVbus+0x28>
 8003c26:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003c28:	bf02      	ittt	eq
 8003c2a:	9b01      	ldreq	r3, [sp, #4]
 8003c2c:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003c30:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003c34:	9b01      	ldr	r3, [sp, #4]
 8003c36:	04db      	lsls	r3, r3, #19
 8003c38:	d505      	bpl.n	8003c46 <USB_DriveVbus+0x3a>
 8003c3a:	b921      	cbnz	r1, 8003c46 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003c3c:	9b01      	ldr	r3, [sp, #4]
 8003c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c42:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8003c46:	2000      	movs	r0, #0
 8003c48:	b002      	add	sp, #8
 8003c4a:	4770      	bx	lr

08003c4c <USB_HostInit>:
{
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	b538      	push	{r3, r4, r5, lr}
 8003c50:	4604      	mov	r4, r0
 8003c52:	a805      	add	r0, sp, #20
 8003c54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003c5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c64:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003c66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c68:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003c6c:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003c6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c74:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003c76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c78:	05da      	lsls	r2, r3, #23
 8003c7a:	d53f      	bpl.n	8003cfc <USB_HostInit+0xb0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8003c7c:	9b07      	ldr	r3, [sp, #28]
 8003c7e:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003c80:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8003c84:	d13c      	bne.n	8003d00 <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003c86:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003c8a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003c8e:	2110      	movs	r1, #16
 8003c90:	4620      	mov	r0, r4
 8003c92:	f7ff ff35 	bl	8003b00 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003c96:	4620      	mov	r0, r4
 8003c98:	f7ff ff44 	bl	8003b24 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	9906      	ldr	r1, [sp, #24]
 8003ca0:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003ca4:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8003ca8:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8003caa:	428b      	cmp	r3, r1
 8003cac:	d12b      	bne.n	8003d06 <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 8003cae:	2101      	movs	r1, #1
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	f7ff ffab 	bl	8003c0c <USB_DriveVbus>
  HAL_Delay(200U);
 8003cb6:	20c8      	movs	r0, #200	; 0xc8
 8003cb8:	f7fd f964 	bl	8000f84 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc4:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003cc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003cc8:	05db      	lsls	r3, r3, #23
 8003cca:	d521      	bpl.n	8003d10 <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 8003ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cd0:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003cd2:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003cd8:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003cda:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8003cde:	9b08      	ldr	r3, [sp, #32]
 8003ce0:	b91b      	cbnz	r3, 8003cea <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ce2:	69a3      	ldr	r3, [r4, #24]
 8003ce4:	f043 0310 	orr.w	r3, r3, #16
 8003ce8:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003cea:	69a2      	ldr	r2, [r4, #24]
 8003cec:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <USB_HostInit+0xd8>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61a3      	str	r3, [r4, #24]
}
 8003cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	b004      	add	sp, #16
 8003cfa:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003cfc:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8003d00:	f023 0304 	bic.w	r3, r3, #4
 8003d04:	e7c1      	b.n	8003c8a <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003d06:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003d08:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8003d0a:	60d5      	str	r5, [r2, #12]
 8003d0c:	3220      	adds	r2, #32
 8003d0e:	e7cc      	b.n	8003caa <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003d14:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8003d18:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003d1a:	4b03      	ldr	r3, [pc, #12]	; (8003d28 <USB_HostInit+0xdc>)
 8003d1c:	e7dd      	b.n	8003cda <USB_HostInit+0x8e>
 8003d1e:	bf00      	nop
 8003d20:	00e00300 	.word	0x00e00300
 8003d24:	a3200008 	.word	0xa3200008
 8003d28:	004000e0 	.word	0x004000e0

08003d2c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003d2c:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003d32:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003d36:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003d38:	9801      	ldr	r0, [sp, #4]
}
 8003d3a:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8003d3e:	b002      	add	sp, #8
 8003d40:	4770      	bx	lr

08003d42 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003d42:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003d46:	6880      	ldr	r0, [r0, #8]
}
 8003d48:	b280      	uxth	r0, r0
 8003d4a:	4770      	bx	lr

08003d4c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8003d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003d50:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8003d54:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
{
 8003d58:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8003d5c:	4605      	mov	r5, r0
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d62:	60a0      	str	r0, [r4, #8]
 8003d64:	fa4f f882 	sxtb.w	r8, r2
 8003d68:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 8003d6c:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003d70:	2e03      	cmp	r6, #3
 8003d72:	d86c      	bhi.n	8003e4e <USB_HC_Init+0x102>
 8003d74:	e8df f006 	tbb	[pc, r6]
 8003d78:	4c026102 	.word	0x4c026102
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003d7c:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003d80:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003d84:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8003d86:	da03      	bge.n	8003d90 <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003d88:	68e1      	ldr	r1, [r4, #12]
 8003d8a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003d8e:	e005      	b.n	8003d9c <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8003d90:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8003d92:	05c9      	lsls	r1, r1, #23
 8003d94:	d542      	bpl.n	8003e1c <USB_HC_Init+0xd0>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003d96:	68e1      	ldr	r1, [r4, #12]
 8003d98:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8003d9c:	60e1      	str	r1, [r4, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d9e:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003da0:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8003da4:	2101      	movs	r1, #1
 8003da6:	fa01 f10e 	lsl.w	r1, r1, lr
 8003daa:	4321      	orrs	r1, r4
 8003dac:	f8cc 1018 	str.w	r1, [ip, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003db0:	69a9      	ldr	r1, [r5, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8003db2:	f1b8 0f00 	cmp.w	r8, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003db6:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003dba:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8003dbc:	bfb4      	ite	lt
 8003dbe:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 8003dc2:	2400      	movge	r4, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003dc4:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    HCcharLowSpeed = 0U;
 8003dc8:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003dcc:	059b      	lsls	r3, r3, #22
 8003dce:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003dd2:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003dd6:	02d2      	lsls	r2, r2, #11
 8003dd8:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003ddc:	432b      	orrs	r3, r5
 8003dde:	4313      	orrs	r3, r2
 8003de0:	04b2      	lsls	r2, r6, #18
 8003de2:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    HCcharLowSpeed = 0U;
 8003de6:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003de8:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = 0U;
 8003dec:	bf0c      	ite	eq
 8003dee:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 8003df2:	2100      	movne	r1, #0
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003df4:	4323      	orrs	r3, r4
 8003df6:	430b      	orrs	r3, r1

  if (ep_type == EP_TYPE_INTR)
 8003df8:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003dfa:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8003dfe:	d128      	bne.n	8003e52 <USB_HC_Init+0x106>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8003e00:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8003e04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e08:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 8003e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003e10:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8003e14:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003e18:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8003e1a:	dbb5      	blt.n	8003d88 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003e1c:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8003e20:	2101      	movs	r1, #1
 8003e22:	fa01 f10e 	lsl.w	r1, r1, lr
 8003e26:	4301      	orrs	r1, r0
 8003e28:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003e2c:	69a9      	ldr	r1, [r5, #24]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e2e:	2000      	movs	r0, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003e30:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003e34:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8003e36:	4604      	mov	r4, r0
 8003e38:	e7c4      	b.n	8003dc4 <USB_HC_Init+0x78>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003e3a:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8003e3e:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003e42:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8003e44:	daea      	bge.n	8003e1c <USB_HC_Init+0xd0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003e46:	68e1      	ldr	r1, [r4, #12]
 8003e48:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8003e4c:	e7a6      	b.n	8003d9c <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 8003e4e:	2001      	movs	r0, #1
 8003e50:	e7a6      	b.n	8003da0 <USB_HC_Init+0x54>
}
 8003e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e56 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003e56:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003e5a:	6940      	ldr	r0, [r0, #20]
}
 8003e5c:	b280      	uxth	r0, r0
 8003e5e:	4770      	bx	lr

08003e60 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003e60:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003e64:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8003e68:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003e6c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003e70:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003e74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e78:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003e7c:	d11e      	bne.n	8003ebc <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003e7e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003e80:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003e84:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003e88:	d137      	bne.n	8003efa <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003e8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e8e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003e92:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003e96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e9a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003e9e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003ea2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ea6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8003eaa:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	d002      	beq.n	8003eb8 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003eb2:	6811      	ldr	r1, [r2, #0]
 8003eb4:	2900      	cmp	r1, #0
 8003eb6:	dbfa      	blt.n	8003eae <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8003eb8:	2000      	movs	r0, #0
 8003eba:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003ebc:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8003ec0:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003ec4:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003ec8:	d117      	bne.n	8003efa <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003eca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ece:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003ed2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003ed6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003eda:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003ede:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003ee2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ee6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8003eea:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	d0e2      	beq.n	8003eb8 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003ef2:	6811      	ldr	r1, [r2, #0]
 8003ef4:	2900      	cmp	r1, #0
 8003ef6:	dbfa      	blt.n	8003eee <USB_HC_Halt+0x8e>
 8003ef8:	e7de      	b.n	8003eb8 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003efe:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8003f02:	e7d9      	b.n	8003eb8 <USB_HC_Halt+0x58>

08003f04 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003f04:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003f08:	4a06      	ldr	r2, [pc, #24]	; (8003f24 <USB_DoPing+0x20>)
 8003f0a:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f0e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f1a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8003f1e:	2000      	movs	r0, #0
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	80080000 	.word	0x80080000

08003f28 <USB_HC_StartXfer>:
{
 8003f28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003f2c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003f2e:	05db      	lsls	r3, r3, #23
{
 8003f30:	4616      	mov	r6, r2
 8003f32:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8003f34:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003f36:	d517      	bpl.n	8003f68 <USB_HC_StartXfer+0x40>
 8003f38:	790d      	ldrb	r5, [r1, #4]
 8003f3a:	b9ad      	cbnz	r5, 8003f68 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8003f3c:	b94e      	cbnz	r6, 8003f52 <USB_HC_StartXfer+0x2a>
 8003f3e:	794b      	ldrb	r3, [r1, #5]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d111      	bne.n	8003f68 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 8003f44:	4611      	mov	r1, r2
 8003f46:	f7ff ffdd 	bl	8003f04 <USB_DoPing>
}
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	b002      	add	sp, #8
 8003f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 8003f52:	2e01      	cmp	r6, #1
 8003f54:	d108      	bne.n	8003f68 <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003f56:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8003f5a:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8003f5e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8003f62:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 8003f66:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 8003f68:	6908      	ldr	r0, [r1, #16]
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d066      	beq.n	800403c <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003f6e:	890b      	ldrh	r3, [r1, #8]
 8003f70:	3801      	subs	r0, #1
 8003f72:	4418      	add	r0, r3
 8003f74:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f78:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 8003f7a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003f7e:	d903      	bls.n	8003f88 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	610b      	str	r3, [r1, #16]
      num_packets = max_hc_pkt_count;
 8003f84:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8003f88:	78cf      	ldrb	r7, [r1, #3]
 8003f8a:	b117      	cbz	r7, 8003f92 <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003f8c:	890b      	ldrh	r3, [r1, #8]
 8003f8e:	4343      	muls	r3, r0
 8003f90:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003f92:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003f96:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003f98:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003f9c:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003fa0:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003fa4:	ea4e 0e08 	orr.w	lr, lr, r8
 8003fa8:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8004088 <USB_HC_StartXfer+0x160>
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003fac:	eb04 1542 	add.w	r5, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003fb0:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 8003fb4:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003fb8:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 8003fbc:	b116      	cbz	r6, 8003fc4 <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003fbe:	68c8      	ldr	r0, [r1, #12]
 8003fc0:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003fc4:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 8003fc8:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003fcc:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8003fd0:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
 8003fd4:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003fd8:	43c0      	mvns	r0, r0
 8003fda:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8003fde:	0740      	lsls	r0, r0, #29
 8003fe0:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8003fe4:	ea40 000c 	orr.w	r0, r0, ip
 8003fe8:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fec:	4825      	ldr	r0, [pc, #148]	; (8004084 <USB_HC_StartXfer+0x15c>)
 8003fee:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8003ff2:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ff6:	f8d0 c000 	ldr.w	ip, [r0]
 8003ffa:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 8003ffe:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004002:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 8004006:	b1df      	cbz	r7, 8004040 <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004008:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800400c:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004010:	f8d0 c000 	ldr.w	ip, [r0]
 8004014:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 8004018:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800401c:	6800      	ldr	r0, [r0, #0]
 800401e:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8004022:	2e00      	cmp	r6, #0
 8004024:	d191      	bne.n	8003f4a <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004026:	2f00      	cmp	r7, #0
 8004028:	d18f      	bne.n	8003f4a <USB_HC_StartXfer+0x22>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d08d      	beq.n	8003f4a <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 800402e:	79c8      	ldrb	r0, [r1, #7]
 8004030:	2803      	cmp	r0, #3
 8004032:	d813      	bhi.n	800405c <USB_HC_StartXfer+0x134>
 8004034:	e8df f000 	tbb	[pc, r0]
 8004038:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 800403c:	2001      	movs	r0, #1
 800403e:	e7a3      	b.n	8003f88 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004040:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 8004044:	e7e2      	b.n	800400c <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004046:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004048:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800404a:	f3c5 058f 	ubfx	r5, r5, #2, #16
 800404e:	b280      	uxth	r0, r0
 8004050:	4285      	cmp	r5, r0
 8004052:	d903      	bls.n	800405c <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004054:	69a0      	ldr	r0, [r4, #24]
 8004056:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800405a:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800405c:	2000      	movs	r0, #0
 800405e:	9000      	str	r0, [sp, #0]
 8004060:	b29b      	uxth	r3, r3
 8004062:	68c9      	ldr	r1, [r1, #12]
 8004064:	4620      	mov	r0, r4
 8004066:	f7ff fd6d 	bl	8003b44 <USB_WritePacket>
 800406a:	e76e      	b.n	8003f4a <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800406c:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004070:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004072:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8004076:	b280      	uxth	r0, r0
 8004078:	4285      	cmp	r5, r0
 800407a:	d9ef      	bls.n	800405c <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800407c:	69a0      	ldr	r0, [r4, #24]
 800407e:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8004082:	e7ea      	b.n	800405a <USB_HC_StartXfer+0x132>
 8004084:	200007ac 	.word	0x200007ac
 8004088:	1ff80000 	.word	0x1ff80000

0800408c <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800408c:	6883      	ldr	r3, [r0, #8]
 800408e:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004092:	b510      	push	{r4, lr}


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004094:	2110      	movs	r1, #16
{
 8004096:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004098:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800409a:	f7ff fd31 	bl	8003b00 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800409e:	4620      	mov	r0, r4
 80040a0:	f7ff fd40 	bl	8003b24 <USB_FlushRxFifo>
 80040a4:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 80040a8:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 80040ac:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 80040ae:	6811      	ldr	r1, [r2, #0]
 80040b0:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80040b4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 80040b8:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 80040bc:	4290      	cmp	r0, r2
 80040be:	d1f6      	bne.n	80040ae <USB_StopHost+0x22>
 80040c0:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80040c8:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 80040cc:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 80040ce:	3001      	adds	r0, #1
 80040d0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80040d4:	d802      	bhi.n	80040dc <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80040d6:	6819      	ldr	r1, [r3, #0]
 80040d8:	2900      	cmp	r1, #0
 80040da:	dbf8      	blt.n	80040ce <USB_StopHost+0x42>
 80040dc:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 80040de:	429a      	cmp	r2, r3
 80040e0:	d1ef      	bne.n	80040c2 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80040e2:	f04f 33ff 	mov.w	r3, #4294967295
 80040e6:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 80040ea:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040ec:	68a3      	ldr	r3, [r4, #8]
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	60a3      	str	r3, [r4, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80040f4:	2000      	movs	r0, #0
 80040f6:	bd10      	pop	{r4, pc}

080040f8 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 80040f8:	2000      	movs	r0, #0
 80040fa:	4770      	bx	lr

080040fc <USBH_CDC_InterfaceDeInit>:
{
 80040fc:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80040fe:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8004102:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8004104:	7821      	ldrb	r1, [r4, #0]
{
 8004106:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8004108:	b139      	cbz	r1, 800411a <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800410a:	f000 fe17 	bl	8004d3c <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800410e:	7821      	ldrb	r1, [r4, #0]
 8004110:	4628      	mov	r0, r5
 8004112:	f000 fe2f 	bl	8004d74 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8004116:	2300      	movs	r3, #0
 8004118:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 800411a:	7b21      	ldrb	r1, [r4, #12]
 800411c:	b141      	cbz	r1, 8004130 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800411e:	4628      	mov	r0, r5
 8004120:	f000 fe0c 	bl	8004d3c <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8004124:	7b21      	ldrb	r1, [r4, #12]
 8004126:	4628      	mov	r0, r5
 8004128:	f000 fe24 	bl	8004d74 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800412c:	2300      	movs	r3, #0
 800412e:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8004130:	7b61      	ldrb	r1, [r4, #13]
 8004132:	b141      	cbz	r1, 8004146 <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004134:	4628      	mov	r0, r5
 8004136:	f000 fe01 	bl	8004d3c <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800413a:	7b61      	ldrb	r1, [r4, #13]
 800413c:	4628      	mov	r0, r5
 800413e:	f000 fe19 	bl	8004d74 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8004142:	2300      	movs	r3, #0
 8004144:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 8004146:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800414a:	69d8      	ldr	r0, [r3, #28]
 800414c:	b128      	cbz	r0, 800415a <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 800414e:	f009 fd07 	bl	800db60 <free>
    phost->pActiveClass->pData = 0U;
 8004152:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8004156:	2200      	movs	r2, #0
 8004158:	61da      	str	r2, [r3, #28]
}
 800415a:	2000      	movs	r0, #0
 800415c:	bd38      	pop	{r3, r4, r5, pc}

0800415e <USBH_CDC_InterfaceInit>:
{
 800415e:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 8004160:	2202      	movs	r2, #2
{
 8004162:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 8004164:	2301      	movs	r3, #1
 8004166:	4611      	mov	r1, r2
{
 8004168:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 800416a:	f000 f9b2 	bl	80044d2 <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 800416e:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 8004170:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 8004172:	d102      	bne.n	800417a <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8004174:	2002      	movs	r0, #2
}
 8004176:	b005      	add	sp, #20
 8004178:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 800417a:	4601      	mov	r1, r0
 800417c:	4628      	mov	r0, r5
 800417e:	f000 f99f 	bl	80044c0 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8004182:	2050      	movs	r0, #80	; 0x50
 8004184:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 8004188:	f009 fce2 	bl	800db50 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800418c:	231a      	movs	r3, #26
 800418e:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8004192:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004194:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 8004198:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800419a:	bf42      	ittt	mi
 800419c:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800419e:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 80041a2:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80041a4:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80041a6:	7841      	ldrb	r1, [r0, #1]
 80041a8:	4628      	mov	r0, r5
 80041aa:	f000 fdcc 	bl	8004d46 <USBH_AllocPipe>
 80041ae:	4601      	mov	r1, r0
 80041b0:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 80041b2:	8960      	ldrh	r0, [r4, #10]
 80041b4:	9002      	str	r0, [sp, #8]
 80041b6:	2003      	movs	r0, #3
 80041b8:	9001      	str	r0, [sp, #4]
 80041ba:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80041be:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80041c2:	7862      	ldrb	r2, [r4, #1]
 80041c4:	9000      	str	r0, [sp, #0]
 80041c6:	4628      	mov	r0, r5
 80041c8:	f000 fda9 	bl	8004d1e <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80041cc:	2200      	movs	r2, #0
 80041ce:	7821      	ldrb	r1, [r4, #0]
 80041d0:	4628      	mov	r0, r5
 80041d2:	f009 f886 	bl	800d2e2 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 80041d6:	2300      	movs	r3, #0
 80041d8:	461a      	mov	r2, r3
 80041da:	210a      	movs	r1, #10
 80041dc:	4628      	mov	r0, r5
 80041de:	f000 f978 	bl	80044d2 <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 80041e2:	28ff      	cmp	r0, #255	; 0xff
 80041e4:	d0c6      	beq.n	8004174 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80041e6:	231a      	movs	r3, #26
 80041e8:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80041ec:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80041f0:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80041f4:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
 80041f8:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80041fc:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004200:	bf0d      	iteet	eq
 8004202:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004204:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004206:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004208:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800420a:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800420e:	bf08      	it	eq
 8004210:	73a3      	strbeq	r3, [r4, #14]
 8004212:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004216:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004218:	bf18      	it	ne
 800421a:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800421c:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800421e:	bf14      	ite	ne
 8004220:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004222:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004224:	f000 fd8f 	bl	8004d46 <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004228:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800422a:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800422c:	4628      	mov	r0, r5
 800422e:	f000 fd8a 	bl	8004d46 <USBH_AllocPipe>
 8004232:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8004234:	8b20      	ldrh	r0, [r4, #24]
 8004236:	9002      	str	r0, [sp, #8]
 8004238:	2602      	movs	r6, #2
 800423a:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800423e:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8004242:	7ba2      	ldrb	r2, [r4, #14]
 8004244:	7b61      	ldrb	r1, [r4, #13]
 8004246:	9601      	str	r6, [sp, #4]
 8004248:	9000      	str	r0, [sp, #0]
 800424a:	4628      	mov	r0, r5
 800424c:	f000 fd67 	bl	8004d1e <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8004250:	8b60      	ldrh	r0, [r4, #26]
 8004252:	9002      	str	r0, [sp, #8]
 8004254:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8004258:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800425c:	7be2      	ldrb	r2, [r4, #15]
 800425e:	7b21      	ldrb	r1, [r4, #12]
 8004260:	9601      	str	r6, [sp, #4]
 8004262:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 8004264:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 8004266:	4628      	mov	r0, r5
 8004268:	f000 fd59 	bl	8004d1e <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800426c:	4632      	mov	r2, r6
 800426e:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8004270:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8004274:	4628      	mov	r0, r5
 8004276:	f009 f834 	bl	800d2e2 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800427a:	4632      	mov	r2, r6
 800427c:	7b21      	ldrb	r1, [r4, #12]
 800427e:	4628      	mov	r0, r5
 8004280:	f009 f82f 	bl	800d2e2 <USBH_LL_SetToggle>
      status = USBH_OK;
 8004284:	4630      	mov	r0, r6
 8004286:	e776      	b.n	8004176 <USBH_CDC_InterfaceInit+0x18>

08004288 <USBH_CDC_ClassRequest>:
{
 8004288:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800428a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800428e:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004290:	23a1      	movs	r3, #161	; 0xa1
 8004292:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004294:	2321      	movs	r3, #33	; 0x21
 8004296:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004298:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800429e:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80042a0:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80042a2:	3140      	adds	r1, #64	; 0x40
{
 80042a4:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80042a6:	f000 fac9 	bl	800483c <USBH_CtlReq>
  if(status == USBH_OK)
 80042aa:	4605      	mov	r5, r0
 80042ac:	b920      	cbnz	r0, 80042b8 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80042ae:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80042b2:	2102      	movs	r1, #2
 80042b4:	4620      	mov	r0, r4
 80042b6:	4798      	blx	r3
}
 80042b8:	4628      	mov	r0, r5
 80042ba:	bd38      	pop	{r3, r4, r5, pc}

080042bc <USBH_CDC_TransmitCallback>:
 80042bc:	4770      	bx	lr

080042be <USBH_CDC_ReceiveCallback>:
 80042be:	4770      	bx	lr

080042c0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80042c0:	4770      	bx	lr

080042c2 <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80042c2:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 80042c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80042c8:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 80042ca:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 80042ce:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d83d      	bhi.n	8004350 <USBH_CDC_Process+0x8e>
 80042d4:	e8df f003 	tbb	[pc, r3]
 80042d8:	42170603 	.word	0x42170603
 80042dc:	a6          	.byte	0xa6
 80042dd:	00          	.byte	0x00
    status = USBH_OK;
 80042de:	2000      	movs	r0, #0
}
 80042e0:	b002      	add	sp, #8
 80042e2:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80042e4:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80042e6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80042e8:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80042ea:	2320      	movs	r3, #32
 80042ec:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80042ee:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80042f4:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80042f6:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80042f8:	f000 faa0 	bl	800483c <USBH_CtlReq>
    if(req_status == USBH_OK)
 80042fc:	bb50      	cbnz	r0, 8004354 <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80042fe:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 8004300:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8004304:	e024      	b.n	8004350 <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004306:	23a1      	movs	r3, #161	; 0xa1
 8004308:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800430a:	2321      	movs	r3, #33	; 0x21
 800430c:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800430e:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004314:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004316:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004318:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800431c:	f000 fa8e 	bl	800483c <USBH_CtlReq>
    if(req_status == USBH_OK)
 8004320:	b9c0      	cbnz	r0, 8004354 <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004322:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004324:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE;
 8004326:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800432a:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8004334:	4291      	cmp	r1, r2
 8004336:	d10b      	bne.n	8004350 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004338:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800433c:	795a      	ldrb	r2, [r3, #5]
 800433e:	4291      	cmp	r1, r2
 8004340:	d106      	bne.n	8004350 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004342:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d102      	bne.n	8004350 <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 800434a:	4628      	mov	r0, r5
 800434c:	f7ff ffb8 	bl	80042c0 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004350:	2001      	movs	r0, #1
 8004352:	e7c5      	b.n	80042e0 <USBH_CDC_Process+0x1e>
      if(req_status != USBH_BUSY)
 8004354:	2801      	cmp	r0, #1
 8004356:	d0fb      	beq.n	8004350 <USBH_CDC_Process+0x8e>
        CDC_Handle->state = CDC_ERROR_STATE;
 8004358:	2304      	movs	r3, #4
 800435a:	e7d1      	b.n	8004300 <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 800435c:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8004360:	2901      	cmp	r1, #1
 8004362:	d021      	beq.n	80043a8 <USBH_CDC_Process+0xe6>
 8004364:	2902      	cmp	r1, #2
 8004366:	d02e      	beq.n	80043c6 <USBH_CDC_Process+0x104>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004368:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800436c:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 800436e:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 8004372:	2b03      	cmp	r3, #3
 8004374:	d045      	beq.n	8004402 <USBH_CDC_Process+0x140>
 8004376:	2b04      	cmp	r3, #4
 8004378:	d1ea      	bne.n	8004350 <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800437a:	7b31      	ldrb	r1, [r6, #12]
 800437c:	4628      	mov	r0, r5
 800437e:	f008 ff9f 	bl	800d2c0 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8004382:	2801      	cmp	r0, #1
 8004384:	d1e4      	bne.n	8004350 <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8004386:	7b31      	ldrb	r1, [r6, #12]
 8004388:	4628      	mov	r0, r5
 800438a:	f008 ff55 	bl	800d238 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800438e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004390:	4298      	cmp	r0, r3
 8004392:	d040      	beq.n	8004416 <USBH_CDC_Process+0x154>
 8004394:	8b72      	ldrh	r2, [r6, #26]
 8004396:	4290      	cmp	r0, r2
 8004398:	d93d      	bls.n	8004416 <USBH_CDC_Process+0x154>
        CDC_Handle->RxDataLength -= length ;
 800439a:	1a1b      	subs	r3, r3, r0
 800439c:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800439e:	6a33      	ldr	r3, [r6, #32]
 80043a0:	4418      	add	r0, r3
 80043a2:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e033      	b.n	8004410 <USBH_CDC_Process+0x14e>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80043a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80043aa:	8b22      	ldrh	r2, [r4, #24]
 80043ac:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 80043ae:	9100      	str	r1, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80043b0:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 80043b2:	bf98      	it	ls
 80043b4:	b282      	uxthls	r2, r0
 80043b6:	69e1      	ldr	r1, [r4, #28]
 80043b8:	4628      	mov	r0, r5
 80043ba:	f000 fc89 	bl	8004cd0 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80043be:	2302      	movs	r3, #2
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80043c0:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80043c4:	e7d0      	b.n	8004368 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80043c6:	7b61      	ldrb	r1, [r4, #13]
 80043c8:	f008 ff7a 	bl	800d2c0 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 80043cc:	2801      	cmp	r0, #1
 80043ce:	d115      	bne.n	80043fc <USBH_CDC_Process+0x13a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80043d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043d2:	8b22      	ldrh	r2, [r4, #24]
 80043d4:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80043d6:	bf83      	ittte	hi
 80043d8:	1a9b      	subhi	r3, r3, r2
 80043da:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80043dc:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 80043de:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80043e0:	bf8a      	itet	hi
 80043e2:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 80043e4:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80043e6:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 80043e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043ea:	b10b      	cbz	r3, 80043f0 <USBH_CDC_Process+0x12e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e7e7      	b.n	80043c0 <USBH_CDC_Process+0xfe>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80043f0:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80043f4:	4628      	mov	r0, r5
 80043f6:	f7ff ff61 	bl	80042bc <USBH_CDC_TransmitCallback>
 80043fa:	e7b5      	b.n	8004368 <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 80043fc:	2802      	cmp	r0, #2
 80043fe:	d1b3      	bne.n	8004368 <USBH_CDC_Process+0xa6>
 8004400:	e7f4      	b.n	80043ec <USBH_CDC_Process+0x12a>
    USBH_BulkReceiveData (phost,
 8004402:	7b33      	ldrb	r3, [r6, #12]
 8004404:	8b72      	ldrh	r2, [r6, #26]
 8004406:	6a31      	ldr	r1, [r6, #32]
 8004408:	4628      	mov	r0, r5
 800440a:	f000 fc78 	bl	8004cfe <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800440e:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004410:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8004414:	e79c      	b.n	8004350 <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8004416:	2300      	movs	r3, #0
 8004418:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800441c:	4628      	mov	r0, r5
 800441e:	f7ff ff4e 	bl	80042be <USBH_CDC_ReceiveCallback>
 8004422:	e795      	b.n	8004350 <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00U);
 8004424:	2100      	movs	r1, #0
 8004426:	f000 fc0d 	bl	8004c44 <USBH_ClrFeature>
    if(req_status == USBH_OK )
 800442a:	2800      	cmp	r0, #0
 800442c:	d190      	bne.n	8004350 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 800442e:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 8004432:	e78d      	b.n	8004350 <USBH_CDC_Process+0x8e>

08004434 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8004434:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8004438:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 800443c:	2100      	movs	r1, #0
 800443e:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8004442:	4293      	cmp	r3, r2
 8004444:	d1fb      	bne.n	800443e <DeInitStateMachine+0xa>
 8004446:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800444a:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8004454:	4291      	cmp	r1, r2
 8004456:	d1fb      	bne.n	8004450 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8004458:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800445a:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 800445c:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 800445e:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8004460:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 8004462:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 8004466:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004468:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 800446a:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800446c:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8004470:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 8004474:	2000      	movs	r0, #0
 8004476:	4770      	bx	lr

08004478 <USBH_Init>:
{
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	460d      	mov	r5, r1
  if(phost == NULL)
 800447c:	4604      	mov	r4, r0
 800447e:	b180      	cbz	r0, 80044a2 <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 8004480:	2300      	movs	r3, #0
  phost->id = id;
 8004482:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 8004486:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 800448a:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 800448e:	f7ff ffd1 	bl	8004434 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8004492:	b10d      	cbz	r5, 8004498 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8004494:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  USBH_LL_Init(phost);
 8004498:	4620      	mov	r0, r4
 800449a:	f008 fe6f 	bl	800d17c <USBH_LL_Init>
  return USBH_OK;
 800449e:	2000      	movs	r0, #0
 80044a0:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 80044a2:	2002      	movs	r0, #2
}
 80044a4:	bd38      	pop	{r3, r4, r5, pc}

080044a6 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 80044a6:	b149      	cbz	r1, 80044bc <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80044a8:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80044ac:	b933      	cbnz	r3, 80044bc <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80044ae:	2201      	movs	r2, #1
 80044b0:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
 80044b4:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
      status = USBH_OK;
 80044b8:	4618      	mov	r0, r3
 80044ba:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80044bc:	2002      	movs	r0, #2
  }

  return status;
}
 80044be:	4770      	bx	lr

080044c0 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80044c0:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 80044c4:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 80044c6:	bf86      	itte	hi
 80044c8:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 80044cc:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80044ce:	2002      	movls	r0, #2
  }
  return status;
}
 80044d0:	4770      	bx	lr

080044d2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80044d2:	b570      	push	{r4, r5, r6, lr}
 80044d4:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80044d6:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 80044da:	428e      	cmp	r6, r1
 80044dc:	b2e5      	uxtb	r5, r4
 80044de:	d001      	beq.n	80044e4 <USBH_FindInterface+0x12>
 80044e0:	29ff      	cmp	r1, #255	; 0xff
 80044e2:	d10b      	bne.n	80044fc <USBH_FindInterface+0x2a>
 80044e4:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 80044e8:	4296      	cmp	r6, r2
 80044ea:	d001      	beq.n	80044f0 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80044ec:	2aff      	cmp	r2, #255	; 0xff
 80044ee:	d105      	bne.n	80044fc <USBH_FindInterface+0x2a>
 80044f0:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 80044f4:	429e      	cmp	r6, r3
 80044f6:	d007      	beq.n	8004508 <USBH_FindInterface+0x36>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80044f8:	2bff      	cmp	r3, #255	; 0xff
 80044fa:	d005      	beq.n	8004508 <USBH_FindInterface+0x36>
 80044fc:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80044fe:	2c02      	cmp	r4, #2
 8004500:	f100 001a 	add.w	r0, r0, #26
 8004504:	d1e7      	bne.n	80044d6 <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8004506:	25ff      	movs	r5, #255	; 0xff
}
 8004508:	4628      	mov	r0, r5
 800450a:	bd70      	pop	{r4, r5, r6, pc}

0800450c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800450c:	b510      	push	{r4, lr}
 800450e:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8004510:	f008 fe5a 	bl	800d1c8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8004514:	2101      	movs	r1, #1
 8004516:	4620      	mov	r0, r4
 8004518:	f008 fed6 	bl	800d2c8 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 800451c:	2000      	movs	r0, #0
 800451e:	bd10      	pop	{r4, pc}

08004520 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8004520:	b530      	push	{r4, r5, lr}
 8004522:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8004524:	2302      	movs	r3, #2
 8004526:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 800452a:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 800452e:	4604      	mov	r4, r0
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8004530:	b933      	cbnz	r3, 8004540 <USBH_Process+0x20>
 8004532:	7802      	ldrb	r2, [r0, #0]
 8004534:	b122      	cbz	r2, 8004540 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8004536:	7802      	ldrb	r2, [r0, #0]
 8004538:	2a03      	cmp	r2, #3
      phost->gState = HOST_DEV_DISCONNECTED;
 800453a:	bf1c      	itt	ne
 800453c:	2203      	movne	r2, #3
 800453e:	7002      	strbne	r2, [r0, #0]
  switch (phost->gState)
 8004540:	7822      	ldrb	r2, [r4, #0]
 8004542:	2a0b      	cmp	r2, #11
 8004544:	d818      	bhi.n	8004578 <USBH_Process+0x58>
 8004546:	e8df f012 	tbh	[pc, r2, lsl #1]
 800454a:	000c      	.short	0x000c
 800454c:	001f001a 	.word	0x001f001a
 8004550:	00170121 	.word	0x00170121
 8004554:	0107004f 	.word	0x0107004f
 8004558:	00d000c6 	.word	0x00d000c6
 800455c:	00e700da 	.word	0x00e700da
 8004560:	0118      	.short	0x0118
    if (phost->device.is_connected)
 8004562:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8004566:	b13b      	cbz	r3, 8004578 <USBH_Process+0x58>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8004568:	2301      	movs	r3, #1
      USBH_Delay(200U);
 800456a:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800456c:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 800456e:	f008 fec7 	bl	800d300 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8004572:	4620      	mov	r0, r4
 8004574:	f008 fe52 	bl	800d21c <USBH_LL_ResetPort>
}
 8004578:	2000      	movs	r0, #0
 800457a:	b007      	add	sp, #28
 800457c:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 800457e:	2b01      	cmp	r3, #1
 8004580:	d1fa      	bne.n	8004578 <USBH_Process+0x58>
      phost->gState = HOST_DEV_ATTACHED;
 8004582:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 8004584:	7023      	strb	r3, [r4, #0]
 8004586:	e7f7      	b.n	8004578 <USBH_Process+0x58>
    USBH_Delay(100U);
 8004588:	2064      	movs	r0, #100	; 0x64
 800458a:	f008 feb9 	bl	800d300 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800458e:	4620      	mov	r0, r4
 8004590:	f008 fe36 	bl	800d200 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 8004594:	2305      	movs	r3, #5
 8004596:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8004598:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800459c:	2100      	movs	r1, #0
 800459e:	4620      	mov	r0, r4
 80045a0:	f000 fbd1 	bl	8004d46 <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80045a4:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80045a6:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80045a8:	4620      	mov	r0, r4
 80045aa:	f000 fbcc 	bl	8004d46 <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 80045ae:	79a2      	ldrb	r2, [r4, #6]
 80045b0:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80045b4:	7120      	strb	r0, [r4, #4]
 80045b6:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 80045b8:	9202      	str	r2, [sp, #8]
 80045ba:	2500      	movs	r5, #0
      USBH_OpenPipe (phost,
 80045bc:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80045c0:	9200      	str	r2, [sp, #0]
 80045c2:	9501      	str	r5, [sp, #4]
 80045c4:	2280      	movs	r2, #128	; 0x80
 80045c6:	4620      	mov	r0, r4
 80045c8:	f000 fba9 	bl	8004d1e <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 80045cc:	79a2      	ldrb	r2, [r4, #6]
 80045ce:	9202      	str	r2, [sp, #8]
 80045d0:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80045d4:	9200      	str	r2, [sp, #0]
 80045d6:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80045da:	7961      	ldrb	r1, [r4, #5]
 80045dc:	9501      	str	r5, [sp, #4]
 80045de:	462a      	mov	r2, r5
 80045e0:	4620      	mov	r0, r4
 80045e2:	f000 fb9c 	bl	8004d1e <USBH_OpenPipe>
 80045e6:	e7c7      	b.n	8004578 <USBH_Process+0x58>
  switch (phost->EnumState)
 80045e8:	7863      	ldrb	r3, [r4, #1]
 80045ea:	2b07      	cmp	r3, #7
 80045ec:	d8c4      	bhi.n	8004578 <USBH_Process+0x58>
 80045ee:	e8df f003 	tbb	[pc, r3]
 80045f2:	1504      	.short	0x1504
 80045f4:	4138301e 	.word	0x4138301e
 80045f8:	5d4f      	.short	0x5d4f
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80045fa:	2108      	movs	r1, #8
 80045fc:	4620      	mov	r0, r4
 80045fe:	f000 f9fa 	bl	80049f6 <USBH_Get_DevDesc>
 8004602:	4605      	mov	r5, r0
 8004604:	2800      	cmp	r0, #0
 8004606:	d1b7      	bne.n	8004578 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8004608:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800460a:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800460e:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8004610:	7921      	ldrb	r1, [r4, #4]
 8004612:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8004616:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 8004618:	9202      	str	r2, [sp, #8]
 800461a:	e7cf      	b.n	80045bc <USBH_Process+0x9c>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800461c:	2112      	movs	r1, #18
 800461e:	4620      	mov	r0, r4
 8004620:	f000 f9e9 	bl	80049f6 <USBH_Get_DevDesc>
 8004624:	2800      	cmp	r0, #0
 8004626:	d1a7      	bne.n	8004578 <USBH_Process+0x58>
      phost->EnumState = ENUM_SET_ADDR;
 8004628:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800462a:	7063      	strb	r3, [r4, #1]
 800462c:	e7a4      	b.n	8004578 <USBH_Process+0x58>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800462e:	2101      	movs	r1, #1
 8004630:	4620      	mov	r0, r4
 8004632:	f000 fadd 	bl	8004bf0 <USBH_SetAddress>
 8004636:	4605      	mov	r5, r0
 8004638:	2800      	cmp	r0, #0
 800463a:	d19d      	bne.n	8004578 <USBH_Process+0x58>
      USBH_Delay(2U);
 800463c:	2002      	movs	r0, #2
 800463e:	f008 fe5f 	bl	800d300 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8004642:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8004644:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 8004646:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8004648:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 800464c:	7921      	ldrb	r1, [r4, #4]
 800464e:	79a2      	ldrb	r2, [r4, #6]
 8004650:	e7e2      	b.n	8004618 <USBH_Process+0xf8>
    if ( USBH_Get_CfgDesc(phost,
 8004652:	2109      	movs	r1, #9
 8004654:	4620      	mov	r0, r4
 8004656:	f000 fa16 	bl	8004a86 <USBH_Get_CfgDesc>
 800465a:	2800      	cmp	r0, #0
 800465c:	d18c      	bne.n	8004578 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800465e:	2304      	movs	r3, #4
 8004660:	e7e3      	b.n	800462a <USBH_Process+0x10a>
    if (USBH_Get_CfgDesc(phost,
 8004662:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 8004666:	4620      	mov	r0, r4
 8004668:	f000 fa0d 	bl	8004a86 <USBH_Get_CfgDesc>
 800466c:	2800      	cmp	r0, #0
 800466e:	d183      	bne.n	8004578 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8004670:	2305      	movs	r3, #5
 8004672:	e7da      	b.n	800462a <USBH_Process+0x10a>
    if (phost->device.DevDesc.iManufacturer != 0U)
 8004674:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 8004678:	b141      	cbz	r1, 800468c <USBH_Process+0x16c>
      if ( USBH_Get_StringDesc(phost,
 800467a:	23ff      	movs	r3, #255	; 0xff
 800467c:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8004680:	4620      	mov	r0, r4
 8004682:	f000 fa8e 	bl	8004ba2 <USBH_Get_StringDesc>
 8004686:	2800      	cmp	r0, #0
 8004688:	f47f af76 	bne.w	8004578 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800468c:	2306      	movs	r3, #6
 800468e:	e7cc      	b.n	800462a <USBH_Process+0x10a>
    if (phost->device.DevDesc.iProduct != 0U)
 8004690:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 8004694:	b141      	cbz	r1, 80046a8 <USBH_Process+0x188>
      if ( USBH_Get_StringDesc(phost,
 8004696:	23ff      	movs	r3, #255	; 0xff
 8004698:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800469c:	4620      	mov	r0, r4
 800469e:	f000 fa80 	bl	8004ba2 <USBH_Get_StringDesc>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	f47f af68 	bne.w	8004578 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80046a8:	2307      	movs	r3, #7
 80046aa:	e7be      	b.n	800462a <USBH_Process+0x10a>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80046ac:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 80046b0:	b141      	cbz	r1, 80046c4 <USBH_Process+0x1a4>
      if ( USBH_Get_StringDesc(phost,
 80046b2:	23ff      	movs	r3, #255	; 0xff
 80046b4:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80046b8:	4620      	mov	r0, r4
 80046ba:	f000 fa72 	bl	8004ba2 <USBH_Get_StringDesc>
 80046be:	2800      	cmp	r0, #0
 80046c0:	f47f af5a 	bne.w	8004578 <USBH_Process+0x58>
      phost->device.current_interface = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80046ca:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d009      	beq.n	80046e6 <USBH_Process+0x1c6>
        phost->gState  = HOST_INPUT;
 80046d2:	2307      	movs	r3, #7
 80046d4:	e756      	b.n	8004584 <USBH_Process+0x64>
      if(phost->pUser != NULL)
 80046d6:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f43f af4c 	beq.w	8004578 <USBH_Process+0x58>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80046e0:	2101      	movs	r1, #1
 80046e2:	4620      	mov	r0, r4
 80046e4:	4798      	blx	r3
        phost->gState  = HOST_SET_CONFIGURATION;
 80046e6:	2308      	movs	r3, #8
 80046e8:	e74c      	b.n	8004584 <USBH_Process+0x64>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80046ea:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 80046ee:	4620      	mov	r0, r4
 80046f0:	f000 fa8c 	bl	8004c0c <USBH_SetCfg>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	f47f af3f 	bne.w	8004578 <USBH_Process+0x58>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80046fa:	2309      	movs	r3, #9
 80046fc:	e742      	b.n	8004584 <USBH_Process+0x64>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80046fe:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 8004702:	069b      	lsls	r3, r3, #26
 8004704:	d506      	bpl.n	8004714 <USBH_Process+0x1f4>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8004706:	2101      	movs	r1, #1
 8004708:	4620      	mov	r0, r4
 800470a:	f000 fa8d 	bl	8004c28 <USBH_SetFeature>
 800470e:	2800      	cmp	r0, #0
 8004710:	f47f af32 	bne.w	8004578 <USBH_Process+0x58>
      phost->gState  = HOST_CHECK_CLASS;
 8004714:	230a      	movs	r3, #10
 8004716:	e735      	b.n	8004584 <USBH_Process+0x64>
    if(phost->ClassNumber == 0U)
 8004718:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800471c:	2b00      	cmp	r3, #0
 800471e:	f43f af2b 	beq.w	8004578 <USBH_Process+0x58>
      phost->pActiveClass = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8004728:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 800472c:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 8004730:	7919      	ldrb	r1, [r3, #4]
 8004732:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 8004734:	bf08      	it	eq
 8004736:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 800473a:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800473e:	b1d3      	cbz	r3, 8004776 <USBH_Process+0x256>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	4620      	mov	r0, r4
 8004744:	4798      	blx	r3
 8004746:	b9b0      	cbnz	r0, 8004776 <USBH_Process+0x256>
          phost->gState  = HOST_CLASS_REQUEST;
 8004748:	2306      	movs	r3, #6
 800474a:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800474c:	2103      	movs	r1, #3
 800474e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8004752:	4620      	mov	r0, r4
 8004754:	4798      	blx	r3
 8004756:	e70f      	b.n	8004578 <USBH_Process+0x58>
    if(phost->pActiveClass != NULL)
 8004758:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800475c:	b15b      	cbz	r3, 8004776 <USBH_Process+0x256>
      status = phost->pActiveClass->Requests(phost);
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	4620      	mov	r0, r4
 8004762:	4798      	blx	r3
 8004764:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8004768:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f47f af03 	bne.w	8004578 <USBH_Process+0x58>
        phost->gState  = HOST_CLASS;
 8004772:	230b      	movs	r3, #11
 8004774:	e706      	b.n	8004584 <USBH_Process+0x64>
      phost->gState  = HOST_ABORT_STATE;
 8004776:	230d      	movs	r3, #13
 8004778:	e704      	b.n	8004584 <USBH_Process+0x64>
    if(phost->pActiveClass != NULL)
 800477a:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800477e:	2b00      	cmp	r3, #0
 8004780:	f43f aefa 	beq.w	8004578 <USBH_Process+0x58>
      phost->pActiveClass->BgndProcess(phost);
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	4620      	mov	r0, r4
 8004788:	4798      	blx	r3
 800478a:	e6f5      	b.n	8004578 <USBH_Process+0x58>
    DeInitStateMachine(phost);
 800478c:	4620      	mov	r0, r4
 800478e:	f7ff fe51 	bl	8004434 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 8004792:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8004796:	2b00      	cmp	r3, #0
 8004798:	f43f aeee 	beq.w	8004578 <USBH_Process+0x58>
      phost->pActiveClass->DeInit(phost);
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	4620      	mov	r0, r4
 80047a0:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 80047a8:	e6e6      	b.n	8004578 <USBH_Process+0x58>

080047aa <USBH_LL_SetTimer>:
  phost->Timer = time;
 80047aa:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 80047ae:	4770      	bx	lr

080047b0 <USBH_LL_IncTimer>:
  phost->Timer ++;
 80047b0:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 80047b4:	3201      	adds	r2, #1
 80047b6:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80047ba:	7802      	ldrb	r2, [r0, #0]
 80047bc:	2a0b      	cmp	r2, #11
 80047be:	d104      	bne.n	80047ca <USBH_LL_IncTimer+0x1a>
 80047c0:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80047c4:	b10b      	cbz	r3, 80047ca <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	4718      	bx	r3
 80047ca:	4770      	bx	lr

080047cc <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80047d2:	4770      	bx	lr

080047d4 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 80047da:	4770      	bx	lr

080047dc <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 80047dc:	7802      	ldrb	r2, [r0, #0]
{
 80047de:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 80047e0:	b94a      	cbnz	r2, 80047f6 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 80047e2:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 80047e6:	2201      	movs	r2, #1
 80047e8:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 80047ec:	b10b      	cbz	r3, 80047f2 <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80047ee:	2104      	movs	r1, #4
 80047f0:	4798      	blx	r3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 80047f2:	2000      	movs	r0, #0
 80047f4:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 80047f6:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 80047fa:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 80047fc:	bf04      	itt	eq
 80047fe:	2202      	moveq	r2, #2
 8004800:	7002      	strbeq	r2, [r0, #0]
 8004802:	e7f6      	b.n	80047f2 <USBH_LL_Connect+0x16>

08004804 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8004804:	b510      	push	{r4, lr}
 8004806:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 8004808:	f008 fcec 	bl	800d1e4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800480c:	7921      	ldrb	r1, [r4, #4]
 800480e:	4620      	mov	r0, r4
 8004810:	f000 fab0 	bl	8004d74 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8004814:	7961      	ldrb	r1, [r4, #5]
 8004816:	4620      	mov	r0, r4
 8004818:	f000 faac 	bl	8004d74 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

  if(phost->pUser != NULL)
 8004822:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8004826:	b113      	cbz	r3, 800482e <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8004828:	2105      	movs	r1, #5
 800482a:	4620      	mov	r0, r4
 800482c:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800482e:	4620      	mov	r0, r4
 8004830:	f008 fcca 	bl	800d1c8 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8004834:	2303      	movs	r3, #3
 8004836:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8004838:	2000      	movs	r0, #0
 800483a:	bd10      	pop	{r4, pc}

0800483c <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800483c:	b513      	push	{r0, r1, r4, lr}
 800483e:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8004840:	7880      	ldrb	r0, [r0, #2]
 8004842:	2801      	cmp	r0, #1
 8004844:	d003      	beq.n	800484e <USBH_CtlReq+0x12>
 8004846:	2802      	cmp	r0, #2
 8004848:	d008      	beq.n	800485c <USBH_CtlReq+0x20>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 800484a:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 800484c:	e004      	b.n	8004858 <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 800484e:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 8004850:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 8004852:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 8004854:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 8004856:	70a3      	strb	r3, [r4, #2]
}
 8004858:	b002      	add	sp, #8
 800485a:	bd10      	pop	{r4, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 800485c:	7e23      	ldrb	r3, [r4, #24]
 800485e:	3b01      	subs	r3, #1
 8004860:	2101      	movs	r1, #1
 8004862:	2b0a      	cmp	r3, #10
 8004864:	d8f1      	bhi.n	800484a <USBH_CtlReq+0xe>
 8004866:	e8df f003 	tbb	[pc, r3]
 800486a:	0f06      	.short	0x0f06
 800486c:	4c40362b 	.word	0x4c40362b
 8004870:	8c806f64 	.word	0x8c806f64
 8004874:	95          	.byte	0x95
 8004875:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8004876:	7962      	ldrb	r2, [r4, #5]
 8004878:	f104 0110 	add.w	r1, r4, #16
 800487c:	4620      	mov	r0, r4
 800487e:	f000 f9ef 	bl	8004c60 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8004882:	2302      	movs	r3, #2
      if (phost->Control.setup.b.wLength.w != 0U)
      {
        if (direction == USB_D2H)
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8004884:	7623      	strb	r3, [r4, #24]
 8004886:	e7e0      	b.n	800484a <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8004888:	7961      	ldrb	r1, [r4, #5]
 800488a:	4620      	mov	r0, r4
 800488c:	f008 fd18 	bl	800d2c0 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8004890:	2801      	cmp	r0, #1
 8004892:	d10f      	bne.n	80048b4 <USBH_CtlReq+0x78>
      if (phost->Control.setup.b.wLength.w != 0U)
 8004894:	8ae2      	ldrh	r2, [r4, #22]
 8004896:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800489a:	b12a      	cbz	r2, 80048a8 <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 800489c:	2b00      	cmp	r3, #0
 800489e:	da01      	bge.n	80048a4 <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e7ef      	b.n	8004884 <USBH_CtlReq+0x48>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 80048a4:	2305      	movs	r3, #5
 80048a6:	e7ed      	b.n	8004884 <USBH_CtlReq+0x48>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	da01      	bge.n	80048b0 <USBH_CtlReq+0x74>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80048ac:	2309      	movs	r3, #9
 80048ae:	e7e9      	b.n	8004884 <USBH_CtlReq+0x48>
          phost->Control.state = CTRL_STATUS_IN;
 80048b0:	2307      	movs	r3, #7
 80048b2:	e7e7      	b.n	8004884 <USBH_CtlReq+0x48>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80048b4:	2804      	cmp	r0, #4
 80048b6:	d001      	beq.n	80048bc <USBH_CtlReq+0x80>
 80048b8:	2802      	cmp	r0, #2
 80048ba:	d1c6      	bne.n	800484a <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 80048bc:	230b      	movs	r3, #11
 80048be:	e7e1      	b.n	8004884 <USBH_CtlReq+0x48>
    phost->Control.timer = (uint16_t)phost->Timer;
 80048c0:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80048c4:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 80048c6:	89a2      	ldrh	r2, [r4, #12]
 80048c8:	7923      	ldrb	r3, [r4, #4]
 80048ca:	68a1      	ldr	r1, [r4, #8]
 80048cc:	4620      	mov	r0, r4
 80048ce:	f000 f9ef 	bl	8004cb0 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80048d2:	2304      	movs	r3, #4
 80048d4:	e7d6      	b.n	8004884 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80048d6:	7921      	ldrb	r1, [r4, #4]
 80048d8:	4620      	mov	r0, r4
 80048da:	f008 fcf1 	bl	800d2c0 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80048de:	2801      	cmp	r0, #1
 80048e0:	d0e4      	beq.n	80048ac <USBH_CtlReq+0x70>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80048e2:	2805      	cmp	r0, #5
 80048e4:	d015      	beq.n	8004912 <USBH_CtlReq+0xd6>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 80048e6:	2804      	cmp	r0, #4
 80048e8:	e7e7      	b.n	80048ba <USBH_CtlReq+0x7e>
    USBH_CtlSendData (phost,
 80048ea:	7963      	ldrb	r3, [r4, #5]
 80048ec:	9100      	str	r1, [sp, #0]
 80048ee:	89a2      	ldrh	r2, [r4, #12]
 80048f0:	68a1      	ldr	r1, [r4, #8]
 80048f2:	4620      	mov	r0, r4
 80048f4:	f000 f9c5 	bl	8004c82 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80048f8:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80048fc:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80048fe:	2306      	movs	r3, #6
 8004900:	e7c0      	b.n	8004884 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8004902:	7961      	ldrb	r1, [r4, #5]
 8004904:	4620      	mov	r0, r4
 8004906:	f008 fcdb 	bl	800d2c0 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800490a:	2801      	cmp	r0, #1
 800490c:	d0d0      	beq.n	80048b0 <USBH_CtlReq+0x74>
    else if  (URB_Status == USBH_URB_STALL)
 800490e:	2805      	cmp	r0, #5
 8004910:	d105      	bne.n	800491e <USBH_CtlReq+0xe2>
      phost->RequestState = CMD_SEND;
 8004912:	2301      	movs	r3, #1
 8004914:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8004916:	2300      	movs	r3, #0
 8004918:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 800491a:	2003      	movs	r0, #3
 800491c:	e79c      	b.n	8004858 <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800491e:	2802      	cmp	r0, #2
 8004920:	d0c0      	beq.n	80048a4 <USBH_CtlReq+0x68>
      if (URB_Status == USBH_URB_ERROR)
 8004922:	2804      	cmp	r0, #4
 8004924:	d191      	bne.n	800484a <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 8004926:	230b      	movs	r3, #11
 8004928:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 800492a:	2301      	movs	r3, #1
 800492c:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 800492e:	2002      	movs	r0, #2
 8004930:	e792      	b.n	8004858 <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 8004932:	2200      	movs	r2, #0
 8004934:	7923      	ldrb	r3, [r4, #4]
 8004936:	4611      	mov	r1, r2
 8004938:	4620      	mov	r0, r4
 800493a:	f000 f9b9 	bl	8004cb0 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 800493e:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8004942:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8004944:	2308      	movs	r3, #8
 8004946:	e79d      	b.n	8004884 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8004948:	7921      	ldrb	r1, [r4, #4]
 800494a:	4620      	mov	r0, r4
 800494c:	f008 fcb8 	bl	800d2c0 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8004950:	2801      	cmp	r0, #1
 8004952:	d104      	bne.n	800495e <USBH_CtlReq+0x122>
      phost->RequestState = CMD_SEND;
 8004954:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 8004956:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8004958:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 800495a:	7620      	strb	r0, [r4, #24]
 800495c:	e77c      	b.n	8004858 <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 800495e:	2804      	cmp	r0, #4
 8004960:	d0ac      	beq.n	80048bc <USBH_CtlReq+0x80>
      if(URB_Status == USBH_URB_STALL)
 8004962:	2805      	cmp	r0, #5
 8004964:	f47f af71 	bne.w	800484a <USBH_CtlReq+0xe>
 8004968:	e7d3      	b.n	8004912 <USBH_CtlReq+0xd6>
    USBH_CtlSendData (phost,
 800496a:	2200      	movs	r2, #0
 800496c:	7963      	ldrb	r3, [r4, #5]
 800496e:	9100      	str	r1, [sp, #0]
 8004970:	4620      	mov	r0, r4
 8004972:	4611      	mov	r1, r2
 8004974:	f000 f985 	bl	8004c82 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8004978:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800497c:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800497e:	230a      	movs	r3, #10
 8004980:	e780      	b.n	8004884 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8004982:	7961      	ldrb	r1, [r4, #5]
 8004984:	4620      	mov	r0, r4
 8004986:	f008 fc9b 	bl	800d2c0 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800498a:	2801      	cmp	r0, #1
 800498c:	d0e2      	beq.n	8004954 <USBH_CtlReq+0x118>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800498e:	2802      	cmp	r0, #2
 8004990:	d1a9      	bne.n	80048e6 <USBH_CtlReq+0xaa>
 8004992:	e78b      	b.n	80048ac <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8004994:	7e63      	ldrb	r3, [r4, #25]
 8004996:	3301      	adds	r3, #1
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	7663      	strb	r3, [r4, #25]
 800499e:	d806      	bhi.n	80049ae <USBH_CtlReq+0x172>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80049a0:	4620      	mov	r0, r4
 80049a2:	f008 fc1f 	bl	800d1e4 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80049a6:	2301      	movs	r3, #1
 80049a8:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 80049aa:	70a3      	strb	r3, [r4, #2]
 80049ac:	e74d      	b.n	800484a <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80049ae:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80049b2:	2106      	movs	r1, #6
 80049b4:	4620      	mov	r0, r4
 80049b6:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	7663      	strb	r3, [r4, #25]
 80049bc:	e7b5      	b.n	800492a <USBH_CtlReq+0xee>

080049be <USBH_GetDescriptor>:
{
 80049be:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 80049c0:	7884      	ldrb	r4, [r0, #2]
{
 80049c2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 80049c6:	2c01      	cmp	r4, #1
 80049c8:	d110      	bne.n	80049ec <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80049ca:	f061 047f 	orn	r4, r1, #127	; 0x7f
 80049ce:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80049d0:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 80049d4:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 80049d8:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80049da:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80049de:	bf0c      	ite	eq
 80049e0:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 80049e4:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80049e6:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 80049e8:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 80049ea:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 80049ec:	462a      	mov	r2, r5
 80049ee:	4619      	mov	r1, r3
}
 80049f0:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 80049f2:	f7ff bf23 	b.w	800483c <USBH_CtlReq>

080049f6 <USBH_Get_DevDesc>:
{
 80049f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 80049f8:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 80049fc:	460d      	mov	r5, r1
 80049fe:	9100      	str	r1, [sp, #0]
 8004a00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a04:	2100      	movs	r1, #0
{
 8004a06:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8004a08:	f7ff ffd9 	bl	80049be <USBH_GetDescriptor>
 8004a0c:	bbc8      	cbnz	r0, 8004a82 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8004a0e:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8004a12:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8004a16:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8004a1a:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8004a1e:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8004a22:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8004a26:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8004a2a:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8004a2e:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8004a32:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8004a36:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8004a3a:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  if (length > 8U)
 8004a3e:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8004a40:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8004a44:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 8004a48:	d91b      	bls.n	8004a82 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 8004a4a:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 8004a4e:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 8004a52:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 8004a56:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8004a5a:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8004a5e:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8004a62:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8004a66:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8004a6a:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8004a6e:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8004a72:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8004a76:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8004a7a:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8004a7e:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 8004a82:	b003      	add	sp, #12
 8004a84:	bd30      	pop	{r4, r5, pc}

08004a86 <USBH_Get_CfgDesc>:
{
 8004a86:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 8004a8a:	f100 051c 	add.w	r5, r0, #28
{
 8004a8e:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 8004a90:	9100      	str	r1, [sp, #0]
 8004a92:	462b      	mov	r3, r5
 8004a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a98:	2100      	movs	r1, #0
{
 8004a9a:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8004a9c:	f7ff ff8f 	bl	80049be <USBH_GetDescriptor>
 8004aa0:	bb48      	cbnz	r0, 8004af6 <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8004aa2:	7f23      	ldrb	r3, [r4, #28]
 8004aa4:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8004aa8:	7f63      	ldrb	r3, [r4, #29]
 8004aaa:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8004aae:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004ab2:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8004ab6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8004aba:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8004abe:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8004ac2:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8004ac6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8004aca:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8004ace:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8004ad2:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8004ad4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8004ad8:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8004adc:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8004ae0:	d909      	bls.n	8004af6 <USBH_Get_CfgDesc+0x70>
 8004ae2:	4627      	mov	r7, r4
 8004ae4:	462b      	mov	r3, r5
 8004ae6:	4606      	mov	r6, r0
 8004ae8:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004aea:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8004aee:	2e02      	cmp	r6, #2
 8004af0:	d001      	beq.n	8004af6 <USBH_Get_CfgDesc+0x70>
 8004af2:	4596      	cmp	lr, r2
 8004af4:	d802      	bhi.n	8004afc <USBH_Get_CfgDesc+0x76>
}
 8004af6:	b003      	add	sp, #12
 8004af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004afc:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8004afe:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004b00:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8004b02:	7859      	ldrb	r1, [r3, #1]
 8004b04:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004b06:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8004b08:	d1f1      	bne.n	8004aee <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8004b0a:	7819      	ldrb	r1, [r3, #0]
 8004b0c:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8004b10:	7859      	ldrb	r1, [r3, #1]
 8004b12:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8004b16:	7899      	ldrb	r1, [r3, #2]
 8004b18:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8004b1c:	78d9      	ldrb	r1, [r3, #3]
 8004b1e:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8004b22:	7919      	ldrb	r1, [r3, #4]
 8004b24:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8004b28:	7959      	ldrb	r1, [r3, #5]
 8004b2a:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8004b2e:	7999      	ldrb	r1, [r3, #6]
 8004b30:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8004b34:	79d9      	ldrb	r1, [r3, #7]
 8004b36:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8004b3a:	7a19      	ldrb	r1, [r3, #8]
 8004b3c:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004b40:	fb0c f806 	mul.w	r8, ip, r6
        ep_ix = 0U;
 8004b44:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8004b46:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 8004b4a:	428d      	cmp	r5, r1
 8004b4c:	d802      	bhi.n	8004b54 <USBH_Get_CfgDesc+0xce>
 8004b4e:	3601      	adds	r6, #1
 8004b50:	371a      	adds	r7, #26
 8004b52:	e7cc      	b.n	8004aee <USBH_Get_CfgDesc+0x68>
 8004b54:	4596      	cmp	lr, r2
 8004b56:	d9fa      	bls.n	8004b4e <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004b58:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8004b5a:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004b5c:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8004b5e:	785d      	ldrb	r5, [r3, #1]
 8004b60:	2d05      	cmp	r5, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004b62:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8004b64:	d1ef      	bne.n	8004b46 <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004b66:	1c4d      	adds	r5, r1, #1
 8004b68:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 8004b6c:	4421      	add	r1, r4
 8004b6e:	f893 9000 	ldrb.w	r9, [r3]
 8004b72:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8004b76:	f893 9001 	ldrb.w	r9, [r3, #1]
 8004b7a:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8004b7e:	f893 9002 	ldrb.w	r9, [r3, #2]
 8004b82:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8004b86:	f893 9003 	ldrb.w	r9, [r3, #3]
 8004b8a:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8004b8e:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8004b92:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8004b96:	f893 9006 	ldrb.w	r9, [r3, #6]
 8004b9a:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 8004b9e:	b2e9      	uxtb	r1, r5
 8004ba0:	e7d1      	b.n	8004b46 <USBH_Get_CfgDesc+0xc0>

08004ba2 <USBH_Get_StringDesc>:
{
 8004ba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 8004ba4:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8004ba8:	4614      	mov	r4, r2
 8004baa:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8004bb2:	462b      	mov	r3, r5
 8004bb4:	2100      	movs	r1, #0
{
 8004bb6:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8004bb8:	f7ff ff01 	bl	80049be <USBH_GetDescriptor>
 8004bbc:	b978      	cbnz	r0, 8004bde <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8004bbe:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d10b      	bne.n	8004bde <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8004bc6:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8004bca:	3b02      	subs	r3, #2
 8004bcc:	42bb      	cmp	r3, r7
 8004bce:	bf28      	it	cs
 8004bd0:	463b      	movcs	r3, r7
 8004bd2:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d803      	bhi.n	8004be2 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8004bda:	2300      	movs	r3, #0
 8004bdc:	7023      	strb	r3, [r4, #0]
}
 8004bde:	b003      	add	sp, #12
 8004be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8004be2:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8004be4:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8004be6:	7889      	ldrb	r1, [r1, #2]
 8004be8:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8004bec:	b292      	uxth	r2, r2
 8004bee:	e7f2      	b.n	8004bd6 <USBH_Get_StringDesc+0x34>

08004bf0 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8004bf0:	7883      	ldrb	r3, [r0, #2]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d106      	bne.n	8004c04 <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004bf6:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004bf8:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004bfa:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004bfc:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8004bfe:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004c00:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004c02:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8004c04:	2200      	movs	r2, #0
 8004c06:	4611      	mov	r1, r2
 8004c08:	f7ff be18 	b.w	800483c <USBH_CtlReq>

08004c0c <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8004c0c:	7883      	ldrb	r3, [r0, #2]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d106      	bne.n	8004c20 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004c12:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004c14:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004c16:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004c18:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8004c1a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004c1c:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004c1e:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8004c20:	2200      	movs	r2, #0
 8004c22:	4611      	mov	r1, r2
 8004c24:	f7ff be0a 	b.w	800483c <USBH_CtlReq>

08004c28 <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8004c28:	7883      	ldrb	r3, [r0, #2]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d106      	bne.n	8004c3c <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004c2e:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8004c30:	2203      	movs	r2, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004c32:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8004c34:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8004c36:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004c38:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004c3a:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	4611      	mov	r1, r2
 8004c40:	f7ff bdfc 	b.w	800483c <USBH_CtlReq>

08004c44 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8004c44:	7883      	ldrb	r3, [r0, #2]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d106      	bne.n	8004c58 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004c4a:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8004c4c:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8004c4e:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004c50:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8004c52:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8004c54:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004c56:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8004c58:	2200      	movs	r2, #0
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	f7ff bdee 	b.w	800483c <USBH_CtlReq>

08004c60 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8004c60:	b530      	push	{r4, r5, lr}
 8004c62:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004c64:	2400      	movs	r4, #0
{
 8004c66:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004c68:	2308      	movs	r3, #8
 8004c6a:	9302      	str	r3, [sp, #8]
 8004c6c:	9101      	str	r1, [sp, #4]
 8004c6e:	9403      	str	r4, [sp, #12]
 8004c70:	9400      	str	r4, [sp, #0]
 8004c72:	4623      	mov	r3, r4
 8004c74:	4622      	mov	r2, r4
 8004c76:	4629      	mov	r1, r5
 8004c78:	f008 fb08 	bl	800d28c <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	b005      	add	sp, #20
 8004c80:	bd30      	pop	{r4, r5, pc}

08004c82 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8004c82:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004c84:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8004c88:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004c8a:	2d00      	cmp	r5, #0
{
 8004c8c:	461c      	mov	r4, r3
 8004c8e:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004c92:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8004c94:	bf18      	it	ne
 8004c96:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004c98:	9303      	str	r3, [sp, #12]
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	9101      	str	r1, [sp, #4]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	f008 faf1 	bl	800d28c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8004caa:	2000      	movs	r0, #0
 8004cac:	b005      	add	sp, #20
 8004cae:	bd30      	pop	{r4, r5, pc}

08004cb0 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8004cb0:	b530      	push	{r4, r5, lr}
 8004cb2:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004cb4:	2400      	movs	r4, #0
{
 8004cb6:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004cb8:	9202      	str	r2, [sp, #8]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	9101      	str	r1, [sp, #4]
 8004cbe:	9403      	str	r4, [sp, #12]
 8004cc0:	9200      	str	r2, [sp, #0]
 8004cc2:	4623      	mov	r3, r4
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	f008 fae1 	bl	800d28c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8004cca:	4620      	mov	r0, r4
 8004ccc:	b005      	add	sp, #20
 8004cce:	bd30      	pop	{r4, r5, pc}

08004cd0 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8004cd0:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004cd2:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8004cd6:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004cd8:	2d00      	cmp	r5, #0
{
 8004cda:	461c      	mov	r4, r3
 8004cdc:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004ce0:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8004ce2:	bf18      	it	ne
 8004ce4:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004ce6:	9303      	str	r3, [sp, #12]
 8004ce8:	2301      	movs	r3, #1
 8004cea:	9101      	str	r1, [sp, #4]
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	f008 faca 	bl	800d28c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	b005      	add	sp, #20
 8004cfc:	bd30      	pop	{r4, r5, pc}

08004cfe <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8004cfe:	b530      	push	{r4, r5, lr}
 8004d00:	b085      	sub	sp, #20
 8004d02:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004d04:	2400      	movs	r4, #0
 8004d06:	9202      	str	r2, [sp, #8]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	9101      	str	r1, [sp, #4]
 8004d0c:	9403      	str	r4, [sp, #12]
 8004d0e:	9200      	str	r2, [sp, #0]
 8004d10:	2302      	movs	r3, #2
 8004d12:	4629      	mov	r1, r5
 8004d14:	f008 faba 	bl	800d28c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8004d18:	4620      	mov	r0, r4
 8004d1a:	b005      	add	sp, #20
 8004d1c:	bd30      	pop	{r4, r5, pc}

08004d1e <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8004d1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8004d20:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004d24:	9402      	str	r4, [sp, #8]
 8004d26:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004d2a:	9401      	str	r4, [sp, #4]
 8004d2c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004d30:	9400      	str	r4, [sp, #0]
 8004d32:	f008 fa85 	bl	800d240 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8004d36:	2000      	movs	r0, #0
 8004d38:	b004      	add	sp, #16
 8004d3a:	bd10      	pop	{r4, pc}

08004d3c <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8004d3c:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8004d3e:	f008 fa97 	bl	800d270 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 8004d42:	2000      	movs	r0, #0
 8004d44:	bd08      	pop	{r3, pc}

08004d46 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8004d46:	b530      	push	{r4, r5, lr}
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8004d4e:	f854 5b04 	ldr.w	r5, [r4], #4
 8004d52:	042d      	lsls	r5, r5, #16
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	d407      	bmi.n	8004d68 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8004d58:	33e0      	adds	r3, #224	; 0xe0
 8004d5a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004d5e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	{
	   return (uint16_t)idx;
 8004d62:	b292      	uxth	r2, r2
}
 8004d64:	b2d0      	uxtb	r0, r2
 8004d66:	bd30      	pop	{r4, r5, pc}
 8004d68:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8004d6a:	2b0b      	cmp	r3, #11
 8004d6c:	d1ef      	bne.n	8004d4e <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 8004d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d72:	e7f7      	b.n	8004d64 <USBH_AllocPipe+0x1e>

08004d74 <USBH_FreePipe>:
   if(idx < 11U)
 8004d74:	290a      	cmp	r1, #10
 8004d76:	bf9f      	itttt	ls
 8004d78:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8004d7c:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 8004d80:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8004d84:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 8004d88:	2000      	movs	r0, #0
 8004d8a:	4770      	bx	lr

08004d8c <fs_open_custom>:

extern char json_orders[];
extern WebInterface wi;

int fs_open_custom(struct fs_file *file, const char *name)
{
 8004d8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  int len = 0;
  file->flags = 0;
 8004d8e:	2300      	movs	r3, #0
{
 8004d90:	460d      	mov	r5, r1
 8004d92:	4604      	mov	r4, r0
  file->flags = 0;
 8004d94:	7403      	strb	r3, [r0, #16]

  if ( strcmp( name, "/!!" ) == 0 )
 8004d96:	495e      	ldr	r1, [pc, #376]	; (8004f10 <fs_open_custom+0x184>)
 8004d98:	4628      	mov	r0, r5
 8004d9a:	f7fb fa19 	bl	80001d0 <strcmp>
 8004d9e:	bb20      	cbnz	r0, 8004dea <fs_open_custom+0x5e>
  {
	len = strlen( json_orders );
 8004da0:	485c      	ldr	r0, [pc, #368]	; (8004f14 <fs_open_custom+0x188>)
 8004da2:	f7fb fa1f 	bl	80001e4 <strlen>

	if ( len > 6 )
 8004da6:	2806      	cmp	r0, #6
	len = strlen( json_orders );
 8004da8:	4606      	mov	r6, r0
	if ( len > 6 )
 8004daa:	dd1a      	ble.n	8004de2 <fs_open_custom+0x56>
	{
		strcat( json_orders, "{}]}" );
 8004dac:	495a      	ldr	r1, [pc, #360]	; (8004f18 <fs_open_custom+0x18c>)
 8004dae:	4859      	ldr	r0, [pc, #356]	; (8004f14 <fs_open_custom+0x188>)
 8004db0:	f008 fff8 	bl	800dda4 <strcat>
		len += 4;

		file->data = ( char * )malloc( len + 1 );
 8004db4:	1d70      	adds	r0, r6, #5
 8004db6:	f008 fecb 	bl	800db50 <malloc>
		file->flags |= 0x04; // Must be deleted later
 8004dba:	7c23      	ldrb	r3, [r4, #16]

		strcpy( ( char * )file->data, json_orders );
 8004dbc:	4955      	ldr	r1, [pc, #340]	; (8004f14 <fs_open_custom+0x188>)
		file->data = ( char * )malloc( len + 1 );
 8004dbe:	6020      	str	r0, [r4, #0]
		file->flags |= 0x04; // Must be deleted later
 8004dc0:	f043 0304 	orr.w	r3, r3, #4
 8004dc4:	7423      	strb	r3, [r4, #16]
		strcpy( ( char * )file->data, json_orders );
 8004dc6:	f009 f80a 	bl	800ddde <strcpy>

		strcpy( json_orders, "{\"L\":[" );
 8004dca:	4954      	ldr	r1, [pc, #336]	; (8004f1c <fs_open_custom+0x190>)
 8004dcc:	4851      	ldr	r0, [pc, #324]	; (8004f14 <fs_open_custom+0x188>)
		len += 4;
 8004dce:	1d35      	adds	r5, r6, #4
		strcpy( json_orders, "{\"L\":[" );
 8004dd0:	f009 f805 	bl	800ddde <strcpy>
#endif
  }

  file->len = len;
  file->index = len;
  file->pextension = 0;
 8004dd4:	2300      	movs	r3, #0

  return len;
}
 8004dd6:	4628      	mov	r0, r5
  file->len = len;
 8004dd8:	6065      	str	r5, [r4, #4]
  file->index = len;
 8004dda:	60a5      	str	r5, [r4, #8]
  file->pextension = 0;
 8004ddc:	60e3      	str	r3, [r4, #12]
}
 8004dde:	b002      	add	sp, #8
 8004de0:	bd70      	pop	{r4, r5, r6, pc}
	    file->data = json_nil;
 8004de2:	4b4f      	ldr	r3, [pc, #316]	; (8004f20 <fs_open_custom+0x194>)
	file->data = "ok";
 8004de4:	6023      	str	r3, [r4, #0]
	len = 2;
 8004de6:	2502      	movs	r5, #2
 8004de8:	e7f4      	b.n	8004dd4 <fs_open_custom+0x48>
  else if ( strncmp( name, "/register_player", 16 ) == 0 )
 8004dea:	2210      	movs	r2, #16
 8004dec:	494d      	ldr	r1, [pc, #308]	; (8004f24 <fs_open_custom+0x198>)
 8004dee:	4628      	mov	r0, r5
 8004df0:	f008 fffd 	bl	800ddee <strncmp>
 8004df4:	b940      	cbnz	r0, 8004e08 <fs_open_custom+0x7c>
    file->data = ok;
 8004df6:	4b4c      	ldr	r3, [pc, #304]	; (8004f28 <fs_open_custom+0x19c>)
    wi.button_register_player = 1;
 8004df8:	484c      	ldr	r0, [pc, #304]	; (8004f2c <fs_open_custom+0x1a0>)
    file->data = ok;
 8004dfa:	6023      	str	r3, [r4, #0]
    wi.button_register_player = 1;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	7043      	strb	r3, [r0, #1]
    event_trigger( &wi.evt );
 8004e00:	f007 f977 	bl	800c0f2 <event_trigger>
      len = strlen( ok );
 8004e04:	2556      	movs	r5, #86	; 0x56
 8004e06:	e7e5      	b.n	8004dd4 <fs_open_custom+0x48>
  else if ( strncmp( name, "/acc/", 5 ) == 0 ) // FOR TEST ONLY
 8004e08:	2205      	movs	r2, #5
 8004e0a:	4949      	ldr	r1, [pc, #292]	; (8004f30 <fs_open_custom+0x1a4>)
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f008 ffee 	bl	800ddee <strncmp>
 8004e12:	4606      	mov	r6, r0
 8004e14:	b9b0      	cbnz	r0, 8004e44 <fs_open_custom+0xb8>
    file->data = ok;
 8004e16:	4b44      	ldr	r3, [pc, #272]	; (8004f28 <fs_open_custom+0x19c>)
 8004e18:	6023      	str	r3, [r4, #0]
    ax = strtol( name + 5, &endptr, 10 );
 8004e1a:	1d68      	adds	r0, r5, #5
 8004e1c:	220a      	movs	r2, #10
 8004e1e:	a901      	add	r1, sp, #4
 8004e20:	f009 f8a8 	bl	800df74 <strtol>
 8004e24:	b245      	sxtb	r5, r0
    if ( *endptr ) ay = strtol( endptr + 1, 0, 10 );
 8004e26:	9801      	ldr	r0, [sp, #4]
 8004e28:	7803      	ldrb	r3, [r0, #0]
 8004e2a:	b12b      	cbz	r3, 8004e38 <fs_open_custom+0xac>
 8004e2c:	220a      	movs	r2, #10
 8004e2e:	4631      	mov	r1, r6
 8004e30:	3001      	adds	r0, #1
 8004e32:	f009 f89f 	bl	800df74 <strtol>
 8004e36:	b243      	sxtb	r3, r0
    wi.acc_x = ax;
 8004e38:	483c      	ldr	r0, [pc, #240]	; (8004f2c <fs_open_custom+0x1a0>)
    wi.acc_y = ay;
 8004e3a:	7103      	strb	r3, [r0, #4]
    wi.button_acc = 1;
 8004e3c:	2301      	movs	r3, #1
    wi.acc_x = ax;
 8004e3e:	70c5      	strb	r5, [r0, #3]
    wi.button_acc = 1;
 8004e40:	7083      	strb	r3, [r0, #2]
 8004e42:	e7dd      	b.n	8004e00 <fs_open_custom+0x74>
  else if ( strcmp( name, "/favicon.ico" ) == 0 )
 8004e44:	493b      	ldr	r1, [pc, #236]	; (8004f34 <fs_open_custom+0x1a8>)
 8004e46:	4628      	mov	r0, r5
 8004e48:	f7fb f9c2 	bl	80001d0 <strcmp>
 8004e4c:	b920      	cbnz	r0, 8004e58 <fs_open_custom+0xcc>
	len = img_favicon_size;
 8004e4e:	4b3a      	ldr	r3, [pc, #232]	; (8004f38 <fs_open_custom+0x1ac>)
 8004e50:	681d      	ldr	r5, [r3, #0]
	file->data = ( const char * )img_favicon;
 8004e52:	4b3a      	ldr	r3, [pc, #232]	; (8004f3c <fs_open_custom+0x1b0>)
 8004e54:	6023      	str	r3, [r4, #0]
 8004e56:	e7bd      	b.n	8004dd4 <fs_open_custom+0x48>
  else if ( strcmp( name, "/index.html" ) == 0 )
 8004e58:	4939      	ldr	r1, [pc, #228]	; (8004f40 <fs_open_custom+0x1b4>)
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	f7fb f9b8 	bl	80001d0 <strcmp>
 8004e60:	b920      	cbnz	r0, 8004e6c <fs_open_custom+0xe0>
    file->data = ( const char * )file_index_html;
 8004e62:	4b38      	ldr	r3, [pc, #224]	; (8004f44 <fs_open_custom+0x1b8>)
 8004e64:	6023      	str	r3, [r4, #0]
    len = file_index_html_size;
 8004e66:	4b38      	ldr	r3, [pc, #224]	; (8004f48 <fs_open_custom+0x1bc>)
    len = file_engine_js_size;
 8004e68:	681d      	ldr	r5, [r3, #0]
 8004e6a:	e7b3      	b.n	8004dd4 <fs_open_custom+0x48>
  else if ( strcmp( name, "/engine.js" ) == 0 )
 8004e6c:	4937      	ldr	r1, [pc, #220]	; (8004f4c <fs_open_custom+0x1c0>)
 8004e6e:	4628      	mov	r0, r5
 8004e70:	f7fb f9ae 	bl	80001d0 <strcmp>
 8004e74:	b918      	cbnz	r0, 8004e7e <fs_open_custom+0xf2>
    file->data = ( const char * )file_engine_js;
 8004e76:	4b36      	ldr	r3, [pc, #216]	; (8004f50 <fs_open_custom+0x1c4>)
 8004e78:	6023      	str	r3, [r4, #0]
    len = file_engine_js_size;
 8004e7a:	4b36      	ldr	r3, [pc, #216]	; (8004f54 <fs_open_custom+0x1c8>)
 8004e7c:	e7f4      	b.n	8004e68 <fs_open_custom+0xdc>
  else if ( strcmp( name, "/xbee_log.html" ) == 0 )
 8004e7e:	4936      	ldr	r1, [pc, #216]	; (8004f58 <fs_open_custom+0x1cc>)
 8004e80:	4628      	mov	r0, r5
 8004e82:	f7fb f9a5 	bl	80001d0 <strcmp>
 8004e86:	b930      	cbnz	r0, 8004e96 <fs_open_custom+0x10a>
    file->data = xbee_log_get();
 8004e88:	f008 fe06 	bl	800da98 <xbee_log_get>
 8004e8c:	6020      	str	r0, [r4, #0]
    len = xbee_log_len();
 8004e8e:	f008 fe07 	bl	800daa0 <xbee_log_len>
      len = sprintf( buffer, "ERROR %d", r );
 8004e92:	4605      	mov	r5, r0
 8004e94:	e79e      	b.n	8004dd4 <fs_open_custom+0x48>
  else if ( strcmp( name, "/xbee_switch_to_api.html" ) == 0 )
 8004e96:	4931      	ldr	r1, [pc, #196]	; (8004f5c <fs_open_custom+0x1d0>)
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f7fb f999 	bl	80001d0 <strcmp>
 8004e9e:	b980      	cbnz	r0, 8004ec2 <fs_open_custom+0x136>
	int r = xbee_AT_configure_API1();
 8004ea0:	f008 fd60 	bl	800d964 <xbee_AT_configure_API1>
    file->data = buffer;
 8004ea4:	4b2e      	ldr	r3, [pc, #184]	; (8004f60 <fs_open_custom+0x1d4>)
 8004ea6:	6023      	str	r3, [r4, #0]
    if ( r == 0 )
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	b928      	cbnz	r0, 8004eb8 <fs_open_custom+0x12c>
      len = sprintf( buffer, "SUCCESS" );
 8004eac:	492d      	ldr	r1, [pc, #180]	; (8004f64 <fs_open_custom+0x1d8>)
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f008 ff95 	bl	800ddde <strcpy>
 8004eb4:	2507      	movs	r5, #7
 8004eb6:	e78d      	b.n	8004dd4 <fs_open_custom+0x48>
      len = sprintf( buffer, "ERROR %d", r );
 8004eb8:	492b      	ldr	r1, [pc, #172]	; (8004f68 <fs_open_custom+0x1dc>)
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f008 ff4e 	bl	800dd5c <siprintf>
 8004ec0:	e7e7      	b.n	8004e92 <fs_open_custom+0x106>
  else if ( strcmp( name, "/orange.html" ) == 0 )
 8004ec2:	492a      	ldr	r1, [pc, #168]	; (8004f6c <fs_open_custom+0x1e0>)
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	f7fb f983 	bl	80001d0 <strcmp>
 8004eca:	b938      	cbnz	r0, 8004edc <fs_open_custom+0x150>
      HAL_GPIO_TogglePin( GPIOD, LD3_Pin);
 8004ecc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      HAL_GPIO_TogglePin( GPIOD, LD6_Pin);
 8004ed0:	4827      	ldr	r0, [pc, #156]	; (8004f70 <fs_open_custom+0x1e4>)
 8004ed2:	f7fc ff6a 	bl	8001daa <HAL_GPIO_TogglePin>
      file->data = ok;
 8004ed6:	4b14      	ldr	r3, [pc, #80]	; (8004f28 <fs_open_custom+0x19c>)
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	e793      	b.n	8004e04 <fs_open_custom+0x78>
    else if ( strcmp( name, "/green.html" ) == 0 )
 8004edc:	4925      	ldr	r1, [pc, #148]	; (8004f74 <fs_open_custom+0x1e8>)
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f7fb f976 	bl	80001d0 <strcmp>
 8004ee4:	b910      	cbnz	r0, 8004eec <fs_open_custom+0x160>
      HAL_GPIO_TogglePin( GPIOD, LD4_Pin);
 8004ee6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004eea:	e7f1      	b.n	8004ed0 <fs_open_custom+0x144>
    else if ( strcmp( name, "/red.html" ) == 0 )
 8004eec:	4922      	ldr	r1, [pc, #136]	; (8004f78 <fs_open_custom+0x1ec>)
 8004eee:	4628      	mov	r0, r5
 8004ef0:	f7fb f96e 	bl	80001d0 <strcmp>
 8004ef4:	b910      	cbnz	r0, 8004efc <fs_open_custom+0x170>
      HAL_GPIO_TogglePin( GPIOD, LD5_Pin);
 8004ef6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004efa:	e7e9      	b.n	8004ed0 <fs_open_custom+0x144>
    else if ( strcmp( name, "/blue.html" ) == 0 )
 8004efc:	491f      	ldr	r1, [pc, #124]	; (8004f7c <fs_open_custom+0x1f0>)
 8004efe:	4628      	mov	r0, r5
 8004f00:	f7fb f966 	bl	80001d0 <strcmp>
 8004f04:	b910      	cbnz	r0, 8004f0c <fs_open_custom+0x180>
      HAL_GPIO_TogglePin( GPIOD, LD6_Pin);
 8004f06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f0a:	e7e1      	b.n	8004ed0 <fs_open_custom+0x144>
	file->data = "ok";
 8004f0c:	4b1c      	ldr	r3, [pc, #112]	; (8004f80 <fs_open_custom+0x1f4>)
 8004f0e:	e769      	b.n	8004de4 <fs_open_custom+0x58>
 8004f10:	0800ef80 	.word	0x0800ef80
 8004f14:	200087e4 	.word	0x200087e4
 8004f18:	0800ef84 	.word	0x0800ef84
 8004f1c:	0800ef89 	.word	0x0800ef89
 8004f20:	0800f035 	.word	0x0800f035
 8004f24:	0800ef90 	.word	0x0800ef90
 8004f28:	0800f038 	.word	0x0800f038
 8004f2c:	20008a58 	.word	0x20008a58
 8004f30:	0800efa1 	.word	0x0800efa1
 8004f34:	0800efa7 	.word	0x0800efa7
 8004f38:	200005a8 	.word	0x200005a8
 8004f3c:	20000028 	.word	0x20000028
 8004f40:	0800efb4 	.word	0x0800efb4
 8004f44:	0801227c 	.word	0x0801227c
 8004f48:	080127c8 	.word	0x080127c8
 8004f4c:	0800efc0 	.word	0x0800efc0
 8004f50:	08010e4c 	.word	0x08010e4c
 8004f54:	08012264 	.word	0x08012264
 8004f58:	0800efcb 	.word	0x0800efcb
 8004f5c:	0800efda 	.word	0x0800efda
 8004f60:	20001ac8 	.word	0x20001ac8
 8004f64:	0800eff3 	.word	0x0800eff3
 8004f68:	0800effb 	.word	0x0800effb
 8004f6c:	0800f004 	.word	0x0800f004
 8004f70:	40020c00 	.word	0x40020c00
 8004f74:	0800f011 	.word	0x0800f011
 8004f78:	0800f01d 	.word	0x0800f01d
 8004f7c:	0800f027 	.word	0x0800f027
 8004f80:	0800f032 	.word	0x0800f032

08004f84 <fs_close_custom>:

/*-----------------------------------------------------------------------------------*/
void fs_close_custom(struct fs_file *file)
{
 8004f84:	b510      	push	{r4, lr}
	if ( file->flags & 0x04 )
 8004f86:	7c03      	ldrb	r3, [r0, #16]
 8004f88:	075b      	lsls	r3, r3, #29
{
 8004f8a:	4604      	mov	r4, r0
	if ( file->flags & 0x04 )
 8004f8c:	d502      	bpl.n	8004f94 <fs_close_custom+0x10>
	{
	  free( ( char * )file->data );
 8004f8e:	6800      	ldr	r0, [r0, #0]
 8004f90:	f008 fde6 	bl	800db60 <free>
	}
	file->data = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	6023      	str	r3, [r4, #0]
	file->len = 0;
 8004f98:	6063      	str	r3, [r4, #4]
 8004f9a:	bd10      	pop	{r4, pc}

08004f9c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8004f9c:	b510      	push	{r4, lr}
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	b158      	cbz	r0, 8004fba <fs_open+0x1e>
 8004fa2:	b151      	cbz	r1, 8004fba <fs_open+0x1e>
     return ERR_ARG;
  }

#if LWIP_HTTPD_CUSTOM_FILES
  if (fs_open_custom(file, name)) {
 8004fa4:	f7ff fef2 	bl	8004d8c <fs_open_custom>
 8004fa8:	b118      	cbz	r0, 8004fb2 <fs_open+0x16>
    file->is_custom_file = 1;
 8004faa:	2301      	movs	r3, #1
 8004fac:	7463      	strb	r3, [r4, #17]
    return ERR_OK;
 8004fae:	2000      	movs	r0, #0
 8004fb0:	bd10      	pop	{r4, pc}
  }
  file->is_custom_file = 0;
 8004fb2:	7460      	strb	r0, [r4, #17]
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8004fb4:	f06f 0005 	mvn.w	r0, #5
 8004fb8:	bd10      	pop	{r4, pc}
     return ERR_ARG;
 8004fba:	f06f 000f 	mvn.w	r0, #15
}
 8004fbe:	bd10      	pop	{r4, pc}

08004fc0 <fs_close>:
/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
#if LWIP_HTTPD_CUSTOM_FILES
  if (file->is_custom_file) {
 8004fc0:	7c43      	ldrb	r3, [r0, #17]
 8004fc2:	b10b      	cbz	r3, 8004fc8 <fs_close+0x8>
    fs_close_custom(file);
 8004fc4:	f7ff bfde 	b.w	8004f84 <fs_close_custom>
 8004fc8:	4770      	bx	lr

08004fca <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8004fca:	6842      	ldr	r2, [r0, #4]
 8004fcc:	6880      	ldr	r0, [r0, #8]
}
 8004fce:	1a10      	subs	r0, r2, r0
 8004fd0:	4770      	bx	lr
	...

08004fd4 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 8004fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd8:	4605      	mov	r5, r0
 8004fda:	460f      	mov	r7, r1
 8004fdc:	4698      	mov	r8, r3
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8004fde:	4616      	mov	r6, r2
 8004fe0:	b932      	cbnz	r2, 8004ff0 <http_write+0x1c>
 8004fe2:	4b18      	ldr	r3, [pc, #96]	; (8005044 <http_write+0x70>)
 8004fe4:	4918      	ldr	r1, [pc, #96]	; (8005048 <http_write+0x74>)
 8004fe6:	4819      	ldr	r0, [pc, #100]	; (800504c <http_write+0x78>)
 8004fe8:	f44f 7204 	mov.w	r2, #528	; 0x210
 8004fec:	f008 fe8e 	bl	800dd0c <iprintf>
  len = *length;
 8004ff0:	8830      	ldrh	r0, [r6, #0]
  if (len == 0) {
 8004ff2:	b328      	cbz	r0, 8005040 <http_write+0x6c>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8004ff4:	8e6c      	ldrh	r4, [r5, #50]	; 0x32
 8004ff6:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8004ffa:	0064      	lsls	r4, r4, #1
 8004ffc:	b2a4      	uxth	r4, r4
 8004ffe:	429c      	cmp	r4, r3
 8005000:	bf28      	it	cs
 8005002:	461c      	movcs	r4, r3
 8005004:	4284      	cmp	r4, r0
 8005006:	bf28      	it	cs
 8005008:	4604      	movcs	r4, r0
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 800500a:	4643      	mov	r3, r8
 800500c:	4622      	mov	r2, r4
 800500e:	4639      	mov	r1, r7
 8005010:	4628      	mov	r0, r5
 8005012:	f005 f845 	bl	800a0a0 <tcp_write>
    if (err == ERR_MEM) {
 8005016:	1c43      	adds	r3, r0, #1
 8005018:	d10d      	bne.n	8005036 <http_write+0x62>
      if ((tcp_sndbuf(pcb) == 0) ||
 800501a:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800501e:	b133      	cbz	r3, 800502e <http_write+0x5a>
 8005020:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8005024:	2b08      	cmp	r3, #8
 8005026:	d802      	bhi.n	800502e <http_write+0x5a>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
          /* no need to try smaller sizes */
          len = 1;
      } else {
        len /= 2;
 8005028:	0864      	lsrs	r4, r4, #1
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800502a:	2c01      	cmp	r4, #1
 800502c:	d8ed      	bhi.n	800500a <http_write+0x36>
  if (err == ERR_OK) {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800502e:	2300      	movs	r3, #0
 8005030:	8033      	strh	r3, [r6, #0]
 8005032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (err == ERR_OK) {
 8005036:	2800      	cmp	r0, #0
 8005038:	d1f9      	bne.n	800502e <http_write+0x5a>
    *length = len;
 800503a:	8034      	strh	r4, [r6, #0]
 800503c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
}
 8005040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005044:	0800f361 	.word	0x0800f361
 8005048:	0800f398 	.word	0x0800f398
 800504c:	0800f3a7 	.word	0x0800f3a7

08005050 <http_state_eof>:
{
 8005050:	b510      	push	{r4, lr}
 8005052:	4604      	mov	r4, r0
  if(hs->handle) {
 8005054:	6940      	ldr	r0, [r0, #20]
 8005056:	b118      	cbz	r0, 8005060 <http_state_eof+0x10>
    fs_close(hs->handle);
 8005058:	f7ff ffb2 	bl	8004fc0 <fs_close>
    hs->handle = NULL;
 800505c:	2300      	movs	r3, #0
 800505e:	6163      	str	r3, [r4, #20]
  if (hs->req) {
 8005060:	6a20      	ldr	r0, [r4, #32]
 8005062:	b118      	cbz	r0, 800506c <http_state_eof+0x1c>
    pbuf_free(hs->req);
 8005064:	f002 fab8 	bl	80075d8 <pbuf_free>
    hs->req = NULL;
 8005068:	2300      	movs	r3, #0
 800506a:	6223      	str	r3, [r4, #32]
 800506c:	bd10      	pop	{r4, pc}
	...

08005070 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 8005074:	490a      	ldr	r1, [pc, #40]	; (80050a0 <http_get_404_file+0x30>)
 8005076:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8005078:	4604      	mov	r4, r0
 800507a:	f7ff ff8f 	bl	8004f9c <fs_open>
  if (err != ERR_OK) {
 800507e:	b168      	cbz	r0, 800509c <http_get_404_file+0x2c>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8005080:	4908      	ldr	r1, [pc, #32]	; (80050a4 <http_get_404_file+0x34>)
 8005082:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8005084:	4620      	mov	r0, r4
 8005086:	f7ff ff89 	bl	8004f9c <fs_open>
    if (err != ERR_OK) {
 800508a:	b138      	cbz	r0, 800509c <http_get_404_file+0x2c>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800508c:	4906      	ldr	r1, [pc, #24]	; (80050a8 <http_get_404_file+0x38>)
 800508e:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8005090:	4620      	mov	r0, r4
 8005092:	f7ff ff83 	bl	8004f9c <fs_open>
      if (err != ERR_OK) {
 8005096:	b108      	cbz	r0, 800509c <http_get_404_file+0x2c>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8005098:	2400      	movs	r4, #0
 800509a:	602c      	str	r4, [r5, #0]
      }
    }
  }

  return &hs->file_handle;
}
 800509c:	4620      	mov	r0, r4
 800509e:	bd38      	pop	{r3, r4, r5, pc}
 80050a0:	0800f30c 	.word	0x0800f30c
 80050a4:	0800f316 	.word	0x0800f316
 80050a8:	0800f31f 	.word	0x0800f31f

080050ac <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80050ac:	b570      	push	{r4, r5, r6, lr}
 80050ae:	460c      	mov	r4, r1
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80050b0:	4615      	mov	r5, r2
 80050b2:	bb42      	cbnz	r2, 8005106 <http_accept+0x5a>
 80050b4:	b339      	cbz	r1, 8005106 <http_accept+0x5a>
    return ERR_VAL;
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 80050b6:	2101      	movs	r1, #1
 80050b8:	4620      	mov	r0, r4
 80050ba:	f002 fee5 	bl	8007e88 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80050be:	2054      	movs	r0, #84	; 0x54
 80050c0:	f002 f828 	bl	8007114 <mem_malloc>
  if (ret != NULL) {
 80050c4:	4606      	mov	r6, r0
 80050c6:	b308      	cbz	r0, 800510c <http_accept+0x60>
  memset(hs, 0, sizeof(struct http_state));
 80050c8:	2254      	movs	r2, #84	; 0x54
 80050ca:	4629      	mov	r1, r5
 80050cc:	f008 fd6a 	bl	800dba4 <memset>
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 80050d0:	2305      	movs	r3, #5
 80050d2:	f8a6 304e 	strh.w	r3, [r6, #78]	; 0x4e
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 80050d6:	4631      	mov	r1, r6
 80050d8:	4620      	mov	r0, r4
  hs->pcb = pcb;
 80050da:	61f4      	str	r4, [r6, #28]
  tcp_arg(pcb, hs);
 80050dc:	f002 feec 	bl	8007eb8 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 80050e0:	490c      	ldr	r1, [pc, #48]	; (8005114 <http_accept+0x68>)
 80050e2:	4620      	mov	r0, r4
 80050e4:	f002 feec 	bl	8007ec0 <tcp_recv>
  tcp_err(pcb, http_err);
 80050e8:	490b      	ldr	r1, [pc, #44]	; (8005118 <http_accept+0x6c>)
 80050ea:	4620      	mov	r0, r4
 80050ec:	f002 ff16 	bl	8007f1c <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80050f0:	490a      	ldr	r1, [pc, #40]	; (800511c <http_accept+0x70>)
 80050f2:	4620      	mov	r0, r4
 80050f4:	2204      	movs	r2, #4
 80050f6:	f002 ff2f 	bl	8007f58 <tcp_poll>
  tcp_sent(pcb, http_sent);
 80050fa:	4909      	ldr	r1, [pc, #36]	; (8005120 <http_accept+0x74>)
 80050fc:	4620      	mov	r0, r4
 80050fe:	f002 fef7 	bl	8007ef0 <tcp_sent>

  return ERR_OK;
}
 8005102:	4628      	mov	r0, r5
 8005104:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8005106:	f06f 0505 	mvn.w	r5, #5
 800510a:	e7fa      	b.n	8005102 <http_accept+0x56>
    return ERR_MEM;
 800510c:	f04f 35ff 	mov.w	r5, #4294967295
 8005110:	e7f7      	b.n	8005102 <http_accept+0x56>
 8005112:	bf00      	nop
 8005114:	08005675 	.word	0x08005675
 8005118:	080059c1 	.word	0x080059c1
 800511c:	08005639 	.word	0x08005639
 8005120:	08005621 	.word	0x08005621

08005124 <http_find_file>:
{
 8005124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005128:	4604      	mov	r4, r0
  size_t uri_len = strlen(uri);
 800512a:	4608      	mov	r0, r1
{
 800512c:	9101      	str	r1, [sp, #4]
 800512e:	4692      	mov	sl, r2
  size_t uri_len = strlen(uri);
 8005130:	460d      	mov	r5, r1
 8005132:	f7fb f857 	bl	80001e4 <strlen>
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 8005136:	b9c8      	cbnz	r0, 800516c <http_find_file+0x48>
    params = (char *)strchr(uri, '?');
 8005138:	213f      	movs	r1, #63	; 0x3f
 800513a:	9801      	ldr	r0, [sp, #4]
 800513c:	f008 fe41 	bl	800ddc2 <strchr>
    if (params != NULL) {
 8005140:	2800      	cmp	r0, #0
 8005142:	f040 809a 	bne.w	800527a <http_find_file+0x156>
    err = fs_open(&hs->file_handle, uri);
 8005146:	9901      	ldr	r1, [sp, #4]
 8005148:	4620      	mov	r0, r4
 800514a:	4625      	mov	r5, r4
 800514c:	f7ff ff26 	bl	8004f9c <fs_open>
    if (err == ERR_OK) {
 8005150:	b120      	cbz	r0, 800515c <http_find_file+0x38>
      file = http_get_404_file(hs, &uri);
 8005152:	a901      	add	r1, sp, #4
 8005154:	4620      	mov	r0, r4
 8005156:	f7ff ff8b 	bl	8005070 <http_get_404_file>
 800515a:	4605      	mov	r5, r0
  if (file == NULL) {
 800515c:	2d00      	cmp	r5, #0
 800515e:	d143      	bne.n	80051e8 <http_find_file+0xc4>
    file = http_get_404_file(hs, &uri);
 8005160:	a901      	add	r1, sp, #4
 8005162:	4620      	mov	r0, r4
 8005164:	f7ff ff84 	bl	8005070 <http_get_404_file>
 8005168:	4605      	mov	r5, r0
 800516a:	e03d      	b.n	80051e8 <http_find_file+0xc4>
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800516c:	1e46      	subs	r6, r0, #1
 800516e:	5dab      	ldrb	r3, [r5, r6]
 8005170:	2b2f      	cmp	r3, #47	; 0x2f
 8005172:	d1e1      	bne.n	8005138 <http_find_file+0x14>
 8005174:	4b7e      	ldr	r3, [pc, #504]	; (8005370 <http_find_file+0x24c>)
 8005176:	429d      	cmp	r5, r3
 8005178:	4698      	mov	r8, r3
 800517a:	d101      	bne.n	8005180 <http_find_file+0x5c>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800517c:	2801      	cmp	r0, #1
 800517e:	d1db      	bne.n	8005138 <http_find_file+0x14>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8005180:	2e3f      	cmp	r6, #63	; 0x3f
 8005182:	bf28      	it	cs
 8005184:	263f      	movcs	r6, #63	; 0x3f
    if (copy_len > 0) {
 8005186:	b13e      	cbz	r6, 8005198 <http_find_file+0x74>
      MEMCPY(http_uri_buf, uri, copy_len);
 8005188:	4632      	mov	r2, r6
 800518a:	4629      	mov	r1, r5
 800518c:	4878      	ldr	r0, [pc, #480]	; (8005370 <http_find_file+0x24c>)
 800518e:	f008 fcfe 	bl	800db8e <memcpy>
      http_uri_buf[copy_len] = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	f808 3006 	strb.w	r3, [r8, r6]
        file_name = g_psDefaultFilenames[loop].name;
 8005198:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80053bc <http_find_file+0x298>
        file_name = http_uri_buf;
 800519c:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 8005370 <http_find_file+0x24c>
{
 80051a0:	2700      	movs	r7, #0
      if (copy_len > 0) {
 80051a2:	b19e      	cbz	r6, 80051cc <http_find_file+0xa8>
        if (len_left > 0) {
 80051a4:	f1d6 023f 	rsbs	r2, r6, #63	; 0x3f
 80051a8:	d00e      	beq.n	80051c8 <http_find_file+0xa4>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 80051aa:	f859 5037 	ldr.w	r5, [r9, r7, lsl #3]
 80051ae:	9200      	str	r2, [sp, #0]
 80051b0:	4628      	mov	r0, r5
 80051b2:	f7fb f817 	bl	80001e4 <strlen>
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 80051b6:	9a00      	ldr	r2, [sp, #0]
 80051b8:	4282      	cmp	r2, r0
 80051ba:	bf28      	it	cs
 80051bc:	4602      	movcs	r2, r0
 80051be:	4629      	mov	r1, r5
 80051c0:	eb08 0006 	add.w	r0, r8, r6
 80051c4:	f008 fce3 	bl	800db8e <memcpy>
        file_name = http_uri_buf;
 80051c8:	465b      	mov	r3, fp
 80051ca:	e001      	b.n	80051d0 <http_find_file+0xac>
        file_name = g_psDefaultFilenames[loop].name;
 80051cc:	f859 3037 	ldr.w	r3, [r9, r7, lsl #3]
      err = fs_open(&hs->file_handle, file_name);
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	4619      	mov	r1, r3
 80051d4:	4620      	mov	r0, r4
 80051d6:	f7ff fee1 	bl	8004f9c <fs_open>
 80051da:	4625      	mov	r5, r4
      if(err == ERR_OK) {
 80051dc:	9b00      	ldr	r3, [sp, #0]
 80051de:	2800      	cmp	r0, #0
 80051e0:	d147      	bne.n	8005272 <http_find_file+0x14e>
        uri = file_name;
 80051e2:	9301      	str	r3, [sp, #4]
  if (file == NULL) {
 80051e4:	2c00      	cmp	r4, #0
 80051e6:	d0a7      	beq.n	8005138 <http_find_file+0x14>
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80051e8:	9e01      	ldr	r6, [sp, #4]
    hs->handle = file;
 80051ea:	6165      	str	r5, [r4, #20]
  if (file != NULL) {
 80051ec:	2d00      	cmp	r5, #0
 80051ee:	d049      	beq.n	8005284 <http_find_file+0x160>
    hs->file = file->data;
 80051f0:	682b      	ldr	r3, [r5, #0]
 80051f2:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80051f4:	686b      	ldr	r3, [r5, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	da06      	bge.n	8005208 <http_find_file+0xe4>
 80051fa:	4b5e      	ldr	r3, [pc, #376]	; (8005374 <http_find_file+0x250>)
 80051fc:	495e      	ldr	r1, [pc, #376]	; (8005378 <http_find_file+0x254>)
 80051fe:	485f      	ldr	r0, [pc, #380]	; (800537c <http_find_file+0x258>)
 8005200:	f640 02cf 	movw	r2, #2255	; 0x8cf
 8005204:	f008 fd82 	bl	800dd0c <iprintf>
    if (file->is_custom_file && (file->data == NULL)) {
 8005208:	7c6b      	ldrb	r3, [r5, #17]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d038      	beq.n	8005280 <http_find_file+0x15c>
 800520e:	682b      	ldr	r3, [r5, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d135      	bne.n	8005280 <http_find_file+0x15c>
      hs->left = file->len;
 8005214:	6263      	str	r3, [r4, #36]	; 0x24
    hs->retries = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800521c:	f1ba 0f00 	cmp.w	sl, #0
 8005220:	d010      	beq.n	8005244 <http_find_file+0x120>
 8005222:	6963      	ldr	r3, [r4, #20]
 8005224:	7c1b      	ldrb	r3, [r3, #16]
 8005226:	07da      	lsls	r2, r3, #31
 8005228:	d50c      	bpl.n	8005244 <http_find_file+0x120>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800522a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800522c:	4954      	ldr	r1, [pc, #336]	; (8005380 <http_find_file+0x25c>)
 800522e:	69a0      	ldr	r0, [r4, #24]
 8005230:	f000 fc17 	bl	8005a62 <lwip_strnstr>
      if (file_start != NULL) {
 8005234:	b130      	cbz	r0, 8005244 <http_find_file+0x120>
        size_t diff = file_start + 4 - hs->file;
 8005236:	69a3      	ldr	r3, [r4, #24]
 8005238:	3004      	adds	r0, #4
 800523a:	1ac2      	subs	r2, r0, r3
        hs->left -= (u32_t)diff;
 800523c:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hs->file += diff;
 800523e:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	6263      	str	r3, [r4, #36]	; 0x24
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 8005244:	6963      	ldr	r3, [r4, #20]
 8005246:	b113      	cbz	r3, 800524e <http_find_file+0x12a>
 8005248:	7c1b      	ldrb	r3, [r3, #16]
 800524a:	07db      	lsls	r3, r3, #31
 800524c:	d40d      	bmi.n	800526a <http_find_file+0x146>
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 800524e:	4b4d      	ldr	r3, [pc, #308]	; (8005384 <http_find_file+0x260>)
 8005250:	6323      	str	r3, [r4, #48]	; 0x30
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEPALIVE] = NULL;
 8005252:	2300      	movs	r3, #0
 8005254:	6363      	str	r3, [r4, #52]	; 0x34
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 8005256:	63a3      	str	r3, [r4, #56]	; 0x38
  if (uri == NULL) {
 8005258:	b9ce      	cbnz	r6, 800528e <http_find_file+0x16a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800525a:	4b4b      	ldr	r3, [pc, #300]	; (8005388 <http_find_file+0x264>)
 800525c:	62e3      	str	r3, [r4, #44]	; 0x2c
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 800525e:	4b4b      	ldr	r3, [pc, #300]	; (800538c <http_find_file+0x268>)
 8005260:	63e3      	str	r3, [r4, #60]	; 0x3c
    hs->hdr_index = 0;
 8005262:	f8a4 604e 	strh.w	r6, [r4, #78]	; 0x4e
    hs->hdr_pos = 0;
 8005266:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
}
 800526a:	2000      	movs	r0, #0
 800526c:	b003      	add	sp, #12
 800526e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8005272:	3701      	adds	r7, #1
 8005274:	2f05      	cmp	r7, #5
 8005276:	d194      	bne.n	80051a2 <http_find_file+0x7e>
 8005278:	e75e      	b.n	8005138 <http_find_file+0x14>
      *params = '\0';
 800527a:	2300      	movs	r3, #0
 800527c:	7003      	strb	r3, [r0, #0]
 800527e:	e762      	b.n	8005146 <http_find_file+0x22>
      hs->left = file->len;
 8005280:	686b      	ldr	r3, [r5, #4]
 8005282:	e7c7      	b.n	8005214 <http_find_file+0xf0>
    hs->file = NULL;
 8005284:	61a5      	str	r5, [r4, #24]
    hs->left = 0;
 8005286:	6265      	str	r5, [r4, #36]	; 0x24
    hs->retries = 0;
 8005288:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 800528c:	e7da      	b.n	8005244 <http_find_file+0x120>
  if (strstr(uri, "404")) {
 800528e:	4940      	ldr	r1, [pc, #256]	; (8005390 <http_find_file+0x26c>)
 8005290:	4630      	mov	r0, r6
 8005292:	f008 fdd3 	bl	800de3c <strstr>
 8005296:	b308      	cbz	r0, 80052dc <http_find_file+0x1b8>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 8005298:	4b3b      	ldr	r3, [pc, #236]	; (8005388 <http_find_file+0x264>)
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 800529a:	62e3      	str	r3, [r4, #44]	; 0x2c
  vars = strchr(uri, '?');
 800529c:	213f      	movs	r1, #63	; 0x3f
 800529e:	4630      	mov	r0, r6
 80052a0:	f008 fd8f 	bl	800ddc2 <strchr>
  if(vars) {
 80052a4:	4607      	mov	r7, r0
 80052a6:	b108      	cbz	r0, 80052ac <http_find_file+0x188>
    *vars = '\0';
 80052a8:	2300      	movs	r3, #0
 80052aa:	7003      	strb	r3, [r0, #0]
  tmp = strchr(uri, '.');
 80052ac:	4630      	mov	r0, r6
 80052ae:	212e      	movs	r1, #46	; 0x2e
 80052b0:	f008 fd87 	bl	800ddc2 <strchr>
  ext = NULL;
 80052b4:	2600      	movs	r6, #0
  while (tmp) {
 80052b6:	bb08      	cbnz	r0, 80052fc <http_find_file+0x1d8>
  if (ext != NULL) {
 80052b8:	b166      	cbz	r6, 80052d4 <http_find_file+0x1b0>
      if(!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 80052ba:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80053ac <http_find_file+0x288>
  if (ext != NULL) {
 80052be:	4605      	mov	r5, r0
      if(!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 80052c0:	4631      	mov	r1, r6
 80052c2:	f858 0035 	ldr.w	r0, [r8, r5, lsl #3]
 80052c6:	f000 fbea 	bl	8005a9e <lwip_stricmp>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d035      	beq.n	800533a <http_find_file+0x216>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 80052ce:	3501      	adds	r5, #1
 80052d0:	2d14      	cmp	r5, #20
 80052d2:	d1f5      	bne.n	80052c0 <http_find_file+0x19c>
  if (vars) {
 80052d4:	b9c7      	cbnz	r7, 8005308 <http_find_file+0x1e4>
  } else if (!ext) {
 80052d6:	bb76      	cbnz	r6, 8005336 <http_find_file+0x212>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 80052d8:	4b2e      	ldr	r3, [pc, #184]	; (8005394 <http_find_file+0x270>)
 80052da:	e01e      	b.n	800531a <http_find_file+0x1f6>
  } else if (strstr(uri, "400")) {
 80052dc:	492e      	ldr	r1, [pc, #184]	; (8005398 <http_find_file+0x274>)
 80052de:	4630      	mov	r0, r6
 80052e0:	f008 fdac 	bl	800de3c <strstr>
 80052e4:	b108      	cbz	r0, 80052ea <http_find_file+0x1c6>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 80052e6:	4b2d      	ldr	r3, [pc, #180]	; (800539c <http_find_file+0x278>)
 80052e8:	e7d7      	b.n	800529a <http_find_file+0x176>
  } else if (strstr(uri, "501")) {
 80052ea:	492d      	ldr	r1, [pc, #180]	; (80053a0 <http_find_file+0x27c>)
 80052ec:	4630      	mov	r0, r6
 80052ee:	f008 fda5 	bl	800de3c <strstr>
 80052f2:	b108      	cbz	r0, 80052f8 <http_find_file+0x1d4>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 80052f4:	4b2b      	ldr	r3, [pc, #172]	; (80053a4 <http_find_file+0x280>)
 80052f6:	e7d0      	b.n	800529a <http_find_file+0x176>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 80052f8:	4b2b      	ldr	r3, [pc, #172]	; (80053a8 <http_find_file+0x284>)
 80052fa:	e7ce      	b.n	800529a <http_find_file+0x176>
    ext = tmp + 1;
 80052fc:	1c46      	adds	r6, r0, #1
    tmp = strchr(ext, '.');
 80052fe:	212e      	movs	r1, #46	; 0x2e
 8005300:	4630      	mov	r0, r6
 8005302:	f008 fd5e 	bl	800ddc2 <strchr>
 8005306:	e7d6      	b.n	80052b6 <http_find_file+0x192>
  if (vars) {
 8005308:	2514      	movs	r5, #20
    *vars = '?';
 800530a:	233f      	movs	r3, #63	; 0x3f
  if(content_type < NUM_HTTP_HEADERS) {
 800530c:	2d14      	cmp	r5, #20
    *vars = '?';
 800530e:	703b      	strb	r3, [r7, #0]
  if(content_type < NUM_HTTP_HEADERS) {
 8005310:	d0e1      	beq.n	80052d6 <http_find_file+0x1b2>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 8005312:	4826      	ldr	r0, [pc, #152]	; (80053ac <http_find_file+0x288>)
 8005314:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8005318:	686b      	ldr	r3, [r5, #4]
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 800531a:	63e3      	str	r3, [r4, #60]	; 0x3c
  if ((hs->handle == NULL) ||
 800531c:	6963      	ldr	r3, [r4, #20]
 800531e:	b123      	cbz	r3, 800532a <http_find_file+0x206>
 8005320:	7c1a      	ldrb	r2, [r3, #16]
 8005322:	f002 0203 	and.w	r2, r2, #3
 8005326:	2a01      	cmp	r2, #1
 8005328:	d10a      	bne.n	8005340 <http_find_file+0x21c>
  hs->hdr_index = 0;
 800532a:	2300      	movs	r3, #0
 800532c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  hs->hdr_pos = 0;
 8005330:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8005334:	e799      	b.n	800526a <http_find_file+0x146>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 8005336:	4b1e      	ldr	r3, [pc, #120]	; (80053b0 <http_find_file+0x28c>)
 8005338:	e7ef      	b.n	800531a <http_find_file+0x1f6>
  if (vars) {
 800533a:	2f00      	cmp	r7, #0
 800533c:	d1e5      	bne.n	800530a <http_find_file+0x1e6>
 800533e:	e7e8      	b.n	8005312 <http_find_file+0x1ee>
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 8005340:	f104 0540 	add.w	r5, r4, #64	; 0x40
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	210c      	movs	r1, #12
 8005348:	4628      	mov	r0, r5
 800534a:	f000 fbbf 	bl	8005acc <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 800534e:	4628      	mov	r0, r5
 8005350:	f7fa ff48 	bl	80001e4 <strlen>
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 8005354:	2809      	cmp	r0, #9
 8005356:	d8e8      	bhi.n	800532a <http_find_file+0x206>
      SMEMCPY(&hs->hdr_content_len[len], CRLF "\0", 3);
 8005358:	3040      	adds	r0, #64	; 0x40
 800535a:	4b16      	ldr	r3, [pc, #88]	; (80053b4 <http_find_file+0x290>)
 800535c:	1822      	adds	r2, r4, r0
 800535e:	8819      	ldrh	r1, [r3, #0]
 8005360:	789b      	ldrb	r3, [r3, #2]
 8005362:	5221      	strh	r1, [r4, r0]
 8005364:	7093      	strb	r3, [r2, #2]
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 8005366:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <http_find_file+0x294>)
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 8005368:	63a5      	str	r5, [r4, #56]	; 0x38
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 800536a:	6363      	str	r3, [r4, #52]	; 0x34
 800536c:	e7dd      	b.n	800532a <http_find_file+0x206>
 800536e:	bf00      	nop
 8005370:	200007b0 	.word	0x200007b0
 8005374:	0800f361 	.word	0x0800f361
 8005378:	0800f18f 	.word	0x0800f18f
 800537c:	0800f3a7 	.word	0x0800f3a7
 8005380:	0800f4c0 	.word	0x0800f4c0
 8005384:	0800f1ad 	.word	0x0800f1ad
 8005388:	0800f1ed 	.word	0x0800f1ed
 800538c:	0800f20b 	.word	0x0800f20b
 8005390:	0800f25b 	.word	0x0800f25b
 8005394:	0800f2b3 	.word	0x0800f2b3
 8005398:	0800f25f 	.word	0x0800f25f
 800539c:	0800f263 	.word	0x0800f263
 80053a0:	0800f27e 	.word	0x0800f27e
 80053a4:	0800f282 	.word	0x0800f282
 80053a8:	0800f2a1 	.word	0x0800f2a1
 80053ac:	0800f0b8 	.word	0x0800f0b8
 80053b0:	0800f2de 	.word	0x0800f2de
 80053b4:	0800ef78 	.word	0x0800ef78
 80053b8:	0800f2fb 	.word	0x0800f2fb
 80053bc:	0800f090 	.word	0x0800f090

080053c0 <http_post_rxpbuf>:
{
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	4604      	mov	r4, r0
  if (p != NULL) {
 80053c4:	b131      	cbz	r1, 80053d4 <http_post_rxpbuf+0x14>
    if (hs->post_content_len_left < p->tot_len) {
 80053c6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80053c8:	890a      	ldrh	r2, [r1, #8]
 80053ca:	4293      	cmp	r3, r2
      hs->post_content_len_left = 0;
 80053cc:	bf34      	ite	cc
 80053ce:	2300      	movcc	r3, #0
      hs->post_content_len_left -= p->tot_len;
 80053d0:	1a9b      	subcs	r3, r3, r2
 80053d2:	6503      	str	r3, [r0, #80]	; 0x50
  err = httpd_post_receive_data(hs, p);
 80053d4:	4620      	mov	r0, r4
 80053d6:	f007 fb8c 	bl	800caf2 <httpd_post_receive_data>
  if (err != ERR_OK) {
 80053da:	b108      	cbz	r0, 80053e0 <http_post_rxpbuf+0x20>
    hs->post_content_len_left = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	6523      	str	r3, [r4, #80]	; 0x50
  if (hs->post_content_len_left == 0) {
 80053e0:	6d26      	ldr	r6, [r4, #80]	; 0x50
 80053e2:	b96e      	cbnz	r6, 8005400 <http_post_rxpbuf+0x40>
  http_uri_buf[0] = 0;
 80053e4:	4d07      	ldr	r5, [pc, #28]	; (8005404 <http_post_rxpbuf+0x44>)
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80053e6:	4620      	mov	r0, r4
 80053e8:	4629      	mov	r1, r5
 80053ea:	223f      	movs	r2, #63	; 0x3f
  http_uri_buf[0] = 0;
 80053ec:	702e      	strb	r6, [r5, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80053ee:	f007 fb82 	bl	800caf6 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 80053f2:	4632      	mov	r2, r6
 80053f4:	4629      	mov	r1, r5
 80053f6:	4620      	mov	r0, r4
}
 80053f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return http_find_file(hs, http_uri_buf, 0);
 80053fc:	f7ff be92 	b.w	8005124 <http_find_file>
}
 8005400:	2000      	movs	r0, #0
 8005402:	bd70      	pop	{r4, r5, r6, pc}
 8005404:	200007b0 	.word	0x200007b0

08005408 <http_close_conn>:
{
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4604      	mov	r4, r0
  if (hs != NULL) {
 800540c:	460d      	mov	r5, r1
 800540e:	b141      	cbz	r1, 8005422 <http_close_conn+0x1a>
    if ((hs->post_content_len_left != 0)
 8005410:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8005412:	b133      	cbz	r3, 8005422 <http_close_conn+0x1a>
      http_uri_buf[0] = 0;
 8005414:	4917      	ldr	r1, [pc, #92]	; (8005474 <http_close_conn+0x6c>)
 8005416:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8005418:	223f      	movs	r2, #63	; 0x3f
 800541a:	4628      	mov	r0, r5
      http_uri_buf[0] = 0;
 800541c:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800541e:	f007 fb6a 	bl	800caf6 <httpd_post_finished>
  tcp_arg(pcb, NULL);
 8005422:	2100      	movs	r1, #0
 8005424:	4620      	mov	r0, r4
 8005426:	f002 fd47 	bl	8007eb8 <tcp_arg>
  tcp_recv(pcb, NULL);
 800542a:	2100      	movs	r1, #0
 800542c:	4620      	mov	r0, r4
 800542e:	f002 fd47 	bl	8007ec0 <tcp_recv>
  tcp_err(pcb, NULL);
 8005432:	2100      	movs	r1, #0
 8005434:	4620      	mov	r0, r4
 8005436:	f002 fd71 	bl	8007f1c <tcp_err>
  tcp_poll(pcb, NULL, 0);
 800543a:	2200      	movs	r2, #0
 800543c:	4611      	mov	r1, r2
 800543e:	4620      	mov	r0, r4
 8005440:	f002 fd8a 	bl	8007f58 <tcp_poll>
  tcp_sent(pcb, NULL);
 8005444:	2100      	movs	r1, #0
 8005446:	4620      	mov	r0, r4
 8005448:	f002 fd52 	bl	8007ef0 <tcp_sent>
  if (hs != NULL) {
 800544c:	b12d      	cbz	r5, 800545a <http_close_conn+0x52>
    http_state_eof(hs);
 800544e:	4628      	mov	r0, r5
 8005450:	f7ff fdfe 	bl	8005050 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8005454:	4628      	mov	r0, r5
 8005456:	f001 fd3d 	bl	8006ed4 <mem_free>
  err = tcp_close(pcb);
 800545a:	4620      	mov	r0, r4
 800545c:	f003 f88c 	bl	8008578 <tcp_close>
  if (err != ERR_OK) {
 8005460:	4605      	mov	r5, r0
 8005462:	b120      	cbz	r0, 800546e <http_close_conn+0x66>
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005464:	2204      	movs	r2, #4
 8005466:	4904      	ldr	r1, [pc, #16]	; (8005478 <http_close_conn+0x70>)
 8005468:	4620      	mov	r0, r4
 800546a:	f002 fd75 	bl	8007f58 <tcp_poll>
}
 800546e:	4628      	mov	r0, r5
 8005470:	bd38      	pop	{r3, r4, r5, pc}
 8005472:	bf00      	nop
 8005474:	200007b0 	.word	0x200007b0
 8005478:	08005639 	.word	0x08005639

0800547c <http_check_eof>:
{
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4605      	mov	r5, r0
  if (hs->handle == NULL) {
 8005480:	6948      	ldr	r0, [r1, #20]
{
 8005482:	460c      	mov	r4, r1
  if (hs->handle == NULL) {
 8005484:	b928      	cbnz	r0, 8005492 <http_check_eof+0x16>
    http_close_conn(pcb, hs);
 8005486:	4621      	mov	r1, r4
 8005488:	4628      	mov	r0, r5
 800548a:	f7ff ffbd 	bl	8005408 <http_close_conn>
    return 0;
 800548e:	2000      	movs	r0, #0
 8005490:	bd38      	pop	{r3, r4, r5, pc}
  bytes_left = fs_bytes_left(hs->handle);
 8005492:	f7ff fd9a 	bl	8004fca <fs_bytes_left>
  if (bytes_left <= 0) {
 8005496:	2800      	cmp	r0, #0
 8005498:	ddf5      	ble.n	8005486 <http_check_eof+0xa>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800549a:	4b04      	ldr	r3, [pc, #16]	; (80054ac <http_check_eof+0x30>)
 800549c:	4904      	ldr	r1, [pc, #16]	; (80054b0 <http_check_eof+0x34>)
 800549e:	4805      	ldr	r0, [pc, #20]	; (80054b4 <http_check_eof+0x38>)
 80054a0:	f240 4283 	movw	r2, #1155	; 0x483
 80054a4:	f008 fc32 	bl	800dd0c <iprintf>
  return 1;
 80054a8:	2001      	movs	r0, #1
}
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	0800f361 	.word	0x0800f361
 80054b0:	0800f158 	.word	0x0800f158
 80054b4:	0800f3a7 	.word	0x0800f3a7

080054b8 <http_send>:
{
 80054b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054bc:	4605      	mov	r5, r0
  if (hs == NULL) {
 80054be:	460c      	mov	r4, r1
 80054c0:	b921      	cbnz	r1, 80054cc <http_send+0x14>
    return 0;
 80054c2:	2600      	movs	r6, #0
}
 80054c4:	4630      	mov	r0, r6
 80054c6:	b003      	add	sp, #12
 80054c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 80054cc:	f8b1 304e 	ldrh.w	r3, [r1, #78]	; 0x4e
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d81d      	bhi.n	8005510 <http_send+0x58>
  sendlen = len;
 80054d4:	af02      	add	r7, sp, #8
  len = tcp_sndbuf(pcb);
 80054d6:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  sendlen = len;
 80054da:	f827 6d02 	strh.w	r6, [r7, #-2]!
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 80054de:	f04f 0800 	mov.w	r8, #0
 80054e2:	f8b4 a04e 	ldrh.w	sl, [r4, #78]	; 0x4e
  while(len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 80054e6:	b12e      	cbz	r6, 80054f4 <http_send+0x3c>
 80054e8:	f1ba 0f04 	cmp.w	sl, #4
 80054ec:	d802      	bhi.n	80054f4 <http_send+0x3c>
 80054ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80054f2:	b9fb      	cbnz	r3, 8005534 <http_send+0x7c>
  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 80054f4:	f1ba 0f04 	cmp.w	sl, #4
 80054f8:	d905      	bls.n	8005506 <http_send+0x4e>
 80054fa:	69a3      	ldr	r3, [r4, #24]
 80054fc:	b91b      	cbnz	r3, 8005506 <http_send+0x4e>
    if(http_check_eof(pcb, hs)) {
 80054fe:	4621      	mov	r1, r4
 8005500:	4628      	mov	r0, r5
 8005502:	f7ff ffbb 	bl	800547c <http_check_eof>
  if((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 8005506:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 800550a:	2b04      	cmp	r3, #4
 800550c:	f240 8086 	bls.w	800561c <http_send+0x164>
  if (hs->left == 0) {
 8005510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005512:	2b00      	cmp	r3, #0
 8005514:	d051      	beq.n	80055ba <http_send+0x102>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8005516:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005518:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800551c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005520:	428a      	cmp	r2, r1
 8005522:	bf98      	it	ls
 8005524:	4613      	movls	r3, r2
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005526:	69a1      	ldr	r1, [r4, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8005528:	f8ad 3006 	strh.w	r3, [sp, #6]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800552c:	2900      	cmp	r1, #0
 800552e:	d14b      	bne.n	80055c8 <http_send+0x110>
 8005530:	2301      	movs	r3, #1
 8005532:	e053      	b.n	80055dc <http_send+0x124>
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 8005534:	eb04 038a 	add.w	r3, r4, sl, lsl #2
 8005538:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
 800553c:	4658      	mov	r0, fp
 800553e:	f7fa fe51 	bl	80001e4 <strlen>
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8005542:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 8005546:	fa1f f980 	uxth.w	r9, r0
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 800554a:	4648      	mov	r0, r9
 800554c:	1a40      	subs	r0, r0, r1
 800554e:	42b0      	cmp	r0, r6
 8005550:	bfa8      	it	ge
 8005552:	4630      	movge	r0, r6
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 8005554:	f1ba 0f03 	cmp.w	sl, #3
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8005558:	f8ad 0006 	strh.w	r0, [sp, #6]
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 800555c:	4459      	add	r1, fp
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800555e:	d02a      	beq.n	80055b6 <http_send+0xfe>
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 8005560:	f1ba 0f04 	cmp.w	sl, #4
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 8005564:	f04f 0300 	mov.w	r3, #0
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 8005568:	d001      	beq.n	800556e <http_send+0xb6>
      apiflags |= TCP_WRITE_FLAG_MORE;
 800556a:	f043 0302 	orr.w	r3, r3, #2
    err = http_write(pcb, ptr, &sendlen, apiflags);
 800556e:	463a      	mov	r2, r7
 8005570:	4628      	mov	r0, r5
 8005572:	f7ff fd2f 	bl	8004fd4 <http_write>
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 8005576:	b108      	cbz	r0, 800557c <http_send+0xc4>
      sendlen = 0;
 8005578:	f8ad 8006 	strh.w	r8, [sp, #6]
    hs->hdr_pos += sendlen;
 800557c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005580:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 8005584:	4413      	add	r3, r2
 8005586:	b29b      	uxth	r3, r3
    len -= sendlen;
 8005588:	1ab6      	subs	r6, r6, r2
    if(hs->hdr_pos == hdrlen) {
 800558a:	4599      	cmp	r9, r3
    hs->hdr_pos += sendlen;
 800558c:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    len -= sendlen;
 8005590:	b2b6      	uxth	r6, r6
    if(hs->hdr_pos == hdrlen) {
 8005592:	d1a6      	bne.n	80054e2 <http_send+0x2a>
      hs->hdr_index++;
 8005594:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
        hs->hdr_index++;
 8005598:	3301      	adds	r3, #1
 800559a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800559e:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d804      	bhi.n	80055b0 <http_send+0xf8>
         (hs->hdrs[hs->hdr_index] == NULL)) {
 80055a6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 80055aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80055ac:	2a00      	cmp	r2, #0
 80055ae:	d0f3      	beq.n	8005598 <http_send+0xe0>
      hs->hdr_pos = 0;
 80055b0:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
 80055b4:	e795      	b.n	80054e2 <http_send+0x2a>
      apiflags |= TCP_WRITE_FLAG_COPY;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e7d7      	b.n	800556a <http_send+0xb2>
    if (!http_check_eof(pcb, hs)) {
 80055ba:	4621      	mov	r1, r4
 80055bc:	4628      	mov	r0, r5
 80055be:	f7ff ff5d 	bl	800547c <http_check_eof>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d1a7      	bne.n	8005516 <http_send+0x5e>
 80055c6:	e77c      	b.n	80054c2 <http_send+0xa>
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80055c8:	6960      	ldr	r0, [r4, #20]
 80055ca:	2800      	cmp	r0, #0
 80055cc:	d0b0      	beq.n	8005530 <http_send+0x78>
 80055ce:	6843      	ldr	r3, [r0, #4]
 80055d0:	1a9a      	subs	r2, r3, r2
 80055d2:	6803      	ldr	r3, [r0, #0]
 80055d4:	4413      	add	r3, r2
 80055d6:	1acb      	subs	r3, r1, r3
 80055d8:	bf18      	it	ne
 80055da:	2301      	movne	r3, #1
 80055dc:	f10d 0206 	add.w	r2, sp, #6
 80055e0:	4628      	mov	r0, r5
 80055e2:	f7ff fcf7 	bl	8004fd4 <http_write>
  if (err == ERR_OK) {
 80055e6:	b9b8      	cbnz	r0, 8005618 <http_send+0x160>
    hs->file += len;
 80055e8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80055ec:	69a2      	ldr	r2, [r4, #24]
    hs->left -= len;
 80055ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hs->file += len;
 80055f0:	440a      	add	r2, r1
    hs->left -= len;
 80055f2:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 80055f4:	61a2      	str	r2, [r4, #24]
    hs->left -= len;
 80055f6:	6263      	str	r3, [r4, #36]	; 0x24
    data_to_send = 1;
 80055f8:	2601      	movs	r6, #1
  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80055fa:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80055fc:	2f00      	cmp	r7, #0
 80055fe:	f47f af61 	bne.w	80054c4 <http_send+0xc>
 8005602:	6960      	ldr	r0, [r4, #20]
 8005604:	f7ff fce1 	bl	8004fca <fs_bytes_left>
 8005608:	2800      	cmp	r0, #0
 800560a:	f73f af5b 	bgt.w	80054c4 <http_send+0xc>
    http_close_conn(pcb, hs);
 800560e:	4621      	mov	r1, r4
 8005610:	4628      	mov	r0, r5
 8005612:	f7ff fef9 	bl	8005408 <http_close_conn>
 8005616:	e754      	b.n	80054c2 <http_send+0xa>
  u8_t data_to_send = 0;
 8005618:	2600      	movs	r6, #0
 800561a:	e7ee      	b.n	80055fa <http_send+0x142>
 800561c:	2602      	movs	r6, #2
 800561e:	e751      	b.n	80054c4 <http_send+0xc>

08005620 <http_sent>:
{
 8005620:	b508      	push	{r3, lr}
 8005622:	460b      	mov	r3, r1
  if (hs == NULL) {
 8005624:	4601      	mov	r1, r0
 8005626:	b128      	cbz	r0, 8005634 <http_sent+0x14>
  hs->retries = 0;
 8005628:	2200      	movs	r2, #0
 800562a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  http_send(pcb, hs);
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff ff42 	bl	80054b8 <http_send>
}
 8005634:	2000      	movs	r0, #0
 8005636:	bd08      	pop	{r3, pc}

08005638 <http_poll>:
{
 8005638:	b510      	push	{r4, lr}
 800563a:	460c      	mov	r4, r1
  if (hs == NULL) {
 800563c:	4601      	mov	r1, r0
 800563e:	b920      	cbnz	r0, 800564a <http_poll+0x12>
      http_close_conn(pcb, hs);
 8005640:	4620      	mov	r0, r4
 8005642:	f7ff fee1 	bl	8005408 <http_close_conn>
}
 8005646:	2000      	movs	r0, #0
 8005648:	bd10      	pop	{r4, pc}
    hs->retries++;
 800564a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800564e:	3301      	adds	r3, #1
 8005650:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8005652:	2b04      	cmp	r3, #4
    hs->retries++;
 8005654:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8005658:	d0f2      	beq.n	8005640 <http_poll+0x8>
    if(hs && (hs->handle)) {
 800565a:	6943      	ldr	r3, [r0, #20]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f2      	beq.n	8005646 <http_poll+0xe>
      if(http_send(pcb, hs)) {
 8005660:	4620      	mov	r0, r4
 8005662:	f7ff ff29 	bl	80054b8 <http_send>
 8005666:	2800      	cmp	r0, #0
 8005668:	d0ed      	beq.n	8005646 <http_poll+0xe>
        tcp_output(pcb);
 800566a:	4620      	mov	r0, r4
 800566c:	f005 f89e 	bl	800a7ac <tcp_output>
 8005670:	e7e9      	b.n	8005646 <http_poll+0xe>
	...

08005674 <http_recv>:
{
 8005674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005678:	b08d      	sub	sp, #52	; 0x34
 800567a:	4604      	mov	r4, r0
 800567c:	9108      	str	r1, [sp, #32]
 800567e:	4617      	mov	r7, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8005680:	461d      	mov	r5, r3
 8005682:	b94b      	cbnz	r3, 8005698 <http_recv+0x24>
 8005684:	b152      	cbz	r2, 800569c <http_recv+0x28>
 8005686:	b988      	cbnz	r0, 80056ac <http_recv+0x38>
      tcp_recved(pcb, p->tot_len);
 8005688:	9808      	ldr	r0, [sp, #32]
 800568a:	8939      	ldrh	r1, [r7, #8]
 800568c:	f002 fba8 	bl	8007de0 <tcp_recved>
      pbuf_free(p);
 8005690:	4638      	mov	r0, r7
 8005692:	f001 ffa1 	bl	80075d8 <pbuf_free>
 8005696:	e001      	b.n	800569c <http_recv+0x28>
    if (p != NULL) {
 8005698:	2a00      	cmp	r2, #0
 800569a:	d1f5      	bne.n	8005688 <http_recv+0x14>
    http_close_conn(pcb, hs);
 800569c:	4621      	mov	r1, r4
 800569e:	9808      	ldr	r0, [sp, #32]
 80056a0:	f7ff feb2 	bl	8005408 <http_close_conn>
}
 80056a4:	2000      	movs	r0, #0
 80056a6:	b00d      	add	sp, #52	; 0x34
 80056a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tcp_recved(pcb, p->tot_len);
 80056ac:	8911      	ldrh	r1, [r2, #8]
 80056ae:	9808      	ldr	r0, [sp, #32]
 80056b0:	f002 fb96 	bl	8007de0 <tcp_recved>
  if (hs->post_content_len_left > 0) {
 80056b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80056b6:	b16b      	cbz	r3, 80056d4 <http_recv+0x60>
    hs->retries = 0;
 80056b8:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 80056bc:	4639      	mov	r1, r7
 80056be:	4620      	mov	r0, r4
 80056c0:	f7ff fe7e 	bl	80053c0 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 80056c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1ec      	bne.n	80056a4 <http_recv+0x30>
      http_send(pcb, hs);
 80056ca:	4621      	mov	r1, r4
 80056cc:	9808      	ldr	r0, [sp, #32]
 80056ce:	f7ff fef3 	bl	80054b8 <http_send>
 80056d2:	e7e7      	b.n	80056a4 <http_recv+0x30>
    if (hs->handle == NULL) {
 80056d4:	6963      	ldr	r3, [r4, #20]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f040 8147 	bne.w	800596a <http_recv+0x2f6>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80056dc:	69a3      	ldr	r3, [r4, #24]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f040 8154 	bne.w	800598c <http_recv+0x318>
  if (hs->req == NULL) {
 80056e4:	6a20      	ldr	r0, [r4, #32]
 80056e6:	2800      	cmp	r0, #0
 80056e8:	f040 8098 	bne.w	800581c <http_recv+0x1a8>
    hs->req = p;
 80056ec:	6227      	str	r7, [r4, #32]
  pbuf_ref(p);
 80056ee:	4638      	mov	r0, r7
 80056f0:	f002 f92c 	bl	800794c <pbuf_ref>
  if (hs->req->next != NULL) {
 80056f4:	6a20      	ldr	r0, [r4, #32]
 80056f6:	6803      	ldr	r3, [r0, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 8093 	beq.w	8005824 <http_recv+0x1b0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80056fe:	8906      	ldrh	r6, [r0, #8]
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8005700:	49a4      	ldr	r1, [pc, #656]	; (8005994 <http_recv+0x320>)
    data = httpd_req_buf;
 8005702:	4da4      	ldr	r5, [pc, #656]	; (8005994 <http_recv+0x320>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8005704:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005708:	429e      	cmp	r6, r3
 800570a:	bf28      	it	cs
 800570c:	461e      	movcs	r6, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800570e:	4632      	mov	r2, r6
 8005710:	2300      	movs	r3, #0
 8005712:	f002 f9f3 	bl	8007afc <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8005716:	2e06      	cmp	r6, #6
 8005718:	f240 810f 	bls.w	800593a <http_recv+0x2c6>
    crlf = lwip_strnstr(data, CRLF, data_len);
 800571c:	4632      	mov	r2, r6
 800571e:	499e      	ldr	r1, [pc, #632]	; (8005998 <http_recv+0x324>)
 8005720:	4628      	mov	r0, r5
 8005722:	f000 f99e 	bl	8005a62 <lwip_strnstr>
    if (crlf != NULL) {
 8005726:	2800      	cmp	r0, #0
 8005728:	f000 8107 	beq.w	800593a <http_recv+0x2c6>
      if (!strncmp(data, "GET ", 4)) {
 800572c:	2204      	movs	r2, #4
 800572e:	499b      	ldr	r1, [pc, #620]	; (800599c <http_recv+0x328>)
 8005730:	4628      	mov	r0, r5
 8005732:	f008 fb5c 	bl	800ddee <strncmp>
 8005736:	4681      	mov	r9, r0
 8005738:	2800      	cmp	r0, #0
 800573a:	d176      	bne.n	800582a <http_recv+0x1b6>
        sp1 = data + 3;
 800573c:	1ceb      	adds	r3, r5, #3
 800573e:	9306      	str	r3, [sp, #24]
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8005740:	9b06      	ldr	r3, [sp, #24]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8005742:	4997      	ldr	r1, [pc, #604]	; (80059a0 <http_recv+0x32c>)
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8005744:	f103 0801 	add.w	r8, r3, #1
 8005748:	eba8 0a05 	sub.w	sl, r8, r5
 800574c:	eba6 0a0a 	sub.w	sl, r6, sl
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8005750:	fa1f fa8a 	uxth.w	sl, sl
 8005754:	4652      	mov	r2, sl
 8005756:	4640      	mov	r0, r8
 8005758:	f000 f983 	bl	8005a62 <lwip_strnstr>
      if (sp2 == NULL) {
 800575c:	4683      	mov	fp, r0
 800575e:	2800      	cmp	r0, #0
 8005760:	d173      	bne.n	800584a <http_recv+0x1d6>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8005762:	4652      	mov	r2, sl
 8005764:	498c      	ldr	r1, [pc, #560]	; (8005998 <http_recv+0x324>)
 8005766:	4640      	mov	r0, r8
 8005768:	f000 f97b 	bl	8005a62 <lwip_strnstr>
 800576c:	4683      	mov	fp, r0
        if (is_post) {
 800576e:	f1b9 0f00 	cmp.w	r9, #0
 8005772:	d167      	bne.n	8005844 <http_recv+0x1d0>
      if ((sp2 != 0) && (sp2 > sp1)) {
 8005774:	2800      	cmp	r0, #0
 8005776:	f000 80e0 	beq.w	800593a <http_recv+0x2c6>
        is_09 = 1;
 800577a:	f04f 0a01 	mov.w	sl, #1
      if ((sp2 != 0) && (sp2 > sp1)) {
 800577e:	9b06      	ldr	r3, [sp, #24]
 8005780:	455b      	cmp	r3, fp
 8005782:	f080 80da 	bcs.w	800593a <http_recv+0x2c6>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8005786:	4632      	mov	r2, r6
 8005788:	4986      	ldr	r1, [pc, #536]	; (80059a4 <http_recv+0x330>)
 800578a:	4628      	mov	r0, r5
 800578c:	f000 f969 	bl	8005a62 <lwip_strnstr>
 8005790:	2800      	cmp	r0, #0
 8005792:	f000 80d2 	beq.w	800593a <http_recv+0x2c6>
          *sp1 = 0;
 8005796:	9a06      	ldr	r2, [sp, #24]
 8005798:	2300      	movs	r3, #0
 800579a:	7013      	strb	r3, [r2, #0]
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800579c:	ebab 0208 	sub.w	r2, fp, r8
          uri[uri_len] = 0;
 80057a0:	b292      	uxth	r2, r2
 80057a2:	9209      	str	r2, [sp, #36]	; 0x24
 80057a4:	f808 3002 	strb.w	r3, [r8, r2]
          if (is_post) {
 80057a8:	f1b9 0f00 	cmp.w	r9, #0
 80057ac:	f000 80bc 	beq.w	8005928 <http_recv+0x2b4>
            struct pbuf *q = hs->req;
 80057b0:	6a23      	ldr	r3, [r4, #32]
 80057b2:	9304      	str	r3, [sp, #16]
  char* crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 80057b4:	f10b 0301 	add.w	r3, fp, #1
 80057b8:	1b5a      	subs	r2, r3, r5
 80057ba:	1ab2      	subs	r2, r6, r2
 80057bc:	4979      	ldr	r1, [pc, #484]	; (80059a4 <http_recv+0x330>)
 80057be:	9305      	str	r3, [sp, #20]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 f94e 	bl	8005a62 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 80057c6:	9007      	str	r0, [sp, #28]
 80057c8:	2800      	cmp	r0, #0
 80057ca:	f000 80aa 	beq.w	8005922 <http_recv+0x2ae>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 80057ce:	9a05      	ldr	r2, [sp, #20]
 80057d0:	4975      	ldr	r1, [pc, #468]	; (80059a8 <http_recv+0x334>)
 80057d2:	1a82      	subs	r2, r0, r2
 80057d4:	9805      	ldr	r0, [sp, #20]
 80057d6:	f000 f944 	bl	8005a62 <lwip_strnstr>
    if (scontent_len != NULL) {
 80057da:	4682      	mov	sl, r0
 80057dc:	2800      	cmp	r0, #0
 80057de:	d137      	bne.n	8005850 <http_recv+0x1dc>
    return ERR_ARG;
 80057e0:	f06f 050f 	mvn.w	r5, #15
              *sp1 = ' ';
 80057e4:	9a06      	ldr	r2, [sp, #24]
 80057e6:	2320      	movs	r3, #32
 80057e8:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 80057ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
              *sp2 = ' ';
 80057ec:	f88b 3000 	strb.w	r3, [fp]
            if (err == ERR_ARG) {
 80057f0:	f115 0f10 	cmn.w	r5, #16
              uri[uri_len] = ' ';
 80057f4:	f808 3002 	strb.w	r3, [r8, r2]
            if (err == ERR_ARG) {
 80057f8:	d024      	beq.n	8005844 <http_recv+0x1d0>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80057fa:	1d6b      	adds	r3, r5, #5
 80057fc:	f000 80a9 	beq.w	8005952 <http_recv+0x2de>
 8005800:	f025 0308 	bic.w	r3, r5, #8
 8005804:	b25b      	sxtb	r3, r3
 8005806:	3310      	adds	r3, #16
 8005808:	f000 8084 	beq.w	8005914 <http_recv+0x2a0>
 800580c:	4b67      	ldr	r3, [pc, #412]	; (80059ac <http_recv+0x338>)
 800580e:	4968      	ldr	r1, [pc, #416]	; (80059b0 <http_recv+0x33c>)
 8005810:	4868      	ldr	r0, [pc, #416]	; (80059b4 <http_recv+0x340>)
 8005812:	f640 12b5 	movw	r2, #2485	; 0x9b5
 8005816:	f008 fa79 	bl	800dd0c <iprintf>
 800581a:	e07b      	b.n	8005914 <http_recv+0x2a0>
    pbuf_cat(hs->req, p);
 800581c:	4639      	mov	r1, r7
 800581e:	f002 f8a9 	bl	8007974 <pbuf_cat>
 8005822:	e764      	b.n	80056ee <http_recv+0x7a>
    data = (char *)p->payload;
 8005824:	687d      	ldr	r5, [r7, #4]
    data_len = p->len;
 8005826:	897e      	ldrh	r6, [r7, #10]
 8005828:	e775      	b.n	8005716 <http_recv+0xa2>
      } else if (!strncmp(data, "POST ", 5)) {
 800582a:	2205      	movs	r2, #5
 800582c:	4962      	ldr	r1, [pc, #392]	; (80059b8 <http_recv+0x344>)
 800582e:	4628      	mov	r0, r5
 8005830:	f008 fadd 	bl	800ddee <strncmp>
 8005834:	b920      	cbnz	r0, 8005840 <http_recv+0x1cc>
        sp1 = data + 4;
 8005836:	1d2b      	adds	r3, r5, #4
 8005838:	9306      	str	r3, [sp, #24]
        is_post = 1;
 800583a:	f04f 0901 	mov.w	r9, #1
 800583e:	e77f      	b.n	8005740 <http_recv+0xcc>
        data[4] = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	712b      	strb	r3, [r5, #4]
    return ERR_USE;
 8005844:	f06f 050f 	mvn.w	r5, #15
 8005848:	e064      	b.n	8005914 <http_recv+0x2a0>
      int is_09 = 0;
 800584a:	f04f 0a00 	mov.w	sl, #0
 800584e:	e796      	b.n	800577e <http_recv+0x10a>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8005850:	f100 0910 	add.w	r9, r0, #16
 8005854:	220a      	movs	r2, #10
 8005856:	4950      	ldr	r1, [pc, #320]	; (8005998 <http_recv+0x324>)
 8005858:	4648      	mov	r0, r9
 800585a:	f000 f902 	bl	8005a62 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 800585e:	2800      	cmp	r0, #0
 8005860:	d0be      	beq.n	80057e0 <http_recv+0x16c>
        content_len = atoi(content_len_num);
 8005862:	4648      	mov	r0, r9
 8005864:	f008 f94b 	bl	800dafe <atoi>
        if (content_len == 0) {
 8005868:	f1b0 0900 	subs.w	r9, r0, #0
 800586c:	d140      	bne.n	80058f0 <http_recv+0x27c>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800586e:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8005872:	2b30      	cmp	r3, #48	; 0x30
 8005874:	d1b4      	bne.n	80057e0 <http_recv+0x16c>
 8005876:	f89a 3011 	ldrb.w	r3, [sl, #17]
 800587a:	2b0d      	cmp	r3, #13
 800587c:	d1b0      	bne.n	80057e0 <http_recv+0x16c>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800587e:	9b07      	ldr	r3, [sp, #28]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8005880:	9a05      	ldr	r2, [sp, #20]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8005882:	3304      	adds	r3, #4
 8005884:	1b5d      	subs	r5, r3, r5
 8005886:	42ae      	cmp	r6, r5
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8005888:	eba3 0302 	sub.w	r3, r3, r2
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800588c:	bfac      	ite	ge
 800588e:	b2ad      	uxthge	r5, r5
 8005890:	4635      	movlt	r5, r6
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8005892:	429e      	cmp	r6, r3
 8005894:	bfa8      	it	ge
 8005896:	b29e      	uxthge	r6, r3
          u8_t post_auto_wnd = 1;
 8005898:	ab0c      	add	r3, sp, #48	; 0x30
 800589a:	2201      	movs	r2, #1
 800589c:	f803 2d01 	strb.w	r2, [r3, #-1]!
          http_uri_buf[0] = 0;
 80058a0:	4a46      	ldr	r2, [pc, #280]	; (80059bc <http_recv+0x348>)
 80058a2:	f04f 0a00 	mov.w	sl, #0
 80058a6:	f882 a000 	strb.w	sl, [r2]
          *crlfcrlf = 0;
 80058aa:	9a07      	ldr	r2, [sp, #28]
 80058ac:	f882 a000 	strb.w	sl, [r2]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 80058b0:	9303      	str	r3, [sp, #12]
 80058b2:	233f      	movs	r3, #63	; 0x3f
 80058b4:	9302      	str	r3, [sp, #8]
 80058b6:	4b41      	ldr	r3, [pc, #260]	; (80059bc <http_recv+0x348>)
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	f8cd 9000 	str.w	r9, [sp]
 80058be:	4633      	mov	r3, r6
 80058c0:	9a05      	ldr	r2, [sp, #20]
 80058c2:	4641      	mov	r1, r8
 80058c4:	4620      	mov	r0, r4
 80058c6:	f007 f912 	bl	800caee <httpd_post_begin>
          if (err == ERR_OK) {
 80058ca:	b9c8      	cbnz	r0, 8005900 <http_recv+0x28c>
            hs->post_content_len_left = (u32_t)content_len;
 80058cc:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
            while((q != NULL) && (q->len <= start_offset)) {
 80058d0:	9b04      	ldr	r3, [sp, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d04d      	beq.n	8005972 <http_recv+0x2fe>
 80058d6:	8959      	ldrh	r1, [r3, #10]
 80058d8:	428d      	cmp	r5, r1
 80058da:	d20b      	bcs.n	80058f4 <http_recv+0x280>
              pbuf_header(q, -(s16_t)start_offset);
 80058dc:	4269      	negs	r1, r5
 80058de:	b209      	sxth	r1, r1
 80058e0:	9804      	ldr	r0, [sp, #16]
 80058e2:	f001 fe73 	bl	80075cc <pbuf_header>
              pbuf_ref(q);
 80058e6:	9804      	ldr	r0, [sp, #16]
 80058e8:	f002 f830 	bl	800794c <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 80058ec:	9904      	ldr	r1, [sp, #16]
 80058ee:	e049      	b.n	8005984 <http_recv+0x310>
        if (content_len >= 0) {
 80058f0:	dac5      	bge.n	800587e <http_recv+0x20a>
 80058f2:	e775      	b.n	80057e0 <http_recv+0x16c>
              q = q->next;
 80058f4:	9b04      	ldr	r3, [sp, #16]
              start_offset -= q->len;
 80058f6:	1a6d      	subs	r5, r5, r1
              q = q->next;
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	9304      	str	r3, [sp, #16]
              start_offset -= q->len;
 80058fc:	b2ad      	uxth	r5, r5
 80058fe:	e7e7      	b.n	80058d0 <http_recv+0x25c>
            return http_find_file(hs, http_uri_buf, 0);
 8005900:	4652      	mov	r2, sl
 8005902:	492e      	ldr	r1, [pc, #184]	; (80059bc <http_recv+0x348>)
 8005904:	4620      	mov	r0, r4
 8005906:	f7ff fc0d 	bl	8005124 <http_find_file>
 800590a:	4605      	mov	r5, r0
            if (err != ERR_OK) {
 800590c:	2800      	cmp	r0, #0
 800590e:	f47f af69 	bne.w	80057e4 <http_recv+0x170>
  return ERR_INPROGRESS;
 8005912:	2500      	movs	r5, #0
        if (hs->req != NULL) {
 8005914:	6a20      	ldr	r0, [r4, #32]
 8005916:	b1f0      	cbz	r0, 8005956 <http_recv+0x2e2>
          pbuf_free(hs->req);
 8005918:	f001 fe5e 	bl	80075d8 <pbuf_free>
          hs->req = NULL;
 800591c:	2300      	movs	r3, #0
 800591e:	6223      	str	r3, [r4, #32]
 8005920:	e019      	b.n	8005956 <http_recv+0x2e2>
  return ERR_INPROGRESS;
 8005922:	f06f 0504 	mvn.w	r5, #4
 8005926:	e75d      	b.n	80057e4 <http_recv+0x170>
            return http_find_file(hs, uri, is_09);
 8005928:	4652      	mov	r2, sl
 800592a:	4641      	mov	r1, r8
 800592c:	4620      	mov	r0, r4
 800592e:	f7ff fbf9 	bl	8005124 <http_find_file>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8005932:	4605      	mov	r5, r0
 8005934:	2800      	cmp	r0, #0
 8005936:	d0ec      	beq.n	8005912 <http_recv+0x29e>
 8005938:	e75f      	b.n	80057fa <http_recv+0x186>
  clen = pbuf_clen(hs->req);
 800593a:	6a20      	ldr	r0, [r4, #32]
 800593c:	f001 fffe 	bl	800793c <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8005940:	6a23      	ldr	r3, [r4, #32]
 8005942:	891b      	ldrh	r3, [r3, #8]
 8005944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005948:	f4bf af7c 	bcs.w	8005844 <http_recv+0x1d0>
 800594c:	2805      	cmp	r0, #5
 800594e:	f63f af79 	bhi.w	8005844 <http_recv+0x1d0>
  return ERR_INPROGRESS;
 8005952:	f06f 0504 	mvn.w	r5, #4
      pbuf_free(p);
 8005956:	4638      	mov	r0, r7
 8005958:	f001 fe3e 	bl	80075d8 <pbuf_free>
      if (parsed == ERR_OK) {
 800595c:	2d00      	cmp	r5, #0
 800595e:	f43f aeb1 	beq.w	80056c4 <http_recv+0x50>
      } else if (parsed == ERR_ARG) {
 8005962:	3510      	adds	r5, #16
 8005964:	f47f ae9e 	bne.w	80056a4 <http_recv+0x30>
 8005968:	e698      	b.n	800569c <http_recv+0x28>
      pbuf_free(p);
 800596a:	4638      	mov	r0, r7
 800596c:	f001 fe34 	bl	80075d8 <pbuf_free>
 8005970:	e698      	b.n	80056a4 <http_recv+0x30>
            } else if (hs->post_content_len_left == 0) {
 8005972:	f1b9 0f00 	cmp.w	r9, #0
 8005976:	d1cc      	bne.n	8005912 <http_recv+0x29e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8005978:	4649      	mov	r1, r9
 800597a:	2202      	movs	r2, #2
 800597c:	2004      	movs	r0, #4
 800597e:	f001 fe8d 	bl	800769c <pbuf_alloc>
              return http_post_rxpbuf(hs, q);
 8005982:	4601      	mov	r1, r0
              return http_post_rxpbuf(hs, q);
 8005984:	4620      	mov	r0, r4
 8005986:	f7ff fd1b 	bl	80053c0 <http_post_rxpbuf>
 800598a:	e7be      	b.n	800590a <http_recv+0x296>
    return ERR_USE;
 800598c:	f06f 0507 	mvn.w	r5, #7
 8005990:	e7c0      	b.n	8005914 <http_recv+0x2a0>
 8005992:	bf00      	nop
 8005994:	200007f0 	.word	0x200007f0
 8005998:	0800f4c2 	.word	0x0800f4c2
 800599c:	0800f32a 	.word	0x0800f32a
 80059a0:	080129f6 	.word	0x080129f6
 80059a4:	0800f4c0 	.word	0x0800f4c0
 80059a8:	0800f2fb 	.word	0x0800f2fb
 80059ac:	0800f361 	.word	0x0800f361
 80059b0:	0800f335 	.word	0x0800f335
 80059b4:	0800f3a7 	.word	0x0800f3a7
 80059b8:	0800f32f 	.word	0x0800f32f
 80059bc:	200007b0 	.word	0x200007b0

080059c0 <http_err>:
{
 80059c0:	b510      	push	{r4, lr}
  if (hs != NULL) {
 80059c2:	4604      	mov	r4, r0
 80059c4:	b130      	cbz	r0, 80059d4 <http_err+0x14>
    http_state_eof(hs);
 80059c6:	f7ff fb43 	bl	8005050 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 80059ca:	4620      	mov	r0, r4
}
 80059cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 80059d0:	f001 ba80 	b.w	8006ed4 <mem_free>
 80059d4:	bd10      	pop	{r4, pc}
	...

080059d8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80059d8:	b510      	push	{r4, lr}
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 80059da:	202e      	movs	r0, #46	; 0x2e
 80059dc:	f002 ffb4 	bl	8008948 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80059e0:	4604      	mov	r4, r0
 80059e2:	b930      	cbnz	r0, 80059f2 <httpd_init+0x1a>
 80059e4:	4b15      	ldr	r3, [pc, #84]	; (8005a3c <httpd_init+0x64>)
 80059e6:	4916      	ldr	r1, [pc, #88]	; (8005a40 <httpd_init+0x68>)
 80059e8:	4816      	ldr	r0, [pc, #88]	; (8005a44 <httpd_init+0x6c>)
 80059ea:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 80059ee:	f008 f98d 	bl	800dd0c <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 80059f2:	2101      	movs	r1, #1
 80059f4:	4620      	mov	r0, r4
 80059f6:	f002 fa47 	bl	8007e88 <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 80059fa:	2250      	movs	r2, #80	; 0x50
 80059fc:	4912      	ldr	r1, [pc, #72]	; (8005a48 <httpd_init+0x70>)
 80059fe:	4620      	mov	r0, r4
 8005a00:	f002 f91c 	bl	8007c3c <tcp_bind>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8005a04:	b130      	cbz	r0, 8005a14 <httpd_init+0x3c>
 8005a06:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <httpd_init+0x64>)
 8005a08:	4910      	ldr	r1, [pc, #64]	; (8005a4c <httpd_init+0x74>)
 8005a0a:	480e      	ldr	r0, [pc, #56]	; (8005a44 <httpd_init+0x6c>)
 8005a0c:	f640 2215 	movw	r2, #2581	; 0xa15
 8005a10:	f008 f97c 	bl	800dd0c <iprintf>
  pcb = tcp_listen(pcb);
 8005a14:	4620      	mov	r0, r4
 8005a16:	21ff      	movs	r1, #255	; 0xff
 8005a18:	f002 f9b2 	bl	8007d80 <tcp_listen_with_backlog>
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8005a1c:	4604      	mov	r4, r0
 8005a1e:	b930      	cbnz	r0, 8005a2e <httpd_init+0x56>
 8005a20:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <httpd_init+0x64>)
 8005a22:	490b      	ldr	r1, [pc, #44]	; (8005a50 <httpd_init+0x78>)
 8005a24:	4807      	ldr	r0, [pc, #28]	; (8005a44 <httpd_init+0x6c>)
 8005a26:	f640 2217 	movw	r2, #2583	; 0xa17
 8005a2a:	f008 f96f 	bl	800dd0c <iprintf>
  tcp_accept(pcb, http_accept);
 8005a2e:	4620      	mov	r0, r4
 8005a30:	4908      	ldr	r1, [pc, #32]	; (8005a54 <httpd_init+0x7c>)
}
 8005a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_accept(pcb, http_accept);
 8005a36:	f002 ba89 	b.w	8007f4c <tcp_accept>
 8005a3a:	bf00      	nop
 8005a3c:	0800f361 	.word	0x0800f361
 8005a40:	0800f3cf 	.word	0x0800f3cf
 8005a44:	0800f3a7 	.word	0x0800f3a7
 8005a48:	0800f988 	.word	0x0800f988
 8005a4c:	0800f3ea 	.word	0x0800f3ea
 8005a50:	0800f406 	.word	0x0800f406
 8005a54:	080050ad 	.word	0x080050ad

08005a58 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8005a58:	ba40      	rev16	r0, r0
}
 8005a5a:	b280      	uxth	r0, r0
 8005a5c:	4770      	bx	lr

08005a5e <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 8005a5e:	ba00      	rev	r0, r0
 8005a60:	4770      	bx	lr

08005a62 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 8005a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a64:	4604      	mov	r4, r0
  const char* p;
  size_t tokenlen = strlen(token);
 8005a66:	4608      	mov	r0, r1
{
 8005a68:	460f      	mov	r7, r1
 8005a6a:	4615      	mov	r5, r2
  size_t tokenlen = strlen(token);
 8005a6c:	f7fa fbba 	bl	80001e4 <strlen>
  if (tokenlen == 0) {
 8005a70:	4606      	mov	r6, r0
 8005a72:	b190      	cbz	r0, 8005a9a <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005a74:	4425      	add	r5, r4
 8005a76:	7820      	ldrb	r0, [r4, #0]
 8005a78:	b180      	cbz	r0, 8005a9c <lwip_strnstr+0x3a>
 8005a7a:	19a3      	adds	r3, r4, r6
 8005a7c:	429d      	cmp	r5, r3
 8005a7e:	d201      	bcs.n	8005a84 <lwip_strnstr+0x22>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
 8005a80:	2000      	movs	r0, #0
 8005a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8005a84:	783b      	ldrb	r3, [r7, #0]
 8005a86:	4283      	cmp	r3, r0
 8005a88:	d105      	bne.n	8005a96 <lwip_strnstr+0x34>
 8005a8a:	4632      	mov	r2, r6
 8005a8c:	4639      	mov	r1, r7
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f008 f9ad 	bl	800ddee <strncmp>
 8005a94:	b108      	cbz	r0, 8005a9a <lwip_strnstr+0x38>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005a96:	3401      	adds	r4, #1
 8005a98:	e7ed      	b.n	8005a76 <lwip_strnstr+0x14>
 8005a9a:	4620      	mov	r0, r4
}
 8005a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a9e <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 8005a9e:	b530      	push	{r4, r5, lr}
  char c1, c2;

  do {
    c1 = *str1++;
 8005aa0:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8005aa4:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d009      	beq.n	8005ac0 <lwip_stricmp+0x22>
      char c1_upc = c1 | 0x20;
 8005aac:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8005ab0:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 8005ab4:	2d19      	cmp	r5, #25
 8005ab6:	d807      	bhi.n	8005ac8 <lwip_stricmp+0x2a>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8005ab8:	f042 0220 	orr.w	r2, r2, #32
 8005abc:	4294      	cmp	r4, r2
 8005abe:	d103      	bne.n	8005ac8 <lwip_stricmp+0x2a>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1ed      	bne.n	8005aa0 <lwip_stricmp+0x2>
  return 0;
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	bd30      	pop	{r4, r5, pc}
        return 1;
 8005ac8:	2001      	movs	r0, #1
}
 8005aca:	bd30      	pop	{r4, r5, pc}

08005acc <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char* result, size_t bufsize, int number)
{
 8005acc:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_UNUSED_ARG(bufsize);

  do {
    tmp_value = number;
    number /= base;
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
 8005ace:	4e13      	ldr	r6, [pc, #76]	; (8005b1c <lwip_itoa+0x50>)
  char* ptr = result, *ptr1 = result, tmp_char;
 8005ad0:	4601      	mov	r1, r0
    number /= base;
 8005ad2:	f04f 0e0a 	mov.w	lr, #10
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
 8005ad6:	f06f 0709 	mvn.w	r7, #9
    number /= base;
 8005ada:	fb92 f4fe 	sdiv	r4, r2, lr
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
 8005ade:	fb07 6504 	mla	r5, r7, r4, r6
 8005ae2:	4415      	add	r5, r2
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
 8005aea:	f803 5b01 	strb.w	r5, [r3], #1
  } while(number);
 8005aee:	b954      	cbnz	r4, 8005b06 <lwip_itoa+0x3a>

   /* Apply negative sign */
  if (tmp_value < 0) {
 8005af0:	2a00      	cmp	r2, #0
     *ptr++ = '-';
 8005af2:	bfbe      	ittt	lt
 8005af4:	222d      	movlt	r2, #45	; 0x2d
 8005af6:	701a      	strblt	r2, [r3, #0]
 8005af8:	1c8b      	addlt	r3, r1, #2
  }
  *ptr-- = '\0';
 8005afa:	2100      	movs	r1, #0
 8005afc:	1e5a      	subs	r2, r3, #1
 8005afe:	7019      	strb	r1, [r3, #0]
  while(ptr1 < ptr) {
 8005b00:	4282      	cmp	r2, r0
 8005b02:	d803      	bhi.n	8005b0c <lwip_itoa+0x40>
    tmp_char = *ptr;
    *ptr--= *ptr1;
    *ptr1++ = tmp_char;
  }
}
 8005b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b06:	4619      	mov	r1, r3
 8005b08:	4622      	mov	r2, r4
 8005b0a:	e7e6      	b.n	8005ada <lwip_itoa+0xe>
    tmp_char = *ptr;
 8005b0c:	7813      	ldrb	r3, [r2, #0]
    *ptr--= *ptr1;
 8005b0e:	7801      	ldrb	r1, [r0, #0]
 8005b10:	f802 1901 	strb.w	r1, [r2], #-1
    *ptr1++ = tmp_char;
 8005b14:	f800 3b01 	strb.w	r3, [r0], #1
 8005b18:	e7f2      	b.n	8005b00 <lwip_itoa+0x34>
 8005b1a:	bf00      	nop
 8005b1c:	0800f65c 	.word	0x0800f65c

08005b20 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005b20:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005b22:	f001 f9b7 	bl	8006e94 <mem_init>
  memp_init();
 8005b26:	f001 fbc9 	bl	80072bc <memp_init>
  pbuf_init();
  netif_init();
 8005b2a:	f001 fc14 	bl	8007356 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005b2e:	f005 f9ed 	bl	800af0c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005b32:	f002 f881 	bl	8007c38 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8005b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8005b3a:	f005 b98d 	b.w	800ae58 <sys_timeouts_init>
	...

08005b40 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8005b40:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8005b42:	2618      	movs	r6, #24
 8005b44:	4c07      	ldr	r4, [pc, #28]	; (8005b64 <etharp_free_entry+0x24>)
 8005b46:	4346      	muls	r6, r0
{
 8005b48:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8005b4a:	59a0      	ldr	r0, [r4, r6]
 8005b4c:	b118      	cbz	r0, 8005b56 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8005b4e:	f001 fd43 	bl	80075d8 <pbuf_free>
    arp_table[i].q = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8005b56:	2318      	movs	r3, #24
 8005b58:	fb03 4405 	mla	r4, r3, r5, r4
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	7523      	strb	r3, [r4, #20]
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
 8005b62:	bf00      	nop
 8005b64:	20000bf0 	.word	0x20000bf0

08005b68 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8005b68:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b6c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005b6e:	4689      	mov	r9, r1
 8005b70:	4692      	mov	sl, r2
 8005b72:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005b74:	4607      	mov	r7, r0
 8005b76:	b930      	cbnz	r0, 8005b86 <etharp_raw+0x1e>
 8005b78:	4b2c      	ldr	r3, [pc, #176]	; (8005c2c <etharp_raw+0xc4>)
 8005b7a:	492d      	ldr	r1, [pc, #180]	; (8005c30 <etharp_raw+0xc8>)
 8005b7c:	482d      	ldr	r0, [pc, #180]	; (8005c34 <etharp_raw+0xcc>)
 8005b7e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8005b82:	f008 f8c3 	bl	800dd0c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8005b86:	2200      	movs	r2, #0
 8005b88:	211c      	movs	r1, #28
 8005b8a:	2002      	movs	r0, #2
 8005b8c:	f001 fd86 	bl	800769c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8005b90:	4606      	mov	r6, r0
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d047      	beq.n	8005c26 <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8005b96:	8943      	ldrh	r3, [r0, #10]
 8005b98:	2b1b      	cmp	r3, #27
 8005b9a:	d806      	bhi.n	8005baa <etharp_raw+0x42>
 8005b9c:	4b23      	ldr	r3, [pc, #140]	; (8005c2c <etharp_raw+0xc4>)
 8005b9e:	4926      	ldr	r1, [pc, #152]	; (8005c38 <etharp_raw+0xd0>)
 8005ba0:	4824      	ldr	r0, [pc, #144]	; (8005c34 <etharp_raw+0xcc>)
 8005ba2:	f240 4264 	movw	r2, #1124	; 0x464
 8005ba6:	f008 f8b1 	bl	800dd0c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8005baa:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 8005bae:	6874      	ldr	r4, [r6, #4]
  hdr->opcode = lwip_htons(opcode);
 8005bb0:	f7ff ff52 	bl	8005a58 <lwip_htons>
 8005bb4:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8005bb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005bba:	2b06      	cmp	r3, #6
 8005bbc:	d006      	beq.n	8005bcc <etharp_raw+0x64>
 8005bbe:	4b1b      	ldr	r3, [pc, #108]	; (8005c2c <etharp_raw+0xc4>)
 8005bc0:	491e      	ldr	r1, [pc, #120]	; (8005c3c <etharp_raw+0xd4>)
 8005bc2:	481c      	ldr	r0, [pc, #112]	; (8005c34 <etharp_raw+0xcc>)
 8005bc4:	f240 426b 	movw	r2, #1131	; 0x46b
 8005bc8:	f008 f8a0 	bl	800dd0c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8005bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8005bd0:	60a3      	str	r3, [r4, #8]
 8005bd2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8005bd6:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8005bd8:	682b      	ldr	r3, [r5, #0]
 8005bda:	f8c4 3012 	str.w	r3, [r4, #18]
 8005bde:	88ab      	ldrh	r3, [r5, #4]
 8005be0:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8005be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8005bea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8005bf8:	2306      	movs	r3, #6
 8005bfa:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8005bfc:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8005bfe:	2500      	movs	r5, #0
  hdr->protolen = sizeof(ip4_addr_t);
 8005c00:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005c02:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8005c06:	7025      	strb	r5, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005c08:	70e5      	strb	r5, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005c0a:	464a      	mov	r2, r9
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4653      	mov	r3, sl
 8005c12:	4638      	mov	r0, r7
 8005c14:	f005 fa76 	bl	800b104 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8005c18:	4630      	mov	r0, r6
 8005c1a:	f001 fcdd 	bl	80075d8 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8005c1e:	4628      	mov	r0, r5
}
 8005c20:	b002      	add	sp, #8
 8005c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8005c26:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2a:	e7f9      	b.n	8005c20 <etharp_raw+0xb8>
 8005c2c:	0800f799 	.word	0x0800f799
 8005c30:	0800f7d0 	.word	0x0800f7d0
 8005c34:	0800f3a7 	.word	0x0800f3a7
 8005c38:	0800f7de 	.word	0x0800f7de
 8005c3c:	0800f80f 	.word	0x0800f80f

08005c40 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8005c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c44:	4b3e      	ldr	r3, [pc, #248]	; (8005d40 <etharp_find_entry.isra.0+0x100>)
 8005c46:	9101      	str	r1, [sp, #4]
  s8_t old_queue = ARP_TABLE_SIZE;
 8005c48:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8005c4a:	4605      	mov	r5, r0
 8005c4c:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8005c4e:	4694      	mov	ip, r2
 8005c50:	4614      	mov	r4, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8005c52:	4681      	mov	r9, r0
 8005c54:	4680      	mov	r8, r0
 8005c56:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 8005c58:	4696      	mov	lr, r2
 8005c5a:	461e      	mov	r6, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005c5c:	f1be 0f0a 	cmp.w	lr, #10
    u8_t state = arp_table[i].state;
 8005c60:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005c62:	d112      	bne.n	8005c8a <etharp_find_entry.isra.0+0x4a>
 8005c64:	b99f      	cbnz	r7, 8005c8e <etharp_find_entry.isra.0+0x4e>
      empty = i;
 8005c66:	fa4f fe80 	sxtb.w	lr, r0
 8005c6a:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005c6c:	280a      	cmp	r0, #10
 8005c6e:	f103 0318 	add.w	r3, r3, #24
 8005c72:	d1f3      	bne.n	8005c5c <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8005c74:	9b01      	ldr	r3, [sp, #4]
 8005c76:	0799      	lsls	r1, r3, #30
 8005c78:	d404      	bmi.n	8005c84 <etharp_find_entry.isra.0+0x44>
 8005c7a:	f1be 0f0a 	cmp.w	lr, #10
 8005c7e:	d11c      	bne.n	8005cba <etharp_find_entry.isra.0+0x7a>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8005c80:	07db      	lsls	r3, r3, #31
 8005c82:	d435      	bmi.n	8005cf0 <etharp_find_entry.isra.0+0xb0>
    return (s8_t)ERR_MEM;
 8005c84:	f04f 30ff 	mov.w	r0, #4294967295
 8005c88:	e009      	b.n	8005c9e <etharp_find_entry.isra.0+0x5e>
    } else if (state != ETHARP_STATE_EMPTY) {
 8005c8a:	2f00      	cmp	r7, #0
 8005c8c:	d0ed      	beq.n	8005c6a <etharp_find_entry.isra.0+0x2a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005c8e:	2d00      	cmp	r5, #0
 8005c90:	d04a      	beq.n	8005d28 <etharp_find_entry.isra.0+0xe8>
 8005c92:	6829      	ldr	r1, [r5, #0]
 8005c94:	468a      	mov	sl, r1
 8005c96:	6859      	ldr	r1, [r3, #4]
 8005c98:	458a      	cmp	sl, r1
 8005c9a:	d145      	bne.n	8005d28 <etharp_find_entry.isra.0+0xe8>
        return i;
 8005c9c:	b240      	sxtb	r0, r0
}
 8005c9e:	b003      	add	sp, #12
 8005ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8005ca4:	45c2      	cmp	sl, r8
 8005ca6:	d3e0      	bcc.n	8005c6a <etharp_find_entry.isra.0+0x2a>
            old_pending = i;
 8005ca8:	fa4f fc80 	sxtb.w	ip, r0
 8005cac:	46d0      	mov	r8, sl
 8005cae:	e7dc      	b.n	8005c6a <etharp_find_entry.isra.0+0x2a>
          if (arp_table[i].ctime >= age_stable) {
 8005cb0:	45ca      	cmp	sl, r9
            old_stable = i;
 8005cb2:	bf24      	itt	cs
 8005cb4:	b244      	sxtbcs	r4, r0
 8005cb6:	46d1      	movcs	r9, sl
 8005cb8:	e7d7      	b.n	8005c6a <etharp_find_entry.isra.0+0x2a>
    i = empty;
 8005cba:	fa5f f78e 	uxtb.w	r7, lr
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8005cbe:	2318      	movs	r3, #24
 8005cc0:	fb03 6307 	mla	r3, r3, r7, r6
 8005cc4:	7d1b      	ldrb	r3, [r3, #20]
 8005cc6:	b133      	cbz	r3, 8005cd6 <etharp_find_entry.isra.0+0x96>
 8005cc8:	4b1e      	ldr	r3, [pc, #120]	; (8005d44 <etharp_find_entry.isra.0+0x104>)
 8005cca:	491f      	ldr	r1, [pc, #124]	; (8005d48 <etharp_find_entry.isra.0+0x108>)
 8005ccc:	481f      	ldr	r0, [pc, #124]	; (8005d4c <etharp_find_entry.isra.0+0x10c>)
 8005cce:	f240 1287 	movw	r2, #391	; 0x187
 8005cd2:	f008 f81b 	bl	800dd0c <iprintf>
  if (ipaddr != NULL) {
 8005cd6:	b125      	cbz	r5, 8005ce2 <etharp_find_entry.isra.0+0xa2>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8005cd8:	2318      	movs	r3, #24
 8005cda:	fb03 6307 	mla	r3, r3, r7, r6
 8005cde:	682a      	ldr	r2, [r5, #0]
 8005ce0:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8005ce2:	2318      	movs	r3, #24
 8005ce4:	fb03 6607 	mla	r6, r3, r7, r6
 8005ce8:	2300      	movs	r3, #0
 8005cea:	8273      	strh	r3, [r6, #18]
  return (err_t)i;
 8005cec:	b278      	sxtb	r0, r7
 8005cee:	e7d6      	b.n	8005c9e <etharp_find_entry.isra.0+0x5e>
    if (old_stable < ARP_TABLE_SIZE) {
 8005cf0:	2c0a      	cmp	r4, #10
 8005cf2:	d00f      	beq.n	8005d14 <etharp_find_entry.isra.0+0xd4>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8005cf4:	2318      	movs	r3, #24
      i = old_stable;
 8005cf6:	b2e7      	uxtb	r7, r4
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8005cf8:	435c      	muls	r4, r3
 8005cfa:	5933      	ldr	r3, [r6, r4]
 8005cfc:	b133      	cbz	r3, 8005d0c <etharp_find_entry.isra.0+0xcc>
 8005cfe:	4b11      	ldr	r3, [pc, #68]	; (8005d44 <etharp_find_entry.isra.0+0x104>)
 8005d00:	4913      	ldr	r1, [pc, #76]	; (8005d50 <etharp_find_entry.isra.0+0x110>)
 8005d02:	4812      	ldr	r0, [pc, #72]	; (8005d4c <etharp_find_entry.isra.0+0x10c>)
 8005d04:	f240 126f 	movw	r2, #367	; 0x16f
 8005d08:	f008 f800 	bl	800dd0c <iprintf>
    etharp_free_entry(i);
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	f7ff ff17 	bl	8005b40 <etharp_free_entry>
 8005d12:	e7d4      	b.n	8005cbe <etharp_find_entry.isra.0+0x7e>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8005d14:	f1bc 0f0a 	cmp.w	ip, #10
 8005d18:	d002      	beq.n	8005d20 <etharp_find_entry.isra.0+0xe0>
      i = old_pending;
 8005d1a:	fa5f f78c 	uxtb.w	r7, ip
 8005d1e:	e7f5      	b.n	8005d0c <etharp_find_entry.isra.0+0xcc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8005d20:	2a0a      	cmp	r2, #10
 8005d22:	d0af      	beq.n	8005c84 <etharp_find_entry.isra.0+0x44>
      i = old_queue;
 8005d24:	b2d7      	uxtb	r7, r2
 8005d26:	e7f1      	b.n	8005d0c <etharp_find_entry.isra.0+0xcc>
      if (state == ETHARP_STATE_PENDING) {
 8005d28:	2f01      	cmp	r7, #1
 8005d2a:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 8005d2e:	d1bf      	bne.n	8005cb0 <etharp_find_entry.isra.0+0x70>
        if (arp_table[i].q != NULL) {
 8005d30:	681f      	ldr	r7, [r3, #0]
 8005d32:	2f00      	cmp	r7, #0
 8005d34:	d0b6      	beq.n	8005ca4 <etharp_find_entry.isra.0+0x64>
          if (arp_table[i].ctime >= age_queue) {
 8005d36:	45da      	cmp	sl, fp
 8005d38:	d397      	bcc.n	8005c6a <etharp_find_entry.isra.0+0x2a>
            old_queue = i;
 8005d3a:	b242      	sxtb	r2, r0
 8005d3c:	46d3      	mov	fp, sl
 8005d3e:	e794      	b.n	8005c6a <etharp_find_entry.isra.0+0x2a>
 8005d40:	20000bf0 	.word	0x20000bf0
 8005d44:	0800f799 	.word	0x0800f799
 8005d48:	0800f6bb 	.word	0x0800f6bb
 8005d4c:	0800f3a7 	.word	0x0800f3a7
 8005d50:	0800f6a4 	.word	0x0800f6a4

08005d54 <etharp_cleanup_netif>:
{
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	4d08      	ldr	r5, [pc, #32]	; (8005d78 <etharp_cleanup_netif+0x24>)
 8005d58:	4606      	mov	r6, r0
 8005d5a:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8005d5c:	7d2b      	ldrb	r3, [r5, #20]
 8005d5e:	b12b      	cbz	r3, 8005d6c <etharp_cleanup_netif+0x18>
 8005d60:	68ab      	ldr	r3, [r5, #8]
 8005d62:	42b3      	cmp	r3, r6
 8005d64:	d102      	bne.n	8005d6c <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8005d66:	4620      	mov	r0, r4
 8005d68:	f7ff feea 	bl	8005b40 <etharp_free_entry>
 8005d6c:	3401      	adds	r4, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005d6e:	2c0a      	cmp	r4, #10
 8005d70:	f105 0518 	add.w	r5, r5, #24
 8005d74:	d1f2      	bne.n	8005d5c <etharp_cleanup_netif+0x8>
}
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	20000bf0 	.word	0x20000bf0

08005d7c <etharp_input>:
{
 8005d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d80:	4680      	mov	r8, r0
 8005d82:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8005d84:	460c      	mov	r4, r1
 8005d86:	b949      	cbnz	r1, 8005d9c <etharp_input+0x20>
 8005d88:	4b46      	ldr	r3, [pc, #280]	; (8005ea4 <etharp_input+0x128>)
 8005d8a:	4947      	ldr	r1, [pc, #284]	; (8005ea8 <etharp_input+0x12c>)
 8005d8c:	4847      	ldr	r0, [pc, #284]	; (8005eac <etharp_input+0x130>)
 8005d8e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8005d92:	f007 ffbb 	bl	800dd0c <iprintf>
}
 8005d96:	b006      	add	sp, #24
 8005d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8005d9c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8005d9e:	882b      	ldrh	r3, [r5, #0]
 8005da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da4:	d108      	bne.n	8005db8 <etharp_input+0x3c>
 8005da6:	792b      	ldrb	r3, [r5, #4]
 8005da8:	2b06      	cmp	r3, #6
 8005daa:	d105      	bne.n	8005db8 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8005dac:	796b      	ldrb	r3, [r5, #5]
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d102      	bne.n	8005db8 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8005db2:	886b      	ldrh	r3, [r5, #2]
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d003      	beq.n	8005dc0 <etharp_input+0x44>
  pbuf_free(p);
 8005db8:	4640      	mov	r0, r8
 8005dba:	f001 fc0d 	bl	80075d8 <pbuf_free>
 8005dbe:	e7ea      	b.n	8005d96 <etharp_input+0x1a>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005dc0:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8005dc2:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8005dc6:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8005dc8:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005dca:	b116      	cbz	r6, 8005dd2 <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8005dcc:	1b9b      	subs	r3, r3, r6
 8005dce:	425e      	negs	r6, r3
 8005dd0:	415e      	adcs	r6, r3
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8005dd2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8005dd6:	2e00      	cmp	r6, #0
 8005dd8:	bf14      	ite	ne
 8005dda:	f04f 0901 	movne.w	r9, #1
 8005dde:	f04f 0902 	moveq.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8005de2:	2b06      	cmp	r3, #6
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8005de4:	f105 0708 	add.w	r7, r5, #8
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8005de8:	d006      	beq.n	8005df8 <etharp_input+0x7c>
 8005dea:	4b2e      	ldr	r3, [pc, #184]	; (8005ea4 <etharp_input+0x128>)
 8005dec:	4930      	ldr	r1, [pc, #192]	; (8005eb0 <etharp_input+0x134>)
 8005dee:	482f      	ldr	r0, [pc, #188]	; (8005eac <etharp_input+0x130>)
 8005df0:	f240 12ab 	movw	r2, #427	; 0x1ab
 8005df4:	f007 ff8a 	bl	800dd0c <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8005df8:	9805      	ldr	r0, [sp, #20]
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d03c      	beq.n	8005e78 <etharp_input+0xfc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8005dfe:	4621      	mov	r1, r4
 8005e00:	f000 fc95 	bl	800672e <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8005e04:	4682      	mov	sl, r0
 8005e06:	bbb8      	cbnz	r0, 8005e78 <etharp_input+0xfc>
      ip4_addr_ismulticast(ipaddr)) {
 8005e08:	9b05      	ldr	r3, [sp, #20]
 8005e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8005e0e:	2be0      	cmp	r3, #224	; 0xe0
 8005e10:	d032      	beq.n	8005e78 <etharp_input+0xfc>
  i = etharp_find_entry(ipaddr, flags, netif);
 8005e12:	4649      	mov	r1, r9
 8005e14:	a805      	add	r0, sp, #20
 8005e16:	f7ff ff13 	bl	8005c40 <etharp_find_entry.isra.0>
  if (i < 0) {
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	db2c      	blt.n	8005e78 <etharp_input+0xfc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8005e1e:	4b25      	ldr	r3, [pc, #148]	; (8005eb4 <etharp_input+0x138>)
 8005e20:	2218      	movs	r2, #24
 8005e22:	fb02 f100 	mul.w	r1, r2, r0
 8005e26:	eb03 0e01 	add.w	lr, r3, r1
 8005e2a:	f04f 0c02 	mov.w	ip, #2
 8005e2e:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8005e32:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 8005e36:	f8ce 4008 	str.w	r4, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8005e3a:	fb12 c200 	smlabb	r2, r2, r0, ip
 8005e3e:	6838      	ldr	r0, [r7, #0]
 8005e40:	5098      	str	r0, [r3, r2]
 8005e42:	eb03 0c02 	add.w	ip, r3, r2
 8005e46:	88ba      	ldrh	r2, [r7, #4]
 8005e48:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 8005e4c:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 8005e50:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 8005e54:	f1b9 0f00 	cmp.w	r9, #0
 8005e58:	d00e      	beq.n	8005e78 <etharp_input+0xfc>
    arp_table[i].q = NULL;
 8005e5a:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8005e5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8005e68:	463b      	mov	r3, r7
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f005 f949 	bl	800b104 <ethernet_output>
    pbuf_free(p);
 8005e72:	4648      	mov	r0, r9
 8005e74:	f001 fbb0 	bl	80075d8 <pbuf_free>
  switch (hdr->opcode) {
 8005e78:	88eb      	ldrh	r3, [r5, #6]
 8005e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e7e:	d19b      	bne.n	8005db8 <etharp_input+0x3c>
    if (for_us) {
 8005e80:	2e00      	cmp	r6, #0
 8005e82:	d099      	beq.n	8005db8 <etharp_input+0x3c>
      etharp_raw(netif,
 8005e84:	2202      	movs	r2, #2
 8005e86:	9203      	str	r2, [sp, #12]
 8005e88:	aa05      	add	r2, sp, #20
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8005e8a:	f104 0325 	add.w	r3, r4, #37	; 0x25
      etharp_raw(netif,
 8005e8e:	9202      	str	r2, [sp, #8]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8005e90:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 8005e92:	9200      	str	r2, [sp, #0]
 8005e94:	9701      	str	r7, [sp, #4]
 8005e96:	463a      	mov	r2, r7
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f7ff fe64 	bl	8005b68 <etharp_raw>
 8005ea0:	e78a      	b.n	8005db8 <etharp_input+0x3c>
 8005ea2:	bf00      	nop
 8005ea4:	0800f799 	.word	0x0800f799
 8005ea8:	0800f7d0 	.word	0x0800f7d0
 8005eac:	0800f3a7 	.word	0x0800f3a7
 8005eb0:	0800f703 	.word	0x0800f703
 8005eb4:	20000bf0 	.word	0x20000bf0

08005eb8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8005eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005eba:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005ebc:	f100 0325 	add.w	r3, r0, #37	; 0x25
 8005ec0:	9102      	str	r1, [sp, #8]
 8005ec2:	2401      	movs	r4, #1
 8005ec4:	4905      	ldr	r1, [pc, #20]	; (8005edc <etharp_request+0x24>)
 8005ec6:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005ec8:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005eca:	9200      	str	r2, [sp, #0]
 8005ecc:	9403      	str	r4, [sp, #12]
 8005ece:	4a04      	ldr	r2, [pc, #16]	; (8005ee0 <etharp_request+0x28>)
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	f7ff fe49 	bl	8005b68 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8005ed6:	b004      	add	sp, #16
 8005ed8:	bd10      	pop	{r4, pc}
 8005eda:	bf00      	nop
 8005edc:	08010db0 	.word	0x08010db0
 8005ee0:	08010d44 	.word	0x08010d44

08005ee4 <etharp_tmr>:
{
 8005ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee6:	4c13      	ldr	r4, [pc, #76]	; (8005f34 <etharp_tmr+0x50>)
 8005ee8:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8005eea:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8005eec:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8005eee:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8005ef0:	b16a      	cbz	r2, 8005f0e <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8005ef2:	89e3      	ldrh	r3, [r4, #14]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005ef8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8005efc:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005efe:	d203      	bcs.n	8005f08 <etharp_tmr+0x24>
 8005f00:	2a01      	cmp	r2, #1
 8005f02:	d10a      	bne.n	8005f1a <etharp_tmr+0x36>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d90c      	bls.n	8005f22 <etharp_tmr+0x3e>
        etharp_free_entry(i);
 8005f08:	4628      	mov	r0, r5
 8005f0a:	f7ff fe19 	bl	8005b40 <etharp_free_entry>
 8005f0e:	3501      	adds	r5, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005f10:	2d0a      	cmp	r5, #10
 8005f12:	f104 0418 	add.w	r4, r4, #24
 8005f16:	d1ea      	bne.n	8005eee <etharp_tmr+0xa>
 8005f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8005f1a:	2a03      	cmp	r2, #3
 8005f1c:	d106      	bne.n	8005f2c <etharp_tmr+0x48>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8005f1e:	7427      	strb	r7, [r4, #16]
 8005f20:	e7f5      	b.n	8005f0e <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8005f22:	4621      	mov	r1, r4
 8005f24:	6860      	ldr	r0, [r4, #4]
 8005f26:	f7ff ffc7 	bl	8005eb8 <etharp_request>
 8005f2a:	e7f0      	b.n	8005f0e <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8005f2c:	2a04      	cmp	r2, #4
 8005f2e:	d1ee      	bne.n	8005f0e <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8005f30:	7426      	strb	r6, [r4, #16]
 8005f32:	e7ec      	b.n	8005f0e <etharp_tmr+0x2a>
 8005f34:	20000bf4 	.word	0x20000bf4

08005f38 <etharp_output_to_arp_index>:
{
 8005f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005f3c:	4d27      	ldr	r5, [pc, #156]	; (8005fdc <etharp_output_to_arp_index+0xa4>)
{
 8005f3e:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005f40:	2218      	movs	r2, #24
 8005f42:	fb02 5204 	mla	r2, r2, r4, r5
{
 8005f46:	b085      	sub	sp, #20
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005f48:	7d12      	ldrb	r2, [r2, #20]
 8005f4a:	2a01      	cmp	r2, #1
{
 8005f4c:	4606      	mov	r6, r0
 8005f4e:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005f50:	d806      	bhi.n	8005f60 <etharp_output_to_arp_index+0x28>
 8005f52:	4b23      	ldr	r3, [pc, #140]	; (8005fe0 <etharp_output_to_arp_index+0xa8>)
 8005f54:	4923      	ldr	r1, [pc, #140]	; (8005fe4 <etharp_output_to_arp_index+0xac>)
 8005f56:	4824      	ldr	r0, [pc, #144]	; (8005fe8 <etharp_output_to_arp_index+0xb0>)
 8005f58:	f240 22ed 	movw	r2, #749	; 0x2ed
 8005f5c:	f007 fed6 	bl	800dd0c <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8005f60:	2118      	movs	r1, #24
 8005f62:	fb01 5904 	mla	r9, r1, r4, r5
 8005f66:	f106 0725 	add.w	r7, r6, #37	; 0x25
 8005f6a:	f899 3014 	ldrb.w	r3, [r9, #20]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d10d      	bne.n	8005f8e <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8005f72:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 8005f76:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8005f7a:	d917      	bls.n	8005fac <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	3104      	adds	r1, #4
 8005f80:	4630      	mov	r0, r6
 8005f82:	f7ff ff99 	bl	8005eb8 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005f86:	b910      	cbnz	r0, 8005f8e <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8005f8e:	2318      	movs	r3, #24
 8005f90:	fb03 5304 	mla	r3, r3, r4, r5
 8005f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f98:	9200      	str	r2, [sp, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	463a      	mov	r2, r7
 8005f9e:	4641      	mov	r1, r8
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f005 f8af 	bl	800b104 <ethernet_output>
}
 8005fa6:	b005      	add	sp, #20
 8005fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8005fac:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005fb0:	d3ed      	bcc.n	8005f8e <etharp_output_to_arp_index+0x56>
 8005fb2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8005fb6:	00db      	lsls	r3, r3, #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005fb8:	f103 020c 	add.w	r2, r3, #12
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005fc0:	9302      	str	r3, [sp, #8]
 8005fc2:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <etharp_output_to_arp_index+0xb4>)
 8005fc4:	9301      	str	r3, [sp, #4]
 8005fc6:	2101      	movs	r1, #1
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005fc8:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005fca:	9103      	str	r1, [sp, #12]
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	442a      	add	r2, r5
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	4639      	mov	r1, r7
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f7ff fdc7 	bl	8005b68 <etharp_raw>
 8005fda:	e7d4      	b.n	8005f86 <etharp_output_to_arp_index+0x4e>
 8005fdc:	20000bf0 	.word	0x20000bf0
 8005fe0:	0800f799 	.word	0x0800f799
 8005fe4:	0800f727 	.word	0x0800f727
 8005fe8:	0800f3a7 	.word	0x0800f3a7
 8005fec:	08010db0 	.word	0x08010db0

08005ff0 <etharp_query>:
{
 8005ff0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff4:	4689      	mov	r9, r1
 8005ff6:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005ff8:	4601      	mov	r1, r0
 8005ffa:	f8d9 0000 	ldr.w	r0, [r9]
{
 8005ffe:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006000:	f000 fb95 	bl	800672e <ip4_addr_isbroadcast_u32>
 8006004:	4604      	mov	r4, r0
 8006006:	2800      	cmp	r0, #0
 8006008:	d15e      	bne.n	80060c8 <etharp_query+0xd8>
      ip4_addr_ismulticast(ipaddr) ||
 800600a:	f8d9 3000 	ldr.w	r3, [r9]
 800600e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006012:	2ae0      	cmp	r2, #224	; 0xe0
 8006014:	d058      	beq.n	80060c8 <etharp_query+0xd8>
      ip4_addr_isany(ipaddr)) {
 8006016:	2b00      	cmp	r3, #0
 8006018:	d056      	beq.n	80060c8 <etharp_query+0xd8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800601a:	2101      	movs	r1, #1
 800601c:	4648      	mov	r0, r9
 800601e:	f7ff fe0f 	bl	8005c40 <etharp_find_entry.isra.0>
  if (i < 0) {
 8006022:	1e05      	subs	r5, r0, #0
 8006024:	db53      	blt.n	80060ce <etharp_query+0xde>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8006026:	4f40      	ldr	r7, [pc, #256]	; (8006128 <etharp_query+0x138>)
 8006028:	2318      	movs	r3, #24
 800602a:	fb03 7305 	mla	r3, r3, r5, r7
 800602e:	7d1a      	ldrb	r2, [r3, #20]
 8006030:	b91a      	cbnz	r2, 800603a <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8006032:	2401      	movs	r4, #1
 8006034:	751c      	strb	r4, [r3, #20]
    arp_table[i].netif = netif;
 8006036:	f8c3 8008 	str.w	r8, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800603a:	2318      	movs	r3, #24
 800603c:	fb03 7305 	mla	r3, r3, r5, r7
 8006040:	7d1b      	ldrb	r3, [r3, #20]
 8006042:	b933      	cbnz	r3, 8006052 <etharp_query+0x62>
 8006044:	4b39      	ldr	r3, [pc, #228]	; (800612c <etharp_query+0x13c>)
 8006046:	493a      	ldr	r1, [pc, #232]	; (8006130 <etharp_query+0x140>)
 8006048:	483a      	ldr	r0, [pc, #232]	; (8006134 <etharp_query+0x144>)
 800604a:	f240 32c9 	movw	r2, #969	; 0x3c9
 800604e:	f007 fe5d 	bl	800dd0c <iprintf>
  if (is_new_entry || (q == NULL)) {
 8006052:	b90c      	cbnz	r4, 8006058 <etharp_query+0x68>
 8006054:	2e00      	cmp	r6, #0
 8006056:	d13c      	bne.n	80060d2 <etharp_query+0xe2>
    result = etharp_request(netif, ipaddr);
 8006058:	4649      	mov	r1, r9
 800605a:	4640      	mov	r0, r8
 800605c:	f7ff ff2c 	bl	8005eb8 <etharp_request>
    if (q == NULL) {
 8006060:	2e00      	cmp	r6, #0
 8006062:	d138      	bne.n	80060d6 <etharp_query+0xe6>
}
 8006064:	b002      	add	sp, #8
 8006066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800606a:	d1fb      	bne.n	8006064 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800606c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800612c <etharp_query+0x13c>
 8006070:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800613c <etharp_query+0x14c>
 8006074:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006134 <etharp_query+0x144>
 8006078:	4634      	mov	r4, r6
    while (p) {
 800607a:	b99c      	cbnz	r4, 80060a4 <etharp_query+0xb4>
      pbuf_ref(p);
 800607c:	4630      	mov	r0, r6
 800607e:	f001 fc65 	bl	800794c <pbuf_ref>
    if (p != NULL) {
 8006082:	2e00      	cmp	r6, #0
 8006084:	d04c      	beq.n	8006120 <etharp_query+0x130>
 8006086:	46b0      	mov	r8, r6
      if (arp_table[i].q != NULL) {
 8006088:	2318      	movs	r3, #24
 800608a:	fb03 f205 	mul.w	r2, r3, r5
 800608e:	461c      	mov	r4, r3
 8006090:	58b8      	ldr	r0, [r7, r2]
 8006092:	b108      	cbz	r0, 8006098 <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 8006094:	f001 faa0 	bl	80075d8 <pbuf_free>
      arp_table[i].q = p;
 8006098:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 800609c:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800609e:	f847 8003 	str.w	r8, [r7, r3]
 80060a2:	e7df      	b.n	8006064 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80060a4:	8962      	ldrh	r2, [r4, #10]
 80060a6:	8923      	ldrh	r3, [r4, #8]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d108      	bne.n	80060be <etharp_query+0xce>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	b133      	cbz	r3, 80060be <etharp_query+0xce>
 80060b0:	4643      	mov	r3, r8
 80060b2:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80060b6:	4649      	mov	r1, r9
 80060b8:	4650      	mov	r0, sl
 80060ba:	f007 fe27 	bl	800dd0c <iprintf>
      if (p->type != PBUF_ROM) {
 80060be:	7b23      	ldrb	r3, [r4, #12]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d11e      	bne.n	8006102 <etharp_query+0x112>
      p = p->next;
 80060c4:	6824      	ldr	r4, [r4, #0]
 80060c6:	e7d8      	b.n	800607a <etharp_query+0x8a>
    return ERR_ARG;
 80060c8:	f06f 000f 	mvn.w	r0, #15
 80060cc:	e7ca      	b.n	8006064 <etharp_query+0x74>
 80060ce:	4628      	mov	r0, r5
 80060d0:	e7c8      	b.n	8006064 <etharp_query+0x74>
  err_t result = ERR_MEM;
 80060d2:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80060d6:	2318      	movs	r3, #24
 80060d8:	fb03 7205 	mla	r2, r3, r5, r7
 80060dc:	7d12      	ldrb	r2, [r2, #20]
 80060de:	2a01      	cmp	r2, #1
 80060e0:	d9c3      	bls.n	800606a <etharp_query+0x7a>
    ETHARP_SET_HINT(netif, i);
 80060e2:	4a15      	ldr	r2, [pc, #84]	; (8006138 <etharp_query+0x148>)
 80060e4:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80060e6:	220c      	movs	r2, #12
 80060e8:	fb13 2305 	smlabb	r3, r3, r5, r2
 80060ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060f0:	9200      	str	r2, [sp, #0]
 80060f2:	443b      	add	r3, r7
 80060f4:	f108 0225 	add.w	r2, r8, #37	; 0x25
 80060f8:	4631      	mov	r1, r6
 80060fa:	4640      	mov	r0, r8
 80060fc:	f005 f802 	bl	800b104 <ethernet_output>
 8006100:	e7b0      	b.n	8006064 <etharp_query+0x74>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8006102:	2200      	movs	r2, #0
 8006104:	8921      	ldrh	r1, [r4, #8]
 8006106:	2002      	movs	r0, #2
 8006108:	f001 fac8 	bl	800769c <pbuf_alloc>
      if (p != NULL) {
 800610c:	4680      	mov	r8, r0
 800610e:	b138      	cbz	r0, 8006120 <etharp_query+0x130>
        if (pbuf_copy(p, q) != ERR_OK) {
 8006110:	4631      	mov	r1, r6
 8006112:	f001 fc69 	bl	80079e8 <pbuf_copy>
 8006116:	2800      	cmp	r0, #0
 8006118:	d0b6      	beq.n	8006088 <etharp_query+0x98>
          pbuf_free(p);
 800611a:	4640      	mov	r0, r8
 800611c:	f001 fa5c 	bl	80075d8 <pbuf_free>
      result = ERR_MEM;
 8006120:	f04f 30ff 	mov.w	r0, #4294967295
 8006124:	e79e      	b.n	8006064 <etharp_query+0x74>
 8006126:	bf00      	nop
 8006128:	20000bf0 	.word	0x20000bf0
 800612c:	0800f799 	.word	0x0800f799
 8006130:	0800f757 	.word	0x0800f757
 8006134:	0800f3a7 	.word	0x0800f3a7
 8006138:	20000ce0 	.word	0x20000ce0
 800613c:	0800f77f 	.word	0x0800f77f

08006140 <etharp_output>:
{
 8006140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006142:	460e      	mov	r6, r1
 8006144:	b085      	sub	sp, #20
 8006146:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8006148:	4604      	mov	r4, r0
 800614a:	b930      	cbnz	r0, 800615a <etharp_output+0x1a>
 800614c:	4b3e      	ldr	r3, [pc, #248]	; (8006248 <etharp_output+0x108>)
 800614e:	493f      	ldr	r1, [pc, #252]	; (800624c <etharp_output+0x10c>)
 8006150:	483f      	ldr	r0, [pc, #252]	; (8006250 <etharp_output+0x110>)
 8006152:	f240 321b 	movw	r2, #795	; 0x31b
 8006156:	f007 fdd9 	bl	800dd0c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800615a:	b936      	cbnz	r6, 800616a <etharp_output+0x2a>
 800615c:	4b3a      	ldr	r3, [pc, #232]	; (8006248 <etharp_output+0x108>)
 800615e:	493d      	ldr	r1, [pc, #244]	; (8006254 <etharp_output+0x114>)
 8006160:	483b      	ldr	r0, [pc, #236]	; (8006250 <etharp_output+0x110>)
 8006162:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8006166:	f007 fdd1 	bl	800dd0c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800616a:	b935      	cbnz	r5, 800617a <etharp_output+0x3a>
 800616c:	4b36      	ldr	r3, [pc, #216]	; (8006248 <etharp_output+0x108>)
 800616e:	493a      	ldr	r1, [pc, #232]	; (8006258 <etharp_output+0x118>)
 8006170:	4837      	ldr	r0, [pc, #220]	; (8006250 <etharp_output+0x110>)
 8006172:	f240 321d 	movw	r2, #797	; 0x31d
 8006176:	f007 fdc9 	bl	800dd0c <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800617a:	4621      	mov	r1, r4
 800617c:	6828      	ldr	r0, [r5, #0]
 800617e:	f000 fad6 	bl	800672e <ip4_addr_isbroadcast_u32>
 8006182:	2800      	cmp	r0, #0
 8006184:	d15b      	bne.n	800623e <etharp_output+0xfe>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8006186:	682b      	ldr	r3, [r5, #0]
 8006188:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800618c:	2ae0      	cmp	r2, #224	; 0xe0
 800618e:	d11d      	bne.n	80061cc <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8006190:	2301      	movs	r3, #1
 8006192:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8006196:	235e      	movs	r3, #94	; 0x5e
 8006198:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800619c:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800619e:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80061a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a6:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80061aa:	78ab      	ldrb	r3, [r5, #2]
 80061ac:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80061b0:	78eb      	ldrb	r3, [r5, #3]
 80061b2:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 80061b6:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80061b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061bc:	9200      	str	r2, [sp, #0]
 80061be:	4631      	mov	r1, r6
 80061c0:	f104 0225 	add.w	r2, r4, #37	; 0x25
 80061c4:	4620      	mov	r0, r4
 80061c6:	f004 ff9d 	bl	800b104 <ethernet_output>
 80061ca:	e01f      	b.n	800620c <etharp_output+0xcc>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80061cc:	6862      	ldr	r2, [r4, #4]
 80061ce:	68a1      	ldr	r1, [r4, #8]
 80061d0:	405a      	eors	r2, r3
 80061d2:	420a      	tst	r2, r1
 80061d4:	d008      	beq.n	80061e8 <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 80061d6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80061d8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80061dc:	4293      	cmp	r3, r2
 80061de:	d003      	beq.n	80061e8 <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80061e0:	68e3      	ldr	r3, [r4, #12]
 80061e2:	b373      	cbz	r3, 8006242 <etharp_output+0x102>
            dst_addr = netif_ip4_gw(netif);
 80061e4:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80061e8:	4b1c      	ldr	r3, [pc, #112]	; (800625c <etharp_output+0x11c>)
 80061ea:	491d      	ldr	r1, [pc, #116]	; (8006260 <etharp_output+0x120>)
 80061ec:	781a      	ldrb	r2, [r3, #0]
 80061ee:	2018      	movs	r0, #24
 80061f0:	fb00 1002 	mla	r0, r0, r2, r1
 80061f4:	7d01      	ldrb	r1, [r0, #20]
 80061f6:	2901      	cmp	r1, #1
 80061f8:	4619      	mov	r1, r3
 80061fa:	d909      	bls.n	8006210 <etharp_output+0xd0>
 80061fc:	682f      	ldr	r7, [r5, #0]
 80061fe:	6843      	ldr	r3, [r0, #4]
 8006200:	429f      	cmp	r7, r3
 8006202:	d105      	bne.n	8006210 <etharp_output+0xd0>
        return etharp_output_to_arp_index(netif, q, i);
 8006204:	4631      	mov	r1, r6
 8006206:	4620      	mov	r0, r4
 8006208:	f7ff fe96 	bl	8005f38 <etharp_output_to_arp_index>
}
 800620c:	b005      	add	sp, #20
 800620e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006210:	4b13      	ldr	r3, [pc, #76]	; (8006260 <etharp_output+0x120>)
{
 8006212:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8006214:	7d18      	ldrb	r0, [r3, #20]
 8006216:	2801      	cmp	r0, #1
 8006218:	d906      	bls.n	8006228 <etharp_output+0xe8>
 800621a:	682f      	ldr	r7, [r5, #0]
 800621c:	6858      	ldr	r0, [r3, #4]
 800621e:	4287      	cmp	r7, r0
 8006220:	d102      	bne.n	8006228 <etharp_output+0xe8>
        ETHARP_SET_HINT(netif, i);
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	700a      	strb	r2, [r1, #0]
 8006226:	e7ed      	b.n	8006204 <etharp_output+0xc4>
 8006228:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800622a:	2a0a      	cmp	r2, #10
 800622c:	f103 0318 	add.w	r3, r3, #24
 8006230:	d1f0      	bne.n	8006214 <etharp_output+0xd4>
    return etharp_query(netif, dst_addr, q);
 8006232:	4632      	mov	r2, r6
 8006234:	4629      	mov	r1, r5
 8006236:	4620      	mov	r0, r4
 8006238:	f7ff feda 	bl	8005ff0 <etharp_query>
 800623c:	e7e6      	b.n	800620c <etharp_output+0xcc>
    dest = (const struct eth_addr *)&ethbroadcast;
 800623e:	4b09      	ldr	r3, [pc, #36]	; (8006264 <etharp_output+0x124>)
 8006240:	e7ba      	b.n	80061b8 <etharp_output+0x78>
            return ERR_RTE;
 8006242:	f06f 0003 	mvn.w	r0, #3
 8006246:	e7e1      	b.n	800620c <etharp_output+0xcc>
 8006248:	0800f799 	.word	0x0800f799
 800624c:	0800f7d0 	.word	0x0800f7d0
 8006250:	0800f3a7 	.word	0x0800f3a7
 8006254:	0801017f 	.word	0x0801017f
 8006258:	0800f6e4 	.word	0x0800f6e4
 800625c:	20000ce0 	.word	0x20000ce0
 8006260:	20000bf0 	.word	0x20000bf0
 8006264:	08010d44 	.word	0x08010d44

08006268 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8006268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800626a:	4604      	mov	r4, r0
 800626c:	b087      	sub	sp, #28
 800626e:	460f      	mov	r7, r1
 8006270:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8006272:	2124      	movs	r1, #36	; 0x24
 8006274:	2200      	movs	r2, #0
 8006276:	2001      	movs	r0, #1
 8006278:	f001 fa10 	bl	800769c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800627c:	4605      	mov	r5, r0
 800627e:	b3a0      	cbz	r0, 80062ea <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8006280:	8943      	ldrh	r3, [r0, #10]
 8006282:	2b23      	cmp	r3, #35	; 0x23
 8006284:	d806      	bhi.n	8006294 <icmp_send_response.isra.0+0x2c>
 8006286:	4b1a      	ldr	r3, [pc, #104]	; (80062f0 <icmp_send_response.isra.0+0x88>)
 8006288:	491a      	ldr	r1, [pc, #104]	; (80062f4 <icmp_send_response.isra.0+0x8c>)
 800628a:	481b      	ldr	r0, [pc, #108]	; (80062f8 <icmp_send_response.isra.0+0x90>)
 800628c:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8006290:	f007 fd3c 	bl	800dd0c <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8006294:	6822      	ldr	r2, [r4, #0]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8006296:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8006298:	2300      	movs	r3, #0
 800629a:	7123      	strb	r3, [r4, #4]
 800629c:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800629e:	71a3      	strb	r3, [r4, #6]
 80062a0:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 80062a2:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 80062a4:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80062a6:	4613      	mov	r3, r2
 80062a8:	f104 0108 	add.w	r1, r4, #8
 80062ac:	f102 001c 	add.w	r0, r2, #28
 80062b0:	f853 6b04 	ldr.w	r6, [r3], #4
 80062b4:	f841 6b04 	str.w	r6, [r1], #4
 80062b8:	4283      	cmp	r3, r0
 80062ba:	d1f9      	bne.n	80062b0 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80062bc:	ae06      	add	r6, sp, #24
 80062be:	68d3      	ldr	r3, [r2, #12]
 80062c0:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80062c4:	4630      	mov	r0, r6
 80062c6:	f000 f8bb 	bl	8006440 <ip4_route>
#endif
  if (netif != NULL) {
 80062ca:	b158      	cbz	r0, 80062e4 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80062cc:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80062ce:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 80062d0:	70a1      	strb	r1, [r4, #2]
 80062d2:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80062d4:	4632      	mov	r2, r6
 80062d6:	9002      	str	r0, [sp, #8]
 80062d8:	e88d 000a 	stmia.w	sp, {r1, r3}
 80062dc:	4628      	mov	r0, r5
 80062de:	23ff      	movs	r3, #255	; 0xff
 80062e0:	f000 fa14 	bl	800670c <ip4_output_if>
  }
  pbuf_free(q);
 80062e4:	4628      	mov	r0, r5
 80062e6:	f001 f977 	bl	80075d8 <pbuf_free>
}
 80062ea:	b007      	add	sp, #28
 80062ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ee:	bf00      	nop
 80062f0:	0800f8b7 	.word	0x0800f8b7
 80062f4:	0800f8ec 	.word	0x0800f8ec
 80062f8:	0800f3a7 	.word	0x0800f3a7

080062fc <icmp_input>:
{
 80062fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8006300:	4b44      	ldr	r3, [pc, #272]	; (8006414 <icmp_input+0x118>)
 8006302:	f8d3 9008 	ldr.w	r9, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 8006306:	f899 5000 	ldrb.w	r5, [r9]
 800630a:	f005 050f 	and.w	r5, r5, #15
 800630e:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8006310:	2d13      	cmp	r5, #19
{
 8006312:	b085      	sub	sp, #20
 8006314:	4604      	mov	r4, r0
 8006316:	4688      	mov	r8, r1
 8006318:	461f      	mov	r7, r3
  if (hlen < IP_HLEN) {
 800631a:	d92a      	bls.n	8006372 <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 800631c:	8942      	ldrh	r2, [r0, #10]
 800631e:	2a03      	cmp	r2, #3
 8006320:	d927      	bls.n	8006372 <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 8006322:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 8006324:	7812      	ldrb	r2, [r2, #0]
 8006326:	2a08      	cmp	r2, #8
 8006328:	d123      	bne.n	8006372 <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800632a:	6958      	ldr	r0, [r3, #20]
 800632c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8006330:	2ae0      	cmp	r2, #224	; 0xe0
 8006332:	d01e      	beq.n	8006372 <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8006334:	6819      	ldr	r1, [r3, #0]
 8006336:	f000 f9fa 	bl	800672e <ip4_addr_isbroadcast_u32>
 800633a:	4606      	mov	r6, r0
 800633c:	b9c8      	cbnz	r0, 8006372 <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800633e:	8923      	ldrh	r3, [r4, #8]
 8006340:	2b07      	cmp	r3, #7
 8006342:	d916      	bls.n	8006372 <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8006344:	f105 010e 	add.w	r1, r5, #14
 8006348:	4620      	mov	r0, r4
 800634a:	f001 f93f 	bl	80075cc <pbuf_header>
 800634e:	2800      	cmp	r0, #0
 8006350:	d04f      	beq.n	80063f2 <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8006352:	8921      	ldrh	r1, [r4, #8]
 8006354:	4429      	add	r1, r5
 8006356:	4632      	mov	r2, r6
 8006358:	b289      	uxth	r1, r1
 800635a:	2002      	movs	r0, #2
 800635c:	f001 f99e 	bl	800769c <pbuf_alloc>
      if (r == NULL) {
 8006360:	4606      	mov	r6, r0
 8006362:	b130      	cbz	r0, 8006372 <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8006364:	8942      	ldrh	r2, [r0, #10]
 8006366:	f105 0308 	add.w	r3, r5, #8
 800636a:	429a      	cmp	r2, r3
 800636c:	d207      	bcs.n	800637e <icmp_input+0x82>
        pbuf_free(r);
 800636e:	f001 f933 	bl	80075d8 <pbuf_free>
  pbuf_free(p);
 8006372:	4620      	mov	r0, r4
}
 8006374:	b005      	add	sp, #20
 8006376:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800637a:	f001 b92d 	b.w	80075d8 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 800637e:	4649      	mov	r1, r9
 8006380:	462a      	mov	r2, r5
 8006382:	6840      	ldr	r0, [r0, #4]
 8006384:	f007 fc03 	bl	800db8e <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8006388:	4269      	negs	r1, r5
 800638a:	4630      	mov	r0, r6
 800638c:	f001 f91e 	bl	80075cc <pbuf_header>
 8006390:	b138      	cbz	r0, 80063a2 <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8006392:	4b21      	ldr	r3, [pc, #132]	; (8006418 <icmp_input+0x11c>)
 8006394:	4921      	ldr	r1, [pc, #132]	; (800641c <icmp_input+0x120>)
 8006396:	4822      	ldr	r0, [pc, #136]	; (8006420 <icmp_input+0x124>)
 8006398:	22af      	movs	r2, #175	; 0xaf
 800639a:	f007 fcb7 	bl	800dd0c <iprintf>
        pbuf_free(r);
 800639e:	4630      	mov	r0, r6
 80063a0:	e7e5      	b.n	800636e <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 80063a2:	4621      	mov	r1, r4
 80063a4:	4630      	mov	r0, r6
 80063a6:	f001 fb1f 	bl	80079e8 <pbuf_copy>
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d1f7      	bne.n	800639e <icmp_input+0xa2>
      pbuf_free(p);
 80063ae:	4620      	mov	r0, r4
 80063b0:	f001 f912 	bl	80075d8 <pbuf_free>
 80063b4:	4634      	mov	r4, r6
    if (pbuf_header(p, (s16_t)hlen)) {
 80063b6:	4629      	mov	r1, r5
 80063b8:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 80063ba:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 80063bc:	f001 f906 	bl	80075cc <pbuf_header>
 80063c0:	4602      	mov	r2, r0
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d1d5      	bne.n	8006372 <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80063c6:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80063d0:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80063d2:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 80063d4:	70b0      	strb	r0, [r6, #2]
 80063d6:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80063d8:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80063da:	7288      	strb	r0, [r1, #10]
 80063dc:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80063de:	2101      	movs	r1, #1
 80063e0:	9101      	str	r1, [sp, #4]
 80063e2:	9000      	str	r0, [sp, #0]
 80063e4:	f8cd 8008 	str.w	r8, [sp, #8]
 80063e8:	490e      	ldr	r1, [pc, #56]	; (8006424 <icmp_input+0x128>)
 80063ea:	4620      	mov	r0, r4
 80063ec:	f000 f98e 	bl	800670c <ip4_output_if>
 80063f0:	e7bf      	b.n	8006372 <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80063f2:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 80063f6:	31f2      	adds	r1, #242	; 0xf2
 80063f8:	b209      	sxth	r1, r1
 80063fa:	4620      	mov	r0, r4
 80063fc:	f001 f8e6 	bl	80075cc <pbuf_header>
 8006400:	2800      	cmp	r0, #0
 8006402:	d0d8      	beq.n	80063b6 <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8006404:	4b04      	ldr	r3, [pc, #16]	; (8006418 <icmp_input+0x11c>)
 8006406:	4908      	ldr	r1, [pc, #32]	; (8006428 <icmp_input+0x12c>)
 8006408:	4805      	ldr	r0, [pc, #20]	; (8006420 <icmp_input+0x124>)
 800640a:	22c0      	movs	r2, #192	; 0xc0
 800640c:	f007 fc7e 	bl	800dd0c <iprintf>
        goto icmperr;
 8006410:	e7af      	b.n	8006372 <icmp_input+0x76>
 8006412:	bf00      	nop
 8006414:	20001b2c 	.word	0x20001b2c
 8006418:	0800f8b7 	.word	0x0800f8b7
 800641c:	0800f850 	.word	0x0800f850
 8006420:	0800f3a7 	.word	0x0800f3a7
 8006424:	20001b40 	.word	0x20001b40
 8006428:	0800f885 	.word	0x0800f885

0800642c <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 800642c:	460a      	mov	r2, r1
 800642e:	3004      	adds	r0, #4
 8006430:	2103      	movs	r1, #3
 8006432:	f7ff bf19 	b.w	8006268 <icmp_send_response.isra.0>

08006436 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8006436:	460a      	mov	r2, r1
 8006438:	3004      	adds	r0, #4
 800643a:	210b      	movs	r1, #11
 800643c:	f7ff bf14 	b.w	8006268 <icmp_send_response.isra.0>

08006440 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8006440:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8006442:	4b13      	ldr	r3, [pc, #76]	; (8006490 <ip4_route+0x50>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	b96b      	cbnz	r3, 8006464 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8006448:	4a12      	ldr	r2, [pc, #72]	; (8006494 <ip4_route+0x54>)
 800644a:	6812      	ldr	r2, [r2, #0]
 800644c:	b1ea      	cbz	r2, 800648a <ip4_route+0x4a>
 800644e:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
 8006452:	f001 0105 	and.w	r1, r1, #5
 8006456:	2905      	cmp	r1, #5
 8006458:	d117      	bne.n	800648a <ip4_route+0x4a>
 800645a:	6851      	ldr	r1, [r2, #4]
 800645c:	2900      	cmp	r1, #0
 800645e:	bf18      	it	ne
 8006460:	4613      	movne	r3, r2
 8006462:	e012      	b.n	800648a <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006464:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 8006468:	f004 0205 	and.w	r2, r4, #5
 800646c:	2a05      	cmp	r2, #5
 800646e:	d1e9      	bne.n	8006444 <ip4_route+0x4>
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	2a00      	cmp	r2, #0
 8006474:	d0e6      	beq.n	8006444 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8006476:	6801      	ldr	r1, [r0, #0]
 8006478:	689d      	ldr	r5, [r3, #8]
 800647a:	404a      	eors	r2, r1
 800647c:	422a      	tst	r2, r5
 800647e:	d004      	beq.n	800648a <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8006480:	07a2      	lsls	r2, r4, #30
 8006482:	d4df      	bmi.n	8006444 <ip4_route+0x4>
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	4291      	cmp	r1, r2
 8006488:	d1dc      	bne.n	8006444 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 800648a:	4618      	mov	r0, r3
 800648c:	bd30      	pop	{r4, r5, pc}
 800648e:	bf00      	nop
 8006490:	20005044 	.word	0x20005044
 8006494:	20005048 	.word	0x20005048

08006498 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8006498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800649c:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800649e:	f897 9000 	ldrb.w	r9, [r7]
 80064a2:	ea4f 1319 	mov.w	r3, r9, lsr #4
 80064a6:	2b04      	cmp	r3, #4
{
 80064a8:	4605      	mov	r5, r0
 80064aa:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 80064ac:	d005      	beq.n	80064ba <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80064ae:	4628      	mov	r0, r5
 80064b0:	f001 f892 	bl	80075d8 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 80064b4:	2000      	movs	r0, #0
 80064b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80064ba:	8878      	ldrh	r0, [r7, #2]
 80064bc:	f7ff facc 	bl	8005a58 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 80064c0:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL(iphdr);
 80064c2:	f009 090f 	and.w	r9, r9, #15
  if (iphdr_len < p->tot_len) {
 80064c6:	4283      	cmp	r3, r0
  iphdr_hlen *= 4;
 80064c8:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80064cc:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 80064ce:	d903      	bls.n	80064d8 <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 80064d0:	4601      	mov	r1, r0
 80064d2:	4628      	mov	r0, r5
 80064d4:	f001 f9c2 	bl	800785c <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80064d8:	896b      	ldrh	r3, [r5, #10]
 80064da:	454b      	cmp	r3, r9
 80064dc:	d3e7      	bcc.n	80064ae <ip4_input+0x16>
 80064de:	892b      	ldrh	r3, [r5, #8]
 80064e0:	42a3      	cmp	r3, r4
 80064e2:	d3e4      	bcc.n	80064ae <ip4_input+0x16>
 80064e4:	f1b9 0f13 	cmp.w	r9, #19
 80064e8:	d9e1      	bls.n	80064ae <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	4c49      	ldr	r4, [pc, #292]	; (8006614 <ip4_input+0x17c>)
 80064ee:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80064f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80064f8:	2be0      	cmp	r3, #224	; 0xe0
 80064fa:	d139      	bne.n	8006570 <ip4_input+0xd8>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80064fc:	f898 302b 	ldrb.w	r3, [r8, #43]	; 0x2b
 8006500:	07da      	lsls	r2, r3, #31
 8006502:	d503      	bpl.n	800650c <ip4_input+0x74>
 8006504:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d158      	bne.n	80065be <ip4_input+0x126>
      netif = NULL;
 800650c:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800650e:	4641      	mov	r1, r8
 8006510:	6920      	ldr	r0, [r4, #16]
 8006512:	f000 f90c 	bl	800672e <ip4_addr_isbroadcast_u32>
 8006516:	2800      	cmp	r0, #0
 8006518:	d1c9      	bne.n	80064ae <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800651a:	6923      	ldr	r3, [r4, #16]
 800651c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8006520:	2be0      	cmp	r3, #224	; 0xe0
 8006522:	d0c4      	beq.n	80064ae <ip4_input+0x16>
  if (netif == NULL) {
 8006524:	2e00      	cmp	r6, #0
 8006526:	d0c2      	beq.n	80064ae <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8006528:	88fb      	ldrh	r3, [r7, #6]
 800652a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800652e:	b133      	cbz	r3, 800653e <ip4_input+0xa6>
    p = ip4_reass(p);
 8006530:	4628      	mov	r0, r5
 8006532:	f000 fa2b 	bl	800698c <ip4_reass>
    if (p == NULL) {
 8006536:	4605      	mov	r5, r0
 8006538:	2800      	cmp	r0, #0
 800653a:	d0bb      	beq.n	80064b4 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 800653c:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 800653e:	60a7      	str	r7, [r4, #8]
  ip_data.current_input_netif = inp;
 8006540:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8006544:	783b      	ldrb	r3, [r7, #0]
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	009b      	lsls	r3, r3, #2
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800654c:	f1c9 0100 	rsb	r1, r9, #0
 8006550:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8006552:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8006554:	f001 f83a 	bl	80075cc <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8006558:	7a7b      	ldrb	r3, [r7, #9]
 800655a:	2b06      	cmp	r3, #6
 800655c:	d03d      	beq.n	80065da <ip4_input+0x142>
 800655e:	2b11      	cmp	r3, #17
 8006560:	d02f      	beq.n	80065c2 <ip4_input+0x12a>
 8006562:	2b01      	cmp	r3, #1
 8006564:	d13e      	bne.n	80065e4 <ip4_input+0x14c>
      icmp_input(p, inp);
 8006566:	4641      	mov	r1, r8
 8006568:	4628      	mov	r0, r5
 800656a:	f7ff fec7 	bl	80062fc <icmp_input>
      break;
 800656e:	e02c      	b.n	80065ca <ip4_input+0x132>
        netif = netif_list;
 8006570:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8006618 <ip4_input+0x180>
 8006574:	4646      	mov	r6, r8
 8006576:	f04f 0a01 	mov.w	sl, #1
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800657a:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 800657e:	07db      	lsls	r3, r3, #31
 8006580:	d404      	bmi.n	800658c <ip4_input+0xf4>
      if (first) {
 8006582:	f1ba 0f00 	cmp.w	sl, #0
 8006586:	d10d      	bne.n	80065a4 <ip4_input+0x10c>
        netif = netif->next;
 8006588:	6836      	ldr	r6, [r6, #0]
 800658a:	e010      	b.n	80065ae <ip4_input+0x116>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800658c:	6873      	ldr	r3, [r6, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0f7      	beq.n	8006582 <ip4_input+0xea>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006592:	6960      	ldr	r0, [r4, #20]
 8006594:	4283      	cmp	r3, r0
 8006596:	d0ba      	beq.n	800650e <ip4_input+0x76>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8006598:	4631      	mov	r1, r6
 800659a:	f000 f8c8 	bl	800672e <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800659e:	2800      	cmp	r0, #0
 80065a0:	d0ef      	beq.n	8006582 <ip4_input+0xea>
 80065a2:	e7b4      	b.n	800650e <ip4_input+0x76>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 80065a4:	7d23      	ldrb	r3, [r4, #20]
 80065a6:	2b7f      	cmp	r3, #127	; 0x7f
 80065a8:	d0b0      	beq.n	800650c <ip4_input+0x74>
        netif = netif_list;
 80065aa:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 80065ae:	4546      	cmp	r6, r8
        netif = netif->next;
 80065b0:	bf08      	it	eq
 80065b2:	6836      	ldreq	r6, [r6, #0]
 80065b4:	f04f 0a00 	mov.w	sl, #0
    } while (netif != NULL);
 80065b8:	2e00      	cmp	r6, #0
 80065ba:	d1de      	bne.n	800657a <ip4_input+0xe2>
 80065bc:	e7a6      	b.n	800650c <ip4_input+0x74>
 80065be:	4646      	mov	r6, r8
 80065c0:	e7a5      	b.n	800650e <ip4_input+0x76>
      udp_input(p, inp);
 80065c2:	4641      	mov	r1, r8
 80065c4:	4628      	mov	r0, r5
 80065c6:	f004 fca3 	bl	800af10 <udp_input>
  ip_data.current_netif = NULL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 80065ce:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 80065d0:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 80065d2:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80065d4:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80065d6:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 80065d8:	e76c      	b.n	80064b4 <ip4_input+0x1c>
      tcp_input(p, inp);
 80065da:	4641      	mov	r1, r8
 80065dc:	4628      	mov	r0, r5
 80065de:	f002 ff7b 	bl	80094d8 <tcp_input>
      break;
 80065e2:	e7f2      	b.n	80065ca <ip4_input+0x132>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80065e4:	4631      	mov	r1, r6
 80065e6:	6960      	ldr	r0, [r4, #20]
 80065e8:	f000 f8a1 	bl	800672e <ip4_addr_isbroadcast_u32>
 80065ec:	b968      	cbnz	r0, 800660a <ip4_input+0x172>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80065ee:	6963      	ldr	r3, [r4, #20]
 80065f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80065f4:	2be0      	cmp	r3, #224	; 0xe0
 80065f6:	d008      	beq.n	800660a <ip4_input+0x172>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80065f8:	4649      	mov	r1, r9
 80065fa:	4628      	mov	r0, r5
 80065fc:	f000 ffe9 	bl	80075d2 <pbuf_header_force>
        p->payload = iphdr;
 8006600:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8006602:	2102      	movs	r1, #2
 8006604:	4628      	mov	r0, r5
 8006606:	f7ff ff11 	bl	800642c <icmp_dest_unreach>
      pbuf_free(p);
 800660a:	4628      	mov	r0, r5
 800660c:	f000 ffe4 	bl	80075d8 <pbuf_free>
 8006610:	e7db      	b.n	80065ca <ip4_input+0x132>
 8006612:	bf00      	nop
 8006614:	20001b2c 	.word	0x20001b2c
 8006618:	20005044 	.word	0x20005044

0800661c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800661c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006620:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8006622:	89c3      	ldrh	r3, [r0, #14]
{
 8006624:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8006628:	2b01      	cmp	r3, #1
{
 800662a:	4605      	mov	r5, r0
 800662c:	468a      	mov	sl, r1
 800662e:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8006630:	d006      	beq.n	8006640 <ip4_output_if_src+0x24>
 8006632:	4b30      	ldr	r3, [pc, #192]	; (80066f4 <ip4_output_if_src+0xd8>)
 8006634:	4930      	ldr	r1, [pc, #192]	; (80066f8 <ip4_output_if_src+0xdc>)
 8006636:	4831      	ldr	r0, [pc, #196]	; (80066fc <ip4_output_if_src+0xe0>)
 8006638:	f240 3233 	movw	r2, #819	; 0x333
 800663c:	f007 fb66 	bl	800dd0c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8006640:	2e00      	cmp	r6, #0
 8006642:	d047      	beq.n	80066d4 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8006644:	2114      	movs	r1, #20
 8006646:	4628      	mov	r0, r5
 8006648:	f000 ffc0 	bl	80075cc <pbuf_header>
 800664c:	2800      	cmp	r0, #0
 800664e:	d14e      	bne.n	80066ee <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8006650:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8006652:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8006654:	2b13      	cmp	r3, #19
 8006656:	d806      	bhi.n	8006666 <ip4_output_if_src+0x4a>
 8006658:	4b26      	ldr	r3, [pc, #152]	; (80066f4 <ip4_output_if_src+0xd8>)
 800665a:	4929      	ldr	r1, [pc, #164]	; (8006700 <ip4_output_if_src+0xe4>)
 800665c:	4827      	ldr	r0, [pc, #156]	; (80066fc <ip4_output_if_src+0xe0>)
 800665e:	f240 3261 	movw	r2, #865	; 0x361
 8006662:	f007 fb53 	bl	800dd0c <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 8006666:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 800666a:	7227      	strb	r7, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 800666c:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800666e:	6833      	ldr	r3, [r6, #0]
 8006670:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8006672:	2345      	movs	r3, #69	; 0x45
 8006674:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8006676:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800667a:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800667c:	8928      	ldrh	r0, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800667e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8006708 <ip4_output_if_src+0xec>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8006682:	f7ff f9e9 	bl	8005a58 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8006686:	2700      	movs	r7, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8006688:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 800668a:	71a7      	strb	r7, [r4, #6]
 800668c:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800668e:	f8b9 0000 	ldrh.w	r0, [r9]
 8006692:	f7ff f9e1 	bl	8005a58 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8006696:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800669a:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 800669c:	3301      	adds	r3, #1
 800669e:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 80066a2:	f1ba 0f00 	cmp.w	sl, #0
 80066a6:	d112      	bne.n	80066ce <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80066a8:	4b16      	ldr	r3, [pc, #88]	; (8006704 <ip4_output_if_src+0xe8>)
 80066aa:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80066ac:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80066ae:	72a7      	strb	r7, [r4, #10]
 80066b0:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80066b2:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 80066b6:	b19b      	cbz	r3, 80066e0 <ip4_output_if_src+0xc4>
 80066b8:	892a      	ldrh	r2, [r5, #8]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d910      	bls.n	80066e0 <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 80066be:	4632      	mov	r2, r6
 80066c0:	4641      	mov	r1, r8
 80066c2:	4628      	mov	r0, r5
 80066c4:	f000 fb0c 	bl	8006ce0 <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 80066c8:	b002      	add	sp, #8
 80066ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 80066ce:	f8da 3000 	ldr.w	r3, [sl]
 80066d2:	e7eb      	b.n	80066ac <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80066d4:	686b      	ldr	r3, [r5, #4]
 80066d6:	ae02      	add	r6, sp, #8
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f846 3d04 	str.w	r3, [r6, #-4]!
 80066de:	e7e8      	b.n	80066b2 <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 80066e0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80066e4:	4632      	mov	r2, r6
 80066e6:	4629      	mov	r1, r5
 80066e8:	4640      	mov	r0, r8
 80066ea:	4798      	blx	r3
 80066ec:	e7ec      	b.n	80066c8 <ip4_output_if_src+0xac>
      return ERR_BUF;
 80066ee:	f06f 0001 	mvn.w	r0, #1
 80066f2:	e7e9      	b.n	80066c8 <ip4_output_if_src+0xac>
 80066f4:	0800f918 	.word	0x0800f918
 80066f8:	0800f94c 	.word	0x0800f94c
 80066fc:	0800f3a7 	.word	0x0800f3a7
 8006700:	0800f958 	.word	0x0800f958
 8006704:	0800f988 	.word	0x0800f988
 8006708:	20000ce2 	.word	0x20000ce2

0800670c <ip4_output_if>:
{
 800670c:	b4f0      	push	{r4, r5, r6, r7}
 800670e:	9c06      	ldr	r4, [sp, #24]
 8006710:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8006714:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8006718:	b11a      	cbz	r2, 8006722 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800671a:	b109      	cbz	r1, 8006720 <ip4_output_if+0x14>
 800671c:	680f      	ldr	r7, [r1, #0]
 800671e:	b907      	cbnz	r7, 8006722 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8006720:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8006722:	9406      	str	r4, [sp, #24]
 8006724:	9605      	str	r6, [sp, #20]
 8006726:	9504      	str	r5, [sp, #16]
}
 8006728:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800672a:	f7ff bf77 	b.w	800661c <ip4_output_if_src>

0800672e <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800672e:	1e43      	subs	r3, r0, #1
 8006730:	3303      	adds	r3, #3
 8006732:	d811      	bhi.n	8006758 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8006734:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8006738:	f013 0302 	ands.w	r3, r3, #2
 800673c:	d00e      	beq.n	800675c <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800673e:	684a      	ldr	r2, [r1, #4]
 8006740:	4290      	cmp	r0, r2
 8006742:	d00b      	beq.n	800675c <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8006744:	688b      	ldr	r3, [r1, #8]
 8006746:	4042      	eors	r2, r0
 8006748:	421a      	tst	r2, r3
 800674a:	d107      	bne.n	800675c <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800674c:	43db      	mvns	r3, r3
 800674e:	4383      	bics	r3, r0
    return 1;
 8006750:	bf0c      	ite	eq
 8006752:	2001      	moveq	r0, #1
 8006754:	2000      	movne	r0, #0
 8006756:	4770      	bx	lr
 8006758:	2001      	movs	r0, #1
 800675a:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800675c:	2000      	movs	r0, #0
  }
}
 800675e:	4770      	bx	lr

08006760 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8006760:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8006762:	4b0c      	ldr	r3, [pc, #48]	; (8006794 <ip_reass_dequeue_datagram+0x34>)
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	4282      	cmp	r2, r0
{
 8006768:	4604      	mov	r4, r0
 800676a:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 800676c:	d107      	bne.n	800677e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800676e:	6802      	ldr	r2, [r0, #0]
 8006770:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8006772:	4621      	mov	r1, r4
 8006774:	2004      	movs	r0, #4
}
 8006776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 800677a:	f000 bdc9 	b.w	8007310 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800677e:	b931      	cbnz	r1, 800678e <ip_reass_dequeue_datagram+0x2e>
 8006780:	4b05      	ldr	r3, [pc, #20]	; (8006798 <ip_reass_dequeue_datagram+0x38>)
 8006782:	4906      	ldr	r1, [pc, #24]	; (800679c <ip_reass_dequeue_datagram+0x3c>)
 8006784:	4806      	ldr	r0, [pc, #24]	; (80067a0 <ip_reass_dequeue_datagram+0x40>)
 8006786:	f240 1245 	movw	r2, #325	; 0x145
 800678a:	f007 fabf 	bl	800dd0c <iprintf>
    prev->next = ipr->next;
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	602b      	str	r3, [r5, #0]
 8006792:	e7ee      	b.n	8006772 <ip_reass_dequeue_datagram+0x12>
 8006794:	20000ce8 	.word	0x20000ce8
 8006798:	0800fa71 	.word	0x0800fa71
 800679c:	0800faaa 	.word	0x0800faaa
 80067a0:	0800f3a7 	.word	0x0800f3a7

080067a4 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80067a4:	4281      	cmp	r1, r0
{
 80067a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067aa:	4605      	mov	r5, r0
 80067ac:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80067ae:	d105      	bne.n	80067bc <ip_reass_free_complete_datagram+0x18>
 80067b0:	4b2f      	ldr	r3, [pc, #188]	; (8006870 <ip_reass_free_complete_datagram+0xcc>)
 80067b2:	4930      	ldr	r1, [pc, #192]	; (8006874 <ip_reass_free_complete_datagram+0xd0>)
 80067b4:	4830      	ldr	r0, [pc, #192]	; (8006878 <ip_reass_free_complete_datagram+0xd4>)
 80067b6:	22ab      	movs	r2, #171	; 0xab
 80067b8:	f007 faa8 	bl	800dd0c <iprintf>
  if (prev != NULL) {
 80067bc:	b147      	cbz	r7, 80067d0 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	429d      	cmp	r5, r3
 80067c2:	d005      	beq.n	80067d0 <ip_reass_free_complete_datagram+0x2c>
 80067c4:	4b2a      	ldr	r3, [pc, #168]	; (8006870 <ip_reass_free_complete_datagram+0xcc>)
 80067c6:	492d      	ldr	r1, [pc, #180]	; (800687c <ip_reass_free_complete_datagram+0xd8>)
 80067c8:	482b      	ldr	r0, [pc, #172]	; (8006878 <ip_reass_free_complete_datagram+0xd4>)
 80067ca:	22ad      	movs	r2, #173	; 0xad
 80067cc:	f007 fa9e 	bl	800dd0c <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80067d0:	686e      	ldr	r6, [r5, #4]
 80067d2:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 80067d4:	889a      	ldrh	r2, [r3, #4]
 80067d6:	bb92      	cbnz	r2, 800683e <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80067dc:	f105 011c 	add.w	r1, r5, #28
 80067e0:	f105 0208 	add.w	r2, r5, #8
 80067e4:	f852 0b04 	ldr.w	r0, [r2], #4
 80067e8:	f843 0b04 	str.w	r0, [r3], #4
 80067ec:	428a      	cmp	r2, r1
 80067ee:	d1f9      	bne.n	80067e4 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80067f0:	2101      	movs	r1, #1
 80067f2:	4630      	mov	r0, r6
 80067f4:	f7ff fe1f 	bl	8006436 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80067f8:	4630      	mov	r0, r6
 80067fa:	f001 f89f 	bl	800793c <pbuf_clen>
 80067fe:	4604      	mov	r4, r0
    pbuf_free(p);
 8006800:	4630      	mov	r0, r6
 8006802:	f000 fee9 	bl	80075d8 <pbuf_free>
  p = ipr->p;
 8006806:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8006808:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8006870 <ip_reass_free_complete_datagram+0xcc>
 800680c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8006888 <ip_reass_free_complete_datagram+0xe4>
 8006810:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006878 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8006814:	b9ae      	cbnz	r6, 8006842 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8006816:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8006818:	4d19      	ldr	r5, [pc, #100]	; (8006880 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 800681a:	4639      	mov	r1, r7
 800681c:	f7ff ffa0 	bl	8006760 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8006820:	882b      	ldrh	r3, [r5, #0]
 8006822:	42a3      	cmp	r3, r4
 8006824:	d205      	bcs.n	8006832 <ip_reass_free_complete_datagram+0x8e>
 8006826:	4b12      	ldr	r3, [pc, #72]	; (8006870 <ip_reass_free_complete_datagram+0xcc>)
 8006828:	4916      	ldr	r1, [pc, #88]	; (8006884 <ip_reass_free_complete_datagram+0xe0>)
 800682a:	4813      	ldr	r0, [pc, #76]	; (8006878 <ip_reass_free_complete_datagram+0xd4>)
 800682c:	22d2      	movs	r2, #210	; 0xd2
 800682e:	f007 fa6d 	bl	800dd0c <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8006832:	882b      	ldrh	r3, [r5, #0]
 8006834:	1b1b      	subs	r3, r3, r4
 8006836:	802b      	strh	r3, [r5, #0]
}
 8006838:	4620      	mov	r0, r4
 800683a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800683e:	2400      	movs	r4, #0
 8006840:	e7e1      	b.n	8006806 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8006842:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8006844:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8006846:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 800684a:	f001 f877 	bl	800793c <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800684e:	4404      	add	r4, r0
 8006850:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8006854:	db05      	blt.n	8006862 <ip_reass_free_complete_datagram+0xbe>
 8006856:	4643      	mov	r3, r8
 8006858:	22cc      	movs	r2, #204	; 0xcc
 800685a:	4649      	mov	r1, r9
 800685c:	4650      	mov	r0, sl
 800685e:	f007 fa55 	bl	800dd0c <iprintf>
    pbuf_free(pcur);
 8006862:	4630      	mov	r0, r6
    pbufs_freed += clen;
 8006864:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 8006866:	f000 feb7 	bl	80075d8 <pbuf_free>
    p = iprh->next_pbuf;
 800686a:	465e      	mov	r6, fp
 800686c:	e7d2      	b.n	8006814 <ip_reass_free_complete_datagram+0x70>
 800686e:	bf00      	nop
 8006870:	0800fa71 	.word	0x0800fa71
 8006874:	0800fac3 	.word	0x0800fac3
 8006878:	0800f3a7 	.word	0x0800f3a7
 800687c:	0800facf 	.word	0x0800facf
 8006880:	20000ce4 	.word	0x20000ce4
 8006884:	0800fafe 	.word	0x0800fafe
 8006888:	0800fae1 	.word	0x0800fae1

0800688c <ip_reass_remove_oldest_datagram>:
{
 800688c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 8006890:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8006900 <ip_reass_remove_oldest_datagram+0x74>
{
 8006894:	4606      	mov	r6, r0
 8006896:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8006898:	2500      	movs	r5, #0
    other_datagrams = 0;
 800689a:	2400      	movs	r4, #0
    r = reassdatagrams;
 800689c:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 80068a0:	4621      	mov	r1, r4
    prev = NULL;
 80068a2:	46a6      	mov	lr, r4
    oldest = NULL;
 80068a4:	4620      	mov	r0, r4
    while (r != NULL) {
 80068a6:	b953      	cbnz	r3, 80068be <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 80068a8:	b110      	cbz	r0, 80068b0 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80068aa:	f7ff ff7b 	bl	80067a4 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80068ae:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80068b0:	42bd      	cmp	r5, r7
 80068b2:	da01      	bge.n	80068b8 <ip_reass_remove_oldest_datagram+0x2c>
 80068b4:	2c01      	cmp	r4, #1
 80068b6:	dcf0      	bgt.n	800689a <ip_reass_remove_oldest_datagram+0xe>
}
 80068b8:	4628      	mov	r0, r5
 80068ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80068be:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80068c2:	695a      	ldr	r2, [r3, #20]
 80068c4:	4562      	cmp	r2, ip
 80068c6:	d109      	bne.n	80068dc <ip_reass_remove_oldest_datagram+0x50>
 80068c8:	f8d6 c010 	ldr.w	ip, [r6, #16]
 80068cc:	699a      	ldr	r2, [r3, #24]
 80068ce:	4562      	cmp	r2, ip
 80068d0:	d104      	bne.n	80068dc <ip_reass_remove_oldest_datagram+0x50>
 80068d2:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 80068d6:	88b2      	ldrh	r2, [r6, #4]
 80068d8:	4594      	cmp	ip, r2
 80068da:	d008      	beq.n	80068ee <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 80068dc:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80068de:	b160      	cbz	r0, 80068fa <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 80068e0:	7fc2      	ldrb	r2, [r0, #31]
 80068e2:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 80068e6:	4594      	cmp	ip, r2
 80068e8:	bf9c      	itt	ls
 80068ea:	4671      	movls	r1, lr
 80068ec:	4618      	movls	r0, r3
      if (r->next != NULL) {
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	2a00      	cmp	r2, #0
 80068f2:	bf18      	it	ne
 80068f4:	469e      	movne	lr, r3
 80068f6:	4613      	mov	r3, r2
 80068f8:	e7d5      	b.n	80068a6 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 80068fa:	4671      	mov	r1, lr
 80068fc:	4618      	mov	r0, r3
 80068fe:	e7f6      	b.n	80068ee <ip_reass_remove_oldest_datagram+0x62>
 8006900:	20000ce8 	.word	0x20000ce8

08006904 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8006904:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8006906:	4604      	mov	r4, r0
 8006908:	b930      	cbnz	r0, 8006918 <ip_frag_free_pbuf_custom_ref+0x14>
 800690a:	4b06      	ldr	r3, [pc, #24]	; (8006924 <ip_frag_free_pbuf_custom_ref+0x20>)
 800690c:	4906      	ldr	r1, [pc, #24]	; (8006928 <ip_frag_free_pbuf_custom_ref+0x24>)
 800690e:	4807      	ldr	r0, [pc, #28]	; (800692c <ip_frag_free_pbuf_custom_ref+0x28>)
 8006910:	f240 22ae 	movw	r2, #686	; 0x2ae
 8006914:	f007 f9fa 	bl	800dd0c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8006918:	4621      	mov	r1, r4
 800691a:	2005      	movs	r0, #5
}
 800691c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8006920:	f000 bcf6 	b.w	8007310 <memp_free>
 8006924:	0800fa71 	.word	0x0800fa71
 8006928:	0801013b 	.word	0x0801013b
 800692c:	0800f3a7 	.word	0x0800f3a7

08006930 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8006930:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8006932:	4604      	mov	r4, r0
 8006934:	b930      	cbnz	r0, 8006944 <ipfrag_free_pbuf_custom+0x14>
 8006936:	4b08      	ldr	r3, [pc, #32]	; (8006958 <ipfrag_free_pbuf_custom+0x28>)
 8006938:	4908      	ldr	r1, [pc, #32]	; (800695c <ipfrag_free_pbuf_custom+0x2c>)
 800693a:	4809      	ldr	r0, [pc, #36]	; (8006960 <ipfrag_free_pbuf_custom+0x30>)
 800693c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8006940:	f007 f9e4 	bl	800dd0c <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8006944:	6960      	ldr	r0, [r4, #20]
 8006946:	b108      	cbz	r0, 800694c <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8006948:	f000 fe46 	bl	80075d8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800694c:	4620      	mov	r0, r4
}
 800694e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8006952:	f7ff bfd7 	b.w	8006904 <ip_frag_free_pbuf_custom_ref>
 8006956:	bf00      	nop
 8006958:	0800fa71 	.word	0x0800fa71
 800695c:	0800fb19 	.word	0x0800fb19
 8006960:	0800f3a7 	.word	0x0800f3a7

08006964 <ip_reass_tmr>:
{
 8006964:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8006966:	4b08      	ldr	r3, [pc, #32]	; (8006988 <ip_reass_tmr+0x24>)
 8006968:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 800696a:	2400      	movs	r4, #0
  while (r != NULL) {
 800696c:	b900      	cbnz	r0, 8006970 <ip_reass_tmr+0xc>
}
 800696e:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8006970:	7fc3      	ldrb	r3, [r0, #31]
 8006972:	6805      	ldr	r5, [r0, #0]
 8006974:	b123      	cbz	r3, 8006980 <ip_reass_tmr+0x1c>
      r->timer--;
 8006976:	3b01      	subs	r3, #1
 8006978:	77c3      	strb	r3, [r0, #31]
 800697a:	4604      	mov	r4, r0
      r = r->next;
 800697c:	4628      	mov	r0, r5
 800697e:	e7f5      	b.n	800696c <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 8006980:	4621      	mov	r1, r4
 8006982:	f7ff ff0f 	bl	80067a4 <ip_reass_free_complete_datagram>
 8006986:	e7f9      	b.n	800697c <ip_reass_tmr+0x18>
 8006988:	20000ce8 	.word	0x20000ce8

0800698c <ip4_reass>:
{
 800698c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 8006990:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8006992:	782b      	ldrb	r3, [r5, #0]
 8006994:	f003 030f 	and.w	r3, r3, #15
 8006998:	2b05      	cmp	r3, #5
{
 800699a:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800699c:	f040 808c 	bne.w	8006ab8 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80069a0:	88e8      	ldrh	r0, [r5, #6]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80069a2:	4cb4      	ldr	r4, [pc, #720]	; (8006c74 <ip4_reass+0x2e8>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80069a4:	f7ff f858 	bl	8005a58 <lwip_htons>
 80069a8:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80069ac:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80069b0:	8868      	ldrh	r0, [r5, #2]
 80069b2:	f7ff f851 	bl	8005a58 <lwip_htons>
 80069b6:	782b      	ldrb	r3, [r5, #0]
 80069b8:	f003 030f 	and.w	r3, r3, #15
 80069bc:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 80069c0:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 80069c2:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80069c4:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 80069c6:	f000 ffb9 	bl	800793c <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80069ca:	8823      	ldrh	r3, [r4, #0]
 80069cc:	4403      	add	r3, r0
 80069ce:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 80069d0:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80069d2:	dc68      	bgt.n	8006aa6 <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80069d4:	4ea8      	ldr	r6, [pc, #672]	; (8006c78 <ip4_reass+0x2ec>)
 80069d6:	6834      	ldr	r4, [r6, #0]
 80069d8:	2c00      	cmp	r4, #0
 80069da:	d172      	bne.n	8006ac2 <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80069dc:	2004      	movs	r0, #4
 80069de:	f000 fc7b 	bl	80072d8 <memp_malloc>
  if (ipr == NULL) {
 80069e2:	4604      	mov	r4, r0
 80069e4:	b958      	cbnz	r0, 80069fe <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80069e6:	4651      	mov	r1, sl
 80069e8:	4628      	mov	r0, r5
 80069ea:	f7ff ff4f 	bl	800688c <ip_reass_remove_oldest_datagram>
 80069ee:	4582      	cmp	sl, r0
 80069f0:	dc62      	bgt.n	8006ab8 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80069f2:	2004      	movs	r0, #4
 80069f4:	f000 fc70 	bl	80072d8 <memp_malloc>
    if (ipr == NULL)
 80069f8:	4604      	mov	r4, r0
 80069fa:	2800      	cmp	r0, #0
 80069fc:	d05c      	beq.n	8006ab8 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80069fe:	2220      	movs	r2, #32
 8006a00:	2100      	movs	r1, #0
 8006a02:	4620      	mov	r0, r4
 8006a04:	f007 f8ce 	bl	800dba4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8006a0c:	6833      	ldr	r3, [r6, #0]
 8006a0e:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 8006a10:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8006a12:	462b      	mov	r3, r5
 8006a14:	f104 0208 	add.w	r2, r4, #8
 8006a18:	f105 0114 	add.w	r1, r5, #20
 8006a1c:	f853 0b04 	ldr.w	r0, [r3], #4
 8006a20:	f842 0b04 	str.w	r0, [r2], #4
 8006a24:	428b      	cmp	r3, r1
 8006a26:	d1f9      	bne.n	8006a1c <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8006a28:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 8006a2c:	f01b 0b20 	ands.w	fp, fp, #32
 8006a30:	d108      	bne.n	8006a44 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 8006a32:	9b01      	ldr	r3, [sp, #4]
 8006a34:	444b      	add	r3, r9
 8006a36:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8006a38:	4599      	cmp	r9, r3
 8006a3a:	d83d      	bhi.n	8006ab8 <ip4_reass+0x12c>
 8006a3c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d839      	bhi.n	8006ab8 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 8006a44:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8006a46:	8868      	ldrh	r0, [r5, #2]
 8006a48:	f7ff f806 	bl	8005a58 <lwip_htons>
 8006a4c:	f895 8000 	ldrb.w	r8, [r5]
 8006a50:	f008 080f 	and.w	r8, r8, #15
 8006a54:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8006a58:	88e8      	ldrh	r0, [r5, #6]
 8006a5a:	f7fe fffd 	bl	8005a58 <lwip_htons>
 8006a5e:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8006a62:	fa1f f888 	uxth.w	r8, r8
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8006a66:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 8006a68:	687e      	ldr	r6, [r7, #4]
  for (q = ipr->p; q != NULL;) {
 8006a6a:	f8d4 e004 	ldr.w	lr, [r4, #4]
  iprh->start = offset;
 8006a6e:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 8006a70:	eb08 0300 	add.w	r3, r8, r0
  iprh->next_pbuf = NULL;
 8006a74:	2500      	movs	r5, #0
  iprh->end = offset + len;
 8006a76:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 8006a78:	7035      	strb	r5, [r6, #0]
 8006a7a:	7075      	strb	r5, [r6, #1]
 8006a7c:	70b5      	strb	r5, [r6, #2]
 8006a7e:	70f5      	strb	r5, [r6, #3]
  iprh->end = offset + len;
 8006a80:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 8006a82:	4672      	mov	r2, lr
  int valid = 1;
 8006a84:	f04f 0801 	mov.w	r8, #1
  for (q = ipr->p; q != NULL;) {
 8006a88:	bb52      	cbnz	r2, 8006ae0 <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 8006a8a:	2d00      	cmp	r5, #0
 8006a8c:	f040 8092 	bne.w	8006bb4 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8006a90:	f1be 0f00 	cmp.w	lr, #0
 8006a94:	d07d      	beq.n	8006b92 <ip4_reass+0x206>
 8006a96:	4b79      	ldr	r3, [pc, #484]	; (8006c7c <ip4_reass+0x2f0>)
 8006a98:	4979      	ldr	r1, [pc, #484]	; (8006c80 <ip4_reass+0x2f4>)
 8006a9a:	487a      	ldr	r0, [pc, #488]	; (8006c84 <ip4_reass+0x2f8>)
 8006a9c:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8006aa0:	f007 f934 	bl	800dd0c <iprintf>
 8006aa4:	e075      	b.n	8006b92 <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f7ff feef 	bl	800688c <ip_reass_remove_oldest_datagram>
 8006aae:	b118      	cbz	r0, 8006ab8 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8006ab0:	8823      	ldrh	r3, [r4, #0]
 8006ab2:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006ab4:	2b0a      	cmp	r3, #10
 8006ab6:	dd8d      	ble.n	80069d4 <ip4_reass+0x48>
  pbuf_free(p);
 8006ab8:	4638      	mov	r0, r7
 8006aba:	f000 fd8d 	bl	80075d8 <pbuf_free>
  return NULL;
 8006abe:	2500      	movs	r5, #0
 8006ac0:	e0d4      	b.n	8006c6c <ip4_reass+0x2e0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8006ac2:	68eb      	ldr	r3, [r5, #12]
 8006ac4:	6962      	ldr	r2, [r4, #20]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d108      	bne.n	8006adc <ip4_reass+0x150>
 8006aca:	692b      	ldr	r3, [r5, #16]
 8006acc:	69a2      	ldr	r2, [r4, #24]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d104      	bne.n	8006adc <ip4_reass+0x150>
 8006ad2:	89a2      	ldrh	r2, [r4, #12]
 8006ad4:	88ab      	ldrh	r3, [r5, #4]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	f000 80dc 	beq.w	8006c94 <ip4_reass+0x308>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006adc:	6824      	ldr	r4, [r4, #0]
 8006ade:	e77b      	b.n	80069d8 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8006ae0:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8006ae4:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8006ae8:	4288      	cmp	r0, r1
 8006aea:	d254      	bcs.n	8006b96 <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 8006aec:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 8006aee:	2d00      	cmp	r5, #0
 8006af0:	d04d      	beq.n	8006b8e <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8006af2:	88ea      	ldrh	r2, [r5, #6]
 8006af4:	4290      	cmp	r0, r2
 8006af6:	f0c0 8091 	bcc.w	8006c1c <ip4_reass+0x290>
 8006afa:	428b      	cmp	r3, r1
 8006afc:	f200 808e 	bhi.w	8006c1c <ip4_reass+0x290>
        iprh_prev->next_pbuf = new_p;
 8006b00:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 8006b02:	4290      	cmp	r0, r2
      if (iprh_prev->end != iprh->start) {
 8006b04:	f040 80e4 	bne.w	8006cd0 <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8006b08:	f1bb 0f00 	cmp.w	fp, #0
 8006b0c:	d004      	beq.n	8006b18 <ip4_reass+0x18c>
 8006b0e:	7fa3      	ldrb	r3, [r4, #30]
 8006b10:	f013 0301 	ands.w	r3, r3, #1
 8006b14:	f000 80da 	beq.w	8006ccc <ip4_reass+0x340>
    if (valid) {
 8006b18:	f1b8 0f00 	cmp.w	r8, #0
 8006b1c:	d159      	bne.n	8006bd2 <ip4_reass+0x246>
          q = iprh->next_pbuf;
 8006b1e:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8006b22:	4e54      	ldr	r6, [pc, #336]	; (8006c74 <ip4_reass+0x2e8>)
 8006b24:	8833      	ldrh	r3, [r6, #0]
 8006b26:	449a      	add	sl, r3
 8006b28:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 8006b2c:	f1bb 0f00 	cmp.w	fp, #0
 8006b30:	d107      	bne.n	8006b42 <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 8006b32:	9b01      	ldr	r3, [sp, #4]
 8006b34:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006b36:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8006b38:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006b3c:	f043 0301 	orr.w	r3, r3, #1
 8006b40:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8006b42:	f1b8 0f01 	cmp.w	r8, #1
 8006b46:	d1ba      	bne.n	8006abe <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 8006b48:	8ba3      	ldrh	r3, [r4, #28]
 8006b4a:	3314      	adds	r3, #20
 8006b4c:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8006b4e:	6863      	ldr	r3, [r4, #4]
 8006b50:	685d      	ldr	r5, [r3, #4]
 8006b52:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006b54:	f104 0308 	add.w	r3, r4, #8
 8006b58:	462a      	mov	r2, r5
 8006b5a:	f104 011c 	add.w	r1, r4, #28
 8006b5e:	f853 0b04 	ldr.w	r0, [r3], #4
 8006b62:	f842 0b04 	str.w	r0, [r2], #4
 8006b66:	428b      	cmp	r3, r1
 8006b68:	d1f9      	bne.n	8006b5e <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8006b6a:	8ba0      	ldrh	r0, [r4, #28]
 8006b6c:	f7fe ff74 	bl	8005a58 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8006b70:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8006b72:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8006b74:	71ab      	strb	r3, [r5, #6]
 8006b76:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8006b78:	72ab      	strb	r3, [r5, #10]
 8006b7a:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 8006b7c:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 8006b7e:	2f00      	cmp	r7, #0
 8006b80:	d157      	bne.n	8006c32 <ip4_reass+0x2a6>
    if (ipr == reassdatagrams) {
 8006b82:	4b3d      	ldr	r3, [pc, #244]	; (8006c78 <ip4_reass+0x2ec>)
 8006b84:	6819      	ldr	r1, [r3, #0]
 8006b86:	428c      	cmp	r4, r1
 8006b88:	d165      	bne.n	8006c56 <ip4_reass+0x2ca>
      ipr_prev = NULL;
 8006b8a:	4639      	mov	r1, r7
 8006b8c:	e065      	b.n	8006c5a <ip4_reass+0x2ce>
        if (iprh->end > iprh_tmp->start) {
 8006b8e:	428b      	cmp	r3, r1
 8006b90:	d844      	bhi.n	8006c1c <ip4_reass+0x290>
      ipr->p = new_p;
 8006b92:	6067      	str	r7, [r4, #4]
 8006b94:	e7b8      	b.n	8006b08 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 8006b96:	d041      	beq.n	8006c1c <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 8006b98:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8006b9c:	4282      	cmp	r2, r0
 8006b9e:	d83d      	bhi.n	8006c1c <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 8006ba0:	b125      	cbz	r5, 8006bac <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 8006ba2:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 8006ba4:	428a      	cmp	r2, r1
 8006ba6:	bf18      	it	ne
 8006ba8:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 8006bac:	f8dc 2000 	ldr.w	r2, [ip]
 8006bb0:	4665      	mov	r5, ip
 8006bb2:	e769      	b.n	8006a88 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8006bb4:	88eb      	ldrh	r3, [r5, #6]
 8006bb6:	4283      	cmp	r3, r0
 8006bb8:	d906      	bls.n	8006bc8 <ip4_reass+0x23c>
 8006bba:	4b30      	ldr	r3, [pc, #192]	; (8006c7c <ip4_reass+0x2f0>)
 8006bbc:	4932      	ldr	r1, [pc, #200]	; (8006c88 <ip4_reass+0x2fc>)
 8006bbe:	4831      	ldr	r0, [pc, #196]	; (8006c84 <ip4_reass+0x2f8>)
 8006bc0:	f240 12ab 	movw	r2, #427	; 0x1ab
 8006bc4:	f007 f8a2 	bl	800dd0c <iprintf>
      iprh_prev->next_pbuf = new_p;
 8006bc8:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8006bca:	88ea      	ldrh	r2, [r5, #6]
 8006bcc:	88b3      	ldrh	r3, [r6, #4]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	e798      	b.n	8006b04 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8006bd2:	6863      	ldr	r3, [r4, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d0a2      	beq.n	8006b1e <ip4_reass+0x192>
 8006bd8:	6859      	ldr	r1, [r3, #4]
 8006bda:	888b      	ldrh	r3, [r1, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d19e      	bne.n	8006b1e <ip4_reass+0x192>
        q = iprh->next_pbuf;
 8006be0:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8006be2:	b99b      	cbnz	r3, 8006c0c <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 8006be4:	42b1      	cmp	r1, r6
 8006be6:	d106      	bne.n	8006bf6 <ip4_reass+0x26a>
 8006be8:	4b24      	ldr	r3, [pc, #144]	; (8006c7c <ip4_reass+0x2f0>)
 8006bea:	4928      	ldr	r1, [pc, #160]	; (8006c8c <ip4_reass+0x300>)
 8006bec:	4825      	ldr	r0, [pc, #148]	; (8006c84 <ip4_reass+0x2f8>)
 8006bee:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8006bf2:	f007 f88b 	bl	800dd0c <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8006bf6:	6833      	ldr	r3, [r6, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d092      	beq.n	8006b22 <ip4_reass+0x196>
 8006bfc:	4b1f      	ldr	r3, [pc, #124]	; (8006c7c <ip4_reass+0x2f0>)
 8006bfe:	4924      	ldr	r1, [pc, #144]	; (8006c90 <ip4_reass+0x304>)
 8006c00:	4820      	ldr	r0, [pc, #128]	; (8006c84 <ip4_reass+0x2f8>)
 8006c02:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8006c06:	f007 f881 	bl	800dd0c <iprintf>
 8006c0a:	e78a      	b.n	8006b22 <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 8006c0c:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8006c0e:	88f0      	ldrh	r0, [r6, #6]
 8006c10:	8893      	ldrh	r3, [r2, #4]
 8006c12:	4298      	cmp	r0, r3
 8006c14:	d183      	bne.n	8006b1e <ip4_reass+0x192>
          q = iprh->next_pbuf;
 8006c16:	6813      	ldr	r3, [r2, #0]
 8006c18:	4616      	mov	r6, r2
 8006c1a:	e7e2      	b.n	8006be2 <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8006c1c:	4638      	mov	r0, r7
 8006c1e:	f000 fe8d 	bl	800793c <pbuf_clen>
 8006c22:	4a14      	ldr	r2, [pc, #80]	; (8006c74 <ip4_reass+0x2e8>)
 8006c24:	8813      	ldrh	r3, [r2, #0]
 8006c26:	1a18      	subs	r0, r3, r0
 8006c28:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 8006c2a:	4638      	mov	r0, r7
 8006c2c:	f000 fcd4 	bl	80075d8 <pbuf_free>
 8006c30:	e742      	b.n	8006ab8 <ip4_reass+0x12c>
      iprh = (struct ip_reass_helper*)r->payload;
 8006c32:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 8006c36:	f06f 0113 	mvn.w	r1, #19
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	f000 fcc6 	bl	80075cc <pbuf_header>
      pbuf_cat(p, r);
 8006c40:	4639      	mov	r1, r7
 8006c42:	4628      	mov	r0, r5
 8006c44:	f000 fe96 	bl	8007974 <pbuf_cat>
      r = iprh->next_pbuf;
 8006c48:	f8d8 7000 	ldr.w	r7, [r8]
 8006c4c:	e797      	b.n	8006b7e <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 8006c4e:	680b      	ldr	r3, [r1, #0]
 8006c50:	429c      	cmp	r4, r3
 8006c52:	d002      	beq.n	8006c5a <ip4_reass+0x2ce>
 8006c54:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006c56:	2900      	cmp	r1, #0
 8006c58:	d1f9      	bne.n	8006c4e <ip4_reass+0x2c2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f7ff fd80 	bl	8006760 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 8006c60:	4628      	mov	r0, r5
 8006c62:	f000 fe6b 	bl	800793c <pbuf_clen>
 8006c66:	8833      	ldrh	r3, [r6, #0]
 8006c68:	1a18      	subs	r0, r3, r0
 8006c6a:	8030      	strh	r0, [r6, #0]
}
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	b003      	add	sp, #12
 8006c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c74:	20000ce4 	.word	0x20000ce4
 8006c78:	20000ce8 	.word	0x20000ce8
 8006c7c:	0800fa71 	.word	0x0800fa71
 8006c80:	0800fa0b 	.word	0x0800fa0b
 8006c84:	0800f3a7 	.word	0x0800f3a7
 8006c88:	0800f9ed 	.word	0x0800f9ed
 8006c8c:	0800fa42 	.word	0x0800fa42
 8006c90:	0800fa4f 	.word	0x0800fa4f
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006c94:	88e8      	ldrh	r0, [r5, #6]
 8006c96:	f7fe fedf 	bl	8005a58 <lwip_htons>
 8006c9a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	f47f aec2 	bne.w	8006a28 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8006ca4:	89e0      	ldrh	r0, [r4, #14]
 8006ca6:	f7fe fed7 	bl	8005a58 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006caa:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	f43f aeba 	beq.w	8006a28 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8006cb4:	462b      	mov	r3, r5
 8006cb6:	f104 0208 	add.w	r2, r4, #8
 8006cba:	f105 0114 	add.w	r1, r5, #20
 8006cbe:	f853 0b04 	ldr.w	r0, [r3], #4
 8006cc2:	f842 0b04 	str.w	r0, [r2], #4
 8006cc6:	428b      	cmp	r3, r1
 8006cc8:	d1f9      	bne.n	8006cbe <ip4_reass+0x332>
 8006cca:	e6ad      	b.n	8006a28 <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8006ccc:	4698      	mov	r8, r3
 8006cce:	e728      	b.n	8006b22 <ip4_reass+0x196>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8006cd0:	f1bb 0f00 	cmp.w	fp, #0
 8006cd4:	f43f af23 	beq.w	8006b1e <ip4_reass+0x192>
 8006cd8:	f04f 0800 	mov.w	r8, #0
 8006cdc:	e717      	b.n	8006b0e <ip4_reass+0x182>
 8006cde:	bf00      	nop

08006ce0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8006ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8006ce4:	f8b1 8022 	ldrh.w	r8, [r1, #34]	; 0x22
{
 8006ce8:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8006cea:	2308      	movs	r3, #8
 8006cec:	f1a8 0814 	sub.w	r8, r8, #20
 8006cf0:	fb98 f8f3 	sdiv	r8, r8, r3
 8006cf4:	fa1f f388 	uxth.w	r3, r8
 8006cf8:	9306      	str	r3, [sp, #24]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8006cfa:	6843      	ldr	r3, [r0, #4]
{
 8006cfc:	9208      	str	r2, [sp, #32]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8006cfe:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 8006d00:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8006d02:	f006 060f 	and.w	r6, r6, #15
 8006d06:	00b6      	lsls	r6, r6, #2
 8006d08:	2e14      	cmp	r6, #20
{
 8006d0a:	4607      	mov	r7, r0
 8006d0c:	468b      	mov	fp, r1
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8006d0e:	d00b      	beq.n	8006d28 <ip4_frag+0x48>
 8006d10:	4b5a      	ldr	r3, [pc, #360]	; (8006e7c <ip4_frag+0x19c>)
 8006d12:	495b      	ldr	r1, [pc, #364]	; (8006e80 <ip4_frag+0x1a0>)
 8006d14:	f240 22e1 	movw	r2, #737	; 0x2e1

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8006d18:	485a      	ldr	r0, [pc, #360]	; (8006e84 <ip4_frag+0x1a4>)
 8006d1a:	f006 fff7 	bl	800dd0c <iprintf>
 8006d1e:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8006d22:	b00b      	add	sp, #44	; 0x2c
 8006d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8006d28:	9b02      	ldr	r3, [sp, #8]
 8006d2a:	88d8      	ldrh	r0, [r3, #6]
 8006d2c:	f7fe fe94 	bl	8005a58 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8006d30:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8006d34:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 8006d38:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8006d3a:	d004      	beq.n	8006d46 <ip4_frag+0x66>
 8006d3c:	4b4f      	ldr	r3, [pc, #316]	; (8006e7c <ip4_frag+0x19c>)
 8006d3e:	4952      	ldr	r1, [pc, #328]	; (8006e88 <ip4_frag+0x1a8>)
 8006d40:	f240 22e6 	movw	r2, #742	; 0x2e6
 8006d44:	e7e8      	b.n	8006d18 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 8006d46:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 8006d48:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 8006d4c:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 8006d4e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 8006d52:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 8006d54:	9307      	str	r3, [sp, #28]
  while (left) {
 8006d56:	b90d      	cbnz	r5, 8006d5c <ip4_frag+0x7c>
  return ERR_OK;
 8006d58:	4628      	mov	r0, r5
 8006d5a:	e7e2      	b.n	8006d22 <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 8006d5c:	9b07      	ldr	r3, [sp, #28]
 8006d5e:	42ab      	cmp	r3, r5
 8006d60:	bfa8      	it	ge
 8006d62:	462b      	movge	r3, r5
 8006d64:	b29b      	uxth	r3, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8006d66:	2200      	movs	r2, #0
 8006d68:	2114      	movs	r1, #20
 8006d6a:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 8006d6c:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8006d6e:	f000 fc95 	bl	800769c <pbuf_alloc>
    if (rambuf == NULL) {
 8006d72:	4680      	mov	r8, r0
 8006d74:	b370      	cbz	r0, 8006dd4 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8006d76:	897b      	ldrh	r3, [r7, #10]
 8006d78:	2b13      	cmp	r3, #19
 8006d7a:	d806      	bhi.n	8006d8a <ip4_frag+0xaa>
 8006d7c:	4b3f      	ldr	r3, [pc, #252]	; (8006e7c <ip4_frag+0x19c>)
 8006d7e:	4943      	ldr	r1, [pc, #268]	; (8006e8c <ip4_frag+0x1ac>)
 8006d80:	4840      	ldr	r0, [pc, #256]	; (8006e84 <ip4_frag+0x1a4>)
 8006d82:	f240 3209 	movw	r2, #777	; 0x309
 8006d86:	f006 ffc1 	bl	800dd0c <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8006d8a:	9b02      	ldr	r3, [sp, #8]
 8006d8c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006d90:	4619      	mov	r1, r3
 8006d92:	3114      	adds	r1, #20
 8006d94:	f853 0b04 	ldr.w	r0, [r3], #4
 8006d98:	f842 0b04 	str.w	r0, [r2], #4
 8006d9c:	428b      	cmp	r3, r1
 8006d9e:	d1f9      	bne.n	8006d94 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8006da0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8006da4:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8006da8:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 8006daa:	f1b9 0f00 	cmp.w	r9, #0
 8006dae:	d037      	beq.n	8006e20 <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 8006db0:	897c      	ldrh	r4, [r7, #10]
 8006db2:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8006db4:	b2a4      	uxth	r4, r4
 8006db6:	454c      	cmp	r4, r9
 8006db8:	bf28      	it	cs
 8006dba:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 8006dbc:	b914      	cbnz	r4, 8006dc4 <ip4_frag+0xe4>
        p = p->next;
 8006dbe:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 8006dc0:	2600      	movs	r6, #0
 8006dc2:	e7f2      	b.n	8006daa <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8006dc4:	2005      	movs	r0, #5
 8006dc6:	f000 fa87 	bl	80072d8 <memp_malloc>
      if (pcr == NULL) {
 8006dca:	4682      	mov	sl, r0
 8006dcc:	b928      	cbnz	r0, 8006dda <ip4_frag+0xfa>
        pbuf_free(rambuf);
 8006dce:	4640      	mov	r0, r8
 8006dd0:	f000 fc02 	bl	80075d8 <pbuf_free>
  return ERR_MEM;
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	e7a3      	b.n	8006d22 <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8006dda:	9401      	str	r4, [sp, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4433      	add	r3, r6
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	2202      	movs	r2, #2
 8006de4:	4603      	mov	r3, r0
 8006de6:	4621      	mov	r1, r4
 8006de8:	2004      	movs	r0, #4
 8006dea:	f000 fbb7 	bl	800755c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8006dee:	b918      	cbnz	r0, 8006df8 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 8006df0:	4650      	mov	r0, sl
 8006df2:	f7ff fd87 	bl	8006904 <ip_frag_free_pbuf_custom_ref>
 8006df6:	e7ea      	b.n	8006dce <ip4_frag+0xee>
 8006df8:	9009      	str	r0, [sp, #36]	; 0x24
      pbuf_ref(p);
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	f000 fda6 	bl	800794c <pbuf_ref>
      left_to_copy -= newpbuflen;
 8006e00:	eba9 0904 	sub.w	r9, r9, r4
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8006e04:	4b22      	ldr	r3, [pc, #136]	; (8006e90 <ip4_frag+0x1b0>)
      pcr->original = p;
 8006e06:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8006e0a:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 8006e0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e10:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 8006e12:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8006e16:	f000 fdad 	bl	8007974 <pbuf_cat>
      if (left_to_copy) {
 8006e1a:	f1b9 0f00 	cmp.w	r9, #0
 8006e1e:	d1ce      	bne.n	8006dbe <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 8006e20:	9b04      	ldr	r3, [sp, #16]
 8006e22:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8006e26:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
 8006e2a:	3b13      	subs	r3, #19
    if (!last) {
 8006e2c:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 8006e2e:	bfa8      	it	ge
 8006e30:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8006e34:	f7fe fe10 	bl	8005a58 <lwip_htons>
 8006e38:	9b03      	ldr	r3, [sp, #12]
 8006e3a:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8006e3c:	9b05      	ldr	r3, [sp, #20]
 8006e3e:	f103 0014 	add.w	r0, r3, #20
 8006e42:	b280      	uxth	r0, r0
 8006e44:	f7fe fe08 	bl	8005a58 <lwip_htons>
 8006e48:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8006e4a:	9a03      	ldr	r2, [sp, #12]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8006e4c:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8006e4e:	2300      	movs	r3, #0
 8006e50:	7293      	strb	r3, [r2, #10]
 8006e52:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 8006e54:	4641      	mov	r1, r8
 8006e56:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006e5a:	9a08      	ldr	r2, [sp, #32]
 8006e5c:	4658      	mov	r0, fp
 8006e5e:	4798      	blx	r3
    pbuf_free(rambuf);
 8006e60:	4640      	mov	r0, r8
 8006e62:	f000 fbb9 	bl	80075d8 <pbuf_free>
    left -= fragsize;
 8006e66:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 8006e68:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 8006e6a:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 8006e6c:	9b04      	ldr	r3, [sp, #16]
 8006e6e:	4413      	add	r3, r2
    poff += newpbuflen;
 8006e70:	4426      	add	r6, r4
    ofo += nfb;
 8006e72:	b29b      	uxth	r3, r3
    poff += newpbuflen;
 8006e74:	b2b6      	uxth	r6, r6
    left -= fragsize;
 8006e76:	b2ad      	uxth	r5, r5
    ofo += nfb;
 8006e78:	9304      	str	r3, [sp, #16]
 8006e7a:	e76c      	b.n	8006d56 <ip4_frag+0x76>
 8006e7c:	0800fa71 	.word	0x0800fa71
 8006e80:	0800f98c 	.word	0x0800f98c
 8006e84:	0800f3a7 	.word	0x0800f3a7
 8006e88:	0800f9b3 	.word	0x0800f9b3
 8006e8c:	0800f9cd 	.word	0x0800f9cd
 8006e90:	08006931 	.word	0x08006931

08006e94 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006e94:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <mem_init+0x30>)
 8006e96:	4a0c      	ldr	r2, [pc, #48]	; (8006ec8 <mem_init+0x34>)
 8006e98:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 8006e9c:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006e9e:	6013      	str	r3, [r2, #0]
  mem->prev = 0;
 8006ea0:	8059      	strh	r1, [r3, #2]
  mem->next = MEM_SIZE_ALIGNED;
 8006ea2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->used = 0;
 8006ea6:	7119      	strb	r1, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8006ea8:	4908      	ldr	r1, [pc, #32]	; (8006ecc <mem_init+0x38>)
  mem->next = MEM_SIZE_ALIGNED;
 8006eaa:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8006eac:	1898      	adds	r0, r3, r2
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8006eae:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006eb2:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006eb6:	4a06      	ldr	r2, [pc, #24]	; (8006ed0 <mem_init+0x3c>)
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8006eb8:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 8006eba:	2101      	movs	r1, #1
 8006ebc:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644
  lfree = (struct mem *)(void *)ram;
 8006ec0:	6013      	str	r3, [r2, #0]
 8006ec2:	4770      	bx	lr
 8006ec4:	20001b47 	.word	0x20001b47
 8006ec8:	20000cf0 	.word	0x20000cf0
 8006ecc:	20000cf4 	.word	0x20000cf4
 8006ed0:	20000cec 	.word	0x20000cec

08006ed4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006ed8:	4604      	mov	r4, r0
 8006eda:	2800      	cmp	r0, #0
 8006edc:	f000 8088 	beq.w	8006ff0 <mem_free+0x11c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8006ee0:	0783      	lsls	r3, r0, #30
 8006ee2:	d006      	beq.n	8006ef2 <mem_free+0x1e>
 8006ee4:	4b43      	ldr	r3, [pc, #268]	; (8006ff4 <mem_free+0x120>)
 8006ee6:	4944      	ldr	r1, [pc, #272]	; (8006ff8 <mem_free+0x124>)
 8006ee8:	4844      	ldr	r0, [pc, #272]	; (8006ffc <mem_free+0x128>)
 8006eea:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8006eee:	f006 ff0d 	bl	800dd0c <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006ef2:	4f43      	ldr	r7, [pc, #268]	; (8007000 <mem_free+0x12c>)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	429c      	cmp	r4, r3
 8006ef8:	d303      	bcc.n	8006f02 <mem_free+0x2e>
 8006efa:	4b42      	ldr	r3, [pc, #264]	; (8007004 <mem_free+0x130>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	429c      	cmp	r4, r3
 8006f00:	d306      	bcc.n	8006f10 <mem_free+0x3c>
 8006f02:	4b3c      	ldr	r3, [pc, #240]	; (8006ff4 <mem_free+0x120>)
 8006f04:	4940      	ldr	r1, [pc, #256]	; (8007008 <mem_free+0x134>)
 8006f06:	483d      	ldr	r0, [pc, #244]	; (8006ffc <mem_free+0x128>)
 8006f08:	f240 12af 	movw	r2, #431	; 0x1af
 8006f0c:	f006 fefe 	bl	800dd0c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	429c      	cmp	r4, r3
 8006f14:	d36c      	bcc.n	8006ff0 <mem_free+0x11c>
 8006f16:	4b3b      	ldr	r3, [pc, #236]	; (8007004 <mem_free+0x130>)
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4294      	cmp	r4, r2
 8006f1c:	4698      	mov	r8, r3
 8006f1e:	d267      	bcs.n	8006ff0 <mem_free+0x11c>
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8006f20:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006f24:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8006f28:	b933      	cbnz	r3, 8006f38 <mem_free+0x64>
 8006f2a:	4b32      	ldr	r3, [pc, #200]	; (8006ff4 <mem_free+0x120>)
 8006f2c:	4937      	ldr	r1, [pc, #220]	; (800700c <mem_free+0x138>)
 8006f2e:	4833      	ldr	r0, [pc, #204]	; (8006ffc <mem_free+0x128>)
 8006f30:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8006f34:	f006 feea 	bl	800dd0c <iprintf>
  /* ... and is now unused. */
  mem->used = 0;

  if (mem < lfree) {
 8006f38:	4e35      	ldr	r6, [pc, #212]	; (8007010 <mem_free+0x13c>)
  mem->used = 0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8006f40:	6833      	ldr	r3, [r6, #0]
 8006f42:	429d      	cmp	r5, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006f44:	683b      	ldr	r3, [r7, #0]
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006f46:	bf38      	it	cc
 8006f48:	6035      	strcc	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006f4a:	429d      	cmp	r5, r3
 8006f4c:	d206      	bcs.n	8006f5c <mem_free+0x88>
 8006f4e:	4b29      	ldr	r3, [pc, #164]	; (8006ff4 <mem_free+0x120>)
 8006f50:	4930      	ldr	r1, [pc, #192]	; (8007014 <mem_free+0x140>)
 8006f52:	482a      	ldr	r0, [pc, #168]	; (8006ffc <mem_free+0x128>)
 8006f54:	f240 125d 	movw	r2, #349	; 0x15d
 8006f58:	f006 fed8 	bl	800dd0c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f60:	429d      	cmp	r5, r3
 8006f62:	d306      	bcc.n	8006f72 <mem_free+0x9e>
 8006f64:	4b23      	ldr	r3, [pc, #140]	; (8006ff4 <mem_free+0x120>)
 8006f66:	492c      	ldr	r1, [pc, #176]	; (8007018 <mem_free+0x144>)
 8006f68:	4824      	ldr	r0, [pc, #144]	; (8006ffc <mem_free+0x128>)
 8006f6a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006f6e:	f006 fecd 	bl	800dd0c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006f72:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8006f76:	b133      	cbz	r3, 8006f86 <mem_free+0xb2>
 8006f78:	4b1e      	ldr	r3, [pc, #120]	; (8006ff4 <mem_free+0x120>)
 8006f7a:	4928      	ldr	r1, [pc, #160]	; (800701c <mem_free+0x148>)
 8006f7c:	481f      	ldr	r0, [pc, #124]	; (8006ffc <mem_free+0x128>)
 8006f7e:	f240 125f 	movw	r2, #351	; 0x15f
 8006f82:	f006 fec3 	bl	800dd0c <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006f86:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8006f8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006f8e:	d906      	bls.n	8006f9e <mem_free+0xca>
 8006f90:	4b18      	ldr	r3, [pc, #96]	; (8006ff4 <mem_free+0x120>)
 8006f92:	4923      	ldr	r1, [pc, #140]	; (8007020 <mem_free+0x14c>)
 8006f94:	4819      	ldr	r0, [pc, #100]	; (8006ffc <mem_free+0x128>)
 8006f96:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8006f9a:	f006 feb7 	bl	800dd0c <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006fa4:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006fa6:	4295      	cmp	r5, r2
 8006fa8:	d010      	beq.n	8006fcc <mem_free+0xf8>
 8006faa:	7910      	ldrb	r0, [r2, #4]
 8006fac:	b970      	cbnz	r0, 8006fcc <mem_free+0xf8>
 8006fae:	f8d8 0000 	ldr.w	r0, [r8]
 8006fb2:	4282      	cmp	r2, r0
 8006fb4:	d00a      	beq.n	8006fcc <mem_free+0xf8>
    if (lfree == nmem) {
 8006fb6:	6830      	ldr	r0, [r6, #0]
 8006fb8:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8006fba:	5a5a      	ldrh	r2, [r3, r1]
 8006fbc:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8006fc0:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8006fc2:	bf08      	it	eq
 8006fc4:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8006fc6:	441a      	add	r2, r3
 8006fc8:	1ae9      	subs	r1, r5, r3
 8006fca:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8006fcc:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 8006fd0:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8006fd2:	428d      	cmp	r5, r1
 8006fd4:	d00c      	beq.n	8006ff0 <mem_free+0x11c>
 8006fd6:	7908      	ldrb	r0, [r1, #4]
 8006fd8:	b950      	cbnz	r0, 8006ff0 <mem_free+0x11c>
    if (lfree == mem) {
 8006fda:	6830      	ldr	r0, [r6, #0]
 8006fdc:	4285      	cmp	r5, r0
      lfree = pmem;
 8006fde:	bf08      	it	eq
 8006fe0:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 8006fe2:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006fe6:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8006fe8:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006fec:	440b      	add	r3, r1
 8006fee:	805a      	strh	r2, [r3, #2]
 8006ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ff4:	0800fb25 	.word	0x0800fb25
 8006ff8:	0800fb54 	.word	0x0800fb54
 8006ffc:	0800f3a7 	.word	0x0800f3a7
 8007000:	20000cf0 	.word	0x20000cf0
 8007004:	20000cf4 	.word	0x20000cf4
 8007008:	0800fb75 	.word	0x0800fb75
 800700c:	0800fb8c 	.word	0x0800fb8c
 8007010:	20000cec 	.word	0x20000cec
 8007014:	0800fba0 	.word	0x0800fba0
 8007018:	0800fbb7 	.word	0x0800fbb7
 800701c:	0800fbd1 	.word	0x0800fbd1
 8007020:	0800fbec 	.word	0x0800fbec

08007024 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8007024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8007026:	3103      	adds	r1, #3
 8007028:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 800702c:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 800702e:	2d0b      	cmp	r5, #11
{
 8007030:	4604      	mov	r4, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 8007032:	d904      	bls.n	800703e <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8007034:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8007038:	d902      	bls.n	8007040 <mem_trim+0x1c>
    return NULL;
 800703a:	2400      	movs	r4, #0
 800703c:	e059      	b.n	80070f2 <mem_trim+0xce>
    newsize = MIN_SIZE_ALIGNED;
 800703e:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007040:	4e2d      	ldr	r6, [pc, #180]	; (80070f8 <mem_trim+0xd4>)
 8007042:	6832      	ldr	r2, [r6, #0]
 8007044:	42a2      	cmp	r2, r4
 8007046:	d803      	bhi.n	8007050 <mem_trim+0x2c>
 8007048:	4b2c      	ldr	r3, [pc, #176]	; (80070fc <mem_trim+0xd8>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	429c      	cmp	r4, r3
 800704e:	d306      	bcc.n	800705e <mem_trim+0x3a>
 8007050:	4b2b      	ldr	r3, [pc, #172]	; (8007100 <mem_trim+0xdc>)
 8007052:	492c      	ldr	r1, [pc, #176]	; (8007104 <mem_trim+0xe0>)
 8007054:	482c      	ldr	r0, [pc, #176]	; (8007108 <mem_trim+0xe4>)
 8007056:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800705a:	f006 fe57 	bl	800dd0c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800705e:	6833      	ldr	r3, [r6, #0]
 8007060:	429c      	cmp	r4, r3
 8007062:	d346      	bcc.n	80070f2 <mem_trim+0xce>
 8007064:	4a25      	ldr	r2, [pc, #148]	; (80070fc <mem_trim+0xd8>)
 8007066:	6812      	ldr	r2, [r2, #0]
 8007068:	4294      	cmp	r4, r2
 800706a:	d242      	bcs.n	80070f2 <mem_trim+0xce>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800706c:	f1a4 0208 	sub.w	r2, r4, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8007070:	f834 0c08 	ldrh.w	r0, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8007074:	1ad2      	subs	r2, r2, r3
 8007076:	b292      	uxth	r2, r2
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8007078:	f1a0 0108 	sub.w	r1, r0, #8
 800707c:	1a89      	subs	r1, r1, r2
 800707e:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007080:	42a9      	cmp	r1, r5
 8007082:	d219      	bcs.n	80070b8 <mem_trim+0x94>
 8007084:	4b1e      	ldr	r3, [pc, #120]	; (8007100 <mem_trim+0xdc>)
 8007086:	4921      	ldr	r1, [pc, #132]	; (800710c <mem_trim+0xe8>)
 8007088:	481f      	ldr	r0, [pc, #124]	; (8007108 <mem_trim+0xe4>)
 800708a:	f240 2206 	movw	r2, #518	; 0x206
 800708e:	f006 fe3d 	bl	800dd0c <iprintf>
 8007092:	e7d2      	b.n	800703a <mem_trim+0x16>
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007094:	f105 0614 	add.w	r6, r5, #20
 8007098:	428e      	cmp	r6, r1
 800709a:	d82a      	bhi.n	80070f2 <mem_trim+0xce>
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    mem2 = (struct mem *)(void *)&ram[ptr2];
    if (mem2 < lfree) {
 800709c:	4e1c      	ldr	r6, [pc, #112]	; (8007110 <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800709e:	f102 0108 	add.w	r1, r2, #8
 80070a2:	440d      	add	r5, r1
    if (mem2 < lfree) {
 80070a4:	6837      	ldr	r7, [r6, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80070a6:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80070a8:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 80070aa:	42b9      	cmp	r1, r7
      lfree = mem2;
 80070ac:	bf38      	it	cc
 80070ae:	6031      	strcc	r1, [r6, #0]
    }
    mem2->used = 0;
 80070b0:	2600      	movs	r6, #0
 80070b2:	710e      	strb	r6, [r1, #4]
    mem2->next = mem->next;
 80070b4:	5358      	strh	r0, [r3, r5]
 80070b6:	e013      	b.n	80070e0 <mem_trim+0xbc>
  if (newsize == size) {
 80070b8:	d01b      	beq.n	80070f2 <mem_trim+0xce>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 80070ba:	181e      	adds	r6, r3, r0
  if (mem2->used == 0) {
 80070bc:	7937      	ldrb	r7, [r6, #4]
 80070be:	2f00      	cmp	r7, #0
 80070c0:	d1e8      	bne.n	8007094 <mem_trim+0x70>
    next = mem2->next;
 80070c2:	5a1f      	ldrh	r7, [r3, r0]
    if (lfree == mem2) {
 80070c4:	4812      	ldr	r0, [pc, #72]	; (8007110 <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80070c6:	f102 0108 	add.w	r1, r2, #8
 80070ca:	440d      	add	r5, r1
    if (lfree == mem2) {
 80070cc:	6801      	ldr	r1, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80070ce:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 80070d0:	428e      	cmp	r6, r1
 80070d2:	eb03 0105 	add.w	r1, r3, r5
      lfree = (struct mem *)(void *)&ram[ptr2];
 80070d6:	bf08      	it	eq
 80070d8:	6001      	streq	r1, [r0, #0]
    mem2->used = 0;
 80070da:	2000      	movs	r0, #0
 80070dc:	7108      	strb	r0, [r1, #4]
    mem2->next = next;
 80070de:	535f      	strh	r7, [r3, r5]
    mem2->prev = ptr;
 80070e0:	804a      	strh	r2, [r1, #2]
    mem->next = ptr2;
 80070e2:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80070e6:	5b5a      	ldrh	r2, [r3, r5]
 80070e8:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 80070ec:	d001      	beq.n	80070f2 <mem_trim+0xce>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80070ee:	4413      	add	r3, r2
 80070f0:	805d      	strh	r5, [r3, #2]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 80070f2:	4620      	mov	r0, r4
 80070f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20000cf0 	.word	0x20000cf0
 80070fc:	20000cf4 	.word	0x20000cf4
 8007100:	0800fb25 	.word	0x0800fb25
 8007104:	0800fcb1 	.word	0x0800fcb1
 8007108:	0800f3a7 	.word	0x0800f3a7
 800710c:	0800fcc8 	.word	0x0800fcc8
 8007110:	20000cec 	.word	0x20000cec

08007114 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8007114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8007118:	b148      	cbz	r0, 800712e <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800711a:	3003      	adds	r0, #3
 800711c:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8007120:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 8007122:	2d0b      	cmp	r5, #11
 8007124:	d905      	bls.n	8007132 <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 8007126:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 800712a:	d903      	bls.n	8007134 <mem_malloc+0x20>
    return NULL;
 800712c:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 800712e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 8007132:	250c      	movs	r5, #12
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007134:	4837      	ldr	r0, [pc, #220]	; (8007214 <mem_malloc+0x100>)
 8007136:	4e38      	ldr	r6, [pc, #224]	; (8007218 <mem_malloc+0x104>)
 8007138:	6807      	ldr	r7, [r0, #0]
 800713a:	6831      	ldr	r1, [r6, #0]
 800713c:	1a7b      	subs	r3, r7, r1
 800713e:	b29b      	uxth	r3, r3
 8007140:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007144:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007148:	4543      	cmp	r3, r8
 800714a:	d2ef      	bcs.n	800712c <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 800714c:	18cc      	adds	r4, r1, r3
 800714e:	f831 e003 	ldrh.w	lr, [r1, r3]
      if ((!mem->used) &&
 8007152:	f894 c004 	ldrb.w	ip, [r4, #4]
 8007156:	f1bc 0f00 	cmp.w	ip, #0
 800715a:	d158      	bne.n	800720e <mem_malloc+0xfa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800715c:	eba9 0203 	sub.w	r2, r9, r3
 8007160:	4472      	add	r2, lr
      if ((!mem->used) &&
 8007162:	4295      	cmp	r5, r2
 8007164:	d853      	bhi.n	800720e <mem_malloc+0xfa>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007166:	f105 0814 	add.w	r8, r5, #20
 800716a:	4542      	cmp	r2, r8
 800716c:	d349      	bcc.n	8007202 <mem_malloc+0xee>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800716e:	f105 0208 	add.w	r2, r5, #8
 8007172:	441a      	add	r2, r3
 8007174:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8007176:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 800717a:	f888 c004 	strb.w	ip, [r8, #4]
          mem2->next = mem->next;
 800717e:	f821 e002 	strh.w	lr, [r1, r2]
          mem2->prev = ptr;
 8007182:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 8007186:	2301      	movs	r3, #1
          mem->next = ptr2;
 8007188:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 800718a:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800718c:	5a8b      	ldrh	r3, [r1, r2]
 800718e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007192:	d001      	beq.n	8007198 <mem_malloc+0x84>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007194:	4419      	add	r1, r3
 8007196:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 8007198:	42a7      	cmp	r7, r4
 800719a:	4f20      	ldr	r7, [pc, #128]	; (800721c <mem_malloc+0x108>)
 800719c:	d111      	bne.n	80071c2 <mem_malloc+0xae>
          while (cur->used && cur != ram_end) {
 800719e:	6839      	ldr	r1, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 80071a0:	6836      	ldr	r6, [r6, #0]
 80071a2:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 80071a4:	791a      	ldrb	r2, [r3, #4]
 80071a6:	b10a      	cbz	r2, 80071ac <mem_malloc+0x98>
 80071a8:	428b      	cmp	r3, r1
 80071aa:	d12d      	bne.n	8007208 <mem_malloc+0xf4>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80071ac:	428b      	cmp	r3, r1
          lfree = cur;
 80071ae:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80071b0:	d007      	beq.n	80071c2 <mem_malloc+0xae>
 80071b2:	b132      	cbz	r2, 80071c2 <mem_malloc+0xae>
 80071b4:	4b1a      	ldr	r3, [pc, #104]	; (8007220 <mem_malloc+0x10c>)
 80071b6:	491b      	ldr	r1, [pc, #108]	; (8007224 <mem_malloc+0x110>)
 80071b8:	481b      	ldr	r0, [pc, #108]	; (8007228 <mem_malloc+0x114>)
 80071ba:	f240 22cf 	movw	r2, #719	; 0x2cf
 80071be:	f006 fda5 	bl	800dd0c <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80071c2:	3508      	adds	r5, #8
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	4425      	add	r5, r4
 80071c8:	42ab      	cmp	r3, r5
 80071ca:	d206      	bcs.n	80071da <mem_malloc+0xc6>
 80071cc:	4b14      	ldr	r3, [pc, #80]	; (8007220 <mem_malloc+0x10c>)
 80071ce:	4917      	ldr	r1, [pc, #92]	; (800722c <mem_malloc+0x118>)
 80071d0:	4815      	ldr	r0, [pc, #84]	; (8007228 <mem_malloc+0x114>)
 80071d2:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80071d6:	f006 fd99 	bl	800dd0c <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80071da:	07a3      	lsls	r3, r4, #30
 80071dc:	d00d      	beq.n	80071fa <mem_malloc+0xe6>
 80071de:	4b10      	ldr	r3, [pc, #64]	; (8007220 <mem_malloc+0x10c>)
 80071e0:	4913      	ldr	r1, [pc, #76]	; (8007230 <mem_malloc+0x11c>)
 80071e2:	4811      	ldr	r0, [pc, #68]	; (8007228 <mem_malloc+0x114>)
 80071e4:	f240 22d6 	movw	r2, #726	; 0x2d6
 80071e8:	f006 fd90 	bl	800dd0c <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80071ec:	4b0c      	ldr	r3, [pc, #48]	; (8007220 <mem_malloc+0x10c>)
 80071ee:	4911      	ldr	r1, [pc, #68]	; (8007234 <mem_malloc+0x120>)
 80071f0:	480d      	ldr	r0, [pc, #52]	; (8007228 <mem_malloc+0x114>)
 80071f2:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 80071f6:	f006 fd89 	bl	800dd0c <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80071fa:	f104 0008 	add.w	r0, r4, #8
 80071fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 8007202:	2301      	movs	r3, #1
 8007204:	7123      	strb	r3, [r4, #4]
 8007206:	e7c7      	b.n	8007198 <mem_malloc+0x84>
            cur = (struct mem *)(void *)&ram[cur->next];
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	4433      	add	r3, r6
 800720c:	e7ca      	b.n	80071a4 <mem_malloc+0x90>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800720e:	4673      	mov	r3, lr
 8007210:	e79a      	b.n	8007148 <mem_malloc+0x34>
 8007212:	bf00      	nop
 8007214:	20000cec 	.word	0x20000cec
 8007218:	20000cf0 	.word	0x20000cf0
 800721c:	20000cf4 	.word	0x20000cf4
 8007220:	0800fb25 	.word	0x0800fb25
 8007224:	0800fc16 	.word	0x0800fc16
 8007228:	0800f3a7 	.word	0x0800f3a7
 800722c:	0800fc2f 	.word	0x0800fc2f
 8007230:	0800fc5f 	.word	0x0800fc5f
 8007234:	0800fc8e 	.word	0x0800fc8e

08007238 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8007238:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800723a:	6804      	ldr	r4, [r0, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800723c:	b154      	cbz	r4, 8007254 <do_memp_malloc_pool.isra.0+0x1c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	6003      	str	r3, [r0, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007242:	07a3      	lsls	r3, r4, #30
 8007244:	d006      	beq.n	8007254 <do_memp_malloc_pool.isra.0+0x1c>
 8007246:	4b04      	ldr	r3, [pc, #16]	; (8007258 <do_memp_malloc_pool.isra.0+0x20>)
 8007248:	4904      	ldr	r1, [pc, #16]	; (800725c <do_memp_malloc_pool.isra.0+0x24>)
 800724a:	4805      	ldr	r0, [pc, #20]	; (8007260 <do_memp_malloc_pool.isra.0+0x28>)
 800724c:	f240 1249 	movw	r2, #329	; 0x149
 8007250:	f006 fd5c 	bl	800dd0c <iprintf>
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
}
 8007254:	4620      	mov	r0, r4
 8007256:	bd10      	pop	{r4, pc}
 8007258:	0800fd08 	.word	0x0800fd08
 800725c:	0800fd38 	.word	0x0800fd38
 8007260:	0800f3a7 	.word	0x0800f3a7

08007264 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8007264:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007266:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8007268:	4605      	mov	r5, r0
 800726a:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 800726c:	d006      	beq.n	800727c <do_memp_free_pool.isra.1+0x18>
 800726e:	4b06      	ldr	r3, [pc, #24]	; (8007288 <do_memp_free_pool.isra.1+0x24>)
 8007270:	4906      	ldr	r1, [pc, #24]	; (800728c <do_memp_free_pool.isra.1+0x28>)
 8007272:	4807      	ldr	r0, [pc, #28]	; (8007290 <do_memp_free_pool.isra.1+0x2c>)
 8007274:	f240 129d 	movw	r2, #413	; 0x19d
 8007278:	f006 fd48 	bl	800dd0c <iprintf>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8007282:	601c      	str	r4, [r3, #0]
 8007284:	bd38      	pop	{r3, r4, r5, pc}
 8007286:	bf00      	nop
 8007288:	0800fd08 	.word	0x0800fd08
 800728c:	0800fce8 	.word	0x0800fce8
 8007290:	0800f3a7 	.word	0x0800f3a7

08007294 <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8007294:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8007296:	6881      	ldr	r1, [r0, #8]
{
 8007298:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 800729a:	2200      	movs	r2, #0
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800729c:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 800729e:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 80072a0:	600a      	str	r2, [r1, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80072a2:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 80072a6:	42a2      	cmp	r2, r4
 80072a8:	db00      	blt.n	80072ac <memp_init_pool+0x18>
}
 80072aa:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 80072ac:	680d      	ldr	r5, [r1, #0]
 80072ae:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80072b0:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 80072b2:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 80072b4:	3201      	adds	r2, #1
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80072b6:	442b      	add	r3, r5
 80072b8:	e7f5      	b.n	80072a6 <memp_init_pool+0x12>
	...

080072bc <memp_init>:
{
 80072bc:	b538      	push	{r3, r4, r5, lr}
    memp_init_pool(memp_pools[i]);
 80072be:	4d05      	ldr	r5, [pc, #20]	; (80072d4 <memp_init+0x18>)
{
 80072c0:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 80072c2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80072c6:	3401      	adds	r4, #1
 80072c8:	f7ff ffe4 	bl	8007294 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80072cc:	2c09      	cmp	r4, #9
 80072ce:	d1f8      	bne.n	80072c2 <memp_init+0x6>
}
 80072d0:	bd38      	pop	{r3, r4, r5, pc}
 80072d2:	bf00      	nop
 80072d4:	0800fe00 	.word	0x0800fe00

080072d8 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80072d8:	2808      	cmp	r0, #8
{
 80072da:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80072dc:	d807      	bhi.n	80072ee <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 80072de:	4b08      	ldr	r3, [pc, #32]	; (8007300 <memp_malloc+0x28>)
 80072e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80072e4:	6898      	ldr	r0, [r3, #8]
}
 80072e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 80072ea:	f7ff bfa5 	b.w	8007238 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80072ee:	4b05      	ldr	r3, [pc, #20]	; (8007304 <memp_malloc+0x2c>)
 80072f0:	4905      	ldr	r1, [pc, #20]	; (8007308 <memp_malloc+0x30>)
 80072f2:	4806      	ldr	r0, [pc, #24]	; (800730c <memp_malloc+0x34>)
 80072f4:	f240 1287 	movw	r2, #391	; 0x187
 80072f8:	f006 fd08 	bl	800dd0c <iprintf>
}
 80072fc:	2000      	movs	r0, #0
 80072fe:	bd08      	pop	{r3, pc}
 8007300:	0800fe00 	.word	0x0800fe00
 8007304:	0800fd08 	.word	0x0800fd08
 8007308:	0800fde3 	.word	0x0800fde3
 800730c:	0800f3a7 	.word	0x0800f3a7

08007310 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007310:	2808      	cmp	r0, #8
 8007312:	d906      	bls.n	8007322 <memp_free+0x12>
 8007314:	4b07      	ldr	r3, [pc, #28]	; (8007334 <memp_free+0x24>)
 8007316:	4908      	ldr	r1, [pc, #32]	; (8007338 <memp_free+0x28>)
 8007318:	4808      	ldr	r0, [pc, #32]	; (800733c <memp_free+0x2c>)
 800731a:	f240 12db 	movw	r2, #475	; 0x1db
 800731e:	f006 bcf5 	b.w	800dd0c <iprintf>

  if (mem == NULL) {
 8007322:	b129      	cbz	r1, 8007330 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007324:	4b06      	ldr	r3, [pc, #24]	; (8007340 <memp_free+0x30>)
 8007326:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800732a:	3008      	adds	r0, #8
 800732c:	f7ff bf9a 	b.w	8007264 <do_memp_free_pool.isra.1>
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	0800fd08 	.word	0x0800fd08
 8007338:	0800fdc8 	.word	0x0800fdc8
 800733c:	0800f3a7 	.word	0x0800f3a7
 8007340:	0800fe00 	.word	0x0800fe00

08007344 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007344:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8007348:	071b      	lsls	r3, r3, #28
netif_issue_reports(struct netif* netif, u8_t report_type)
 800734a:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800734c:	d502      	bpl.n	8007354 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 800734e:	3104      	adds	r1, #4
 8007350:	f7fe bdb2 	b.w	8005eb8 <etharp_request>
 8007354:	4770      	bx	lr

08007356 <netif_init>:
{
 8007356:	4770      	bx	lr

08007358 <netif_set_ipaddr>:
{
 8007358:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800735a:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800735c:	460c      	mov	r4, r1
 800735e:	b1b9      	cbz	r1, 8007390 <netif_set_ipaddr+0x38>
 8007360:	680b      	ldr	r3, [r1, #0]
 8007362:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8007364:	9a01      	ldr	r2, [sp, #4]
 8007366:	686b      	ldr	r3, [r5, #4]
 8007368:	429a      	cmp	r2, r3
 800736a:	d00f      	beq.n	800738c <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800736c:	1d2e      	adds	r6, r5, #4
 800736e:	a901      	add	r1, sp, #4
 8007370:	4630      	mov	r0, r6
 8007372:	f001 fb09 	bl	8008988 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007376:	a901      	add	r1, sp, #4
 8007378:	4630      	mov	r0, r6
 800737a:	f003 fe61 	bl	800b040 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800737e:	b104      	cbz	r4, 8007382 <netif_set_ipaddr+0x2a>
 8007380:	6824      	ldr	r4, [r4, #0]
 8007382:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007384:	b114      	cbz	r4, 800738c <netif_set_ipaddr+0x34>
 8007386:	4628      	mov	r0, r5
 8007388:	f7ff ffdc 	bl	8007344 <netif_issue_reports.part.0>
}
 800738c:	b002      	add	sp, #8
 800738e:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8007390:	4b01      	ldr	r3, [pc, #4]	; (8007398 <netif_set_ipaddr+0x40>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	e7e5      	b.n	8007362 <netif_set_ipaddr+0xa>
 8007396:	bf00      	nop
 8007398:	0800f988 	.word	0x0800f988

0800739c <netif_set_addr>:
{
 800739c:	b570      	push	{r4, r5, r6, lr}
 800739e:	4606      	mov	r6, r0
 80073a0:	4615      	mov	r5, r2
 80073a2:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 80073a4:	b109      	cbz	r1, 80073aa <netif_set_addr+0xe>
 80073a6:	680b      	ldr	r3, [r1, #0]
 80073a8:	b94b      	cbnz	r3, 80073be <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 80073aa:	4630      	mov	r0, r6
 80073ac:	f7ff ffd4 	bl	8007358 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80073b0:	b105      	cbz	r5, 80073b4 <netif_set_addr+0x18>
 80073b2:	682d      	ldr	r5, [r5, #0]
 80073b4:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80073b6:	b104      	cbz	r4, 80073ba <netif_set_addr+0x1e>
 80073b8:	6824      	ldr	r4, [r4, #0]
 80073ba:	60f4      	str	r4, [r6, #12]
 80073bc:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80073be:	b102      	cbz	r2, 80073c2 <netif_set_addr+0x26>
 80073c0:	6815      	ldr	r5, [r2, #0]
 80073c2:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80073c4:	b104      	cbz	r4, 80073c8 <netif_set_addr+0x2c>
 80073c6:	6824      	ldr	r4, [r4, #0]
 80073c8:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 80073ca:	4630      	mov	r0, r6
}
 80073cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 80073d0:	f7ff bfc2 	b.w	8007358 <netif_set_ipaddr>

080073d4 <netif_add>:
{
 80073d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80073da:	4604      	mov	r4, r0
 80073dc:	460f      	mov	r7, r1
 80073de:	4690      	mov	r8, r2
 80073e0:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 80073e2:	b92e      	cbnz	r6, 80073f0 <netif_add+0x1c>
 80073e4:	4b15      	ldr	r3, [pc, #84]	; (800743c <netif_add+0x68>)
 80073e6:	4916      	ldr	r1, [pc, #88]	; (8007440 <netif_add+0x6c>)
 80073e8:	4816      	ldr	r0, [pc, #88]	; (8007444 <netif_add+0x70>)
 80073ea:	22fb      	movs	r2, #251	; 0xfb
 80073ec:	f006 fc8e 	bl	800dd0c <iprintf>
  netif->num = netif_num++;
 80073f0:	4a15      	ldr	r2, [pc, #84]	; (8007448 <netif_add+0x74>)
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 80073f8:	9b08      	ldr	r3, [sp, #32]
 80073fa:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 80073fc:	7813      	ldrb	r3, [r2, #0]
 80073fe:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007402:	2500      	movs	r5, #0
  netif->num = netif_num++;
 8007404:	1c59      	adds	r1, r3, #1
  netif->input = input;
 8007406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 8007408:	7011      	strb	r1, [r2, #0]
  netif->input = input;
 800740a:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800740c:	4620      	mov	r0, r4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800740e:	6065      	str	r5, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007410:	60a5      	str	r5, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007412:	60e5      	str	r5, [r4, #12]
  netif->flags = 0;
 8007414:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007418:	464b      	mov	r3, r9
 800741a:	4642      	mov	r2, r8
 800741c:	4639      	mov	r1, r7
 800741e:	f7ff ffbd 	bl	800739c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8007422:	4620      	mov	r0, r4
 8007424:	47b0      	blx	r6
 8007426:	b930      	cbnz	r0, 8007436 <netif_add+0x62>
  netif->next = netif_list;
 8007428:	4b08      	ldr	r3, [pc, #32]	; (800744c <netif_add+0x78>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 800742e:	601c      	str	r4, [r3, #0]
}
 8007430:	4620      	mov	r0, r4
 8007432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8007436:	462c      	mov	r4, r5
 8007438:	e7fa      	b.n	8007430 <netif_add+0x5c>
 800743a:	bf00      	nop
 800743c:	0800fe24 	.word	0x0800fe24
 8007440:	0800fe55 	.word	0x0800fe55
 8007444:	0800f3a7 	.word	0x0800f3a7
 8007448:	20000d1c 	.word	0x20000d1c
 800744c:	20005044 	.word	0x20005044

08007450 <netif_set_default>:
  netif_default = netif;
 8007450:	4b01      	ldr	r3, [pc, #4]	; (8007458 <netif_set_default+0x8>)
 8007452:	6018      	str	r0, [r3, #0]
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	20005048 	.word	0x20005048

0800745c <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800745c:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8007460:	07d1      	lsls	r1, r2, #31
 8007462:	d409      	bmi.n	8007478 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8007464:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007468:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 800746a:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800746e:	d503      	bpl.n	8007478 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007470:	6843      	ldr	r3, [r0, #4]
 8007472:	b10b      	cbz	r3, 8007478 <netif_set_up+0x1c>
 8007474:	f7ff bf66 	b.w	8007344 <netif_issue_reports.part.0>
 8007478:	4770      	bx	lr

0800747a <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 800747a:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800747e:	07d9      	lsls	r1, r3, #31
 8007480:	d507      	bpl.n	8007492 <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 8007482:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007486:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 8007488:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800748c:	d501      	bpl.n	8007492 <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 800748e:	f7fe bc61 	b.w	8005d54 <etharp_cleanup_netif>
 8007492:	4770      	bx	lr

08007494 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007494:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007496:	4604      	mov	r4, r0
 8007498:	2800      	cmp	r0, #0
 800749a:	d12f      	bne.n	80074fc <pbuf_header_impl+0x68>
 800749c:	4b1f      	ldr	r3, [pc, #124]	; (800751c <pbuf_header_impl+0x88>)
 800749e:	4920      	ldr	r1, [pc, #128]	; (8007520 <pbuf_header_impl+0x8c>)
 80074a0:	4820      	ldr	r0, [pc, #128]	; (8007524 <pbuf_header_impl+0x90>)
 80074a2:	f240 223f 	movw	r2, #575	; 0x23f
 80074a6:	f006 fc31 	bl	800dd0c <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80074aa:	2000      	movs	r0, #0
 80074ac:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)header_size_increment;
 80074ae:	b288      	uxth	r0, r1
  type = p->type;
 80074b0:	7b25      	ldrb	r5, [r4, #12]
  payload = p->payload;
 80074b2:	6863      	ldr	r3, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80074b4:	b10d      	cbz	r5, 80074ba <pbuf_header_impl+0x26>
 80074b6:	2d03      	cmp	r5, #3
 80074b8:	d106      	bne.n	80074c8 <pbuf_header_impl+0x34>
    p->payload = (u8_t *)p->payload - header_size_increment;
 80074ba:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80074bc:	f104 0210 	add.w	r2, r4, #16
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d20a      	bcs.n	80074da <pbuf_header_impl+0x46>
      return 1;
 80074c4:	2001      	movs	r0, #1
 80074c6:	bd38      	pop	{r3, r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80074c8:	3d01      	subs	r5, #1
 80074ca:	2d01      	cmp	r5, #1
 80074cc:	d811      	bhi.n	80074f2 <pbuf_header_impl+0x5e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80074ce:	2900      	cmp	r1, #0
 80074d0:	da0c      	bge.n	80074ec <pbuf_header_impl+0x58>
 80074d2:	8962      	ldrh	r2, [r4, #10]
 80074d4:	4282      	cmp	r2, r0
 80074d6:	d3f5      	bcc.n	80074c4 <pbuf_header_impl+0x30>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80074d8:	1a5b      	subs	r3, r3, r1
  p->tot_len += header_size_increment;
 80074da:	8920      	ldrh	r0, [r4, #8]
    p->payload = (u8_t *)p->payload - header_size_increment;
 80074dc:	6063      	str	r3, [r4, #4]
  p->len += header_size_increment;
 80074de:	8963      	ldrh	r3, [r4, #10]
 80074e0:	b289      	uxth	r1, r1
 80074e2:	440b      	add	r3, r1
  p->tot_len += header_size_increment;
 80074e4:	4401      	add	r1, r0
  p->len += header_size_increment;
 80074e6:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 80074e8:	8121      	strh	r1, [r4, #8]
 80074ea:	e7de      	b.n	80074aa <pbuf_header_impl+0x16>
    } else if ((header_size_increment > 0) && force) {
 80074ec:	2a00      	cmp	r2, #0
 80074ee:	d1f3      	bne.n	80074d8 <pbuf_header_impl+0x44>
 80074f0:	e7e8      	b.n	80074c4 <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 80074f2:	4b0a      	ldr	r3, [pc, #40]	; (800751c <pbuf_header_impl+0x88>)
 80074f4:	490c      	ldr	r1, [pc, #48]	; (8007528 <pbuf_header_impl+0x94>)
 80074f6:	f240 2277 	movw	r2, #631	; 0x277
 80074fa:	e00b      	b.n	8007514 <pbuf_header_impl+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 80074fc:	2900      	cmp	r1, #0
 80074fe:	d0d4      	beq.n	80074aa <pbuf_header_impl+0x16>
  if (header_size_increment < 0) {
 8007500:	dad5      	bge.n	80074ae <pbuf_header_impl+0x1a>
    increment_magnitude = (u16_t)-header_size_increment;
 8007502:	4248      	negs	r0, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007504:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 8007506:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007508:	4283      	cmp	r3, r0
 800750a:	d2d1      	bcs.n	80074b0 <pbuf_header_impl+0x1c>
 800750c:	4b03      	ldr	r3, [pc, #12]	; (800751c <pbuf_header_impl+0x88>)
 800750e:	4907      	ldr	r1, [pc, #28]	; (800752c <pbuf_header_impl+0x98>)
 8007510:	f240 2247 	movw	r2, #583	; 0x247
    LWIP_ASSERT("bad pbuf type", 0);
 8007514:	4803      	ldr	r0, [pc, #12]	; (8007524 <pbuf_header_impl+0x90>)
 8007516:	f006 fbf9 	bl	800dd0c <iprintf>
 800751a:	e7d3      	b.n	80074c4 <pbuf_header_impl+0x30>
 800751c:	080100d1 	.word	0x080100d1
 8007520:	0801013b 	.word	0x0801013b
 8007524:	0800f3a7 	.word	0x0800f3a7
 8007528:	0801011f 	.word	0x0801011f
 800752c:	08010101 	.word	0x08010101

08007530 <pbuf_free_ooseq>:
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007530:	4b08      	ldr	r3, [pc, #32]	; (8007554 <pbuf_free_ooseq+0x24>)
 8007532:	2200      	movs	r2, #0
{
 8007534:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007536:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007538:	4b07      	ldr	r3, [pc, #28]	; (8007558 <pbuf_free_ooseq+0x28>)
 800753a:	681c      	ldr	r4, [r3, #0]
 800753c:	b904      	cbnz	r4, 8007540 <pbuf_free_ooseq+0x10>
 800753e:	bd10      	pop	{r4, pc}
    if (NULL != pcb->ooseq) {
 8007540:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007542:	b120      	cbz	r0, 800754e <pbuf_free_ooseq+0x1e>
      tcp_segs_free(pcb->ooseq);
 8007544:	f000 fc98 	bl	8007e78 <tcp_segs_free>
      pcb->ooseq = NULL;
 8007548:	2300      	movs	r3, #0
 800754a:	6723      	str	r3, [r4, #112]	; 0x70
      return;
 800754c:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800754e:	68e4      	ldr	r4, [r4, #12]
 8007550:	e7f4      	b.n	800753c <pbuf_free_ooseq+0xc>
 8007552:	bf00      	nop
 8007554:	2000504c 	.word	0x2000504c
 8007558:	20005054 	.word	0x20005054

0800755c <pbuf_alloced_custom>:
{
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8007560:	2804      	cmp	r0, #4
 8007562:	d81e      	bhi.n	80075a2 <pbuf_alloced_custom+0x46>
 8007564:	e8df f000 	tbb	[pc, r0]
 8007568:	1b280326 	.word	0x1b280326
 800756c:	1b          	.byte	0x1b
 800756d:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800756e:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007570:	3403      	adds	r4, #3
 8007572:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8007576:	f024 0403 	bic.w	r4, r4, #3
 800757a:	190e      	adds	r6, r1, r4
 800757c:	4286      	cmp	r6, r0
 800757e:	f04f 0000 	mov.w	r0, #0
 8007582:	d80b      	bhi.n	800759c <pbuf_alloced_custom+0x40>
  p->pbuf.next = NULL;
 8007584:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 8007586:	b1cd      	cbz	r5, 80075bc <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007588:	442c      	add	r4, r5
 800758a:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800758c:	2002      	movs	r0, #2
  p->pbuf.type = type;
 800758e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8007590:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8007592:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8007594:	8119      	strh	r1, [r3, #8]
 8007596:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8007598:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800759a:	4618      	mov	r0, r3
}
 800759c:	bd70      	pop	{r4, r5, r6, pc}
    offset = 0;
 800759e:	2400      	movs	r4, #0
    break;
 80075a0:	e7e6      	b.n	8007570 <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80075a2:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <pbuf_alloced_custom+0x64>)
 80075a4:	4907      	ldr	r1, [pc, #28]	; (80075c4 <pbuf_alloced_custom+0x68>)
 80075a6:	4808      	ldr	r0, [pc, #32]	; (80075c8 <pbuf_alloced_custom+0x6c>)
 80075a8:	f240 12c5 	movw	r2, #453	; 0x1c5
 80075ac:	f006 fbae 	bl	800dd0c <iprintf>
    return NULL;
 80075b0:	2000      	movs	r0, #0
 80075b2:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80075b4:	2436      	movs	r4, #54	; 0x36
 80075b6:	e7db      	b.n	8007570 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80075b8:	240e      	movs	r4, #14
 80075ba:	e7d9      	b.n	8007570 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 80075bc:	605d      	str	r5, [r3, #4]
 80075be:	e7e5      	b.n	800758c <pbuf_alloced_custom+0x30>
 80075c0:	080100d1 	.word	0x080100d1
 80075c4:	0800ff14 	.word	0x0800ff14
 80075c8:	0800f3a7 	.word	0x0800f3a7

080075cc <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 80075cc:	2200      	movs	r2, #0
 80075ce:	f7ff bf61 	b.w	8007494 <pbuf_header_impl>

080075d2 <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 80075d2:	2201      	movs	r2, #1
 80075d4:	f7ff bf5e 	b.w	8007494 <pbuf_header_impl>

080075d8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80075d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80075dc:	4604      	mov	r4, r0
 80075de:	b950      	cbnz	r0, 80075f6 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 80075e0:	4b28      	ldr	r3, [pc, #160]	; (8007684 <pbuf_free+0xac>)
 80075e2:	4929      	ldr	r1, [pc, #164]	; (8007688 <pbuf_free+0xb0>)
 80075e4:	4829      	ldr	r0, [pc, #164]	; (800768c <pbuf_free+0xb4>)
 80075e6:	f240 22d2 	movw	r2, #722	; 0x2d2
 80075ea:	f006 fb8f 	bl	800dd0c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80075ee:	4626      	mov	r6, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80075f0:	4630      	mov	r0, r6
 80075f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 80075f6:	7b03      	ldrb	r3, [r0, #12]
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d906      	bls.n	800760a <pbuf_free+0x32>
 80075fc:	4b21      	ldr	r3, [pc, #132]	; (8007684 <pbuf_free+0xac>)
 80075fe:	4924      	ldr	r1, [pc, #144]	; (8007690 <pbuf_free+0xb8>)
 8007600:	4822      	ldr	r0, [pc, #136]	; (800768c <pbuf_free+0xb4>)
 8007602:	f240 22de 	movw	r2, #734	; 0x2de
 8007606:	f006 fb81 	bl	800dd0c <iprintf>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800760a:	4f1e      	ldr	r7, [pc, #120]	; (8007684 <pbuf_free+0xac>)
 800760c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8007698 <pbuf_free+0xc0>
 8007610:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800768c <pbuf_free+0xb4>
{
 8007614:	2500      	movs	r5, #0
 8007616:	b2ee      	uxtb	r6, r5
  while (p != NULL) {
 8007618:	2c00      	cmp	r4, #0
 800761a:	d0e9      	beq.n	80075f0 <pbuf_free+0x18>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800761c:	89e3      	ldrh	r3, [r4, #14]
 800761e:	b933      	cbnz	r3, 800762e <pbuf_free+0x56>
 8007620:	463b      	mov	r3, r7
 8007622:	f240 22eb 	movw	r2, #747	; 0x2eb
 8007626:	4649      	mov	r1, r9
 8007628:	4640      	mov	r0, r8
 800762a:	f006 fb6f 	bl	800dd0c <iprintf>
    ref = --(p->ref);
 800762e:	89e3      	ldrh	r3, [r4, #14]
 8007630:	3b01      	subs	r3, #1
 8007632:	b29b      	uxth	r3, r3
 8007634:	81e3      	strh	r3, [r4, #14]
    if (ref == 0) {
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1da      	bne.n	80075f0 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800763a:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 800763c:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800763e:	079b      	lsls	r3, r3, #30
 8007640:	d50e      	bpl.n	8007660 <pbuf_free+0x88>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	b933      	cbnz	r3, 8007654 <pbuf_free+0x7c>
 8007646:	463b      	mov	r3, r7
 8007648:	f240 22f9 	movw	r2, #761	; 0x2f9
 800764c:	4911      	ldr	r1, [pc, #68]	; (8007694 <pbuf_free+0xbc>)
 800764e:	4640      	mov	r0, r8
 8007650:	f006 fb5c 	bl	800dd0c <iprintf>
        pc->custom_free_function(p);
 8007654:	6923      	ldr	r3, [r4, #16]
 8007656:	4620      	mov	r0, r4
 8007658:	4798      	blx	r3
 800765a:	3501      	adds	r5, #1
      p = q;
 800765c:	4634      	mov	r4, r6
 800765e:	e7da      	b.n	8007616 <pbuf_free+0x3e>
      type = p->type;
 8007660:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 8007662:	2b03      	cmp	r3, #3
 8007664:	d104      	bne.n	8007670 <pbuf_free+0x98>
          memp_free(MEMP_PBUF_POOL, p);
 8007666:	4621      	mov	r1, r4
 8007668:	2008      	movs	r0, #8
          memp_free(MEMP_PBUF, p);
 800766a:	f7ff fe51 	bl	8007310 <memp_free>
 800766e:	e7f4      	b.n	800765a <pbuf_free+0x82>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8007670:	3b01      	subs	r3, #1
 8007672:	2b01      	cmp	r3, #1
 8007674:	d802      	bhi.n	800767c <pbuf_free+0xa4>
          memp_free(MEMP_PBUF, p);
 8007676:	4621      	mov	r1, r4
 8007678:	2007      	movs	r0, #7
 800767a:	e7f6      	b.n	800766a <pbuf_free+0x92>
          mem_free(p);
 800767c:	4620      	mov	r0, r4
 800767e:	f7ff fc29 	bl	8006ed4 <mem_free>
 8007682:	e7ea      	b.n	800765a <pbuf_free+0x82>
 8007684:	080100d1 	.word	0x080100d1
 8007688:	0801013b 	.word	0x0801013b
 800768c:	0800f3a7 	.word	0x0800f3a7
 8007690:	08010085 	.word	0x08010085
 8007694:	080100b0 	.word	0x080100b0
 8007698:	0801009a 	.word	0x0801009a

0800769c <pbuf_alloc>:
{
 800769c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a0:	460e      	mov	r6, r1
 80076a2:	4617      	mov	r7, r2
  switch (layer) {
 80076a4:	2804      	cmp	r0, #4
 80076a6:	d80e      	bhi.n	80076c6 <pbuf_alloc+0x2a>
 80076a8:	e8df f000 	tbb	[pc, r0]
 80076ac:	0b170315 	.word	0x0b170315
 80076b0:	0b          	.byte	0x0b
 80076b1:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80076b2:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 80076b4:	2f03      	cmp	r7, #3
 80076b6:	f200 80bc 	bhi.w	8007832 <pbuf_alloc+0x196>
 80076ba:	e8df f007 	tbb	[pc, r7]
 80076be:	ad92      	.short	0xad92
 80076c0:	10ad      	.short	0x10ad
    offset = 0;
 80076c2:	2500      	movs	r5, #0
    break;
 80076c4:	e7f6      	b.n	80076b4 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80076c6:	4b5d      	ldr	r3, [pc, #372]	; (800783c <pbuf_alloc+0x1a0>)
 80076c8:	495d      	ldr	r1, [pc, #372]	; (8007840 <pbuf_alloc+0x1a4>)
 80076ca:	f44f 728b 	mov.w	r2, #278	; 0x116
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80076ce:	485d      	ldr	r0, [pc, #372]	; (8007844 <pbuf_alloc+0x1a8>)
 80076d0:	f006 fb1c 	bl	800dd0c <iprintf>
 80076d4:	e04b      	b.n	800776e <pbuf_alloc+0xd2>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80076d6:	2536      	movs	r5, #54	; 0x36
 80076d8:	e7ec      	b.n	80076b4 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80076da:	250e      	movs	r5, #14
 80076dc:	e7ea      	b.n	80076b4 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80076de:	2008      	movs	r0, #8
 80076e0:	f7ff fdfa 	bl	80072d8 <memp_malloc>
    if (p == NULL) {
 80076e4:	4604      	mov	r4, r0
 80076e6:	b928      	cbnz	r0, 80076f4 <pbuf_alloc+0x58>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80076e8:	4b57      	ldr	r3, [pc, #348]	; (8007848 <pbuf_alloc+0x1ac>)
 80076ea:	2201      	movs	r2, #1
 80076ec:	701a      	strb	r2, [r3, #0]
}
 80076ee:	4620      	mov	r0, r4
 80076f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 80076f4:	2303      	movs	r3, #3
 80076f6:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 80076f8:	2300      	movs	r3, #0
 80076fa:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80076fc:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80076fe:	3503      	adds	r5, #3
 8007700:	f025 0503 	bic.w	r5, r5, #3
 8007704:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
 8007708:	42b5      	cmp	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800770a:	f103 0313 	add.w	r3, r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800770e:	bf28      	it	cs
 8007710:	4635      	movcs	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8007712:	f023 0303 	bic.w	r3, r3, #3
 8007716:	6043      	str	r3, [r0, #4]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8007718:	f500 7718 	add.w	r7, r0, #608	; 0x260
 800771c:	442b      	add	r3, r5
 800771e:	429f      	cmp	r7, r3
    p->tot_len = length;
 8007720:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8007722:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8007724:	d206      	bcs.n	8007734 <pbuf_alloc+0x98>
 8007726:	4b45      	ldr	r3, [pc, #276]	; (800783c <pbuf_alloc+0x1a0>)
 8007728:	4948      	ldr	r1, [pc, #288]	; (800784c <pbuf_alloc+0x1b0>)
 800772a:	4846      	ldr	r0, [pc, #280]	; (8007844 <pbuf_alloc+0x1a8>)
 800772c:	f44f 7298 	mov.w	r2, #304	; 0x130
 8007730:	f006 faec 	bl	800dd0c <iprintf>
    p->ref = 1;
 8007734:	2301      	movs	r3, #1
 8007736:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 8007738:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800773a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800783c <pbuf_alloc+0x1a0>
 800773e:	f8df a118 	ldr.w	sl, [pc, #280]	; 8007858 <pbuf_alloc+0x1bc>
 8007742:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007844 <pbuf_alloc+0x1a8>
    rem_len = length - p->len;
 8007746:	1af6      	subs	r6, r6, r3
    while (rem_len > 0) {
 8007748:	46a3      	mov	fp, r4
 800774a:	2e00      	cmp	r6, #0
 800774c:	dc04      	bgt.n	8007758 <pbuf_alloc+0xbc>
  p->ref = 1;
 800774e:	2301      	movs	r3, #1
 8007750:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8007752:	2300      	movs	r3, #0
 8007754:	7363      	strb	r3, [r4, #13]
  return p;
 8007756:	e7ca      	b.n	80076ee <pbuf_alloc+0x52>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007758:	2008      	movs	r0, #8
 800775a:	f7ff fdbd 	bl	80072d8 <memp_malloc>
      if (q == NULL) {
 800775e:	4605      	mov	r5, r0
 8007760:	b938      	cbnz	r0, 8007772 <pbuf_alloc+0xd6>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007762:	4b39      	ldr	r3, [pc, #228]	; (8007848 <pbuf_alloc+0x1ac>)
 8007764:	2201      	movs	r2, #1
        pbuf_free(p);
 8007766:	4620      	mov	r0, r4
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007768:	701a      	strb	r2, [r3, #0]
        pbuf_free(p);
 800776a:	f7ff ff35 	bl	80075d8 <pbuf_free>
    return NULL;
 800776e:	2400      	movs	r4, #0
 8007770:	e7bd      	b.n	80076ee <pbuf_alloc+0x52>
      q->type = type;
 8007772:	2303      	movs	r3, #3
 8007774:	7303      	strb	r3, [r0, #12]
      q->flags = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 800777a:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800777c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007780:	429e      	cmp	r6, r3
      r->next = q;
 8007782:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8007786:	d106      	bne.n	8007796 <pbuf_alloc+0xfa>
 8007788:	4643      	mov	r3, r8
 800778a:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800778e:	4651      	mov	r1, sl
 8007790:	4648      	mov	r0, r9
 8007792:	f006 fabb 	bl	800dd0c <iprintf>
      q->tot_len = (u16_t)rem_len;
 8007796:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8007798:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 800779c:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800779e:	bf28      	it	cs
 80077a0:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80077a4:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80077a6:	f105 0310 	add.w	r3, r5, #16
 80077aa:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80077ac:	079b      	lsls	r3, r3, #30
 80077ae:	d006      	beq.n	80077be <pbuf_alloc+0x122>
 80077b0:	4643      	mov	r3, r8
 80077b2:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80077b6:	4926      	ldr	r1, [pc, #152]	; (8007850 <pbuf_alloc+0x1b4>)
 80077b8:	4648      	mov	r0, r9
 80077ba:	f006 faa7 	bl	800dd0c <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80077be:	8962      	ldrh	r2, [r4, #10]
 80077c0:	6863      	ldr	r3, [r4, #4]
 80077c2:	4413      	add	r3, r2
 80077c4:	429f      	cmp	r7, r3
 80077c6:	d206      	bcs.n	80077d6 <pbuf_alloc+0x13a>
 80077c8:	4643      	mov	r3, r8
 80077ca:	f240 1255 	movw	r2, #341	; 0x155
 80077ce:	491f      	ldr	r1, [pc, #124]	; (800784c <pbuf_alloc+0x1b0>)
 80077d0:	4648      	mov	r0, r9
 80077d2:	f006 fa9b 	bl	800dd0c <iprintf>
      q->ref = 1;
 80077d6:	2301      	movs	r3, #1
 80077d8:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 80077da:	896b      	ldrh	r3, [r5, #10]
 80077dc:	46ab      	mov	fp, r5
 80077de:	1af6      	subs	r6, r6, r3
 80077e0:	e7b3      	b.n	800774a <pbuf_alloc+0xae>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80077e2:	f105 0013 	add.w	r0, r5, #19
 80077e6:	1cf3      	adds	r3, r6, #3
 80077e8:	f023 0303 	bic.w	r3, r3, #3
 80077ec:	f020 0003 	bic.w	r0, r0, #3
 80077f0:	4418      	add	r0, r3
 80077f2:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80077f4:	4298      	cmp	r0, r3
 80077f6:	d3ba      	bcc.n	800776e <pbuf_alloc+0xd2>
      p = (struct pbuf*)mem_malloc(alloc_len);
 80077f8:	f7ff fc8c 	bl	8007114 <mem_malloc>
    if (p == NULL) {
 80077fc:	4604      	mov	r4, r0
 80077fe:	2800      	cmp	r0, #0
 8007800:	d0b5      	beq.n	800776e <pbuf_alloc+0xd2>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8007802:	4405      	add	r5, r0
 8007804:	3513      	adds	r5, #19
    p->next = NULL;
 8007806:	2300      	movs	r3, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8007808:	f025 0503 	bic.w	r5, r5, #3
 800780c:	6045      	str	r5, [r0, #4]
    p->len = p->tot_len = length;
 800780e:	8106      	strh	r6, [r0, #8]
 8007810:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8007812:	6003      	str	r3, [r0, #0]
    p->type = type;
 8007814:	7303      	strb	r3, [r0, #12]
 8007816:	e79a      	b.n	800774e <pbuf_alloc+0xb2>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007818:	2007      	movs	r0, #7
 800781a:	f7ff fd5d 	bl	80072d8 <memp_malloc>
    if (p == NULL) {
 800781e:	4604      	mov	r4, r0
 8007820:	2800      	cmp	r0, #0
 8007822:	d0a4      	beq.n	800776e <pbuf_alloc+0xd2>
    p->payload = NULL;
 8007824:	2300      	movs	r3, #0
 8007826:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8007828:	8106      	strh	r6, [r0, #8]
 800782a:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 800782c:	6003      	str	r3, [r0, #0]
    p->type = type;
 800782e:	7307      	strb	r7, [r0, #12]
    break;
 8007830:	e78d      	b.n	800774e <pbuf_alloc+0xb2>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007832:	4b02      	ldr	r3, [pc, #8]	; (800783c <pbuf_alloc+0x1a0>)
 8007834:	4907      	ldr	r1, [pc, #28]	; (8007854 <pbuf_alloc+0x1b8>)
 8007836:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800783a:	e748      	b.n	80076ce <pbuf_alloc+0x32>
 800783c:	080100d1 	.word	0x080100d1
 8007840:	0800fe6c 	.word	0x0800fe6c
 8007844:	0800f3a7 	.word	0x0800f3a7
 8007848:	2000504c 	.word	0x2000504c
 800784c:	0800fe87 	.word	0x0800fe87
 8007850:	0800fecc 	.word	0x0800fecc
 8007854:	0800fef9 	.word	0x0800fef9
 8007858:	0800feb8 	.word	0x0800feb8

0800785c <pbuf_realloc>:
{
 800785c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007860:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007862:	4604      	mov	r4, r0
 8007864:	b930      	cbnz	r0, 8007874 <pbuf_realloc+0x18>
 8007866:	4b2e      	ldr	r3, [pc, #184]	; (8007920 <pbuf_realloc+0xc4>)
 8007868:	492e      	ldr	r1, [pc, #184]	; (8007924 <pbuf_realloc+0xc8>)
 800786a:	482f      	ldr	r0, [pc, #188]	; (8007928 <pbuf_realloc+0xcc>)
 800786c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8007870:	f006 fa4c 	bl	800dd0c <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8007874:	7b23      	ldrb	r3, [r4, #12]
 8007876:	2b03      	cmp	r3, #3
 8007878:	d906      	bls.n	8007888 <pbuf_realloc+0x2c>
 800787a:	4b29      	ldr	r3, [pc, #164]	; (8007920 <pbuf_realloc+0xc4>)
 800787c:	492b      	ldr	r1, [pc, #172]	; (800792c <pbuf_realloc+0xd0>)
 800787e:	482a      	ldr	r0, [pc, #168]	; (8007928 <pbuf_realloc+0xcc>)
 8007880:	f240 12f7 	movw	r2, #503	; 0x1f7
 8007884:	f006 fa42 	bl	800dd0c <iprintf>
  if (new_len >= p->tot_len) {
 8007888:	8926      	ldrh	r6, [r4, #8]
 800788a:	42ae      	cmp	r6, r5
 800788c:	d945      	bls.n	800791a <pbuf_realloc+0xbe>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800788e:	4f24      	ldr	r7, [pc, #144]	; (8007920 <pbuf_realloc+0xc4>)
 8007890:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8007938 <pbuf_realloc+0xdc>
 8007894:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8007928 <pbuf_realloc+0xcc>
  grow = new_len - p->tot_len;
 8007898:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 800789a:	8963      	ldrh	r3, [r4, #10]
 800789c:	429d      	cmp	r5, r3
 800789e:	d819      	bhi.n	80078d4 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80078a0:	7b22      	ldrb	r2, [r4, #12]
 80078a2:	2a00      	cmp	r2, #0
 80078a4:	d131      	bne.n	800790a <pbuf_realloc+0xae>
 80078a6:	429d      	cmp	r5, r3
 80078a8:	d02f      	beq.n	800790a <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80078aa:	7b63      	ldrb	r3, [r4, #13]
 80078ac:	079b      	lsls	r3, r3, #30
 80078ae:	d42c      	bmi.n	800790a <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80078b0:	6861      	ldr	r1, [r4, #4]
 80078b2:	1b09      	subs	r1, r1, r4
 80078b4:	4429      	add	r1, r5
 80078b6:	4620      	mov	r0, r4
 80078b8:	b289      	uxth	r1, r1
 80078ba:	f7ff fbb3 	bl	8007024 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80078be:	4604      	mov	r4, r0
 80078c0:	bb18      	cbnz	r0, 800790a <pbuf_realloc+0xae>
 80078c2:	4b17      	ldr	r3, [pc, #92]	; (8007920 <pbuf_realloc+0xc4>)
 80078c4:	491a      	ldr	r1, [pc, #104]	; (8007930 <pbuf_realloc+0xd4>)
 80078c6:	4818      	ldr	r0, [pc, #96]	; (8007928 <pbuf_realloc+0xcc>)
 80078c8:	f240 221d 	movw	r2, #541	; 0x21d
 80078cc:	f006 fa1e 	bl	800dd0c <iprintf>
  q->len = rem_len;
 80078d0:	8164      	strh	r4, [r4, #10]
 80078d2:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 80078d4:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80078d6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80078da:	429e      	cmp	r6, r3
    rem_len -= q->len;
 80078dc:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80078de:	dd06      	ble.n	80078ee <pbuf_realloc+0x92>
 80078e0:	463b      	mov	r3, r7
 80078e2:	f240 220b 	movw	r2, #523	; 0x20b
 80078e6:	4649      	mov	r1, r9
 80078e8:	4640      	mov	r0, r8
 80078ea:	f006 fa0f 	bl	800dd0c <iprintf>
    q->tot_len += (u16_t)grow;
 80078ee:	8923      	ldrh	r3, [r4, #8]
 80078f0:	4433      	add	r3, r6
 80078f2:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80078f4:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80078f6:	2c00      	cmp	r4, #0
 80078f8:	d1cf      	bne.n	800789a <pbuf_realloc+0x3e>
 80078fa:	463b      	mov	r3, r7
 80078fc:	f240 220f 	movw	r2, #527	; 0x20f
 8007900:	490c      	ldr	r1, [pc, #48]	; (8007934 <pbuf_realloc+0xd8>)
 8007902:	4640      	mov	r0, r8
 8007904:	f006 fa02 	bl	800dd0c <iprintf>
 8007908:	e7c7      	b.n	800789a <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 800790a:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800790c:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800790e:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8007910:	b108      	cbz	r0, 8007916 <pbuf_realloc+0xba>
    pbuf_free(q->next);
 8007912:	f7ff fe61 	bl	80075d8 <pbuf_free>
  q->next = NULL;
 8007916:	2300      	movs	r3, #0
 8007918:	6023      	str	r3, [r4, #0]
 800791a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800791e:	bf00      	nop
 8007920:	080100d1 	.word	0x080100d1
 8007924:	0801012d 	.word	0x0801012d
 8007928:	0800f3a7 	.word	0x0800f3a7
 800792c:	08010145 	.word	0x08010145
 8007930:	08010189 	.word	0x08010189
 8007934:	08010171 	.word	0x08010171
 8007938:	08010160 	.word	0x08010160

0800793c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800793c:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 800793e:	2200      	movs	r2, #0
 8007940:	b290      	uxth	r0, r2
 8007942:	3201      	adds	r2, #1
 8007944:	b903      	cbnz	r3, 8007948 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8007946:	4770      	bx	lr
    p = p->next;
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	e7f9      	b.n	8007940 <pbuf_clen+0x4>

0800794c <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800794c:	b158      	cbz	r0, 8007966 <pbuf_ref+0x1a>
    SYS_ARCH_INC(p->ref, 1);
 800794e:	89c3      	ldrh	r3, [r0, #14]
 8007950:	3301      	adds	r3, #1
 8007952:	b29b      	uxth	r3, r3
 8007954:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007956:	b933      	cbnz	r3, 8007966 <pbuf_ref+0x1a>
 8007958:	4b03      	ldr	r3, [pc, #12]	; (8007968 <pbuf_ref+0x1c>)
 800795a:	4904      	ldr	r1, [pc, #16]	; (800796c <pbuf_ref+0x20>)
 800795c:	4804      	ldr	r0, [pc, #16]	; (8007970 <pbuf_ref+0x24>)
 800795e:	f240 3239 	movw	r2, #825	; 0x339
 8007962:	f006 b9d3 	b.w	800dd0c <iprintf>
 8007966:	4770      	bx	lr
 8007968:	080100d1 	.word	0x080100d1
 800796c:	080101a5 	.word	0x080101a5
 8007970:	0800f3a7 	.word	0x0800f3a7

08007974 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007978:	4604      	mov	r4, r0
 800797a:	b100      	cbz	r0, 800797e <pbuf_cat+0xa>
 800797c:	b969      	cbnz	r1, 800799a <pbuf_cat+0x26>
 800797e:	4b15      	ldr	r3, [pc, #84]	; (80079d4 <pbuf_cat+0x60>)
 8007980:	4915      	ldr	r1, [pc, #84]	; (80079d8 <pbuf_cat+0x64>)
 8007982:	4816      	ldr	r0, [pc, #88]	; (80079dc <pbuf_cat+0x68>)
 8007984:	f240 324d 	movw	r2, #845	; 0x34d
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800798c:	f006 b9be 	b.w	800dd0c <iprintf>
    p->tot_len += t->tot_len;
 8007990:	8923      	ldrh	r3, [r4, #8]
 8007992:	8929      	ldrh	r1, [r5, #8]
 8007994:	440b      	add	r3, r1
 8007996:	8123      	strh	r3, [r4, #8]
 8007998:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 800799a:	6822      	ldr	r2, [r4, #0]
 800799c:	2a00      	cmp	r2, #0
 800799e:	d1f7      	bne.n	8007990 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80079a0:	8922      	ldrh	r2, [r4, #8]
 80079a2:	8963      	ldrh	r3, [r4, #10]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d006      	beq.n	80079b6 <pbuf_cat+0x42>
 80079a8:	4b0a      	ldr	r3, [pc, #40]	; (80079d4 <pbuf_cat+0x60>)
 80079aa:	490d      	ldr	r1, [pc, #52]	; (80079e0 <pbuf_cat+0x6c>)
 80079ac:	480b      	ldr	r0, [pc, #44]	; (80079dc <pbuf_cat+0x68>)
 80079ae:	f240 3255 	movw	r2, #853	; 0x355
 80079b2:	f006 f9ab 	bl	800dd0c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	b133      	cbz	r3, 80079c8 <pbuf_cat+0x54>
 80079ba:	4b06      	ldr	r3, [pc, #24]	; (80079d4 <pbuf_cat+0x60>)
 80079bc:	4909      	ldr	r1, [pc, #36]	; (80079e4 <pbuf_cat+0x70>)
 80079be:	4807      	ldr	r0, [pc, #28]	; (80079dc <pbuf_cat+0x68>)
 80079c0:	f240 3256 	movw	r2, #854	; 0x356
 80079c4:	f006 f9a2 	bl	800dd0c <iprintf>
  p->tot_len += t->tot_len;
 80079c8:	892a      	ldrh	r2, [r5, #8]
 80079ca:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 80079cc:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 80079ce:	4413      	add	r3, r2
 80079d0:	8123      	strh	r3, [r4, #8]
  p->next = t;
 80079d2:	bd70      	pop	{r4, r5, r6, pc}
 80079d4:	080100d1 	.word	0x080100d1
 80079d8:	0800ff38 	.word	0x0800ff38
 80079dc:	0800f3a7 	.word	0x0800f3a7
 80079e0:	0800ff6d 	.word	0x0800ff6d
 80079e4:	0800ff9a 	.word	0x0800ff9a

080079e8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80079e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ec:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80079ee:	4605      	mov	r5, r0
 80079f0:	b120      	cbz	r0, 80079fc <pbuf_copy+0x14>
 80079f2:	b119      	cbz	r1, 80079fc <pbuf_copy+0x14>
 80079f4:	8902      	ldrh	r2, [r0, #8]
 80079f6:	890b      	ldrh	r3, [r1, #8]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d20a      	bcs.n	8007a12 <pbuf_copy+0x2a>
 80079fc:	4b38      	ldr	r3, [pc, #224]	; (8007ae0 <pbuf_copy+0xf8>)
 80079fe:	4939      	ldr	r1, [pc, #228]	; (8007ae4 <pbuf_copy+0xfc>)
 8007a00:	f240 32bd 	movw	r2, #957	; 0x3bd
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007a04:	4838      	ldr	r0, [pc, #224]	; (8007ae8 <pbuf_copy+0x100>)
 8007a06:	f006 f981 	bl	800dd0c <iprintf>
 8007a0a:	f06f 000f 	mvn.w	r0, #15
 8007a0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a12:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007a16:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8007ae0 <pbuf_copy+0xf8>
 8007a1a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8007af8 <pbuf_copy+0x110>
 8007a1e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8007ae8 <pbuf_copy+0x100>
 8007a22:	465f      	mov	r7, fp
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007a24:	896e      	ldrh	r6, [r5, #10]
 8007a26:	8963      	ldrh	r3, [r4, #10]
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007a28:	6868      	ldr	r0, [r5, #4]
 8007a2a:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007a2c:	1bf6      	subs	r6, r6, r7
 8007a2e:	eba3 030b 	sub.w	r3, r3, fp
 8007a32:	429e      	cmp	r6, r3
      len = p_from->len - offset_from;
 8007a34:	bfac      	ite	ge
 8007a36:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 8007a38:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007a3a:	4632      	mov	r2, r6
 8007a3c:	4459      	add	r1, fp
 8007a3e:	4438      	add	r0, r7
 8007a40:	f006 f8a5 	bl	800db8e <memcpy>
    offset_to += len;
 8007a44:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007a46:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 8007a48:	b2bf      	uxth	r7, r7
    offset_from += len;
 8007a4a:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007a4c:	42bb      	cmp	r3, r7
    offset_from += len;
 8007a4e:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007a52:	d206      	bcs.n	8007a62 <pbuf_copy+0x7a>
 8007a54:	4643      	mov	r3, r8
 8007a56:	f240 32cd 	movw	r2, #973	; 0x3cd
 8007a5a:	4651      	mov	r1, sl
 8007a5c:	4648      	mov	r0, r9
 8007a5e:	f006 f955 	bl	800dd0c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007a62:	8963      	ldrh	r3, [r4, #10]
 8007a64:	455b      	cmp	r3, fp
 8007a66:	d206      	bcs.n	8007a76 <pbuf_copy+0x8e>
 8007a68:	4643      	mov	r3, r8
 8007a6a:	f240 32ce 	movw	r2, #974	; 0x3ce
 8007a6e:	491f      	ldr	r1, [pc, #124]	; (8007aec <pbuf_copy+0x104>)
 8007a70:	4648      	mov	r0, r9
 8007a72:	f006 f94b 	bl	800dd0c <iprintf>
    if (offset_from >= p_from->len) {
 8007a76:	8963      	ldrh	r3, [r4, #10]
 8007a78:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 8007a7a:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8007a7c:	bf9c      	itt	ls
 8007a7e:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8007a80:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 8007a84:	42bb      	cmp	r3, r7
 8007a86:	d11e      	bne.n	8007ac6 <pbuf_copy+0xde>
      p_to = p_to->next;
 8007a88:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007a8a:	b9dd      	cbnz	r5, 8007ac4 <pbuf_copy+0xdc>
 8007a8c:	b1bc      	cbz	r4, 8007abe <pbuf_copy+0xd6>
 8007a8e:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <pbuf_copy+0xf8>)
 8007a90:	4917      	ldr	r1, [pc, #92]	; (8007af0 <pbuf_copy+0x108>)
 8007a92:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8007a96:	e7b5      	b.n	8007a04 <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007a98:	8962      	ldrh	r2, [r4, #10]
 8007a9a:	8923      	ldrh	r3, [r4, #8]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d114      	bne.n	8007aca <pbuf_copy+0xe2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	b193      	cbz	r3, 8007aca <pbuf_copy+0xe2>
 8007aa4:	4b0e      	ldr	r3, [pc, #56]	; (8007ae0 <pbuf_copy+0xf8>)
 8007aa6:	f240 32de 	movw	r2, #990	; 0x3de
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007aaa:	4912      	ldr	r1, [pc, #72]	; (8007af4 <pbuf_copy+0x10c>)
 8007aac:	480e      	ldr	r0, [pc, #56]	; (8007ae8 <pbuf_copy+0x100>)
 8007aae:	f006 f92d 	bl	800dd0c <iprintf>
 8007ab2:	f06f 0005 	mvn.w	r0, #5
 8007ab6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007aba:	2c00      	cmp	r4, #0
 8007abc:	d1b2      	bne.n	8007a24 <pbuf_copy+0x3c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007abe:	4620      	mov	r0, r4
 8007ac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 8007ac4:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007ac6:	2c00      	cmp	r4, #0
 8007ac8:	d1e6      	bne.n	8007a98 <pbuf_copy+0xb0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007aca:	896a      	ldrh	r2, [r5, #10]
 8007acc:	892b      	ldrh	r3, [r5, #8]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d1f3      	bne.n	8007aba <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007ad2:	682b      	ldr	r3, [r5, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d0f0      	beq.n	8007aba <pbuf_copy+0xd2>
 8007ad8:	4b01      	ldr	r3, [pc, #4]	; (8007ae0 <pbuf_copy+0xf8>)
 8007ada:	f240 32e3 	movw	r2, #995	; 0x3e3
 8007ade:	e7e4      	b.n	8007aaa <pbuf_copy+0xc2>
 8007ae0:	080100d1 	.word	0x080100d1
 8007ae4:	0800ffaa 	.word	0x0800ffaa
 8007ae8:	0800f3a7 	.word	0x0800f3a7
 8007aec:	0800fff1 	.word	0x0800fff1
 8007af0:	0801000c 	.word	0x0801000c
 8007af4:	08010019 	.word	0x08010019
 8007af8:	0800ffda 	.word	0x0800ffda

08007afc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b00:	460f      	mov	r7, r1
 8007b02:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007b04:	4606      	mov	r6, r0
 8007b06:	b950      	cbnz	r0, 8007b1e <pbuf_copy_partial+0x22>
 8007b08:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <pbuf_copy_partial+0x7c>)
 8007b0a:	491c      	ldr	r1, [pc, #112]	; (8007b7c <pbuf_copy_partial+0x80>)
 8007b0c:	481c      	ldr	r0, [pc, #112]	; (8007b80 <pbuf_copy_partial+0x84>)
 8007b0e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007b12:	f006 f8fb 	bl	800dd0c <iprintf>
 8007b16:	4635      	mov	r5, r6
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8007b18:	4628      	mov	r0, r5
 8007b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007b1e:	b169      	cbz	r1, 8007b3c <pbuf_copy_partial+0x40>
 8007b20:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007b22:	f1b8 0f00 	cmp.w	r8, #0
 8007b26:	d0f7      	beq.n	8007b18 <pbuf_copy_partial+0x1c>
 8007b28:	2e00      	cmp	r6, #0
 8007b2a:	d0f5      	beq.n	8007b18 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8007b2c:	b17b      	cbz	r3, 8007b4e <pbuf_copy_partial+0x52>
 8007b2e:	8971      	ldrh	r1, [r6, #10]
 8007b30:	428b      	cmp	r3, r1
 8007b32:	d30c      	bcc.n	8007b4e <pbuf_copy_partial+0x52>
      offset -= p->len;
 8007b34:	1a5b      	subs	r3, r3, r1
 8007b36:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007b38:	6836      	ldr	r6, [r6, #0]
 8007b3a:	e7f2      	b.n	8007b22 <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007b3c:	4b0e      	ldr	r3, [pc, #56]	; (8007b78 <pbuf_copy_partial+0x7c>)
 8007b3e:	4911      	ldr	r1, [pc, #68]	; (8007b84 <pbuf_copy_partial+0x88>)
 8007b40:	480f      	ldr	r0, [pc, #60]	; (8007b80 <pbuf_copy_partial+0x84>)
 8007b42:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007b46:	f006 f8e1 	bl	800dd0c <iprintf>
 8007b4a:	463d      	mov	r5, r7
 8007b4c:	e7e4      	b.n	8007b18 <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 8007b4e:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007b50:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 8007b52:	1ae4      	subs	r4, r4, r3
 8007b54:	b2a4      	uxth	r4, r4
 8007b56:	4544      	cmp	r4, r8
 8007b58:	bf28      	it	cs
 8007b5a:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007b5c:	4622      	mov	r2, r4
 8007b5e:	4419      	add	r1, r3
 8007b60:	1978      	adds	r0, r7, r5
      copied_total += buf_copy_len;
 8007b62:	4425      	add	r5, r4
      len -= buf_copy_len;
 8007b64:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007b68:	f006 f811 	bl	800db8e <memcpy>
      copied_total += buf_copy_len;
 8007b6c:	b2ad      	uxth	r5, r5
      len -= buf_copy_len;
 8007b6e:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	e7e0      	b.n	8007b38 <pbuf_copy_partial+0x3c>
 8007b76:	bf00      	nop
 8007b78:	080100d1 	.word	0x080100d1
 8007b7c:	08010043 	.word	0x08010043
 8007b80:	0800f3a7 	.word	0x0800f3a7
 8007b84:	08010062 	.word	0x08010062

08007b88 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007b88:	4a11      	ldr	r2, [pc, #68]	; (8007bd0 <tcp_new_port+0x48>)
 8007b8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b8c:	8810      	ldrh	r0, [r2, #0]
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007b8e:	4e11      	ldr	r6, [pc, #68]	; (8007bd4 <tcp_new_port+0x4c>)
{
 8007b90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8007b94:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8007b98:	42a8      	cmp	r0, r5
 8007b9a:	bf1a      	itte	ne
 8007b9c:	3001      	addne	r0, #1
 8007b9e:	b280      	uxthne	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007ba0:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
 8007ba4:	2100      	movs	r1, #0
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007ba6:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 8007baa:	6824      	ldr	r4, [r4, #0]
 8007bac:	b924      	cbnz	r4, 8007bb8 <tcp_new_port+0x30>
 8007bae:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007bb0:	2904      	cmp	r1, #4
 8007bb2:	d1f8      	bne.n	8007ba6 <tcp_new_port+0x1e>
 8007bb4:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8007bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pcb->local_port == tcp_port) {
 8007bb8:	8ae7      	ldrh	r7, [r4, #22]
 8007bba:	4287      	cmp	r7, r0
 8007bbc:	d106      	bne.n	8007bcc <tcp_new_port+0x44>
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e8      	bne.n	8007b98 <tcp_new_port+0x10>
 8007bc6:	8010      	strh	r0, [r2, #0]
          return 0;
 8007bc8:	4618      	mov	r0, r3
 8007bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007bcc:	68e4      	ldr	r4, [r4, #12]
 8007bce:	e7ed      	b.n	8007bac <tcp_new_port+0x24>
 8007bd0:	200005b0 	.word	0x200005b0
 8007bd4:	080102c8 	.word	0x080102c8

08007bd8 <tcp_close_shutdown_fin>:
{
 8007bd8:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007bda:	4604      	mov	r4, r0
 8007bdc:	b930      	cbnz	r0, 8007bec <tcp_close_shutdown_fin+0x14>
 8007bde:	4b13      	ldr	r3, [pc, #76]	; (8007c2c <tcp_close_shutdown_fin+0x54>)
 8007be0:	4913      	ldr	r1, [pc, #76]	; (8007c30 <tcp_close_shutdown_fin+0x58>)
 8007be2:	4814      	ldr	r0, [pc, #80]	; (8007c34 <tcp_close_shutdown_fin+0x5c>)
 8007be4:	f240 124d 	movw	r2, #333	; 0x14d
 8007be8:	f006 f890 	bl	800dd0c <iprintf>
  switch (pcb->state) {
 8007bec:	7d23      	ldrb	r3, [r4, #20]
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d003      	beq.n	8007bfa <tcp_close_shutdown_fin+0x22>
 8007bf2:	2b07      	cmp	r3, #7
 8007bf4:	d00c      	beq.n	8007c10 <tcp_close_shutdown_fin+0x38>
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d108      	bne.n	8007c0c <tcp_close_shutdown_fin+0x34>
    err = tcp_send_fin(pcb);
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f002 fd7e 	bl	800a6fc <tcp_send_fin>
    if (err == ERR_OK) {
 8007c00:	b988      	cbnz	r0, 8007c26 <tcp_close_shutdown_fin+0x4e>
      pcb->state = FIN_WAIT_1;
 8007c02:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 8007c04:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8007c06:	4620      	mov	r0, r4
 8007c08:	f002 fdd0 	bl	800a7ac <tcp_output>
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 8007c10:	4620      	mov	r0, r4
 8007c12:	f002 fd73 	bl	800a6fc <tcp_send_fin>
    if (err == ERR_OK) {
 8007c16:	b930      	cbnz	r0, 8007c26 <tcp_close_shutdown_fin+0x4e>
      pcb->state = LAST_ACK;
 8007c18:	2309      	movs	r3, #9
 8007c1a:	e7f3      	b.n	8007c04 <tcp_close_shutdown_fin+0x2c>
    pcb->flags |= TF_CLOSEPEND;
 8007c1c:	7ea3      	ldrb	r3, [r4, #26]
 8007c1e:	f043 0308 	orr.w	r3, r3, #8
 8007c22:	76a3      	strb	r3, [r4, #26]
 8007c24:	e7f2      	b.n	8007c0c <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 8007c26:	1c43      	adds	r3, r0, #1
 8007c28:	d0f8      	beq.n	8007c1c <tcp_close_shutdown_fin+0x44>
}
 8007c2a:	bd10      	pop	{r4, pc}
 8007c2c:	08010236 	.word	0x08010236
 8007c30:	08010265 	.word	0x08010265
 8007c34:	0800f3a7 	.word	0x0800f3a7

08007c38 <tcp_init>:
{
 8007c38:	4770      	bx	lr
	...

08007c3c <tcp_bind>:
{
 8007c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8007c3e:	4d1e      	ldr	r5, [pc, #120]	; (8007cb8 <tcp_bind+0x7c>)
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8007c40:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 8007c42:	2900      	cmp	r1, #0
 8007c44:	bf18      	it	ne
 8007c46:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8007c48:	b140      	cbz	r0, 8007c5c <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007c4a:	7d03      	ldrb	r3, [r0, #20]
 8007c4c:	b14b      	cbz	r3, 8007c62 <tcp_bind+0x26>
 8007c4e:	4b1b      	ldr	r3, [pc, #108]	; (8007cbc <tcp_bind+0x80>)
 8007c50:	491b      	ldr	r1, [pc, #108]	; (8007cc0 <tcp_bind+0x84>)
 8007c52:	481c      	ldr	r0, [pc, #112]	; (8007cc4 <tcp_bind+0x88>)
 8007c54:	f44f 7211 	mov.w	r2, #580	; 0x244
 8007c58:	f006 f858 	bl	800dd0c <iprintf>
    return ERR_VAL;
 8007c5c:	f06f 0005 	mvn.w	r0, #5
}
 8007c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 8007c62:	b932      	cbnz	r2, 8007c72 <tcp_bind+0x36>
    port = tcp_new_port();
 8007c64:	f7ff ff90 	bl	8007b88 <tcp_new_port>
    if (port == 0) {
 8007c68:	4602      	mov	r2, r0
 8007c6a:	b950      	cbnz	r0, 8007c82 <tcp_bind+0x46>
      return ERR_BUF;
 8007c6c:	f06f 0001 	mvn.w	r0, #1
 8007c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007c72:	4f15      	ldr	r7, [pc, #84]	; (8007cc8 <tcp_bind+0x8c>)
 8007c74:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8007c78:	6808      	ldr	r0, [r1, #0]
 8007c7a:	b970      	cbnz	r0, 8007c9a <tcp_bind+0x5e>
    for (i = 0; i < max_pcb_list; i++) {
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d1f8      	bne.n	8007c74 <tcp_bind+0x38>
  if (!ip_addr_isany(ipaddr)) {
 8007c82:	682b      	ldr	r3, [r5, #0]
 8007c84:	b103      	cbz	r3, 8007c88 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007c86:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007c88:	4b10      	ldr	r3, [pc, #64]	; (8007ccc <tcp_bind+0x90>)
  pcb->local_port = port;
 8007c8a:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	60e2      	str	r2, [r4, #12]
 8007c90:	601c      	str	r4, [r3, #0]
 8007c92:	f003 f8ab 	bl	800adec <tcp_timer_needed>
  return ERR_OK;
 8007c96:	2000      	movs	r0, #0
 8007c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 8007c9a:	8ac1      	ldrh	r1, [r0, #22]
 8007c9c:	4291      	cmp	r1, r2
 8007c9e:	d105      	bne.n	8007cac <tcp_bind+0x70>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007ca0:	6806      	ldr	r6, [r0, #0]
 8007ca2:	b12e      	cbz	r6, 8007cb0 <tcp_bind+0x74>
                ip_addr_isany(ipaddr) ||
 8007ca4:	6829      	ldr	r1, [r5, #0]
 8007ca6:	b119      	cbz	r1, 8007cb0 <tcp_bind+0x74>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007ca8:	428e      	cmp	r6, r1
 8007caa:	d001      	beq.n	8007cb0 <tcp_bind+0x74>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007cac:	68c0      	ldr	r0, [r0, #12]
 8007cae:	e7e4      	b.n	8007c7a <tcp_bind+0x3e>
              return ERR_USE;
 8007cb0:	f06f 0007 	mvn.w	r0, #7
 8007cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	0800f988 	.word	0x0800f988
 8007cbc:	08010236 	.word	0x08010236
 8007cc0:	080101f5 	.word	0x080101f5
 8007cc4:	0800f3a7 	.word	0x0800f3a7
 8007cc8:	080102c8 	.word	0x080102c8
 8007ccc:	20005060 	.word	0x20005060

08007cd0 <tcp_listen_with_backlog_and_err>:
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007cd0:	7d03      	ldrb	r3, [r0, #20]
{
 8007cd2:	b570      	push	{r4, r5, r6, lr}
 8007cd4:	4605      	mov	r5, r0
 8007cd6:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007cd8:	b16b      	cbz	r3, 8007cf6 <tcp_listen_with_backlog_and_err+0x26>
 8007cda:	4b23      	ldr	r3, [pc, #140]	; (8007d68 <tcp_listen_with_backlog_and_err+0x98>)
 8007cdc:	4923      	ldr	r1, [pc, #140]	; (8007d6c <tcp_listen_with_backlog_and_err+0x9c>)
 8007cde:	4824      	ldr	r0, [pc, #144]	; (8007d70 <tcp_listen_with_backlog_and_err+0xa0>)
 8007ce0:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8007ce4:	f006 f812 	bl	800dd0c <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 8007ce8:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007cea:	f06f 030e 	mvn.w	r3, #14
  if (err != NULL) {
 8007cee:	b106      	cbz	r6, 8007cf2 <tcp_listen_with_backlog_and_err+0x22>
    *err = res;
 8007cf0:	7033      	strb	r3, [r6, #0]
}
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	bd70      	pop	{r4, r5, r6, pc}
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007cf6:	2002      	movs	r0, #2
 8007cf8:	f7ff faee 	bl	80072d8 <memp_malloc>
  if (lpcb == NULL) {
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d02f      	beq.n	8007d62 <tcp_listen_with_backlog_and_err+0x92>
  lpcb->callback_arg = pcb->callback_arg;
 8007d02:	692b      	ldr	r3, [r5, #16]
 8007d04:	6103      	str	r3, [r0, #16]
  lpcb->state = LISTEN;
 8007d06:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 8007d08:	8aeb      	ldrh	r3, [r5, #22]
 8007d0a:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8007d0c:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 8007d0e:	7d6a      	ldrb	r2, [r5, #21]
 8007d10:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8007d12:	7a2a      	ldrb	r2, [r5, #8]
 8007d14:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8007d16:	7aaa      	ldrb	r2, [r5, #10]
 8007d18:	7282      	strb	r2, [r0, #10]
  lpcb->tos = pcb->tos;
 8007d1a:	7a6a      	ldrb	r2, [r5, #9]
 8007d1c:	7242      	strb	r2, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007d1e:	682a      	ldr	r2, [r5, #0]
 8007d20:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8007d22:	b13b      	cbz	r3, 8007d34 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007d24:	4a13      	ldr	r2, [pc, #76]	; (8007d74 <tcp_listen_with_backlog_and_err+0xa4>)
 8007d26:	6813      	ldr	r3, [r2, #0]
 8007d28:	429d      	cmp	r5, r3
 8007d2a:	d112      	bne.n	8007d52 <tcp_listen_with_backlog_and_err+0x82>
 8007d2c:	68eb      	ldr	r3, [r5, #12]
 8007d2e:	6013      	str	r3, [r2, #0]
 8007d30:	2300      	movs	r3, #0
 8007d32:	60eb      	str	r3, [r5, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 8007d34:	4629      	mov	r1, r5
 8007d36:	2001      	movs	r0, #1
 8007d38:	f7ff faea 	bl	8007310 <memp_free>
  lpcb->accept = tcp_accept_null;
 8007d3c:	4b0e      	ldr	r3, [pc, #56]	; (8007d78 <tcp_listen_with_backlog_and_err+0xa8>)
 8007d3e:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007d40:	4b0e      	ldr	r3, [pc, #56]	; (8007d7c <tcp_listen_with_backlog_and_err+0xac>)
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	60e2      	str	r2, [r4, #12]
 8007d46:	601c      	str	r4, [r3, #0]
 8007d48:	f003 f850 	bl	800adec <tcp_timer_needed>
  res = ERR_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	e7ce      	b.n	8007cee <tcp_listen_with_backlog_and_err+0x1e>
 8007d50:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d0ec      	beq.n	8007d30 <tcp_listen_with_backlog_and_err+0x60>
 8007d56:	68da      	ldr	r2, [r3, #12]
 8007d58:	4295      	cmp	r5, r2
 8007d5a:	d1f9      	bne.n	8007d50 <tcp_listen_with_backlog_and_err+0x80>
 8007d5c:	68ea      	ldr	r2, [r5, #12]
 8007d5e:	60da      	str	r2, [r3, #12]
 8007d60:	e7e6      	b.n	8007d30 <tcp_listen_with_backlog_and_err+0x60>
    res = ERR_MEM;
 8007d62:	f04f 33ff 	mov.w	r3, #4294967295
 8007d66:	e7c2      	b.n	8007cee <tcp_listen_with_backlog_and_err+0x1e>
 8007d68:	08010236 	.word	0x08010236
 8007d6c:	080102a5 	.word	0x080102a5
 8007d70:	0800f3a7 	.word	0x0800f3a7
 8007d74:	20005060 	.word	0x20005060
 8007d78:	080087af 	.word	0x080087af
 8007d7c:	2000505c 	.word	0x2000505c

08007d80 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8007d80:	2200      	movs	r2, #0
 8007d82:	f7ff bfa5 	b.w	8007cd0 <tcp_listen_with_backlog_and_err>
	...

08007d88 <tcp_update_rcv_ann_wnd>:
{
 8007d88:	b538      	push	{r3, r4, r5, lr}
 8007d8a:	4604      	mov	r4, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007d8c:	8d01      	ldrh	r1, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007d8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007d90:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007d92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d94:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007d96:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007d9a:	4428      	add	r0, r5
 8007d9c:	bf94      	ite	ls
 8007d9e:	1a82      	subls	r2, r0, r2
 8007da0:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 8007da4:	2a00      	cmp	r2, #0
 8007da6:	db01      	blt.n	8007dac <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007da8:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007dac:	1aea      	subs	r2, r5, r3
 8007dae:	2a00      	cmp	r2, #0
 8007db0:	dd02      	ble.n	8007db8 <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 8007db2:	2000      	movs	r0, #0
 8007db4:	8560      	strh	r0, [r4, #42]	; 0x2a
 8007db6:	bd38      	pop	{r3, r4, r5, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007db8:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007dba:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8007dbe:	d306      	bcc.n	8007dce <tcp_update_rcv_ann_wnd+0x46>
 8007dc0:	4b04      	ldr	r3, [pc, #16]	; (8007dd4 <tcp_update_rcv_ann_wnd+0x4c>)
 8007dc2:	4905      	ldr	r1, [pc, #20]	; (8007dd8 <tcp_update_rcv_ann_wnd+0x50>)
 8007dc4:	4805      	ldr	r0, [pc, #20]	; (8007ddc <tcp_update_rcv_ann_wnd+0x54>)
 8007dc6:	f44f 7242 	mov.w	r2, #776	; 0x308
 8007dca:	f005 ff9f 	bl	800dd0c <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007dce:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8007dd0:	2000      	movs	r0, #0
}
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
 8007dd4:	08010236 	.word	0x08010236
 8007dd8:	0801052c 	.word	0x0801052c
 8007ddc:	0800f3a7 	.word	0x0800f3a7

08007de0 <tcp_recved>:
{
 8007de0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007de2:	7d03      	ldrb	r3, [r0, #20]
 8007de4:	2b01      	cmp	r3, #1
{
 8007de6:	4604      	mov	r4, r0
 8007de8:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007dea:	d106      	bne.n	8007dfa <tcp_recved+0x1a>
 8007dec:	4b17      	ldr	r3, [pc, #92]	; (8007e4c <tcp_recved+0x6c>)
 8007dee:	4918      	ldr	r1, [pc, #96]	; (8007e50 <tcp_recved+0x70>)
 8007df0:	4818      	ldr	r0, [pc, #96]	; (8007e54 <tcp_recved+0x74>)
 8007df2:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007df6:	f005 ff89 	bl	800dd0c <iprintf>
  pcb->rcv_wnd += len;
 8007dfa:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8007dfc:	4429      	add	r1, r5
 8007dfe:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8007e00:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 8007e04:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8007e06:	d911      	bls.n	8007e2c <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007e08:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8007e0c:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f7ff ffba 	bl	8007d88 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007e14:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8007e18:	db17      	blt.n	8007e4a <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 8007e1a:	7ea3      	ldrb	r3, [r4, #26]
 8007e1c:	f043 0302 	orr.w	r3, r3, #2
 8007e20:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8007e22:	4620      	mov	r0, r4
}
 8007e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 8007e28:	f002 bcc0 	b.w	800a7ac <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 8007e2c:	2900      	cmp	r1, #0
 8007e2e:	d1ee      	bne.n	8007e0e <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8007e30:	7d23      	ldrb	r3, [r4, #20]
 8007e32:	2b07      	cmp	r3, #7
 8007e34:	d0e8      	beq.n	8007e08 <tcp_recved+0x28>
 8007e36:	2b09      	cmp	r3, #9
 8007e38:	d0e6      	beq.n	8007e08 <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8007e3a:	4b04      	ldr	r3, [pc, #16]	; (8007e4c <tcp_recved+0x6c>)
 8007e3c:	4906      	ldr	r1, [pc, #24]	; (8007e58 <tcp_recved+0x78>)
 8007e3e:	4805      	ldr	r0, [pc, #20]	; (8007e54 <tcp_recved+0x74>)
 8007e40:	f240 322d 	movw	r2, #813	; 0x32d
 8007e44:	f005 ff62 	bl	800dd0c <iprintf>
 8007e48:	e7e1      	b.n	8007e0e <tcp_recved+0x2e>
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	08010236 	.word	0x08010236
 8007e50:	0801036c 	.word	0x0801036c
 8007e54:	0800f3a7 	.word	0x0800f3a7
 8007e58:	08010392 	.word	0x08010392

08007e5c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007e5c:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8007e5e:	4604      	mov	r4, r0
 8007e60:	b148      	cbz	r0, 8007e76 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8007e62:	6840      	ldr	r0, [r0, #4]
 8007e64:	b108      	cbz	r0, 8007e6a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8007e66:	f7ff fbb7 	bl	80075d8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	2003      	movs	r0, #3
  }
}
 8007e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8007e72:	f7ff ba4d 	b.w	8007310 <memp_free>
 8007e76:	bd10      	pop	{r4, pc}

08007e78 <tcp_segs_free>:
{
 8007e78:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8007e7a:	b900      	cbnz	r0, 8007e7e <tcp_segs_free+0x6>
}
 8007e7c:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8007e7e:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8007e80:	f7ff ffec 	bl	8007e5c <tcp_seg_free>
    seg = next;
 8007e84:	4620      	mov	r0, r4
 8007e86:	e7f8      	b.n	8007e7a <tcp_segs_free+0x2>

08007e88 <tcp_setprio>:
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  pcb->prio = prio;
 8007e88:	7541      	strb	r1, [r0, #21]
 8007e8a:	4770      	bx	lr

08007e8c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007e90:	2003      	movs	r0, #3
 8007e92:	f7ff fa21 	bl	80072d8 <memp_malloc>
  if (cseg == NULL) {
 8007e96:	4605      	mov	r5, r0
 8007e98:	b160      	cbz	r0, 8007eb4 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	462b      	mov	r3, r5
 8007e9e:	f104 0210 	add.w	r2, r4, #16
 8007ea2:	f850 1b04 	ldr.w	r1, [r0], #4
 8007ea6:	f843 1b04 	str.w	r1, [r3], #4
 8007eaa:	4290      	cmp	r0, r2
 8007eac:	d1f9      	bne.n	8007ea2 <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 8007eae:	6868      	ldr	r0, [r5, #4]
 8007eb0:	f7ff fd4c 	bl	800794c <pbuf_ref>
  return cseg;
}
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}

08007eb8 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007eb8:	b100      	cbz	r0, 8007ebc <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8007eba:	6101      	str	r1, [r0, #16]
 8007ebc:	4770      	bx	lr
	...

08007ec0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	b158      	cbz	r0, 8007ee0 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007ec8:	7d03      	ldrb	r3, [r0, #20]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d106      	bne.n	8007edc <tcp_recv+0x1c>
 8007ece:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <tcp_recv+0x24>)
 8007ed0:	4905      	ldr	r1, [pc, #20]	; (8007ee8 <tcp_recv+0x28>)
 8007ed2:	4806      	ldr	r0, [pc, #24]	; (8007eec <tcp_recv+0x2c>)
 8007ed4:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8007ed8:	f005 ff18 	bl	800dd0c <iprintf>
    pcb->recv = recv;
 8007edc:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8007ee0:	bd38      	pop	{r3, r4, r5, pc}
 8007ee2:	bf00      	nop
 8007ee4:	08010236 	.word	0x08010236
 8007ee8:	08010345 	.word	0x08010345
 8007eec:	0800f3a7 	.word	0x0800f3a7

08007ef0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	b150      	cbz	r0, 8007f0e <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007ef8:	7d03      	ldrb	r3, [r0, #20]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d106      	bne.n	8007f0c <tcp_sent+0x1c>
 8007efe:	4b04      	ldr	r3, [pc, #16]	; (8007f10 <tcp_sent+0x20>)
 8007f00:	4904      	ldr	r1, [pc, #16]	; (8007f14 <tcp_sent+0x24>)
 8007f02:	4805      	ldr	r0, [pc, #20]	; (8007f18 <tcp_sent+0x28>)
 8007f04:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8007f08:	f005 ff00 	bl	800dd0c <iprintf>
    pcb->sent = sent;
 8007f0c:	67e5      	str	r5, [r4, #124]	; 0x7c
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	08010236 	.word	0x08010236
 8007f14:	080103b3 	.word	0x080103b3
 8007f18:	0800f3a7 	.word	0x0800f3a7

08007f1c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8007f20:	4604      	mov	r4, r0
 8007f22:	b158      	cbz	r0, 8007f3c <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007f24:	7d03      	ldrb	r3, [r0, #20]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d106      	bne.n	8007f38 <tcp_err+0x1c>
 8007f2a:	4b05      	ldr	r3, [pc, #20]	; (8007f40 <tcp_err+0x24>)
 8007f2c:	4905      	ldr	r1, [pc, #20]	; (8007f44 <tcp_err+0x28>)
 8007f2e:	4806      	ldr	r0, [pc, #24]	; (8007f48 <tcp_err+0x2c>)
 8007f30:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8007f34:	f005 feea 	bl	800dd0c <iprintf>
    pcb->errf = err;
 8007f38:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8007f3c:	bd38      	pop	{r3, r4, r5, pc}
 8007f3e:	bf00      	nop
 8007f40:	08010236 	.word	0x08010236
 8007f44:	08010271 	.word	0x08010271
 8007f48:	0800f3a7 	.word	0x0800f3a7

08007f4c <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007f4c:	b118      	cbz	r0, 8007f56 <tcp_accept+0xa>
 8007f4e:	7d03      	ldrb	r3, [r0, #20]
 8007f50:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 8007f52:	bf08      	it	eq
 8007f54:	6181      	streq	r1, [r0, #24]
 8007f56:	4770      	bx	lr

08007f58 <tcp_poll>:
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007f58:	7d03      	ldrb	r3, [r0, #20]
 8007f5a:	2b01      	cmp	r3, #1
{
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	4604      	mov	r4, r0
 8007f60:	460e      	mov	r6, r1
 8007f62:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007f64:	d106      	bne.n	8007f74 <tcp_poll+0x1c>
 8007f66:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <tcp_poll+0x24>)
 8007f68:	4905      	ldr	r1, [pc, #20]	; (8007f80 <tcp_poll+0x28>)
 8007f6a:	4806      	ldr	r0, [pc, #24]	; (8007f84 <tcp_poll+0x2c>)
 8007f6c:	f240 7203 	movw	r2, #1795	; 0x703
 8007f70:	f005 fecc 	bl	800dd0c <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007f74:	7725      	strb	r5, [r4, #28]
  pcb->poll = poll;
 8007f76:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	08010236 	.word	0x08010236
 8007f80:	08010327 	.word	0x08010327
 8007f84:	0800f3a7 	.word	0x0800f3a7

08007f88 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007f88:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8007f8a:	7d03      	ldrb	r3, [r0, #20]
 8007f8c:	2b01      	cmp	r3, #1
{
 8007f8e:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8007f90:	d919      	bls.n	8007fc6 <tcp_pcb_purge+0x3e>
 8007f92:	2b0a      	cmp	r3, #10
 8007f94:	d017      	beq.n	8007fc6 <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007f96:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8007f98:	b118      	cbz	r0, 8007fa2 <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007f9a:	f7ff fb1d 	bl	80075d8 <pbuf_free>
      pcb->refused_data = NULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8007fa2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007fa4:	f7ff ff68 	bl	8007e78 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007fa8:	2500      	movs	r5, #0
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007fae:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007fb0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->ooseq = NULL;
 8007fb2:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 8007fb4:	f7ff ff60 	bl	8007e78 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007fb8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007fba:	f7ff ff5d 	bl	8007e78 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007fbe:	66a5      	str	r5, [r4, #104]	; 0x68
 8007fc0:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007fc2:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}

08007fc8 <tcp_slowtmr>:
{
 8007fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8007fcc:	4eb0      	ldr	r6, [pc, #704]	; (8008290 <tcp_slowtmr+0x2c8>)
      tcp_active_pcbs_changed = 0;
 8007fce:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 80082c4 <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 8007fd2:	6833      	ldr	r3, [r6, #0]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 8007fd8:	4bae      	ldr	r3, [pc, #696]	; (8008294 <tcp_slowtmr+0x2cc>)
 8007fda:	781a      	ldrb	r2, [r3, #0]
{
 8007fdc:	b085      	sub	sp, #20
  ++tcp_timer_ctr;
 8007fde:	3201      	adds	r2, #1
 8007fe0:	701a      	strb	r2, [r3, #0]
 8007fe2:	9302      	str	r3, [sp, #8]
  pcb = tcp_active_pcbs;
 8007fe4:	4fac      	ldr	r7, [pc, #688]	; (8008298 <tcp_slowtmr+0x2d0>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007fe6:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 80082c8 <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 8007fea:	683c      	ldr	r4, [r7, #0]
  prev = NULL;
 8007fec:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8007ff0:	b96c      	cbnz	r4, 800800e <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 8007ff2:	4faa      	ldr	r7, [pc, #680]	; (800829c <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007ff4:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 80082c8 <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 8007ff8:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007ffa:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 80082cc <tcp_slowtmr+0x304>
 8007ffe:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 80082a4 <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 8008002:	2d00      	cmp	r5, #0
 8008004:	f040 8185 	bne.w	8008312 <tcp_slowtmr+0x34a>
}
 8008008:	b005      	add	sp, #20
 800800a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800800e:	7d23      	ldrb	r3, [r4, #20]
 8008010:	b933      	cbnz	r3, 8008020 <tcp_slowtmr+0x58>
 8008012:	464b      	mov	r3, r9
 8008014:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8008018:	49a1      	ldr	r1, [pc, #644]	; (80082a0 <tcp_slowtmr+0x2d8>)
 800801a:	48a2      	ldr	r0, [pc, #648]	; (80082a4 <tcp_slowtmr+0x2dc>)
 800801c:	f005 fe76 	bl	800dd0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008020:	7d23      	ldrb	r3, [r4, #20]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d106      	bne.n	8008034 <tcp_slowtmr+0x6c>
 8008026:	464b      	mov	r3, r9
 8008028:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800802c:	499e      	ldr	r1, [pc, #632]	; (80082a8 <tcp_slowtmr+0x2e0>)
 800802e:	489d      	ldr	r0, [pc, #628]	; (80082a4 <tcp_slowtmr+0x2dc>)
 8008030:	f005 fe6c 	bl	800dd0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008034:	7d23      	ldrb	r3, [r4, #20]
 8008036:	2b0a      	cmp	r3, #10
 8008038:	d106      	bne.n	8008048 <tcp_slowtmr+0x80>
 800803a:	464b      	mov	r3, r9
 800803c:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8008040:	499a      	ldr	r1, [pc, #616]	; (80082ac <tcp_slowtmr+0x2e4>)
 8008042:	4898      	ldr	r0, [pc, #608]	; (80082a4 <tcp_slowtmr+0x2dc>)
 8008044:	f005 fe62 	bl	800dd0c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008048:	9b02      	ldr	r3, [sp, #8]
 800804a:	7f62      	ldrb	r2, [r4, #29]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	429a      	cmp	r2, r3
 8008050:	d104      	bne.n	800805c <tcp_slowtmr+0x94>
      pcb = pcb->next;
 8008052:	68e5      	ldr	r5, [r4, #12]
 8008054:	4644      	mov	r4, r8
      continue;
 8008056:	46a0      	mov	r8, r4
 8008058:	462c      	mov	r4, r5
 800805a:	e7c9      	b.n	8007ff0 <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800805c:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800805e:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008060:	2902      	cmp	r1, #2
 8008062:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8008066:	d102      	bne.n	800806e <tcp_slowtmr+0xa6>
 8008068:	2a05      	cmp	r2, #5
 800806a:	f200 80e6 	bhi.w	800823a <tcp_slowtmr+0x272>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800806e:	2a0b      	cmp	r2, #11
 8008070:	f200 80e3 	bhi.w	800823a <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 8008074:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8008078:	f1bb 0f00 	cmp.w	fp, #0
 800807c:	f000 80a6 	beq.w	80081cc <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8008080:	488b      	ldr	r0, [pc, #556]	; (80082b0 <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 8008082:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8008086:	4483      	add	fp, r0
 8008088:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 800808c:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 800808e:	bf84      	itt	hi
 8008090:	3301      	addhi	r3, #1
 8008092:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8008096:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800809a:	4293      	cmp	r3, r2
 800809c:	f080 8085 	bcs.w	80081aa <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 80080a0:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 80080a4:	7d23      	ldrb	r3, [r4, #20]
 80080a6:	2b06      	cmp	r3, #6
 80080a8:	d10b      	bne.n	80080c2 <tcp_slowtmr+0xfa>
      if (pcb->flags & TF_RXCLOSED) {
 80080aa:	7ea2      	ldrb	r2, [r4, #26]
 80080ac:	06d2      	lsls	r2, r2, #27
 80080ae:	d508      	bpl.n	80080c2 <tcp_slowtmr+0xfa>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80080b0:	6832      	ldr	r2, [r6, #0]
 80080b2:	6a21      	ldr	r1, [r4, #32]
 80080b4:	1a52      	subs	r2, r2, r1
 80080b6:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 80080b8:	bf84      	itt	hi
 80080ba:	f10b 0b01 	addhi.w	fp, fp, #1
 80080be:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80080c2:	7a25      	ldrb	r5, [r4, #8]
 80080c4:	f015 0508 	ands.w	r5, r5, #8
 80080c8:	d019      	beq.n	80080fe <tcp_slowtmr+0x136>
 80080ca:	2b04      	cmp	r3, #4
 80080cc:	d002      	beq.n	80080d4 <tcp_slowtmr+0x10c>
       ((pcb->state == ESTABLISHED) ||
 80080ce:	2b07      	cmp	r3, #7
 80080d0:	f040 80c8 	bne.w	8008264 <tcp_slowtmr+0x29c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80080d4:	6831      	ldr	r1, [r6, #0]
 80080d6:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80080d8:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80080dc:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80080de:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 80080e2:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 80080e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080ea:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80080ee:	4291      	cmp	r1, r2
 80080f0:	f240 80a6 	bls.w	8008240 <tcp_slowtmr+0x278>
        ++pcb_remove;
 80080f4:	f10b 0b01 	add.w	fp, fp, #1
 80080f8:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 80080fc:	2501      	movs	r5, #1
    if (pcb->ooseq != NULL &&
 80080fe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008100:	b168      	cbz	r0, 800811e <tcp_slowtmr+0x156>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8008102:	6833      	ldr	r3, [r6, #0]
 8008104:	6a22      	ldr	r2, [r4, #32]
 8008106:	1a9a      	subs	r2, r3, r2
 8008108:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800810c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8008110:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8008114:	d303      	bcc.n	800811e <tcp_slowtmr+0x156>
      tcp_segs_free(pcb->ooseq);
 8008116:	f7ff feaf 	bl	8007e78 <tcp_segs_free>
      pcb->ooseq = NULL;
 800811a:	2300      	movs	r3, #0
 800811c:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 800811e:	7d23      	ldrb	r3, [r4, #20]
 8008120:	2b03      	cmp	r3, #3
 8008122:	f040 80a1 	bne.w	8008268 <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008126:	6833      	ldr	r3, [r6, #0]
 8008128:	6a22      	ldr	r2, [r4, #32]
 800812a:	1a9b      	subs	r3, r3, r2
 800812c:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800812e:	d803      	bhi.n	8008138 <tcp_slowtmr+0x170>
    if (pcb_remove) {
 8008130:	f1bb 0f00 	cmp.w	fp, #0
 8008134:	f000 80cc 	beq.w	80082d0 <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 8008138:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800813a:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800813e:	f7ff ff23 	bl	8007f88 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008142:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8008144:	f1b8 0f00 	cmp.w	r8, #0
 8008148:	f000 8096 	beq.w	8008278 <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800814c:	429c      	cmp	r4, r3
 800814e:	d106      	bne.n	800815e <tcp_slowtmr+0x196>
 8008150:	464b      	mov	r3, r9
 8008152:	f240 4289 	movw	r2, #1161	; 0x489
 8008156:	4957      	ldr	r1, [pc, #348]	; (80082b4 <tcp_slowtmr+0x2ec>)
 8008158:	4852      	ldr	r0, [pc, #328]	; (80082a4 <tcp_slowtmr+0x2dc>)
 800815a:	f005 fdd7 	bl	800dd0c <iprintf>
        prev->next = pcb->next;
 800815e:	68e3      	ldr	r3, [r4, #12]
 8008160:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 8008164:	b14d      	cbz	r5, 800817a <tcp_slowtmr+0x1b2>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008166:	8b23      	ldrh	r3, [r4, #24]
 8008168:	9301      	str	r3, [sp, #4]
 800816a:	8ae3      	ldrh	r3, [r4, #22]
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	4622      	mov	r2, r4
 8008170:	1d23      	adds	r3, r4, #4
 8008172:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008174:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008176:	f002 fc97 	bl	800aaa8 <tcp_rst>
      err_arg = pcb->callback_arg;
 800817a:	6923      	ldr	r3, [r4, #16]
 800817c:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800817e:	4621      	mov	r1, r4
 8008180:	2001      	movs	r0, #1
      pcb = pcb->next;
 8008182:	68e5      	ldr	r5, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8008184:	f7ff f8c4 	bl	8007310 <memp_free>
      tcp_active_pcbs_changed = 0;
 8008188:	2200      	movs	r2, #0
 800818a:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800818e:	f1bb 0f00 	cmp.w	fp, #0
 8008192:	d004      	beq.n	800819e <tcp_slowtmr+0x1d6>
 8008194:	9b03      	ldr	r3, [sp, #12]
 8008196:	f06f 010c 	mvn.w	r1, #12
 800819a:	4618      	mov	r0, r3
 800819c:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 800819e:	f89a 3000 	ldrb.w	r3, [sl]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f43f af56 	beq.w	8008054 <tcp_slowtmr+0x8c>
 80081a8:	e71c      	b.n	8007fe4 <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80081aa:	4620      	mov	r0, r4
 80081ac:	f002 fd6c 	bl	800ac88 <tcp_zero_window_probe>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	f47f af75 	bne.w	80080a0 <tcp_slowtmr+0xd8>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80081b6:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 80081ba:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80081be:	2b06      	cmp	r3, #6
 80081c0:	f63f af6e 	bhi.w	80080a0 <tcp_slowtmr+0xd8>
              pcb->persist_backoff++;
 80081c4:	3301      	adds	r3, #1
 80081c6:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80081ca:	e769      	b.n	80080a0 <tcp_slowtmr+0xd8>
        if (pcb->rtime >= 0) {
 80081cc:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80081d0:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 80081d2:	bfa4      	itt	ge
 80081d4:	3301      	addge	r3, #1
 80081d6:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80081d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f43f af60 	beq.w	80080a0 <tcp_slowtmr+0xd8>
 80081e0:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 80081e4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80081e8:	4298      	cmp	r0, r3
 80081ea:	f6ff af59 	blt.w	80080a0 <tcp_slowtmr+0xd8>
          if (pcb->state != SYN_SENT) {
 80081ee:	2902      	cmp	r1, #2
 80081f0:	d00a      	beq.n	8008208 <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80081f2:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 80081f6:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 80081fa:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 80081fe:	492e      	ldr	r1, [pc, #184]	; (80082b8 <tcp_slowtmr+0x2f0>)
 8008200:	5c8a      	ldrb	r2, [r1, r2]
 8008202:	4093      	lsls	r3, r2
 8008204:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8008208:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800820a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          pcb->rtime = 0;
 800820e:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008210:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008214:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->cwnd = pcb->mss;
 8008216:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 800821a:	4293      	cmp	r3, r2
 800821c:	bf28      	it	cs
 800821e:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008220:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 8008222:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008224:	b292      	uxth	r2, r2
 8008226:	4293      	cmp	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8008228:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 800822c:	4620      	mov	r0, r4
            pcb->ssthresh = (pcb->mss << 1);
 800822e:	bf38      	it	cc
 8008230:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8008234:	f002 fc92 	bl	800ab5c <tcp_rexmit_rto>
 8008238:	e734      	b.n	80080a4 <tcp_slowtmr+0xdc>
      ++pcb_remove;
 800823a:	f04f 0b01 	mov.w	fp, #1
 800823e:	e731      	b.n	80080a4 <tcp_slowtmr+0xdc>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008240:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8008244:	4a1d      	ldr	r2, [pc, #116]	; (80082bc <tcp_slowtmr+0x2f4>)
 8008246:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 800824a:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800824e:	4299      	cmp	r1, r3
 8008250:	d908      	bls.n	8008264 <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 8008252:	4620      	mov	r0, r4
 8008254:	f002 fcee 	bl	800ac34 <tcp_keepalive>
        if (err == ERR_OK) {
 8008258:	b920      	cbnz	r0, 8008264 <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 800825a:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800825e:	3301      	adds	r3, #1
 8008260:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8008264:	2500      	movs	r5, #0
 8008266:	e74a      	b.n	80080fe <tcp_slowtmr+0x136>
    if (pcb->state == LAST_ACK) {
 8008268:	2b09      	cmp	r3, #9
 800826a:	f47f af61 	bne.w	8008130 <tcp_slowtmr+0x168>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800826e:	6833      	ldr	r3, [r6, #0]
 8008270:	6a22      	ldr	r2, [r4, #32]
 8008272:	1a9b      	subs	r3, r3, r2
 8008274:	2bf0      	cmp	r3, #240	; 0xf0
 8008276:	e75a      	b.n	800812e <tcp_slowtmr+0x166>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008278:	429c      	cmp	r4, r3
 800827a:	d006      	beq.n	800828a <tcp_slowtmr+0x2c2>
 800827c:	464b      	mov	r3, r9
 800827e:	f240 428d 	movw	r2, #1165	; 0x48d
 8008282:	490f      	ldr	r1, [pc, #60]	; (80082c0 <tcp_slowtmr+0x2f8>)
 8008284:	4807      	ldr	r0, [pc, #28]	; (80082a4 <tcp_slowtmr+0x2dc>)
 8008286:	f005 fd41 	bl	800dd0c <iprintf>
        tcp_active_pcbs = pcb->next;
 800828a:	68e3      	ldr	r3, [r4, #12]
 800828c:	603b      	str	r3, [r7, #0]
 800828e:	e769      	b.n	8008164 <tcp_slowtmr+0x19c>
 8008290:	20005058 	.word	0x20005058
 8008294:	20000d1e 	.word	0x20000d1e
 8008298:	20005054 	.word	0x20005054
 800829c:	20005064 	.word	0x20005064
 80082a0:	080103da 	.word	0x080103da
 80082a4:	0800f3a7 	.word	0x0800f3a7
 80082a8:	08010404 	.word	0x08010404
 80082ac:	0801042e 	.word	0x0801042e
 80082b0:	08010320 	.word	0x08010320
 80082b4:	0801045b 	.word	0x0801045b
 80082b8:	080101e8 	.word	0x080101e8
 80082bc:	000124f8 	.word	0x000124f8
 80082c0:	08010486 	.word	0x08010486
 80082c4:	20005050 	.word	0x20005050
 80082c8:	08010236 	.word	0x08010236
 80082cc:	080104b0 	.word	0x080104b0
      ++prev->polltmr;
 80082d0:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80082d2:	7f22      	ldrb	r2, [r4, #28]
      pcb = pcb->next;
 80082d4:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 80082d6:	3301      	adds	r3, #1
 80082d8:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 80082da:	429a      	cmp	r2, r3
      ++prev->polltmr;
 80082dc:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80082de:	f63f aeba 	bhi.w	8008056 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 80082e2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 80082e6:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 80082ea:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 80082ee:	b173      	cbz	r3, 800830e <tcp_slowtmr+0x346>
 80082f0:	4621      	mov	r1, r4
 80082f2:	6920      	ldr	r0, [r4, #16]
 80082f4:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80082f6:	f89a 3000 	ldrb.w	r3, [sl]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f47f ae72 	bne.w	8007fe4 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8008300:	2800      	cmp	r0, #0
 8008302:	f47f aea8 	bne.w	8008056 <tcp_slowtmr+0x8e>
          tcp_output(prev);
 8008306:	4620      	mov	r0, r4
 8008308:	f002 fa50 	bl	800a7ac <tcp_output>
 800830c:	e6a3      	b.n	8008056 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 800830e:	4658      	mov	r0, fp
 8008310:	e7f1      	b.n	80082f6 <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008312:	7d2b      	ldrb	r3, [r5, #20]
 8008314:	2b0a      	cmp	r3, #10
 8008316:	d006      	beq.n	8008326 <tcp_slowtmr+0x35e>
 8008318:	4643      	mov	r3, r8
 800831a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800831e:	4651      	mov	r1, sl
 8008320:	4648      	mov	r0, r9
 8008322:	f005 fcf3 	bl	800dd0c <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008326:	6833      	ldr	r3, [r6, #0]
 8008328:	6a2a      	ldr	r2, [r5, #32]
 800832a:	1a9b      	subs	r3, r3, r2
 800832c:	2bf0      	cmp	r3, #240	; 0xf0
 800832e:	d816      	bhi.n	800835e <tcp_slowtmr+0x396>
      pcb = pcb->next;
 8008330:	462c      	mov	r4, r5
 8008332:	68ed      	ldr	r5, [r5, #12]
 8008334:	e665      	b.n	8008002 <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	429d      	cmp	r5, r3
 800833a:	d106      	bne.n	800834a <tcp_slowtmr+0x382>
 800833c:	4643      	mov	r3, r8
 800833e:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8008342:	4910      	ldr	r1, [pc, #64]	; (8008384 <tcp_slowtmr+0x3bc>)
 8008344:	4648      	mov	r0, r9
 8008346:	f005 fce1 	bl	800dd0c <iprintf>
        prev->next = pcb->next;
 800834a:	68eb      	ldr	r3, [r5, #12]
 800834c:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800834e:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8008352:	4629      	mov	r1, r5
 8008354:	2001      	movs	r0, #1
 8008356:	f7fe ffdb 	bl	8007310 <memp_free>
      pcb = pcb->next;
 800835a:	465d      	mov	r5, fp
 800835c:	e651      	b.n	8008002 <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 800835e:	4628      	mov	r0, r5
 8008360:	f7ff fe12 	bl	8007f88 <tcp_pcb_purge>
      if (prev != NULL) {
 8008364:	2c00      	cmp	r4, #0
 8008366:	d1e6      	bne.n	8008336 <tcp_slowtmr+0x36e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	429d      	cmp	r5, r3
 800836c:	d006      	beq.n	800837c <tcp_slowtmr+0x3b4>
 800836e:	4643      	mov	r3, r8
 8008370:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8008374:	4904      	ldr	r1, [pc, #16]	; (8008388 <tcp_slowtmr+0x3c0>)
 8008376:	4648      	mov	r0, r9
 8008378:	f005 fcc8 	bl	800dd0c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800837c:	68eb      	ldr	r3, [r5, #12]
 800837e:	603b      	str	r3, [r7, #0]
 8008380:	e7e5      	b.n	800834e <tcp_slowtmr+0x386>
 8008382:	bf00      	nop
 8008384:	080104df 	.word	0x080104df
 8008388:	08010506 	.word	0x08010506

0800838c <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 800838c:	6803      	ldr	r3, [r0, #0]
 800838e:	428b      	cmp	r3, r1
{
 8008390:	b510      	push	{r4, lr}
 8008392:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8008394:	d137      	bne.n	8008406 <tcp_pcb_remove+0x7a>
 8008396:	68cb      	ldr	r3, [r1, #12]
 8008398:	6003      	str	r3, [r0, #0]
 800839a:	2300      	movs	r3, #0
 800839c:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 800839e:	4620      	mov	r0, r4
 80083a0:	f7ff fdf2 	bl	8007f88 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80083a4:	7d23      	ldrb	r3, [r4, #20]
 80083a6:	2b0a      	cmp	r3, #10
 80083a8:	d00a      	beq.n	80083c0 <tcp_pcb_remove+0x34>
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d008      	beq.n	80083c0 <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 80083ae:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 80083b0:	07da      	lsls	r2, r3, #31
 80083b2:	d505      	bpl.n	80083c0 <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 80083b4:	f043 0302 	orr.w	r3, r3, #2
 80083b8:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 80083ba:	4620      	mov	r0, r4
 80083bc:	f002 f9f6 	bl	800a7ac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80083c0:	7d23      	ldrb	r3, [r4, #20]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d01a      	beq.n	80083fc <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80083c6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80083c8:	b133      	cbz	r3, 80083d8 <tcp_pcb_remove+0x4c>
 80083ca:	4b13      	ldr	r3, [pc, #76]	; (8008418 <tcp_pcb_remove+0x8c>)
 80083cc:	4913      	ldr	r1, [pc, #76]	; (800841c <tcp_pcb_remove+0x90>)
 80083ce:	4814      	ldr	r0, [pc, #80]	; (8008420 <tcp_pcb_remove+0x94>)
 80083d0:	f240 7253 	movw	r2, #1875	; 0x753
 80083d4:	f005 fc9a 	bl	800dd0c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80083d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80083da:	b133      	cbz	r3, 80083ea <tcp_pcb_remove+0x5e>
 80083dc:	4b0e      	ldr	r3, [pc, #56]	; (8008418 <tcp_pcb_remove+0x8c>)
 80083de:	4911      	ldr	r1, [pc, #68]	; (8008424 <tcp_pcb_remove+0x98>)
 80083e0:	480f      	ldr	r0, [pc, #60]	; (8008420 <tcp_pcb_remove+0x94>)
 80083e2:	f240 7254 	movw	r2, #1876	; 0x754
 80083e6:	f005 fc91 	bl	800dd0c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80083ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80083ec:	b133      	cbz	r3, 80083fc <tcp_pcb_remove+0x70>
 80083ee:	4b0a      	ldr	r3, [pc, #40]	; (8008418 <tcp_pcb_remove+0x8c>)
 80083f0:	490d      	ldr	r1, [pc, #52]	; (8008428 <tcp_pcb_remove+0x9c>)
 80083f2:	480b      	ldr	r0, [pc, #44]	; (8008420 <tcp_pcb_remove+0x94>)
 80083f4:	f240 7256 	movw	r2, #1878	; 0x756
 80083f8:	f005 fc88 	bl	800dd0c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80083fc:	2300      	movs	r3, #0
 80083fe:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008400:	82e3      	strh	r3, [r4, #22]
 8008402:	bd10      	pop	{r4, pc}
 8008404:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0c7      	beq.n	800839a <tcp_pcb_remove+0xe>
 800840a:	68da      	ldr	r2, [r3, #12]
 800840c:	4294      	cmp	r4, r2
 800840e:	d1f9      	bne.n	8008404 <tcp_pcb_remove+0x78>
 8008410:	68e2      	ldr	r2, [r4, #12]
 8008412:	60da      	str	r2, [r3, #12]
 8008414:	e7c1      	b.n	800839a <tcp_pcb_remove+0xe>
 8008416:	bf00      	nop
 8008418:	08010236 	.word	0x08010236
 800841c:	080102d8 	.word	0x080102d8
 8008420:	0800f3a7 	.word	0x0800f3a7
 8008424:	080102f0 	.word	0x080102f0
 8008428:	08010309 	.word	0x08010309

0800842c <tcp_close_shutdown>:
{
 800842c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800842e:	7d03      	ldrb	r3, [r0, #20]
 8008430:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008432:	2900      	cmp	r1, #0
 8008434:	d049      	beq.n	80084ca <tcp_close_shutdown+0x9e>
 8008436:	2b04      	cmp	r3, #4
 8008438:	d001      	beq.n	800843e <tcp_close_shutdown+0x12>
 800843a:	2b07      	cmp	r3, #7
 800843c:	d145      	bne.n	80084ca <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800843e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8008440:	b91a      	cbnz	r2, 800844a <tcp_close_shutdown+0x1e>
 8008442:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008444:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8008448:	d03f      	beq.n	80084ca <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800844a:	7ea3      	ldrb	r3, [r4, #26]
 800844c:	06db      	lsls	r3, r3, #27
 800844e:	d406      	bmi.n	800845e <tcp_close_shutdown+0x32>
 8008450:	4b3f      	ldr	r3, [pc, #252]	; (8008550 <tcp_close_shutdown+0x124>)
 8008452:	4940      	ldr	r1, [pc, #256]	; (8008554 <tcp_close_shutdown+0x128>)
 8008454:	4840      	ldr	r0, [pc, #256]	; (8008558 <tcp_close_shutdown+0x12c>)
 8008456:	f240 120f 	movw	r2, #271	; 0x10f
 800845a:	f005 fc57 	bl	800dd0c <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800845e:	8b23      	ldrh	r3, [r4, #24]
 8008460:	9301      	str	r3, [sp, #4]
 8008462:	8ae3      	ldrh	r3, [r4, #22]
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	4622      	mov	r2, r4
 8008468:	1d23      	adds	r3, r4, #4
 800846a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800846c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800846e:	f002 fb1b 	bl	800aaa8 <tcp_rst>
      tcp_pcb_purge(pcb);
 8008472:	4620      	mov	r0, r4
 8008474:	f7ff fd88 	bl	8007f88 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008478:	4a38      	ldr	r2, [pc, #224]	; (800855c <tcp_close_shutdown+0x130>)
 800847a:	6813      	ldr	r3, [r2, #0]
 800847c:	429c      	cmp	r4, r3
 800847e:	d115      	bne.n	80084ac <tcp_close_shutdown+0x80>
 8008480:	68e3      	ldr	r3, [r4, #12]
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	2300      	movs	r3, #0
 8008486:	60e3      	str	r3, [r4, #12]
 8008488:	4b35      	ldr	r3, [pc, #212]	; (8008560 <tcp_close_shutdown+0x134>)
 800848a:	2201      	movs	r2, #1
 800848c:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800848e:	7d23      	ldrb	r3, [r4, #20]
 8008490:	2b04      	cmp	r3, #4
 8008492:	d113      	bne.n	80084bc <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 8008494:	230a      	movs	r3, #10
 8008496:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008498:	4b32      	ldr	r3, [pc, #200]	; (8008564 <tcp_close_shutdown+0x138>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	60e2      	str	r2, [r4, #12]
 800849e:	601c      	str	r4, [r3, #0]
 80084a0:	f002 fca4 	bl	800adec <tcp_timer_needed>
}
 80084a4:	2000      	movs	r0, #0
 80084a6:	b003      	add	sp, #12
 80084a8:	bd30      	pop	{r4, r5, pc}
 80084aa:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d0e9      	beq.n	8008484 <tcp_close_shutdown+0x58>
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	4294      	cmp	r4, r2
 80084b4:	d1f9      	bne.n	80084aa <tcp_close_shutdown+0x7e>
 80084b6:	68e2      	ldr	r2, [r4, #12]
 80084b8:	60da      	str	r2, [r3, #12]
 80084ba:	e7e3      	b.n	8008484 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 80084bc:	4b2a      	ldr	r3, [pc, #168]	; (8008568 <tcp_close_shutdown+0x13c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	429c      	cmp	r4, r3
 80084c2:	d117      	bne.n	80084f4 <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 80084c4:	f001 fd06 	bl	8009ed4 <tcp_trigger_input_pcb_close>
 80084c8:	e7ec      	b.n	80084a4 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d020      	beq.n	8008510 <tcp_close_shutdown+0xe4>
 80084ce:	d307      	bcc.n	80084e0 <tcp_close_shutdown+0xb4>
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d033      	beq.n	800853c <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 80084d4:	4620      	mov	r0, r4
}
 80084d6:	b003      	add	sp, #12
 80084d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 80084dc:	f7ff bb7c 	b.w	8007bd8 <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 80084e0:	8ae3      	ldrh	r3, [r4, #22]
 80084e2:	b13b      	cbz	r3, 80084f4 <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80084e4:	4a21      	ldr	r2, [pc, #132]	; (800856c <tcp_close_shutdown+0x140>)
 80084e6:	6813      	ldr	r3, [r2, #0]
 80084e8:	429c      	cmp	r4, r3
 80084ea:	d109      	bne.n	8008500 <tcp_close_shutdown+0xd4>
 80084ec:	68e3      	ldr	r3, [r4, #12]
 80084ee:	6013      	str	r3, [r2, #0]
 80084f0:	2300      	movs	r3, #0
 80084f2:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 80084f4:	4621      	mov	r1, r4
 80084f6:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 80084f8:	f7fe ff0a 	bl	8007310 <memp_free>
    break;
 80084fc:	e7d2      	b.n	80084a4 <tcp_close_shutdown+0x78>
 80084fe:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008500:	2b00      	cmp	r3, #0
 8008502:	d0f5      	beq.n	80084f0 <tcp_close_shutdown+0xc4>
 8008504:	68da      	ldr	r2, [r3, #12]
 8008506:	4294      	cmp	r4, r2
 8008508:	d1f9      	bne.n	80084fe <tcp_close_shutdown+0xd2>
 800850a:	68e2      	ldr	r2, [r4, #12]
 800850c:	60da      	str	r2, [r3, #12]
 800850e:	e7ef      	b.n	80084f0 <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8008510:	4917      	ldr	r1, [pc, #92]	; (8008570 <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 8008512:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8008514:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8008518:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800851a:	b94a      	cbnz	r2, 8008530 <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800851c:	3301      	adds	r3, #1
 800851e:	2b04      	cmp	r3, #4
 8008520:	d1f8      	bne.n	8008514 <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008522:	4621      	mov	r1, r4
 8008524:	4813      	ldr	r0, [pc, #76]	; (8008574 <tcp_close_shutdown+0x148>)
 8008526:	f7ff ff31 	bl	800838c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800852a:	4621      	mov	r1, r4
 800852c:	2002      	movs	r0, #2
 800852e:	e7e3      	b.n	80084f8 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 8008530:	6f95      	ldr	r5, [r2, #120]	; 0x78
 8008532:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 8008534:	bf08      	it	eq
 8008536:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008538:	68d2      	ldr	r2, [r2, #12]
 800853a:	e7ee      	b.n	800851a <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800853c:	4621      	mov	r1, r4
 800853e:	4807      	ldr	r0, [pc, #28]	; (800855c <tcp_close_shutdown+0x130>)
 8008540:	f7ff ff24 	bl	800838c <tcp_pcb_remove>
 8008544:	4b06      	ldr	r3, [pc, #24]	; (8008560 <tcp_close_shutdown+0x134>)
 8008546:	2001      	movs	r0, #1
 8008548:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800854a:	4621      	mov	r1, r4
 800854c:	e7d4      	b.n	80084f8 <tcp_close_shutdown+0xcc>
 800854e:	bf00      	nop
 8008550:	08010236 	.word	0x08010236
 8008554:	0801021d 	.word	0x0801021d
 8008558:	0800f3a7 	.word	0x0800f3a7
 800855c:	20005054 	.word	0x20005054
 8008560:	20005050 	.word	0x20005050
 8008564:	20005064 	.word	0x20005064
 8008568:	20005068 	.word	0x20005068
 800856c:	20005060 	.word	0x20005060
 8008570:	080102c8 	.word	0x080102c8
 8008574:	2000505c 	.word	0x2000505c

08008578 <tcp_close>:
  if (pcb->state != LISTEN) {
 8008578:	7d03      	ldrb	r3, [r0, #20]
 800857a:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 800857c:	bf1e      	ittt	ne
 800857e:	7e83      	ldrbne	r3, [r0, #26]
 8008580:	f043 0310 	orrne.w	r3, r3, #16
 8008584:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8008586:	2101      	movs	r1, #1
 8008588:	f7ff bf50 	b.w	800842c <tcp_close_shutdown>

0800858c <tcp_recv_null>:
{
 800858c:	b510      	push	{r4, lr}
 800858e:	4608      	mov	r0, r1
  if (p != NULL) {
 8008590:	4614      	mov	r4, r2
 8008592:	b13a      	cbz	r2, 80085a4 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8008594:	8911      	ldrh	r1, [r2, #8]
 8008596:	f7ff fc23 	bl	8007de0 <tcp_recved>
    pbuf_free(p);
 800859a:	4620      	mov	r0, r4
 800859c:	f7ff f81c 	bl	80075d8 <pbuf_free>
}
 80085a0:	2000      	movs	r0, #0
 80085a2:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1fb      	bne.n	80085a0 <tcp_recv_null+0x14>
}
 80085a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 80085ac:	f7ff bfe4 	b.w	8008578 <tcp_close>

080085b0 <tcp_process_refused_data>:
{
 80085b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 80085b2:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80085b4:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 80085b8:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80085ba:	2300      	movs	r3, #0
{
 80085bc:	4604      	mov	r4, r0
    pcb->refused_data = NULL;
 80085be:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80085c0:	b1dd      	cbz	r5, 80085fa <tcp_process_refused_data+0x4a>
 80085c2:	4601      	mov	r1, r0
 80085c4:	4632      	mov	r2, r6
 80085c6:	6900      	ldr	r0, [r0, #16]
 80085c8:	47a8      	blx	r5
 80085ca:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80085cc:	b9e0      	cbnz	r0, 8008608 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80085ce:	06bb      	lsls	r3, r7, #26
 80085d0:	d511      	bpl.n	80085f6 <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80085d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80085d4:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80085d8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 80085dc:	bf1c      	itt	ne
 80085de:	3301      	addne	r3, #1
 80085e0:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80085e2:	b146      	cbz	r6, 80085f6 <tcp_process_refused_data+0x46>
 80085e4:	2300      	movs	r3, #0
 80085e6:	461a      	mov	r2, r3
 80085e8:	4621      	mov	r1, r4
 80085ea:	6920      	ldr	r0, [r4, #16]
 80085ec:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 80085ee:	300d      	adds	r0, #13
 80085f0:	d101      	bne.n	80085f6 <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 80085f2:	f06f 050c 	mvn.w	r5, #12
}
 80085f6:	4628      	mov	r0, r5
 80085f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80085fa:	4601      	mov	r1, r0
 80085fc:	462b      	mov	r3, r5
 80085fe:	4632      	mov	r2, r6
 8008600:	4628      	mov	r0, r5
 8008602:	f7ff ffc3 	bl	800858c <tcp_recv_null>
 8008606:	e7e0      	b.n	80085ca <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 8008608:	f110 050d 	adds.w	r5, r0, #13
 800860c:	d0f1      	beq.n	80085f2 <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 800860e:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8008610:	f06f 0504 	mvn.w	r5, #4
 8008614:	e7ef      	b.n	80085f6 <tcp_process_refused_data+0x46>
	...

08008618 <tcp_fasttmr>:
{
 8008618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800861c:	4d1b      	ldr	r5, [pc, #108]	; (800868c <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 800861e:	4f1c      	ldr	r7, [pc, #112]	; (8008690 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8008620:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8008622:	4e1c      	ldr	r6, [pc, #112]	; (8008694 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8008624:	3301      	adds	r3, #1
 8008626:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8008628:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 800862a:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 800862e:	b90c      	cbnz	r4, 8008634 <tcp_fasttmr+0x1c>
}
 8008630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8008634:	782b      	ldrb	r3, [r5, #0]
 8008636:	7f62      	ldrb	r2, [r4, #29]
 8008638:	429a      	cmp	r2, r3
 800863a:	d024      	beq.n	8008686 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 800863c:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 800863e:	7ea3      	ldrb	r3, [r4, #26]
 8008640:	07d9      	lsls	r1, r3, #31
 8008642:	d509      	bpl.n	8008658 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8008644:	f043 0302 	orr.w	r3, r3, #2
 8008648:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 800864a:	4620      	mov	r0, r4
 800864c:	f002 f8ae 	bl	800a7ac <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008650:	7ea3      	ldrb	r3, [r4, #26]
 8008652:	f023 0303 	bic.w	r3, r3, #3
 8008656:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8008658:	7ea3      	ldrb	r3, [r4, #26]
 800865a:	071a      	lsls	r2, r3, #28
 800865c:	d505      	bpl.n	800866a <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 800865e:	f023 0308 	bic.w	r3, r3, #8
 8008662:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8008664:	4620      	mov	r0, r4
 8008666:	f7ff fab7 	bl	8007bd8 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800866a:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 800866c:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8008670:	b13b      	cbz	r3, 8008682 <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8008672:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8008674:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8008678:	f7ff ff9a 	bl	80085b0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800867c:	7833      	ldrb	r3, [r6, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1d2      	bne.n	8008628 <tcp_fasttmr+0x10>
{
 8008682:	464c      	mov	r4, r9
 8008684:	e7d3      	b.n	800862e <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8008686:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800868a:	e7fa      	b.n	8008682 <tcp_fasttmr+0x6a>
 800868c:	20000d1e 	.word	0x20000d1e
 8008690:	20005054 	.word	0x20005054
 8008694:	20005050 	.word	0x20005050

08008698 <tcp_tmr>:
{
 8008698:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800869a:	f7ff ffbd 	bl	8008618 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800869e:	4a06      	ldr	r2, [pc, #24]	; (80086b8 <tcp_tmr+0x20>)
 80086a0:	7813      	ldrb	r3, [r2, #0]
 80086a2:	3301      	adds	r3, #1
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	7013      	strb	r3, [r2, #0]
 80086a8:	07db      	lsls	r3, r3, #31
 80086aa:	d503      	bpl.n	80086b4 <tcp_tmr+0x1c>
}
 80086ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 80086b0:	f7ff bc8a 	b.w	8007fc8 <tcp_slowtmr>
 80086b4:	bd08      	pop	{r3, pc}
 80086b6:	bf00      	nop
 80086b8:	20000d1d 	.word	0x20000d1d

080086bc <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80086bc:	7d03      	ldrb	r3, [r0, #20]
 80086be:	2b01      	cmp	r3, #1
{
 80086c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80086c4:	4604      	mov	r4, r0
 80086c6:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80086c8:	d106      	bne.n	80086d8 <tcp_abandon+0x1c>
 80086ca:	4b30      	ldr	r3, [pc, #192]	; (800878c <tcp_abandon+0xd0>)
 80086cc:	4930      	ldr	r1, [pc, #192]	; (8008790 <tcp_abandon+0xd4>)
 80086ce:	4831      	ldr	r0, [pc, #196]	; (8008794 <tcp_abandon+0xd8>)
 80086d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80086d4:	f005 fb1a 	bl	800dd0c <iprintf>
  if (pcb->state == TIME_WAIT) {
 80086d8:	7d23      	ldrb	r3, [r4, #20]
 80086da:	2b0a      	cmp	r3, #10
 80086dc:	d10a      	bne.n	80086f4 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80086de:	4621      	mov	r1, r4
 80086e0:	482d      	ldr	r0, [pc, #180]	; (8008798 <tcp_abandon+0xdc>)
 80086e2:	f7ff fe53 	bl	800838c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80086e6:	4621      	mov	r1, r4
 80086e8:	2001      	movs	r0, #1
}
 80086ea:	b002      	add	sp, #8
 80086ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 80086f0:	f7fe be0e 	b.w	8007310 <memp_free>
    seqno = pcb->snd_nxt;
 80086f4:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 80086f8:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 80086fc:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8008700:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8008704:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 8008706:	b99b      	cbnz	r3, 8008730 <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 8008708:	b13d      	cbz	r5, 800871a <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800870a:	4a24      	ldr	r2, [pc, #144]	; (800879c <tcp_abandon+0xe0>)
 800870c:	6813      	ldr	r3, [r2, #0]
 800870e:	429c      	cmp	r4, r3
 8008710:	d106      	bne.n	8008720 <tcp_abandon+0x64>
 8008712:	68e3      	ldr	r3, [r4, #12]
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	2500      	movs	r5, #0
 8008718:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 800871a:	462e      	mov	r6, r5
 800871c:	e00f      	b.n	800873e <tcp_abandon+0x82>
 800871e:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008720:	2b00      	cmp	r3, #0
 8008722:	d0f8      	beq.n	8008716 <tcp_abandon+0x5a>
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	4294      	cmp	r4, r2
 8008728:	d1f9      	bne.n	800871e <tcp_abandon+0x62>
 800872a:	68e2      	ldr	r2, [r4, #12]
 800872c:	60da      	str	r2, [r3, #12]
 800872e:	e7f2      	b.n	8008716 <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008730:	4621      	mov	r1, r4
 8008732:	481b      	ldr	r0, [pc, #108]	; (80087a0 <tcp_abandon+0xe4>)
 8008734:	f7ff fe2a 	bl	800838c <tcp_pcb_remove>
 8008738:	4b1a      	ldr	r3, [pc, #104]	; (80087a4 <tcp_abandon+0xe8>)
 800873a:	2201      	movs	r2, #1
 800873c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800873e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008740:	b108      	cbz	r0, 8008746 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 8008742:	f7ff fb99 	bl	8007e78 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8008746:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008748:	b108      	cbz	r0, 800874e <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 800874a:	f7ff fb95 	bl	8007e78 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800874e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008750:	b108      	cbz	r0, 8008756 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 8008752:	f7ff fb91 	bl	8007e78 <tcp_segs_free>
    if (send_rst) {
 8008756:	b146      	cbz	r6, 800876a <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008758:	8b23      	ldrh	r3, [r4, #24]
 800875a:	9301      	str	r3, [sp, #4]
 800875c:	9500      	str	r5, [sp, #0]
 800875e:	1d23      	adds	r3, r4, #4
 8008760:	4622      	mov	r2, r4
 8008762:	4651      	mov	r1, sl
 8008764:	4648      	mov	r0, r9
 8008766:	f002 f99f 	bl	800aaa8 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 800876a:	4621      	mov	r1, r4
 800876c:	2001      	movs	r0, #1
 800876e:	f7fe fdcf 	bl	8007310 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008772:	b13f      	cbz	r7, 8008784 <tcp_abandon+0xc8>
 8008774:	f06f 010c 	mvn.w	r1, #12
 8008778:	4640      	mov	r0, r8
 800877a:	463b      	mov	r3, r7
}
 800877c:	b002      	add	sp, #8
 800877e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008782:	4718      	bx	r3
}
 8008784:	b002      	add	sp, #8
 8008786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878a:	bf00      	nop
 800878c:	08010236 	.word	0x08010236
 8008790:	080101b7 	.word	0x080101b7
 8008794:	0800f3a7 	.word	0x0800f3a7
 8008798:	20005064 	.word	0x20005064
 800879c:	20005060 	.word	0x20005060
 80087a0:	20005054 	.word	0x20005054
 80087a4:	20005050 	.word	0x20005050

080087a8 <tcp_abort>:
  tcp_abandon(pcb, 1);
 80087a8:	2101      	movs	r1, #1
 80087aa:	f7ff bf87 	b.w	80086bc <tcp_abandon>

080087ae <tcp_accept_null>:
{
 80087ae:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 80087b0:	4608      	mov	r0, r1
 80087b2:	f7ff fff9 	bl	80087a8 <tcp_abort>
}
 80087b6:	f06f 000c 	mvn.w	r0, #12
 80087ba:	bd08      	pop	{r3, pc}

080087bc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 80087c0:	b901      	cbnz	r1, 80087c4 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80087c4:	680a      	ldr	r2, [r1, #0]
 80087c6:	682b      	ldr	r3, [r5, #0]
 80087c8:	68cc      	ldr	r4, [r1, #12]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d102      	bne.n	80087d4 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 80087ce:	4608      	mov	r0, r1
 80087d0:	f7ff ffea 	bl	80087a8 <tcp_abort>
      pcb = pcb->next;
 80087d4:	4621      	mov	r1, r4
 80087d6:	e7f3      	b.n	80087c0 <tcp_netif_ip_addr_changed_pcblist+0x4>

080087d8 <tcp_kill_state>:
{
 80087d8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80087da:	f1a0 0308 	sub.w	r3, r0, #8
 80087de:	2b01      	cmp	r3, #1
{
 80087e0:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80087e2:	d906      	bls.n	80087f2 <tcp_kill_state+0x1a>
 80087e4:	4b0f      	ldr	r3, [pc, #60]	; (8008824 <tcp_kill_state+0x4c>)
 80087e6:	4910      	ldr	r1, [pc, #64]	; (8008828 <tcp_kill_state+0x50>)
 80087e8:	4810      	ldr	r0, [pc, #64]	; (800882c <tcp_kill_state+0x54>)
 80087ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80087ee:	f005 fa8d 	bl	800dd0c <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087f2:	4b0f      	ldr	r3, [pc, #60]	; (8008830 <tcp_kill_state+0x58>)
 80087f4:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80087f6:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <tcp_kill_state+0x5c>)
  inactivity = 0;
 80087f8:	2200      	movs	r2, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80087fa:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 80087fc:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087fe:	b921      	cbnz	r1, 800880a <tcp_kill_state+0x32>
  if (inactive != NULL) {
 8008800:	b170      	cbz	r0, 8008820 <tcp_kill_state+0x48>
}
 8008802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 8008806:	f7ff bf59 	b.w	80086bc <tcp_abandon>
    if (pcb->state == state) {
 800880a:	7d0b      	ldrb	r3, [r1, #20]
 800880c:	42a3      	cmp	r3, r4
 800880e:	d105      	bne.n	800881c <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008810:	6a0b      	ldr	r3, [r1, #32]
 8008812:	1aeb      	subs	r3, r5, r3
 8008814:	429a      	cmp	r2, r3
 8008816:	bf9c      	itt	ls
 8008818:	461a      	movls	r2, r3
 800881a:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800881c:	68c9      	ldr	r1, [r1, #12]
 800881e:	e7ee      	b.n	80087fe <tcp_kill_state+0x26>
 8008820:	bd38      	pop	{r3, r4, r5, pc}
 8008822:	bf00      	nop
 8008824:	08010236 	.word	0x08010236
 8008828:	08010297 	.word	0x08010297
 800882c:	0800f3a7 	.word	0x0800f3a7
 8008830:	20005054 	.word	0x20005054
 8008834:	20005058 	.word	0x20005058

08008838 <tcp_alloc>:
{
 8008838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883a:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800883c:	2001      	movs	r0, #1
 800883e:	f7fe fd4b 	bl	80072d8 <memp_malloc>
 8008842:	4d3b      	ldr	r5, [pc, #236]	; (8008930 <tcp_alloc+0xf8>)
  if (pcb == NULL) {
 8008844:	4604      	mov	r4, r0
 8008846:	bb90      	cbnz	r0, 80088ae <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008848:	4b3a      	ldr	r3, [pc, #232]	; (8008934 <tcp_alloc+0xfc>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800884a:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800884c:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 800884e:	4621      	mov	r1, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008850:	2b00      	cmp	r3, #0
 8008852:	d158      	bne.n	8008906 <tcp_alloc+0xce>
  if (inactive != NULL) {
 8008854:	b114      	cbz	r4, 800885c <tcp_alloc+0x24>
    tcp_abort(inactive);
 8008856:	4620      	mov	r0, r4
 8008858:	f7ff ffa6 	bl	80087a8 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800885c:	2001      	movs	r0, #1
 800885e:	f7fe fd3b 	bl	80072d8 <memp_malloc>
    if (pcb == NULL) {
 8008862:	4604      	mov	r4, r0
 8008864:	bb18      	cbnz	r0, 80088ae <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 8008866:	2009      	movs	r0, #9
 8008868:	f7ff ffb6 	bl	80087d8 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800886c:	2001      	movs	r0, #1
 800886e:	f7fe fd33 	bl	80072d8 <memp_malloc>
      if (pcb == NULL) {
 8008872:	4604      	mov	r4, r0
 8008874:	b9d8      	cbnz	r0, 80088ae <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 8008876:	2008      	movs	r0, #8
 8008878:	f7ff ffae 	bl	80087d8 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800887c:	2001      	movs	r0, #1
 800887e:	f7fe fd2b 	bl	80072d8 <memp_malloc>
        if (pcb == NULL) {
 8008882:	4604      	mov	r4, r0
 8008884:	b998      	cbnz	r0, 80088ae <tcp_alloc+0x76>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008886:	4b2c      	ldr	r3, [pc, #176]	; (8008938 <tcp_alloc+0x100>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008888:	f8d5 e000 	ldr.w	lr, [r5]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800888c:	681b      	ldr	r3, [r3, #0]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800888e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8008892:	bf0c      	ite	eq
 8008894:	4631      	moveq	r1, r6
 8008896:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008898:	2b00      	cmp	r3, #0
 800889a:	d13c      	bne.n	8008916 <tcp_alloc+0xde>
  if (inactive != NULL) {
 800889c:	b114      	cbz	r4, 80088a4 <tcp_alloc+0x6c>
    tcp_abort(inactive);
 800889e:	4620      	mov	r0, r4
 80088a0:	f7ff ff82 	bl	80087a8 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80088a4:	2001      	movs	r0, #1
 80088a6:	f7fe fd17 	bl	80072d8 <memp_malloc>
  if (pcb != NULL) {
 80088aa:	4604      	mov	r4, r0
 80088ac:	b348      	cbz	r0, 8008902 <tcp_alloc+0xca>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80088ae:	2298      	movs	r2, #152	; 0x98
 80088b0:	2100      	movs	r1, #0
 80088b2:	4620      	mov	r0, r4
 80088b4:	f005 f976 	bl	800dba4 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80088b8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80088bc:	8562      	strh	r2, [r4, #42]	; 0x2a
 80088be:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80088c0:	22ff      	movs	r2, #255	; 0xff
 80088c2:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 80088c4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80088c8:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80088ca:	2206      	movs	r2, #6
 80088cc:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80088d0:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 80088d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088d6:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 80088d8:	2201      	movs	r2, #1
 80088da:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80088de:	682a      	ldr	r2, [r5, #0]
 80088e0:	6222      	str	r2, [r4, #32]
    pcb->snd_buf = TCP_SND_BUF;
 80088e2:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->last_timer = tcp_timer_ctr;
 80088e6:	4a15      	ldr	r2, [pc, #84]	; (800893c <tcp_alloc+0x104>)
    pcb->snd_buf = TCP_SND_BUF;
 80088e8:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->ssthresh = TCP_SND_BUF;
 80088ec:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 80088f0:	4b13      	ldr	r3, [pc, #76]	; (8008940 <tcp_alloc+0x108>)
    pcb->last_timer = tcp_timer_ctr;
 80088f2:	7812      	ldrb	r2, [r2, #0]
    pcb->recv = tcp_recv_null;
 80088f4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80088f8:	4b12      	ldr	r3, [pc, #72]	; (8008944 <tcp_alloc+0x10c>)
    pcb->prio = prio;
 80088fa:	7566      	strb	r6, [r4, #21]
    pcb->last_timer = tcp_timer_ctr;
 80088fc:	7762      	strb	r2, [r4, #29]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80088fe:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 8008902:	4620      	mov	r0, r4
 8008904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008906:	6a1a      	ldr	r2, [r3, #32]
 8008908:	1a82      	subs	r2, r0, r2
 800890a:	428a      	cmp	r2, r1
 800890c:	bf24      	itt	cs
 800890e:	461c      	movcs	r4, r3
 8008910:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	e79c      	b.n	8008850 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 8008916:	7d5f      	ldrb	r7, [r3, #21]
 8008918:	428f      	cmp	r7, r1
 800891a:	d807      	bhi.n	800892c <tcp_alloc+0xf4>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800891c:	6a1a      	ldr	r2, [r3, #32]
 800891e:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 8008922:	4282      	cmp	r2, r0
 8008924:	bf22      	ittt	cs
 8008926:	4639      	movcs	r1, r7
 8008928:	4610      	movcs	r0, r2
 800892a:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	e7b3      	b.n	8008898 <tcp_alloc+0x60>
 8008930:	20005058 	.word	0x20005058
 8008934:	20005064 	.word	0x20005064
 8008938:	20005054 	.word	0x20005054
 800893c:	20000d1e 	.word	0x20000d1e
 8008940:	0800858d 	.word	0x0800858d
 8008944:	006ddd00 	.word	0x006ddd00

08008948 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008948:	2040      	movs	r0, #64	; 0x40
 800894a:	f7ff bf75 	b.w	8008838 <tcp_alloc>
	...

08008950 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8008950:	4b03      	ldr	r3, [pc, #12]	; (8008960 <tcp_next_iss+0x10>)
 8008952:	4a04      	ldr	r2, [pc, #16]	; (8008964 <tcp_next_iss+0x14>)
 8008954:	6818      	ldr	r0, [r3, #0]
 8008956:	6812      	ldr	r2, [r2, #0]
 8008958:	4410      	add	r0, r2
 800895a:	6018      	str	r0, [r3, #0]
}
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	200005ac 	.word	0x200005ac
 8008964:	20005058 	.word	0x20005058

08008968 <tcp_eff_send_mss_impl>:
{
 8008968:	b510      	push	{r4, lr}
 800896a:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 800896c:	4608      	mov	r0, r1
 800896e:	f7fd fd67 	bl	8006440 <ip4_route>
    if (outif == NULL) {
 8008972:	b130      	cbz	r0, 8008982 <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 8008974:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 8008976:	b123      	cbz	r3, 8008982 <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8008978:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800897a:	b29b      	uxth	r3, r3
 800897c:	429c      	cmp	r4, r3
 800897e:	bf28      	it	cs
 8008980:	461c      	movcs	r4, r3
}
 8008982:	4620      	mov	r0, r4
 8008984:	bd10      	pop	{r4, pc}
	...

08008988 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800898c:	4604      	mov	r4, r0
 800898e:	b180      	cbz	r0, 80089b2 <tcp_netif_ip_addr_changed+0x2a>
 8008990:	6803      	ldr	r3, [r0, #0]
 8008992:	b173      	cbz	r3, 80089b2 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008994:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <tcp_netif_ip_addr_changed+0x40>)
 8008996:	6819      	ldr	r1, [r3, #0]
 8008998:	f7ff ff10 	bl	80087bc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800899c:	4b0b      	ldr	r3, [pc, #44]	; (80089cc <tcp_netif_ip_addr_changed+0x44>)
 800899e:	4620      	mov	r0, r4
 80089a0:	6819      	ldr	r1, [r3, #0]
 80089a2:	f7ff ff0b 	bl	80087bc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80089a6:	b125      	cbz	r5, 80089b2 <tcp_netif_ip_addr_changed+0x2a>
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	b113      	cbz	r3, 80089b2 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80089ac:	4b08      	ldr	r3, [pc, #32]	; (80089d0 <tcp_netif_ip_addr_changed+0x48>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	b903      	cbnz	r3, 80089b4 <tcp_netif_ip_addr_changed+0x2c>
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80089b4:	6818      	ldr	r0, [r3, #0]
 80089b6:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 80089b8:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80089ba:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80089bc:	bf04      	itt	eq
 80089be:	6829      	ldreq	r1, [r5, #0]
 80089c0:	6019      	streq	r1, [r3, #0]
{
 80089c2:	4613      	mov	r3, r2
 80089c4:	e7f4      	b.n	80089b0 <tcp_netif_ip_addr_changed+0x28>
 80089c6:	bf00      	nop
 80089c8:	20005054 	.word	0x20005054
 80089cc:	20005060 	.word	0x20005060
 80089d0:	2000505c 	.word	0x2000505c

080089d4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80089d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80089d8:	68c3      	ldr	r3, [r0, #12]
{
 80089da:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80089dc:	8998      	ldrh	r0, [r3, #12]
{
 80089de:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80089e0:	f7fd f83a 	bl	8005a58 <lwip_htons>
 80089e4:	07c2      	lsls	r2, r0, #31
 80089e6:	d415      	bmi.n	8008a14 <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 80089e8:	4e18      	ldr	r6, [pc, #96]	; (8008a4c <tcp_oos_insert_segment+0x78>)
    while (next &&
 80089ea:	b1bc      	cbz	r4, 8008a1c <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80089ec:	68e7      	ldr	r7, [r4, #12]
 80089ee:	6830      	ldr	r0, [r6, #0]
 80089f0:	892b      	ldrh	r3, [r5, #8]
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	8922      	ldrh	r2, [r4, #8]
 80089f6:	4403      	add	r3, r0
 80089f8:	440a      	add	r2, r1
 80089fa:	1a9a      	subs	r2, r3, r2
    while (next &&
 80089fc:	2a00      	cmp	r2, #0
 80089fe:	da10      	bge.n	8008a22 <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008a00:	1a5b      	subs	r3, r3, r1
    if (next &&
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	dd0a      	ble.n	8008a1c <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008a06:	1a09      	subs	r1, r1, r0
 8008a08:	b289      	uxth	r1, r1
 8008a0a:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008a0c:	6868      	ldr	r0, [r5, #4]
 8008a0e:	f7fe ff25 	bl	800785c <pbuf_realloc>
 8008a12:	e003      	b.n	8008a1c <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 8008a14:	4620      	mov	r0, r4
 8008a16:	f7ff fa2f 	bl	8007e78 <tcp_segs_free>
    next = NULL;
 8008a1a:	2400      	movs	r4, #0
    }
  }
  cseg->next = next;
 8008a1c:	602c      	str	r4, [r5, #0]
}
 8008a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008a22:	89b8      	ldrh	r0, [r7, #12]
 8008a24:	f7fd f818 	bl	8005a58 <lwip_htons>
 8008a28:	07c3      	lsls	r3, r0, #31
 8008a2a:	d509      	bpl.n	8008a40 <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008a2c:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8008a30:	2001      	movs	r0, #1
 8008a32:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8008a36:	f7fd f80f 	bl	8005a58 <lwip_htons>
 8008a3a:	4338      	orrs	r0, r7
 8008a3c:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 8008a40:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8008a42:	4620      	mov	r0, r4
 8008a44:	f7ff fa0a 	bl	8007e5c <tcp_seg_free>
      next = next->next;
 8008a48:	463c      	mov	r4, r7
 8008a4a:	e7ce      	b.n	80089ea <tcp_oos_insert_segment+0x16>
 8008a4c:	20000d44 	.word	0x20000d44

08008a50 <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008a50:	7d03      	ldrb	r3, [r0, #20]
 8008a52:	2b03      	cmp	r3, #3
{
 8008a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a58:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008a5a:	d806      	bhi.n	8008a6a <tcp_receive+0x1a>
 8008a5c:	4b87      	ldr	r3, [pc, #540]	; (8008c7c <tcp_receive+0x22c>)
 8008a5e:	4988      	ldr	r1, [pc, #544]	; (8008c80 <tcp_receive+0x230>)
 8008a60:	4888      	ldr	r0, [pc, #544]	; (8008c84 <tcp_receive+0x234>)
 8008a62:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8008a66:	f005 f951 	bl	800dd0c <iprintf>

  if (flags & TCP_ACK) {
 8008a6a:	4b87      	ldr	r3, [pc, #540]	; (8008c88 <tcp_receive+0x238>)
 8008a6c:	4e87      	ldr	r6, [pc, #540]	; (8008c8c <tcp_receive+0x23c>)
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	f013 0f10 	tst.w	r3, #16
 8008a74:	f000 817c 	beq.w	8008d70 <tcp_receive+0x320>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008a78:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008a7a:	6830      	ldr	r0, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008a7c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8008a80:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008a82:	1a1d      	subs	r5, r3, r0
 8008a84:	2d00      	cmp	r5, #0
 8008a86:	4d82      	ldr	r5, [pc, #520]	; (8008c90 <tcp_receive+0x240>)
 8008a88:	db0d      	blt.n	8008aa6 <tcp_receive+0x56>
 8008a8a:	4283      	cmp	r3, r0
 8008a8c:	d103      	bne.n	8008a96 <tcp_receive+0x46>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008a8e:	682b      	ldr	r3, [r5, #0]
 8008a90:	1acb      	subs	r3, r1, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	db07      	blt.n	8008aa6 <tcp_receive+0x56>
 8008a96:	682b      	ldr	r3, [r5, #0]
 8008a98:	4299      	cmp	r1, r3
 8008a9a:	d11c      	bne.n	8008ad6 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008a9c:	4b7d      	ldr	r3, [pc, #500]	; (8008c94 <tcp_receive+0x244>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	89db      	ldrh	r3, [r3, #14]
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d917      	bls.n	8008ad6 <tcp_receive+0x86>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008aa6:	4b7b      	ldr	r3, [pc, #492]	; (8008c94 <tcp_receive+0x244>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008aa8:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	89df      	ldrh	r7, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 8008ab0:	6520      	str	r0, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008ab2:	45be      	cmp	lr, r7
      pcb->snd_wl2 = ackno;
 8008ab4:	6828      	ldr	r0, [r5, #0]
 8008ab6:	6560      	str	r0, [r4, #84]	; 0x54
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008ab8:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008abc:	bf38      	it	cc
 8008abe:	f8a4 705e 	strhcc.w	r7, [r4, #94]	; 0x5e
 8008ac2:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 8008ac6:	2f00      	cmp	r7, #0
 8008ac8:	d13c      	bne.n	8008b44 <tcp_receive+0xf4>
        if (pcb->persist_backoff == 0) {
 8008aca:	b920      	cbnz	r0, 8008ad6 <tcp_receive+0x86>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8008acc:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 8008ad0:	2301      	movs	r3, #1
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8008ad2:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008ad6:	682b      	ldr	r3, [r5, #0]
 8008ad8:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 8008adc:	4f6e      	ldr	r7, [pc, #440]	; (8008c98 <tcp_receive+0x248>)
 8008ade:	eba3 000e 	sub.w	r0, r3, lr
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	dc37      	bgt.n	8008b56 <tcp_receive+0x106>
      /* Clause 2 */
      if (tcplen == 0) {
 8008ae6:	486d      	ldr	r0, [pc, #436]	; (8008c9c <tcp_receive+0x24c>)
 8008ae8:	8800      	ldrh	r0, [r0, #0]
 8008aea:	2800      	cmp	r0, #0
 8008aec:	f040 846f 	bne.w	80093ce <tcp_receive+0x97e>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008af0:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008af2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008af4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008af8:	4401      	add	r1, r0
 8008afa:	428a      	cmp	r2, r1
 8008afc:	f040 8467 	bne.w	80093ce <tcp_receive+0x97e>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008b00:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8008b04:	2a00      	cmp	r2, #0
 8008b06:	f2c0 8462 	blt.w	80093ce <tcp_receive+0x97e>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008b0a:	4573      	cmp	r3, lr
 8008b0c:	f040 845f 	bne.w	80093ce <tcp_receive+0x97e>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008b10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b14:	1c53      	adds	r3, r2, #1
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 8008b1a:	bf38      	it	cc
 8008b1c:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008b20:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008b24:	2b03      	cmp	r3, #3
 8008b26:	d911      	bls.n	8008b4c <tcp_receive+0xfc>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008b28:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8008b2c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008b2e:	4413      	add	r3, r2
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d201      	bcs.n	8008b3a <tcp_receive+0xea>
                  pcb->cwnd += pcb->mss;
 8008b36:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008b3a:	f8df a140 	ldr.w	sl, [pc, #320]	; 8008c7c <tcp_receive+0x22c>
 8008b3e:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8008c84 <tcp_receive+0x234>
 8008b42:	e108      	b.n	8008d56 <tcp_receive+0x306>
      } else if (pcb->persist_backoff > 0) {
 8008b44:	2800      	cmp	r0, #0
 8008b46:	d0c6      	beq.n	8008ad6 <tcp_receive+0x86>
          pcb->persist_backoff = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	e7c2      	b.n	8008ad2 <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 8008b4c:	d1f5      	bne.n	8008b3a <tcp_receive+0xea>
                tcp_rexmit_fast(pcb);
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f002 f849 	bl	800abe6 <tcp_rexmit_fast>
 8008b54:	e7f1      	b.n	8008b3a <tcp_receive+0xea>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008b56:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008b58:	1a9a      	subs	r2, r3, r2
 8008b5a:	2a00      	cmp	r2, #0
 8008b5c:	f300 808a 	bgt.w	8008c74 <tcp_receive+0x224>
      if (pcb->flags & TF_INFR) {
 8008b60:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008b62:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 8008b66:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->flags & TF_INFR) {
 8008b68:	0751      	lsls	r1, r2, #29
        pcb->flags &= ~TF_INFR;
 8008b6a:	bf41      	itttt	mi
 8008b6c:	f022 0204 	bicmi.w	r2, r2, #4
 8008b70:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8008b72:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 8008b76:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 8008b7a:	7d23      	ldrb	r3, [r4, #20]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008b7c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      pcb->nrtx = 0;
 8008b7e:	2100      	movs	r1, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008b80:	eb02 02e0 	add.w	r2, r2, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 8008b84:	2b03      	cmp	r3, #3
      pcb->nrtx = 0;
 8008b86:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008b8a:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8008b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 8008b92:	d90f      	bls.n	8008bb4 <tcp_receive+0x164>
        if (pcb->cwnd < pcb->ssthresh) {
 8008b94:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8008b98:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8008b9c:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008b9e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8008ba0:	bf9c      	itt	ls
 8008ba2:	435b      	mulls	r3, r3
 8008ba4:	fb93 f3f2 	sdivls	r3, r3, r2
 8008ba8:	4413      	add	r3, r2
 8008baa:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8008bac:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 8008bae:	bf38      	it	cc
 8008bb0:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008bb4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8008c7c <tcp_receive+0x22c>
 8008bb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c84 <tcp_receive+0x234>
      while (pcb->unacked != NULL &&
 8008bbc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008bbe:	b943      	cbnz	r3, 8008bd2 <tcp_receive+0x182>
      if (pcb->unacked == NULL) {
 8008bc0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	2a00      	cmp	r2, #0
 8008bc6:	d153      	bne.n	8008c70 <tcp_receive+0x220>
        pcb->rtime = -1;
 8008bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bcc:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8008bce:	76e3      	strb	r3, [r4, #27]
 8008bd0:	e7b3      	b.n	8008b3a <tcp_receive+0xea>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	6858      	ldr	r0, [r3, #4]
 8008bd6:	f7fc ff42 	bl	8005a5e <lwip_htonl>
 8008bda:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008bdc:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	4683      	mov	fp, r0
 8008be4:	8998      	ldrh	r0, [r3, #12]
 8008be6:	f7fc ff37 	bl	8005a58 <lwip_htons>
 8008bea:	682b      	ldr	r3, [r5, #0]
 8008bec:	f010 0003 	ands.w	r0, r0, #3
 8008bf0:	eba8 0803 	sub.w	r8, r8, r3
 8008bf4:	bf18      	it	ne
 8008bf6:	2001      	movne	r0, #1
 8008bf8:	44d8      	add	r8, fp
 8008bfa:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 8008bfc:	f1b8 0f00 	cmp.w	r8, #0
 8008c00:	dcde      	bgt.n	8008bc0 <tcp_receive+0x170>
        next = pcb->unacked;
 8008c02:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008c06:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 8008c0a:	f8d8 3000 	ldr.w	r3, [r8]
 8008c0e:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008c10:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c14:	f7fe fe92 	bl	800793c <pbuf_clen>
 8008c18:	4583      	cmp	fp, r0
 8008c1a:	d206      	bcs.n	8008c2a <tcp_receive+0x1da>
 8008c1c:	464b      	mov	r3, r9
 8008c1e:	f240 429e 	movw	r2, #1182	; 0x49e
 8008c22:	491f      	ldr	r1, [pc, #124]	; (8008ca0 <tcp_receive+0x250>)
 8008c24:	4650      	mov	r0, sl
 8008c26:	f005 f871 	bl	800dd0c <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008c2a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c2e:	f7fe fe85 	bl	800793c <pbuf_clen>
 8008c32:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 8008c36:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008c38:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 8008c3a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008c3e:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 8008c42:	4413      	add	r3, r2
        tcp_seg_free(next);
 8008c44:	4640      	mov	r0, r8
        recv_acked += next->len;
 8008c46:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 8008c48:	f7ff f908 	bl	8007e5c <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8008c4c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0b3      	beq.n	8008bbc <tcp_receive+0x16c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8008c54:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1b0      	bne.n	8008bbc <tcp_receive+0x16c>
 8008c5a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1ad      	bne.n	8008bbc <tcp_receive+0x16c>
 8008c60:	464b      	mov	r3, r9
 8008c62:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8008c66:	490f      	ldr	r1, [pc, #60]	; (8008ca4 <tcp_receive+0x254>)
 8008c68:	4650      	mov	r0, sl
 8008c6a:	f005 f84f 	bl	800dd0c <iprintf>
 8008c6e:	e7a5      	b.n	8008bbc <tcp_receive+0x16c>
        pcb->rtime = 0;
 8008c70:	8623      	strh	r3, [r4, #48]	; 0x30
 8008c72:	e7ac      	b.n	8008bce <tcp_receive+0x17e>
      tcp_send_empty_ack(pcb);
 8008c74:	4620      	mov	r0, r4
 8008c76:	f001 fd63 	bl	800a740 <tcp_send_empty_ack>
 8008c7a:	e75e      	b.n	8008b3a <tcp_receive+0xea>
 8008c7c:	080106fc 	.word	0x080106fc
 8008c80:	0801072e 	.word	0x0801072e
 8008c84:	0800f3a7 	.word	0x0800f3a7
 8008c88:	20000d24 	.word	0x20000d24
 8008c8c:	20000d44 	.word	0x20000d44
 8008c90:	20000d20 	.word	0x20000d20
 8008c94:	20000d4c 	.word	0x20000d4c
 8008c98:	20000d38 	.word	0x20000d38
 8008c9c:	20000d5a 	.word	0x20000d5a
 8008ca0:	08010747 	.word	0x08010747
 8008ca4:	0801076f 	.word	0x0801076f
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008ca8:	682a      	ldr	r2, [r5, #0]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	9201      	str	r2, [sp, #4]
 8008cae:	6858      	ldr	r0, [r3, #4]
 8008cb0:	f7fc fed5 	bl	8005a5e <lwip_htonl>
 8008cb4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008cb6:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	4683      	mov	fp, r0
 8008cbe:	8998      	ldrh	r0, [r3, #12]
 8008cc0:	f7fc feca 	bl	8005a58 <lwip_htons>
 8008cc4:	9a01      	ldr	r2, [sp, #4]
 8008cc6:	f010 0003 	ands.w	r0, r0, #3
 8008cca:	eba2 0808 	sub.w	r8, r2, r8
 8008cce:	bf18      	it	ne
 8008cd0:	2001      	movne	r0, #1
 8008cd2:	eba8 080b 	sub.w	r8, r8, fp
 8008cd6:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 8008cda:	f1b8 0f00 	cmp.w	r8, #0
 8008cde:	db3d      	blt.n	8008d5c <tcp_receive+0x30c>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008ce4:	1a9b      	subs	r3, r3, r2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	dc38      	bgt.n	8008d5c <tcp_receive+0x30c>
      next = pcb->unsent;
 8008cea:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8008cee:	f8d8 3000 	ldr.w	r3, [r8]
 8008cf2:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8008cf4:	b90b      	cbnz	r3, 8008cfa <tcp_receive+0x2aa>
        pcb->unsent_oversize = 0;
 8008cf6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008cfa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008cfe:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 8008d02:	f7fe fe1b 	bl	800793c <pbuf_clen>
 8008d06:	4583      	cmp	fp, r0
 8008d08:	d206      	bcs.n	8008d18 <tcp_receive+0x2c8>
 8008d0a:	4653      	mov	r3, sl
 8008d0c:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008d10:	49ba      	ldr	r1, [pc, #744]	; (8008ffc <tcp_receive+0x5ac>)
 8008d12:	4648      	mov	r0, r9
 8008d14:	f004 fffa 	bl	800dd0c <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008d18:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008d1c:	f7fe fe0e 	bl	800793c <pbuf_clen>
 8008d20:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 8008d24:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008d26:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8008d28:	f8b8 3008 	ldrh.w	r3, [r8, #8]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008d2c:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 8008d30:	4413      	add	r3, r2
      tcp_seg_free(next);
 8008d32:	4640      	mov	r0, r8
      recv_acked += next->len;
 8008d34:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 8008d36:	f7ff f891 	bl	8007e5c <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8008d3a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008d3e:	b153      	cbz	r3, 8008d56 <tcp_receive+0x306>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8008d40:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008d42:	b943      	cbnz	r3, 8008d56 <tcp_receive+0x306>
 8008d44:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008d46:	b933      	cbnz	r3, 8008d56 <tcp_receive+0x306>
 8008d48:	4653      	mov	r3, sl
 8008d4a:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8008d4e:	49ac      	ldr	r1, [pc, #688]	; (8009000 <tcp_receive+0x5b0>)
 8008d50:	4648      	mov	r0, r9
 8008d52:	f004 ffdb 	bl	800dd0c <iprintf>
    while (pcb->unsent != NULL &&
 8008d56:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1a5      	bne.n	8008ca8 <tcp_receive+0x258>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8008d5c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8008d60:	883a      	ldrh	r2, [r7, #0]
 8008d62:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008d64:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 8008d66:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008d6a:	2a00      	cmp	r2, #0
 8008d6c:	f040 8119 	bne.w	8008fa2 <tcp_receive+0x552>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008d70:	4fa4      	ldr	r7, [pc, #656]	; (8009004 <tcp_receive+0x5b4>)
 8008d72:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008d74:	8838      	ldrh	r0, [r7, #0]
 8008d76:	2800      	cmp	r0, #0
 8008d78:	f000 831c 	beq.w	80093b4 <tcp_receive+0x964>
 8008d7c:	7d23      	ldrb	r3, [r4, #20]
 8008d7e:	2b06      	cmp	r3, #6
 8008d80:	f200 8318 	bhi.w	80093b4 <tcp_receive+0x964>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008d84:	6833      	ldr	r3, [r6, #0]
 8008d86:	1ad5      	subs	r5, r2, r3
 8008d88:	2d01      	cmp	r5, #1
 8008d8a:	f100 815c 	bmi.w	8009046 <tcp_receive+0x5f6>
 8008d8e:	f1c3 0101 	rsb	r1, r3, #1
 8008d92:	1a09      	subs	r1, r1, r0
 8008d94:	4411      	add	r1, r2
 8008d96:	2900      	cmp	r1, #0
 8008d98:	f300 8155 	bgt.w	8009046 <tcp_receive+0x5f6>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008d9c:	4b9a      	ldr	r3, [pc, #616]	; (8009008 <tcp_receive+0x5b8>)
 8008d9e:	f8d3 9004 	ldr.w	r9, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 8008da2:	46aa      	mov	sl, r5
 8008da4:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008da6:	f1b9 0f00 	cmp.w	r9, #0
 8008daa:	d106      	bne.n	8008dba <tcp_receive+0x36a>
 8008dac:	4b97      	ldr	r3, [pc, #604]	; (800900c <tcp_receive+0x5bc>)
 8008dae:	4998      	ldr	r1, [pc, #608]	; (8009010 <tcp_receive+0x5c0>)
 8008db0:	4898      	ldr	r0, [pc, #608]	; (8009014 <tcp_receive+0x5c4>)
 8008db2:	f240 523c 	movw	r2, #1340	; 0x53c
 8008db6:	f004 ffa9 	bl	800dd0c <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8008dba:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8008dbe:	429d      	cmp	r5, r3
 8008dc0:	dd06      	ble.n	8008dd0 <tcp_receive+0x380>
 8008dc2:	4b92      	ldr	r3, [pc, #584]	; (800900c <tcp_receive+0x5bc>)
 8008dc4:	4994      	ldr	r1, [pc, #592]	; (8009018 <tcp_receive+0x5c8>)
 8008dc6:	4893      	ldr	r0, [pc, #588]	; (8009014 <tcp_receive+0x5c4>)
 8008dc8:	f240 523d 	movw	r2, #1341	; 0x53d
 8008dcc:	f004 ff9e 	bl	800dd0c <iprintf>
      if (inseg.p->len < off) {
 8008dd0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008dd4:	8943      	ldrh	r3, [r0, #10]
 8008dd6:	429d      	cmp	r5, r3
 8008dd8:	f340 812a 	ble.w	8009030 <tcp_receive+0x5e0>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008ddc:	8903      	ldrh	r3, [r0, #8]
 8008dde:	429d      	cmp	r5, r3
 8008de0:	dd06      	ble.n	8008df0 <tcp_receive+0x3a0>
 8008de2:	4b8a      	ldr	r3, [pc, #552]	; (800900c <tcp_receive+0x5bc>)
 8008de4:	498d      	ldr	r1, [pc, #564]	; (800901c <tcp_receive+0x5cc>)
 8008de6:	488b      	ldr	r0, [pc, #556]	; (8009014 <tcp_receive+0x5c4>)
 8008de8:	f240 523f 	movw	r2, #1343	; 0x53f
 8008dec:	f004 ff8e 	bl	800dd0c <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008df0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008df4:	8919      	ldrh	r1, [r3, #8]
 8008df6:	1b4d      	subs	r5, r1, r5
 8008df8:	b2ad      	uxth	r5, r5
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 8008dfa:	2200      	movs	r2, #0
        while (p->len < off) {
 8008dfc:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8008e00:	459a      	cmp	sl, r3
 8008e02:	f300 80f2 	bgt.w	8008fea <tcp_receive+0x59a>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8008e06:	f1ca 0100 	rsb	r1, sl, #0
 8008e0a:	b209      	sxth	r1, r1
 8008e0c:	4648      	mov	r0, r9
 8008e0e:	f7fe fbdd 	bl	80075cc <pbuf_header>
 8008e12:	b130      	cbz	r0, 8008e22 <tcp_receive+0x3d2>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008e14:	4b7d      	ldr	r3, [pc, #500]	; (800900c <tcp_receive+0x5bc>)
 8008e16:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008e1a:	4981      	ldr	r1, [pc, #516]	; (8009020 <tcp_receive+0x5d0>)
 8008e1c:	487d      	ldr	r0, [pc, #500]	; (8009014 <tcp_receive+0x5c4>)
 8008e1e:	f004 ff75 	bl	800dd0c <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008e22:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8008e26:	6833      	ldr	r3, [r6, #0]
 8008e28:	6a62      	ldr	r2, [r4, #36]	; 0x24
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008e2a:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008e2c:	440b      	add	r3, r1
 8008e2e:	1a9b      	subs	r3, r3, r2
 8008e30:	f8a8 3008 	strh.w	r3, [r8, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008e34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e38:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008e3a:	6831      	ldr	r1, [r6, #0]
 8008e3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008e3e:	1a8b      	subs	r3, r1, r2
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f2c0 82b1 	blt.w	80093a8 <tcp_receive+0x958>
 8008e46:	1c4b      	adds	r3, r1, #1
 8008e48:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8008e4a:	1a9b      	subs	r3, r3, r2
 8008e4c:	1a1b      	subs	r3, r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f300 82aa 	bgt.w	80093a8 <tcp_receive+0x958>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008e54:	4291      	cmp	r1, r2
 8008e56:	f040 81c9 	bne.w	80091ec <tcp_receive+0x79c>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008e5a:	4d6b      	ldr	r5, [pc, #428]	; (8009008 <tcp_receive+0x5b8>)
 8008e5c:	68eb      	ldr	r3, [r5, #12]
 8008e5e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8008e62:	8998      	ldrh	r0, [r3, #12]
 8008e64:	f7fc fdf8 	bl	8005a58 <lwip_htons>
 8008e68:	f010 0003 	ands.w	r0, r0, #3
 8008e6c:	bf18      	it	ne
 8008e6e:	2001      	movne	r0, #1
 8008e70:	4440      	add	r0, r8

        if (tcplen > pcb->rcv_wnd) {
 8008e72:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8008e74:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8008e76:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8008e78:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8008e7a:	d242      	bcs.n	8008f02 <tcp_receive+0x4b2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008e7c:	68eb      	ldr	r3, [r5, #12]
 8008e7e:	8998      	ldrh	r0, [r3, #12]
 8008e80:	f7fc fdea 	bl	8005a58 <lwip_htons>
 8008e84:	07c2      	lsls	r2, r0, #31
 8008e86:	d510      	bpl.n	8008eaa <tcp_receive+0x45a>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008e88:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8008e8c:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8008e90:	4640      	mov	r0, r8
 8008e92:	f7fc fde1 	bl	8005a58 <lwip_htons>
 8008e96:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8008e9a:	f7fc fddd 	bl	8005a58 <lwip_htons>
 8008e9e:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8008ea2:	ea40 0808 	orr.w	r8, r0, r8
 8008ea6:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008eaa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008eac:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008eae:	68eb      	ldr	r3, [r5, #12]
 8008eb0:	8998      	ldrh	r0, [r3, #12]
 8008eb2:	f7fc fdd1 	bl	8005a58 <lwip_htons>
 8008eb6:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
 8008eb8:	bf48      	it	mi
 8008eba:	892b      	ldrhmi	r3, [r5, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008ebc:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 8008ebe:	bf44      	itt	mi
 8008ec0:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8008ec4:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8008ec6:	8929      	ldrh	r1, [r5, #8]
 8008ec8:	f7fe fcc8 	bl	800785c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008ecc:	68eb      	ldr	r3, [r5, #12]
 8008ece:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8008ed2:	8998      	ldrh	r0, [r3, #12]
 8008ed4:	f7fc fdc0 	bl	8005a58 <lwip_htons>
 8008ed8:	f010 0003 	ands.w	r0, r0, #3
 8008edc:	bf18      	it	ne
 8008ede:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008ee0:	6833      	ldr	r3, [r6, #0]
 8008ee2:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8008ee4:	4440      	add	r0, r8
 8008ee6:	b280      	uxth	r0, r0
 8008ee8:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008eea:	4418      	add	r0, r3
 8008eec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008eee:	4413      	add	r3, r2
 8008ef0:	4298      	cmp	r0, r3
 8008ef2:	d006      	beq.n	8008f02 <tcp_receive+0x4b2>
 8008ef4:	4b45      	ldr	r3, [pc, #276]	; (800900c <tcp_receive+0x5bc>)
 8008ef6:	494b      	ldr	r1, [pc, #300]	; (8009024 <tcp_receive+0x5d4>)
 8008ef8:	4846      	ldr	r0, [pc, #280]	; (8009014 <tcp_receive+0x5c4>)
 8008efa:	f240 527f 	movw	r2, #1407	; 0x57f
 8008efe:	f004 ff05 	bl	800dd0c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008f02:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f000 80ad 	beq.w	8009064 <tcp_receive+0x614>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008f0a:	68eb      	ldr	r3, [r5, #12]
 8008f0c:	8998      	ldrh	r0, [r3, #12]
 8008f0e:	f7fc fda3 	bl	8005a58 <lwip_htons>
 8008f12:	07c0      	lsls	r0, r0, #31
 8008f14:	f100 80a3 	bmi.w	800905e <tcp_receive+0x60e>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 8008f18:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008f1c:	f1b8 0f00 	cmp.w	r8, #0
 8008f20:	d03c      	beq.n	8008f9c <tcp_receive+0x54c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008f22:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 8008f26:	6830      	ldr	r0, [r6, #0]
 8008f28:	883b      	ldrh	r3, [r7, #0]
 8008f2a:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008f2e:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8008f32:	4403      	add	r3, r0
 8008f34:	4411      	add	r1, r2
 8008f36:	1a59      	subs	r1, r3, r1
            while (next &&
 8008f38:	2900      	cmp	r1, #0
 8008f3a:	f280 80cf 	bge.w	80090dc <tcp_receive+0x68c>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 8008f3e:	1a9b      	subs	r3, r3, r2
            if (next &&
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	dd2b      	ble.n	8008f9c <tcp_receive+0x54c>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008f44:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008f46:	1a12      	subs	r2, r2, r0
 8008f48:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008f4a:	8998      	ldrh	r0, [r3, #12]
 8008f4c:	f7fc fd84 	bl	8005a58 <lwip_htons>
 8008f50:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
 8008f52:	bf48      	it	mi
 8008f54:	892b      	ldrhmi	r3, [r5, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008f56:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 8008f58:	bf44      	itt	mi
 8008f5a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8008f5e:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8008f60:	8929      	ldrh	r1, [r5, #8]
 8008f62:	f7fe fc7b 	bl	800785c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008f66:	68eb      	ldr	r3, [r5, #12]
 8008f68:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8008f6c:	8998      	ldrh	r0, [r3, #12]
 8008f6e:	f7fc fd73 	bl	8005a58 <lwip_htons>
 8008f72:	f010 0003 	ands.w	r0, r0, #3
 8008f76:	bf18      	it	ne
 8008f78:	2001      	movne	r0, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008f7a:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 8008f7c:	4448      	add	r0, r9
 8008f7e:	b280      	uxth	r0, r0
 8008f80:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008f82:	4418      	add	r0, r3
 8008f84:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	4298      	cmp	r0, r3
 8008f8c:	d006      	beq.n	8008f9c <tcp_receive+0x54c>
 8008f8e:	4b1f      	ldr	r3, [pc, #124]	; (800900c <tcp_receive+0x5bc>)
 8008f90:	4925      	ldr	r1, [pc, #148]	; (8009028 <tcp_receive+0x5d8>)
 8008f92:	4820      	ldr	r0, [pc, #128]	; (8009014 <tcp_receive+0x5c4>)
 8008f94:	f240 52af 	movw	r2, #1455	; 0x5af
 8008f98:	f004 feb8 	bl	800dd0c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008f9c:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 8008fa0:	e060      	b.n	8009064 <tcp_receive+0x614>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008fa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008fa4:	6829      	ldr	r1, [r5, #0]
 8008fa6:	1a5b      	subs	r3, r3, r1
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f6bf aee1 	bge.w	8008d70 <tcp_receive+0x320>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008fae:	4b1f      	ldr	r3, [pc, #124]	; (800902c <tcp_receive+0x5dc>)
      m = m - (pcb->sa >> 3);
 8008fb0:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008fb4:	6819      	ldr	r1, [r3, #0]
 8008fb6:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 8008fb8:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
 8008fbc:	b289      	uxth	r1, r1
 8008fbe:	b20b      	sxth	r3, r1
      if (m < 0) {
 8008fc0:	2b00      	cmp	r3, #0
      m = m - (pcb->sv >> 2);
 8008fc2:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa += m;
 8008fc6:	4408      	add	r0, r1
        m = -m;
 8008fc8:	bfbc      	itt	lt
 8008fca:	4249      	neglt	r1, r1
 8008fcc:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 8008fce:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 8008fd2:	4413      	add	r3, r2
      pcb->sa += m;
 8008fd4:	b200      	sxth	r0, r0
      pcb->sv += m;
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008fda:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8008fde:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8008fe2:	2300      	movs	r3, #0
      pcb->sa += m;
 8008fe4:	87a0      	strh	r0, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 8008fe6:	6363      	str	r3, [r4, #52]	; 0x34
 8008fe8:	e6c2      	b.n	8008d70 <tcp_receive+0x320>
          p->tot_len = new_tot_len;
 8008fea:	f8a9 5008 	strh.w	r5, [r9, #8]
          p->len = 0;
 8008fee:	f8a9 200a 	strh.w	r2, [r9, #10]
          off -= p->len;
 8008ff2:	ebaa 0a03 	sub.w	sl, sl, r3
          p = p->next;
 8008ff6:	f8d9 9000 	ldr.w	r9, [r9]
 8008ffa:	e6ff      	b.n	8008dfc <tcp_receive+0x3ac>
 8008ffc:	08010747 	.word	0x08010747
 8009000:	0801076f 	.word	0x0801076f
 8009004:	20000d5a 	.word	0x20000d5a
 8009008:	20000d28 	.word	0x20000d28
 800900c:	080106fc 	.word	0x080106fc
 8009010:	0801078f 	.word	0x0801078f
 8009014:	0800f3a7 	.word	0x0800f3a7
 8009018:	0801079f 	.word	0x0801079f
 800901c:	080107ae 	.word	0x080107ae
 8009020:	080107be 	.word	0x080107be
 8009024:	080107d1 	.word	0x080107d1
 8009028:	08010808 	.word	0x08010808
 800902c:	20005058 	.word	0x20005058
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8009030:	4269      	negs	r1, r5
 8009032:	b209      	sxth	r1, r1
 8009034:	f7fe faca 	bl	80075cc <pbuf_header>
 8009038:	2800      	cmp	r0, #0
 800903a:	f43f aef2 	beq.w	8008e22 <tcp_receive+0x3d2>
          LWIP_ASSERT("pbuf_header failed", 0);
 800903e:	4b9c      	ldr	r3, [pc, #624]	; (80092b0 <tcp_receive+0x860>)
 8009040:	f240 5251 	movw	r2, #1361	; 0x551
 8009044:	e6e9      	b.n	8008e1a <tcp_receive+0x3ca>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009046:	1a9b      	subs	r3, r3, r2
 8009048:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800904a:	bfbe      	ittt	lt
 800904c:	7ea3      	ldrblt	r3, [r4, #26]
 800904e:	f043 0302 	orrlt.w	r3, r3, #2
 8009052:	76a3      	strblt	r3, [r4, #26]
 8009054:	e6f1      	b.n	8008e3a <tcp_receive+0x3ea>
              pcb->ooseq = pcb->ooseq->next;
 8009056:	6803      	ldr	r3, [r0, #0]
 8009058:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800905a:	f7fe feff 	bl	8007e5c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800905e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009060:	2800      	cmp	r0, #0
 8009062:	d1f8      	bne.n	8009056 <tcp_receive+0x606>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009064:	883a      	ldrh	r2, [r7, #0]
 8009066:	6833      	ldr	r3, [r6, #0]
 8009068:	4413      	add	r3, r2
 800906a:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800906c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800906e:	4293      	cmp	r3, r2
 8009070:	d206      	bcs.n	8009080 <tcp_receive+0x630>
 8009072:	4b8f      	ldr	r3, [pc, #572]	; (80092b0 <tcp_receive+0x860>)
 8009074:	498f      	ldr	r1, [pc, #572]	; (80092b4 <tcp_receive+0x864>)
 8009076:	4890      	ldr	r0, [pc, #576]	; (80092b8 <tcp_receive+0x868>)
 8009078:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800907c:	f004 fe46 	bl	800dd0c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009080:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009082:	883a      	ldrh	r2, [r7, #0]
 8009084:	1a9b      	subs	r3, r3, r2
 8009086:	8523      	strh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009088:	4620      	mov	r0, r4
 800908a:	f7fe fe7d 	bl	8007d88 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800908e:	686b      	ldr	r3, [r5, #4]
 8009090:	891a      	ldrh	r2, [r3, #8]
 8009092:	b11a      	cbz	r2, 800909c <tcp_receive+0x64c>
          recv_data = inseg.p;
 8009094:	4a89      	ldr	r2, [pc, #548]	; (80092bc <tcp_receive+0x86c>)
 8009096:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009098:	2300      	movs	r3, #0
 800909a:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800909c:	68eb      	ldr	r3, [r5, #12]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800909e:	4f84      	ldr	r7, [pc, #528]	; (80092b0 <tcp_receive+0x860>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80090a0:	8998      	ldrh	r0, [r3, #12]
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80090a2:	f8df 8224 	ldr.w	r8, [pc, #548]	; 80092c8 <tcp_receive+0x878>
 80090a6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80092b8 <tcp_receive+0x868>
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80090aa:	f7fc fcd5 	bl	8005a58 <lwip_htons>
 80090ae:	07c5      	lsls	r5, r0, #31
          recv_flags |= TF_GOT_FIN;
 80090b0:	bf41      	itttt	mi
 80090b2:	4a83      	ldrmi	r2, [pc, #524]	; (80092c0 <tcp_receive+0x870>)
 80090b4:	7813      	ldrbmi	r3, [r2, #0]
 80090b6:	f043 0320 	orrmi.w	r3, r3, #32
 80090ba:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 80090bc:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80090be:	b125      	cbz	r5, 80090ca <tcp_receive+0x67a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80090c0:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 80090c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80090c4:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 80090c6:	428b      	cmp	r3, r1
 80090c8:	d033      	beq.n	8009132 <tcp_receive+0x6e2>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80090ca:	7ea3      	ldrb	r3, [r4, #26]
 80090cc:	07d9      	lsls	r1, r3, #31
 80090ce:	f140 8087 	bpl.w	80091e0 <tcp_receive+0x790>
 80090d2:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 80090d6:	f043 0302 	orr.w	r3, r3, #2
 80090da:	e083      	b.n	80091e4 <tcp_receive+0x794>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80090dc:	f8be 000c 	ldrh.w	r0, [lr, #12]
 80090e0:	f7fc fcba 	bl	8005a58 <lwip_htons>
 80090e4:	07c1      	lsls	r1, r0, #31
 80090e6:	d51d      	bpl.n	8009124 <tcp_receive+0x6d4>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80090e8:	68eb      	ldr	r3, [r5, #12]
 80090ea:	8998      	ldrh	r0, [r3, #12]
 80090ec:	f7fc fcb4 	bl	8005a58 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80090f0:	0782      	lsls	r2, r0, #30
 80090f2:	d417      	bmi.n	8009124 <tcp_receive+0x6d4>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80090f4:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80090f8:	2001      	movs	r0, #1
 80090fa:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 80090fe:	f7fc fcab 	bl	8005a58 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 8009102:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009104:	ea49 0000 	orr.w	r0, r9, r0
 8009108:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800910c:	8998      	ldrh	r0, [r3, #12]
 800910e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8009112:	f7fc fca1 	bl	8005a58 <lwip_htons>
 8009116:	f010 0003 	ands.w	r0, r0, #3
 800911a:	bf18      	it	ne
 800911c:	2001      	movne	r0, #1
 800911e:	4481      	add	r9, r0
 8009120:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 8009124:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 8009128:	4640      	mov	r0, r8
 800912a:	f7fe fe97 	bl	8007e5c <tcp_seg_free>
              next = next->next;
 800912e:	46c8      	mov	r8, r9
 8009130:	e6f4      	b.n	8008f1c <tcp_receive+0x4cc>
          seqno = pcb->ooseq->tcphdr->seqno;
 8009132:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009134:	8990      	ldrh	r0, [r2, #12]
 8009136:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800913a:	f7fc fc8d 	bl	8005a58 <lwip_htons>
 800913e:	6a63      	ldr	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009140:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009144:	f010 0003 	ands.w	r0, r0, #3
 8009148:	bf18      	it	ne
 800914a:	2001      	movne	r0, #1
 800914c:	449a      	add	sl, r3
 800914e:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009150:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009152:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009154:	8998      	ldrh	r0, [r3, #12]
 8009156:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
 800915a:	f7fc fc7d 	bl	8005a58 <lwip_htons>
 800915e:	f010 0003 	ands.w	r0, r0, #3
 8009162:	bf18      	it	ne
 8009164:	2001      	movne	r0, #1
 8009166:	4458      	add	r0, fp
 8009168:	4582      	cmp	sl, r0
 800916a:	d206      	bcs.n	800917a <tcp_receive+0x72a>
 800916c:	463b      	mov	r3, r7
 800916e:	f240 52de 	movw	r2, #1502	; 0x5de
 8009172:	4641      	mov	r1, r8
 8009174:	4648      	mov	r0, r9
 8009176:	f004 fdc9 	bl	800dd0c <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800917a:	68eb      	ldr	r3, [r5, #12]
 800917c:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8009180:	8998      	ldrh	r0, [r3, #12]
 8009182:	f7fc fc69 	bl	8005a58 <lwip_htons>
 8009186:	f010 0003 	ands.w	r0, r0, #3
 800918a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800918c:	bf18      	it	ne
 800918e:	2001      	movne	r0, #1
 8009190:	4450      	add	r0, sl
 8009192:	1a18      	subs	r0, r3, r0
 8009194:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8009196:	4620      	mov	r0, r4
 8009198:	f7fe fdf6 	bl	8007d88 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800919c:	6869      	ldr	r1, [r5, #4]
 800919e:	890b      	ldrh	r3, [r1, #8]
 80091a0:	b133      	cbz	r3, 80091b0 <tcp_receive+0x760>
            if (recv_data) {
 80091a2:	4b46      	ldr	r3, [pc, #280]	; (80092bc <tcp_receive+0x86c>)
 80091a4:	6818      	ldr	r0, [r3, #0]
 80091a6:	b1c8      	cbz	r0, 80091dc <tcp_receive+0x78c>
              pbuf_cat(recv_data, cseg->p);
 80091a8:	f7fe fbe4 	bl	8007974 <pbuf_cat>
            cseg->p = NULL;
 80091ac:	2300      	movs	r3, #0
 80091ae:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80091b0:	68eb      	ldr	r3, [r5, #12]
 80091b2:	8998      	ldrh	r0, [r3, #12]
 80091b4:	f7fc fc50 	bl	8005a58 <lwip_htons>
 80091b8:	07c0      	lsls	r0, r0, #31
 80091ba:	d509      	bpl.n	80091d0 <tcp_receive+0x780>
            recv_flags |= TF_GOT_FIN;
 80091bc:	4a40      	ldr	r2, [pc, #256]	; (80092c0 <tcp_receive+0x870>)
 80091be:	7813      	ldrb	r3, [r2, #0]
 80091c0:	f043 0320 	orr.w	r3, r3, #32
 80091c4:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80091c6:	7d23      	ldrb	r3, [r4, #20]
 80091c8:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 80091ca:	bf04      	itt	eq
 80091cc:	2307      	moveq	r3, #7
 80091ce:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 80091d4:	4628      	mov	r0, r5
 80091d6:	f7fe fe41 	bl	8007e5c <tcp_seg_free>
 80091da:	e76f      	b.n	80090bc <tcp_receive+0x66c>
              recv_data = cseg->p;
 80091dc:	6019      	str	r1, [r3, #0]
 80091de:	e7e5      	b.n	80091ac <tcp_receive+0x75c>
        tcp_ack(pcb);
 80091e0:	f043 0301 	orr.w	r3, r3, #1
 80091e4:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 80091e6:	b003      	add	sp, #12
 80091e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 80091ec:	4620      	mov	r0, r4
 80091ee:	f001 faa7 	bl	800a740 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 80091f2:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80091f4:	b925      	cbnz	r5, 8009200 <tcp_receive+0x7b0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80091f6:	4833      	ldr	r0, [pc, #204]	; (80092c4 <tcp_receive+0x874>)
 80091f8:	f7fe fe48 	bl	8007e8c <tcp_seg_copy>
 80091fc:	6720      	str	r0, [r4, #112]	; 0x70
 80091fe:	e7f2      	b.n	80091e6 <tcp_receive+0x796>
            if (seqno == next->tcphdr->seqno) {
 8009200:	6833      	ldr	r3, [r6, #0]
 8009202:	f04f 0800 	mov.w	r8, #0
 8009206:	f103 3eff 	add.w	lr, r3, #4294967295
 800920a:	f103 0c01 	add.w	ip, r3, #1
 800920e:	68e8      	ldr	r0, [r5, #12]
 8009210:	6842      	ldr	r2, [r0, #4]
 8009212:	429a      	cmp	r2, r3
 8009214:	d117      	bne.n	8009246 <tcp_receive+0x7f6>
              if (inseg.len > next->len) {
 8009216:	482b      	ldr	r0, [pc, #172]	; (80092c4 <tcp_receive+0x874>)
 8009218:	892b      	ldrh	r3, [r5, #8]
 800921a:	8902      	ldrh	r2, [r0, #8]
 800921c:	429a      	cmp	r2, r3
 800921e:	d9e2      	bls.n	80091e6 <tcp_receive+0x796>
                cseg = tcp_seg_copy(&inseg);
 8009220:	f7fe fe34 	bl	8007e8c <tcp_seg_copy>
                if (cseg != NULL) {
 8009224:	2800      	cmp	r0, #0
 8009226:	d0de      	beq.n	80091e6 <tcp_receive+0x796>
                  if (prev != NULL) {
 8009228:	f1b8 0f00 	cmp.w	r8, #0
 800922c:	d009      	beq.n	8009242 <tcp_receive+0x7f2>
                    prev->next = cseg;
 800922e:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8009232:	4629      	mov	r1, r5
}
 8009234:	b003      	add	sp, #12
 8009236:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 800923a:	f7ff bbcb 	b.w	80089d4 <tcp_oos_insert_segment>
 800923e:	460d      	mov	r5, r1
 8009240:	e7e5      	b.n	800920e <tcp_receive+0x7be>
                    pcb->ooseq = cseg;
 8009242:	6720      	str	r0, [r4, #112]	; 0x70
 8009244:	e7f5      	b.n	8009232 <tcp_receive+0x7e2>
              if (prev == NULL) {
 8009246:	f1b8 0f00 	cmp.w	r8, #0
 800924a:	d109      	bne.n	8009260 <tcp_receive+0x810>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800924c:	1a99      	subs	r1, r3, r2
 800924e:	2900      	cmp	r1, #0
 8009250:	da3c      	bge.n	80092cc <tcp_receive+0x87c>
                  cseg = tcp_seg_copy(&inseg);
 8009252:	481c      	ldr	r0, [pc, #112]	; (80092c4 <tcp_receive+0x874>)
 8009254:	f7fe fe1a 	bl	8007e8c <tcp_seg_copy>
                  if (cseg != NULL) {
 8009258:	2800      	cmp	r0, #0
 800925a:	d0c4      	beq.n	80091e6 <tcp_receive+0x796>
                    pcb->ooseq = cseg;
 800925c:	6720      	str	r0, [r4, #112]	; 0x70
 800925e:	e7e8      	b.n	8009232 <tcp_receive+0x7e2>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8009260:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8009264:	6849      	ldr	r1, [r1, #4]
 8009266:	ebae 0101 	sub.w	r1, lr, r1
 800926a:	2900      	cmp	r1, #0
 800926c:	db2e      	blt.n	80092cc <tcp_receive+0x87c>
 800926e:	ebac 0102 	sub.w	r1, ip, r2
 8009272:	2900      	cmp	r1, #0
 8009274:	dc2a      	bgt.n	80092cc <tcp_receive+0x87c>
                  cseg = tcp_seg_copy(&inseg);
 8009276:	4813      	ldr	r0, [pc, #76]	; (80092c4 <tcp_receive+0x874>)
 8009278:	f7fe fe08 	bl	8007e8c <tcp_seg_copy>
                  if (cseg != NULL) {
 800927c:	4604      	mov	r4, r0
 800927e:	2800      	cmp	r0, #0
 8009280:	d0b1      	beq.n	80091e6 <tcp_receive+0x796>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009282:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009286:	6831      	ldr	r1, [r6, #0]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800928e:	4413      	add	r3, r2
 8009290:	1a5b      	subs	r3, r3, r1
 8009292:	2b00      	cmp	r3, #0
 8009294:	dd07      	ble.n	80092a6 <tcp_receive+0x856>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009296:	1a89      	subs	r1, r1, r2
 8009298:	b289      	uxth	r1, r1
 800929a:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800929e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80092a2:	f7fe fadb 	bl	800785c <pbuf_realloc>
                    prev->next = cseg;
 80092a6:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 80092aa:	4629      	mov	r1, r5
 80092ac:	4620      	mov	r0, r4
 80092ae:	e7c1      	b.n	8009234 <tcp_receive+0x7e4>
 80092b0:	080106fc 	.word	0x080106fc
 80092b4:	08010843 	.word	0x08010843
 80092b8:	0800f3a7 	.word	0x0800f3a7
 80092bc:	20000d3c 	.word	0x20000d3c
 80092c0:	20000d40 	.word	0x20000d40
 80092c4:	20000d28 	.word	0x20000d28
 80092c8:	08010862 	.word	0x08010862
              if (next->next == NULL &&
 80092cc:	6829      	ldr	r1, [r5, #0]
 80092ce:	46a8      	mov	r8, r5
 80092d0:	2900      	cmp	r1, #0
 80092d2:	d1b4      	bne.n	800923e <tcp_receive+0x7ee>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80092d4:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	dd85      	ble.n	80091e6 <tcp_receive+0x796>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80092da:	8980      	ldrh	r0, [r0, #12]
 80092dc:	f7fc fbbc 	bl	8005a58 <lwip_htons>
 80092e0:	07c2      	lsls	r2, r0, #31
 80092e2:	d480      	bmi.n	80091e6 <tcp_receive+0x796>
                next->next = tcp_seg_copy(&inseg);
 80092e4:	483c      	ldr	r0, [pc, #240]	; (80093d8 <tcp_receive+0x988>)
 80092e6:	f7fe fdd1 	bl	8007e8c <tcp_seg_copy>
 80092ea:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 80092ec:	2800      	cmp	r0, #0
 80092ee:	f43f af7a 	beq.w	80091e6 <tcp_receive+0x796>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80092f2:	68eb      	ldr	r3, [r5, #12]
 80092f4:	6831      	ldr	r1, [r6, #0]
 80092f6:	685a      	ldr	r2, [r3, #4]
 80092f8:	892b      	ldrh	r3, [r5, #8]
 80092fa:	4413      	add	r3, r2
 80092fc:	1a5b      	subs	r3, r3, r1
 80092fe:	2b00      	cmp	r3, #0
 8009300:	dd05      	ble.n	800930e <tcp_receive+0x8be>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009302:	1a89      	subs	r1, r1, r2
 8009304:	b289      	uxth	r1, r1
 8009306:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8009308:	6868      	ldr	r0, [r5, #4]
 800930a:	f7fe faa7 	bl	800785c <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800930e:	6832      	ldr	r2, [r6, #0]
 8009310:	883b      	ldrh	r3, [r7, #0]
 8009312:	4413      	add	r3, r2
 8009314:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009316:	1a9b      	subs	r3, r3, r2
 8009318:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800931a:	1a9b      	subs	r3, r3, r2
 800931c:	2b00      	cmp	r3, #0
 800931e:	f77f af62 	ble.w	80091e6 <tcp_receive+0x796>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009322:	682b      	ldr	r3, [r5, #0]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	8998      	ldrh	r0, [r3, #12]
 8009328:	f7fc fb96 	bl	8005a58 <lwip_htons>
 800932c:	07c3      	lsls	r3, r0, #31
 800932e:	d511      	bpl.n	8009354 <tcp_receive+0x904>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009330:	682b      	ldr	r3, [r5, #0]
 8009332:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8009336:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 800933a:	4640      	mov	r0, r8
 800933c:	f7fc fb8c 	bl	8005a58 <lwip_htons>
 8009340:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8009344:	f7fc fb88 	bl	8005a58 <lwip_htons>
 8009348:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800934c:	ea40 0808 	orr.w	r8, r0, r8
 8009350:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009354:	6832      	ldr	r2, [r6, #0]
 8009356:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	1a89      	subs	r1, r1, r2
 800935c:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 800935e:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009360:	4411      	add	r1, r2
 8009362:	b289      	uxth	r1, r1
 8009364:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009366:	f7fe fa79 	bl	800785c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800936a:	682b      	ldr	r3, [r5, #0]
 800936c:	891d      	ldrh	r5, [r3, #8]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	8998      	ldrh	r0, [r3, #12]
 8009372:	f7fc fb71 	bl	8005a58 <lwip_htons>
 8009376:	f010 0003 	ands.w	r0, r0, #3
 800937a:	bf18      	it	ne
 800937c:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800937e:	6833      	ldr	r3, [r6, #0]
 8009380:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 8009382:	4428      	add	r0, r5
 8009384:	b280      	uxth	r0, r0
 8009386:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009388:	4418      	add	r0, r3
 800938a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800938c:	4413      	add	r3, r2
 800938e:	4298      	cmp	r0, r3
 8009390:	f43f af29 	beq.w	80091e6 <tcp_receive+0x796>
 8009394:	4b11      	ldr	r3, [pc, #68]	; (80093dc <tcp_receive+0x98c>)
 8009396:	4912      	ldr	r1, [pc, #72]	; (80093e0 <tcp_receive+0x990>)
 8009398:	4812      	ldr	r0, [pc, #72]	; (80093e4 <tcp_receive+0x994>)
 800939a:	f240 627b 	movw	r2, #1659	; 0x67b
}
 800939e:	b003      	add	sp, #12
 80093a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80093a4:	f004 bcb2 	b.w	800dd0c <iprintf>
      tcp_send_empty_ack(pcb);
 80093a8:	4620      	mov	r0, r4
}
 80093aa:	b003      	add	sp, #12
 80093ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 80093b0:	f001 b9c6 	b.w	800a740 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80093b4:	6833      	ldr	r3, [r6, #0]
 80093b6:	1a99      	subs	r1, r3, r2
 80093b8:	2900      	cmp	r1, #0
 80093ba:	db06      	blt.n	80093ca <tcp_receive+0x97a>
 80093bc:	3301      	adds	r3, #1
 80093be:	1a9b      	subs	r3, r3, r2
 80093c0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80093c2:	1a9b      	subs	r3, r3, r2
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f77f af0e 	ble.w	80091e6 <tcp_receive+0x796>
      tcp_ack_now(pcb);
 80093ca:	7ea3      	ldrb	r3, [r4, #26]
 80093cc:	e683      	b.n	80090d6 <tcp_receive+0x686>
        pcb->dupacks = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093d4:	f7ff bbb1 	b.w	8008b3a <tcp_receive+0xea>
 80093d8:	20000d28 	.word	0x20000d28
 80093dc:	080106fc 	.word	0x080106fc
 80093e0:	080107d1 	.word	0x080107d1
 80093e4:	0800f3a7 	.word	0x0800f3a7

080093e8 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80093e8:	4b0b      	ldr	r3, [pc, #44]	; (8009418 <tcp_getoptbyte+0x30>)
 80093ea:	4a0c      	ldr	r2, [pc, #48]	; (800941c <tcp_getoptbyte+0x34>)
 80093ec:	6819      	ldr	r1, [r3, #0]
{
 80093ee:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80093f0:	b121      	cbz	r1, 80093fc <tcp_getoptbyte+0x14>
 80093f2:	480b      	ldr	r0, [pc, #44]	; (8009420 <tcp_getoptbyte+0x38>)
 80093f4:	8813      	ldrh	r3, [r2, #0]
 80093f6:	8800      	ldrh	r0, [r0, #0]
 80093f8:	4283      	cmp	r3, r0
 80093fa:	d207      	bcs.n	800940c <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80093fc:	4b09      	ldr	r3, [pc, #36]	; (8009424 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 80093fe:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8009400:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8009402:	440b      	add	r3, r1
 8009404:	1c48      	adds	r0, r1, #1
 8009406:	8010      	strh	r0, [r2, #0]
 8009408:	7d18      	ldrb	r0, [r3, #20]
 800940a:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800940c:	1c5c      	adds	r4, r3, #1
 800940e:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 8009410:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8009412:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 8009414:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8009416:	bd10      	pop	{r4, pc}
 8009418:	20000d54 	.word	0x20000d54
 800941c:	20000d48 	.word	0x20000d48
 8009420:	20000d50 	.word	0x20000d50
 8009424:	20000d4c 	.word	0x20000d4c

08009428 <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8009428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800942a:	4d19      	ldr	r5, [pc, #100]	; (8009490 <tcp_parseopt.isra.1.part.2+0x68>)
 800942c:	4e19      	ldr	r6, [pc, #100]	; (8009494 <tcp_parseopt.isra.1.part.2+0x6c>)
 800942e:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 8009430:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009432:	802b      	strh	r3, [r5, #0]
 8009434:	8834      	ldrh	r4, [r6, #0]
 8009436:	882b      	ldrh	r3, [r5, #0]
 8009438:	42a3      	cmp	r3, r4
 800943a:	d300      	bcc.n	800943e <tcp_parseopt.isra.1.part.2+0x16>
 800943c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 800943e:	f7ff ffd3 	bl	80093e8 <tcp_getoptbyte>
      switch (opt) {
 8009442:	2801      	cmp	r0, #1
 8009444:	d0f6      	beq.n	8009434 <tcp_parseopt.isra.1.part.2+0xc>
 8009446:	d3f9      	bcc.n	800943c <tcp_parseopt.isra.1.part.2+0x14>
 8009448:	2802      	cmp	r0, #2
 800944a:	d117      	bne.n	800947c <tcp_parseopt.isra.1.part.2+0x54>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800944c:	f7ff ffcc 	bl	80093e8 <tcp_getoptbyte>
 8009450:	2804      	cmp	r0, #4
 8009452:	d1f3      	bne.n	800943c <tcp_parseopt.isra.1.part.2+0x14>
 8009454:	882b      	ldrh	r3, [r5, #0]
 8009456:	3301      	adds	r3, #1
 8009458:	42a3      	cmp	r3, r4
 800945a:	daef      	bge.n	800943c <tcp_parseopt.isra.1.part.2+0x14>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800945c:	f7ff ffc4 	bl	80093e8 <tcp_getoptbyte>
 8009460:	0200      	lsls	r0, r0, #8
 8009462:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8009464:	f7ff ffc0 	bl	80093e8 <tcp_getoptbyte>
 8009468:	4320      	orrs	r0, r4
 800946a:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800946c:	1e43      	subs	r3, r0, #1
 800946e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009472:	bf28      	it	cs
 8009474:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8009478:	8038      	strh	r0, [r7, #0]
 800947a:	e7db      	b.n	8009434 <tcp_parseopt.isra.1.part.2+0xc>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800947c:	f7ff ffb4 	bl	80093e8 <tcp_getoptbyte>
        if (data < 2) {
 8009480:	2801      	cmp	r0, #1
 8009482:	d9db      	bls.n	800943c <tcp_parseopt.isra.1.part.2+0x14>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8009484:	882b      	ldrh	r3, [r5, #0]
 8009486:	3b02      	subs	r3, #2
 8009488:	4418      	add	r0, r3
 800948a:	8028      	strh	r0, [r5, #0]
 800948c:	e7d2      	b.n	8009434 <tcp_parseopt.isra.1.part.2+0xc>
 800948e:	bf00      	nop
 8009490:	20000d48 	.word	0x20000d48
 8009494:	20000d58 	.word	0x20000d58

08009498 <tcp_input_delayed_close>:
{
 8009498:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 800949a:	4b0d      	ldr	r3, [pc, #52]	; (80094d0 <tcp_input_delayed_close+0x38>)
{
 800949c:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 800949e:	7818      	ldrb	r0, [r3, #0]
 80094a0:	f010 0010 	ands.w	r0, r0, #16
 80094a4:	d012      	beq.n	80094cc <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 80094a6:	7ea3      	ldrb	r3, [r4, #26]
 80094a8:	06db      	lsls	r3, r3, #27
 80094aa:	d406      	bmi.n	80094ba <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80094ac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80094b0:	b11b      	cbz	r3, 80094ba <tcp_input_delayed_close+0x22>
 80094b2:	f06f 010e 	mvn.w	r1, #14
 80094b6:	6920      	ldr	r0, [r4, #16]
 80094b8:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80094ba:	4621      	mov	r1, r4
 80094bc:	4805      	ldr	r0, [pc, #20]	; (80094d4 <tcp_input_delayed_close+0x3c>)
 80094be:	f7fe ff65 	bl	800838c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80094c2:	2001      	movs	r0, #1
 80094c4:	4621      	mov	r1, r4
 80094c6:	f7fd ff23 	bl	8007310 <memp_free>
 80094ca:	2001      	movs	r0, #1
}
 80094cc:	bd10      	pop	{r4, pc}
 80094ce:	bf00      	nop
 80094d0:	20000d40 	.word	0x20000d40
 80094d4:	20005054 	.word	0x20005054

080094d8 <tcp_input>:
{
 80094d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 80094dc:	4e9f      	ldr	r6, [pc, #636]	; (800975c <tcp_input+0x284>)
 80094de:	6843      	ldr	r3, [r0, #4]
 80094e0:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 80094e2:	8943      	ldrh	r3, [r0, #10]
 80094e4:	2b13      	cmp	r3, #19
{
 80094e6:	b089      	sub	sp, #36	; 0x24
 80094e8:	4605      	mov	r5, r0
  if (p->len < TCP_HLEN) {
 80094ea:	f240 81b2 	bls.w	8009852 <tcp_input+0x37a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80094ee:	4f9c      	ldr	r7, [pc, #624]	; (8009760 <tcp_input+0x288>)
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6978      	ldr	r0, [r7, #20]
 80094f4:	f7fd f91b 	bl	800672e <ip4_addr_isbroadcast_u32>
 80094f8:	46b8      	mov	r8, r7
 80094fa:	4604      	mov	r4, r0
 80094fc:	2800      	cmp	r0, #0
 80094fe:	f040 81a8 	bne.w	8009852 <tcp_input+0x37a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009508:	2be0      	cmp	r3, #224	; 0xe0
 800950a:	f000 81a2 	beq.w	8009852 <tcp_input+0x37a>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800950e:	6833      	ldr	r3, [r6, #0]
 8009510:	8998      	ldrh	r0, [r3, #12]
 8009512:	f7fc faa1 	bl	8005a58 <lwip_htons>
 8009516:	0a81      	lsrs	r1, r0, #10
 8009518:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800951c:	2913      	cmp	r1, #19
 800951e:	f240 8198 	bls.w	8009852 <tcp_input+0x37a>
 8009522:	892b      	ldrh	r3, [r5, #8]
 8009524:	b289      	uxth	r1, r1
 8009526:	428b      	cmp	r3, r1
 8009528:	f0c0 8193 	bcc.w	8009852 <tcp_input+0x37a>
  if (p->len >= hdrlen_bytes) {
 800952c:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800952e:	4a8d      	ldr	r2, [pc, #564]	; (8009764 <tcp_input+0x28c>)
  tcphdr_opt2 = NULL;
 8009530:	4f8d      	ldr	r7, [pc, #564]	; (8009768 <tcp_input+0x290>)
 8009532:	9206      	str	r2, [sp, #24]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8009534:	f1a1 0314 	sub.w	r3, r1, #20
 8009538:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 800953a:	4288      	cmp	r0, r1
  tcphdr_opt2 = NULL;
 800953c:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800953e:	8013      	strh	r3, [r2, #0]
 8009540:	4c8a      	ldr	r4, [pc, #552]	; (800976c <tcp_input+0x294>)
  if (p->len >= hdrlen_bytes) {
 8009542:	d344      	bcc.n	80095ce <tcp_input+0xf6>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8009544:	4249      	negs	r1, r1
 8009546:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8009548:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800954a:	f7fe f83f 	bl	80075cc <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800954e:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009550:	f8df b26c 	ldr.w	fp, [pc, #620]	; 80097c0 <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009554:	8820      	ldrh	r0, [r4, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009556:	4f86      	ldr	r7, [pc, #536]	; (8009770 <tcp_input+0x298>)
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009558:	f7fc fa7e 	bl	8005a58 <lwip_htons>
 800955c:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800955e:	6834      	ldr	r4, [r6, #0]
 8009560:	8860      	ldrh	r0, [r4, #2]
 8009562:	f7fc fa79 	bl	8005a58 <lwip_htons>
 8009566:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009568:	6834      	ldr	r4, [r6, #0]
 800956a:	6860      	ldr	r0, [r4, #4]
 800956c:	f7fc fa77 	bl	8005a5e <lwip_htonl>
 8009570:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009572:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009574:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009578:	68a0      	ldr	r0, [r4, #8]
 800957a:	f7fc fa70 	bl	8005a5e <lwip_htonl>
 800957e:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009580:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009582:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009584:	89e0      	ldrh	r0, [r4, #14]
 8009586:	f7fc fa67 	bl	8005a58 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800958a:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800958c:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800958e:	8998      	ldrh	r0, [r3, #12]
 8009590:	f7fc fa62 	bl	8005a58 <lwip_htons>
 8009594:	b2c0      	uxtb	r0, r0
 8009596:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800959a:	8929      	ldrh	r1, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 800959c:	4a75      	ldr	r2, [pc, #468]	; (8009774 <tcp_input+0x29c>)
 800959e:	9203      	str	r2, [sp, #12]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80095a0:	f010 0003 	ands.w	r0, r0, #3
 80095a4:	bf18      	it	ne
 80095a6:	2001      	movne	r0, #1
 80095a8:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80095aa:	4973      	ldr	r1, [pc, #460]	; (8009778 <tcp_input+0x2a0>)
  flags = TCPH_FLAGS(tcphdr);
 80095ac:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80095ae:	4b73      	ldr	r3, [pc, #460]	; (800977c <tcp_input+0x2a4>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80095b0:	680c      	ldr	r4, [r1, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80095b2:	8018      	strh	r0, [r3, #0]
  prev = NULL;
 80095b4:	f04f 0a00 	mov.w	sl, #0
 80095b8:	9304      	str	r3, [sp, #16]
 80095ba:	4689      	mov	r9, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80095bc:	2c00      	cmp	r4, #0
 80095be:	d140      	bne.n	8009642 <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80095c0:	4b6f      	ldr	r3, [pc, #444]	; (8009780 <tcp_input+0x2a8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80095c2:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8009784 <tcp_input+0x2ac>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80095c6:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80095c8:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 80097c4 <tcp_input+0x2ec>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80095cc:	e148      	b.n	8009860 <tcp_input+0x388>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80095ce:	682b      	ldr	r3, [r5, #0]
 80095d0:	b92b      	cbnz	r3, 80095de <tcp_input+0x106>
 80095d2:	4b6c      	ldr	r3, [pc, #432]	; (8009784 <tcp_input+0x2ac>)
 80095d4:	496c      	ldr	r1, [pc, #432]	; (8009788 <tcp_input+0x2b0>)
 80095d6:	486d      	ldr	r0, [pc, #436]	; (800978c <tcp_input+0x2b4>)
 80095d8:	22b2      	movs	r2, #178	; 0xb2
 80095da:	f004 fb97 	bl	800dd0c <iprintf>
    pbuf_header(p, -TCP_HLEN);
 80095de:	f06f 0113 	mvn.w	r1, #19
 80095e2:	4628      	mov	r0, r5
 80095e4:	f7fd fff2 	bl	80075cc <pbuf_header>
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80095e8:	9b06      	ldr	r3, [sp, #24]
    tcphdr_opt1len = p->len;
 80095ea:	8969      	ldrh	r1, [r5, #10]
 80095ec:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80095ee:	881c      	ldrh	r4, [r3, #0]
 80095f0:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80095f2:	4249      	negs	r1, r1
 80095f4:	b209      	sxth	r1, r1
 80095f6:	4628      	mov	r0, r5
 80095f8:	f7fd ffe8 	bl	80075cc <pbuf_header>
    if (opt2len > p->next->len) {
 80095fc:	6828      	ldr	r0, [r5, #0]
 80095fe:	8943      	ldrh	r3, [r0, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8009600:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 8009602:	42a3      	cmp	r3, r4
 8009604:	f0c0 8125 	bcc.w	8009852 <tcp_input+0x37a>
    pbuf_header(p->next, -(s16_t)opt2len);
 8009608:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800960a:	6843      	ldr	r3, [r0, #4]
 800960c:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 800960e:	b209      	sxth	r1, r1
 8009610:	f7fd ffdc 	bl	80075cc <pbuf_header>
    p->tot_len -= opt2len;
 8009614:	892b      	ldrh	r3, [r5, #8]
 8009616:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009618:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 800961a:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800961c:	b12b      	cbz	r3, 800962a <tcp_input+0x152>
 800961e:	4b59      	ldr	r3, [pc, #356]	; (8009784 <tcp_input+0x2ac>)
 8009620:	495b      	ldr	r1, [pc, #364]	; (8009790 <tcp_input+0x2b8>)
 8009622:	485a      	ldr	r0, [pc, #360]	; (800978c <tcp_input+0x2b4>)
 8009624:	22cf      	movs	r2, #207	; 0xcf
 8009626:	f004 fb71 	bl	800dd0c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800962a:	682b      	ldr	r3, [r5, #0]
 800962c:	892a      	ldrh	r2, [r5, #8]
 800962e:	891b      	ldrh	r3, [r3, #8]
 8009630:	429a      	cmp	r2, r3
 8009632:	d08c      	beq.n	800954e <tcp_input+0x76>
 8009634:	4b53      	ldr	r3, [pc, #332]	; (8009784 <tcp_input+0x2ac>)
 8009636:	4957      	ldr	r1, [pc, #348]	; (8009794 <tcp_input+0x2bc>)
 8009638:	4854      	ldr	r0, [pc, #336]	; (800978c <tcp_input+0x2b4>)
 800963a:	22d0      	movs	r2, #208	; 0xd0
 800963c:	f004 fb66 	bl	800dd0c <iprintf>
 8009640:	e785      	b.n	800954e <tcp_input+0x76>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009642:	7d23      	ldrb	r3, [r4, #20]
 8009644:	b92b      	cbnz	r3, 8009652 <tcp_input+0x17a>
 8009646:	4b4f      	ldr	r3, [pc, #316]	; (8009784 <tcp_input+0x2ac>)
 8009648:	4953      	ldr	r1, [pc, #332]	; (8009798 <tcp_input+0x2c0>)
 800964a:	4850      	ldr	r0, [pc, #320]	; (800978c <tcp_input+0x2b4>)
 800964c:	22e2      	movs	r2, #226	; 0xe2
 800964e:	f004 fb5d 	bl	800dd0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009652:	7d23      	ldrb	r3, [r4, #20]
 8009654:	2b0a      	cmp	r3, #10
 8009656:	d105      	bne.n	8009664 <tcp_input+0x18c>
 8009658:	4b4a      	ldr	r3, [pc, #296]	; (8009784 <tcp_input+0x2ac>)
 800965a:	4950      	ldr	r1, [pc, #320]	; (800979c <tcp_input+0x2c4>)
 800965c:	484b      	ldr	r0, [pc, #300]	; (800978c <tcp_input+0x2b4>)
 800965e:	22e3      	movs	r2, #227	; 0xe3
 8009660:	f004 fb54 	bl	800dd0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009664:	7d23      	ldrb	r3, [r4, #20]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d105      	bne.n	8009676 <tcp_input+0x19e>
 800966a:	4b46      	ldr	r3, [pc, #280]	; (8009784 <tcp_input+0x2ac>)
 800966c:	494c      	ldr	r1, [pc, #304]	; (80097a0 <tcp_input+0x2c8>)
 800966e:	4847      	ldr	r0, [pc, #284]	; (800978c <tcp_input+0x2b4>)
 8009670:	22e4      	movs	r2, #228	; 0xe4
 8009672:	f004 fb4b 	bl	800dd0c <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8009676:	6832      	ldr	r2, [r6, #0]
 8009678:	8b21      	ldrh	r1, [r4, #24]
 800967a:	8813      	ldrh	r3, [r2, #0]
 800967c:	4299      	cmp	r1, r3
 800967e:	68e3      	ldr	r3, [r4, #12]
 8009680:	d169      	bne.n	8009756 <tcp_input+0x27e>
 8009682:	8ae1      	ldrh	r1, [r4, #22]
 8009684:	8852      	ldrh	r2, [r2, #2]
 8009686:	4291      	cmp	r1, r2
 8009688:	d165      	bne.n	8009756 <tcp_input+0x27e>
        pcb->local_port == tcphdr->dest &&
 800968a:	6861      	ldr	r1, [r4, #4]
 800968c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009690:	4291      	cmp	r1, r2
 8009692:	d160      	bne.n	8009756 <tcp_input+0x27e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009694:	6821      	ldr	r1, [r4, #0]
 8009696:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800969a:	4291      	cmp	r1, r2
 800969c:	d15b      	bne.n	8009756 <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800969e:	429c      	cmp	r4, r3
 80096a0:	f040 8406 	bne.w	8009eb0 <tcp_input+0x9d8>
 80096a4:	4b37      	ldr	r3, [pc, #220]	; (8009784 <tcp_input+0x2ac>)
 80096a6:	493f      	ldr	r1, [pc, #252]	; (80097a4 <tcp_input+0x2cc>)
 80096a8:	4838      	ldr	r0, [pc, #224]	; (800978c <tcp_input+0x2b4>)
 80096aa:	22ec      	movs	r2, #236	; 0xec
 80096ac:	f004 fb2e 	bl	800dd0c <iprintf>
      if (prev != NULL) {
 80096b0:	f1ba 0f00 	cmp.w	sl, #0
 80096b4:	d007      	beq.n	80096c6 <tcp_input+0x1ee>
        prev->next = pcb->next;
 80096b6:	68e3      	ldr	r3, [r4, #12]
 80096b8:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 80096bc:	f8d9 3000 	ldr.w	r3, [r9]
 80096c0:	60e3      	str	r3, [r4, #12]
        tcp_active_pcbs = pcb;
 80096c2:	f8c9 4000 	str.w	r4, [r9]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80096c6:	68e3      	ldr	r3, [r4, #12]
 80096c8:	429c      	cmp	r4, r3
 80096ca:	d105      	bne.n	80096d8 <tcp_input+0x200>
 80096cc:	4b2d      	ldr	r3, [pc, #180]	; (8009784 <tcp_input+0x2ac>)
 80096ce:	4936      	ldr	r1, [pc, #216]	; (80097a8 <tcp_input+0x2d0>)
 80096d0:	482e      	ldr	r0, [pc, #184]	; (800978c <tcp_input+0x2b4>)
 80096d2:	22f4      	movs	r2, #244	; 0xf4
 80096d4:	f004 fb1a 	bl	800dd0c <iprintf>
    inseg.next = NULL;
 80096d8:	4b34      	ldr	r3, [pc, #208]	; (80097ac <tcp_input+0x2d4>)
    inseg.len = p->tot_len;
 80096da:	8929      	ldrh	r1, [r5, #8]
 80096dc:	8119      	strh	r1, [r3, #8]
    inseg.next = NULL;
 80096de:	2200      	movs	r2, #0
    inseg.tcphdr = tcphdr;
 80096e0:	6831      	ldr	r1, [r6, #0]
    inseg.next = NULL;
 80096e2:	601a      	str	r2, [r3, #0]
    inseg.tcphdr = tcphdr;
 80096e4:	60d9      	str	r1, [r3, #12]
    recv_flags = 0;
 80096e6:	4832      	ldr	r0, [pc, #200]	; (80097b0 <tcp_input+0x2d8>)
    recv_acked = 0;
 80096e8:	4932      	ldr	r1, [pc, #200]	; (80097b4 <tcp_input+0x2dc>)
    inseg.p = p;
 80096ea:	605d      	str	r5, [r3, #4]
    recv_data = NULL;
 80096ec:	4b32      	ldr	r3, [pc, #200]	; (80097b8 <tcp_input+0x2e0>)
    recv_flags = 0;
 80096ee:	7002      	strb	r2, [r0, #0]
    recv_data = NULL;
 80096f0:	601a      	str	r2, [r3, #0]
    recv_acked = 0;
 80096f2:	800a      	strh	r2, [r1, #0]
    if (flags & TCP_PSH) {
 80096f4:	9a03      	ldr	r2, [sp, #12]
 80096f6:	9105      	str	r1, [sp, #20]
 80096f8:	7812      	ldrb	r2, [r2, #0]
 80096fa:	f012 0f08 	tst.w	r2, #8
 80096fe:	4680      	mov	r8, r0
 8009700:	469a      	mov	sl, r3
 8009702:	d003      	beq.n	800970c <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 8009704:	7b6b      	ldrb	r3, [r5, #13]
 8009706:	f043 0301 	orr.w	r3, r3, #1
 800970a:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 800970c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800970e:	4d2b      	ldr	r5, [pc, #172]	; (80097bc <tcp_input+0x2e4>)
 8009710:	2b00      	cmp	r3, #0
 8009712:	f000 8137 	beq.w	8009984 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009716:	4620      	mov	r0, r4
 8009718:	f7fe ff4a 	bl	80085b0 <tcp_process_refused_data>
 800971c:	300d      	adds	r0, #13
 800971e:	d008      	beq.n	8009732 <tcp_input+0x25a>
 8009720:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009722:	2b00      	cmp	r3, #0
 8009724:	f000 812e 	beq.w	8009984 <tcp_input+0x4ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009728:	9b04      	ldr	r3, [sp, #16]
 800972a:	881b      	ldrh	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	f000 8129 	beq.w	8009984 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 8009732:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009734:	b913      	cbnz	r3, 800973c <tcp_input+0x264>
          tcp_send_empty_ack(pcb);
 8009736:	4620      	mov	r0, r4
 8009738:	f001 f802 	bl	800a740 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800973c:	2400      	movs	r4, #0
 800973e:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL)
 8009740:	4d1a      	ldr	r5, [pc, #104]	; (80097ac <tcp_input+0x2d4>)
    recv_data = NULL;
 8009742:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 8009746:	6868      	ldr	r0, [r5, #4]
 8009748:	b110      	cbz	r0, 8009750 <tcp_input+0x278>
      pbuf_free(inseg.p);
 800974a:	f7fd ff45 	bl	80075d8 <pbuf_free>
      inseg.p = NULL;
 800974e:	606c      	str	r4, [r5, #4]
}
 8009750:	b009      	add	sp, #36	; 0x24
 8009752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009756:	46a2      	mov	sl, r4
 8009758:	461c      	mov	r4, r3
 800975a:	e72f      	b.n	80095bc <tcp_input+0xe4>
 800975c:	20000d4c 	.word	0x20000d4c
 8009760:	20001b2c 	.word	0x20001b2c
 8009764:	20000d58 	.word	0x20000d58
 8009768:	20000d54 	.word	0x20000d54
 800976c:	20000d50 	.word	0x20000d50
 8009770:	20000d20 	.word	0x20000d20
 8009774:	20000d24 	.word	0x20000d24
 8009778:	20005054 	.word	0x20005054
 800977c:	20000d5a 	.word	0x20000d5a
 8009780:	20005064 	.word	0x20005064
 8009784:	080106fc 	.word	0x080106fc
 8009788:	08010546 	.word	0x08010546
 800978c:	0800f3a7 	.word	0x0800f3a7
 8009790:	08010556 	.word	0x08010556
 8009794:	08010562 	.word	0x08010562
 8009798:	08010581 	.word	0x08010581
 800979c:	080105a8 	.word	0x080105a8
 80097a0:	080105d2 	.word	0x080105d2
 80097a4:	080105f9 	.word	0x080105f9
 80097a8:	08010624 	.word	0x08010624
 80097ac:	20000d28 	.word	0x20000d28
 80097b0:	20000d40 	.word	0x20000d40
 80097b4:	20000d38 	.word	0x20000d38
 80097b8:	20000d3c 	.word	0x20000d3c
 80097bc:	20005068 	.word	0x20005068
 80097c0:	20000d44 	.word	0x20000d44
 80097c4:	0801064e 	.word	0x0801064e
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80097c8:	7d23      	ldrb	r3, [r4, #20]
 80097ca:	2b0a      	cmp	r3, #10
 80097cc:	d005      	beq.n	80097da <tcp_input+0x302>
 80097ce:	4653      	mov	r3, sl
 80097d0:	22fe      	movs	r2, #254	; 0xfe
 80097d2:	4649      	mov	r1, r9
 80097d4:	489d      	ldr	r0, [pc, #628]	; (8009a4c <tcp_input+0x574>)
 80097d6:	f004 fa99 	bl	800dd0c <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80097da:	6833      	ldr	r3, [r6, #0]
 80097dc:	8b22      	ldrh	r2, [r4, #24]
 80097de:	8818      	ldrh	r0, [r3, #0]
 80097e0:	4290      	cmp	r0, r2
 80097e2:	d13c      	bne.n	800985e <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 80097e4:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 80097e6:	885a      	ldrh	r2, [r3, #2]
 80097e8:	428a      	cmp	r2, r1
 80097ea:	d138      	bne.n	800985e <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 80097ec:	6861      	ldr	r1, [r4, #4]
 80097ee:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80097f2:	4299      	cmp	r1, r3
 80097f4:	d133      	bne.n	800985e <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80097f6:	6821      	ldr	r1, [r4, #0]
 80097f8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80097fc:	4299      	cmp	r1, r3
 80097fe:	d12e      	bne.n	800985e <tcp_input+0x386>
  if (flags & TCP_RST) {
 8009800:	9b03      	ldr	r3, [sp, #12]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	0759      	lsls	r1, r3, #29
 8009806:	d424      	bmi.n	8009852 <tcp_input+0x37a>
  if (flags & TCP_SYN) {
 8009808:	079e      	lsls	r6, r3, #30
 800980a:	d513      	bpl.n	8009834 <tcp_input+0x35c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800980c:	f8db 1000 	ldr.w	r1, [fp]
 8009810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009812:	1acb      	subs	r3, r1, r3
 8009814:	d413      	bmi.n	800983e <tcp_input+0x366>
 8009816:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8009818:	1b9b      	subs	r3, r3, r6
 800981a:	2b00      	cmp	r3, #0
 800981c:	dc0f      	bgt.n	800983e <tcp_input+0x366>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800981e:	9b04      	ldr	r3, [sp, #16]
 8009820:	881c      	ldrh	r4, [r3, #0]
 8009822:	9001      	str	r0, [sp, #4]
 8009824:	9200      	str	r2, [sp, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009826:	4b8a      	ldr	r3, [pc, #552]	; (8009a50 <tcp_input+0x578>)
 8009828:	4421      	add	r1, r4
 800982a:	1d1a      	adds	r2, r3, #4
 800982c:	6838      	ldr	r0, [r7, #0]
 800982e:	f001 f93b 	bl	800aaa8 <tcp_rst>
 8009832:	e00e      	b.n	8009852 <tcp_input+0x37a>
  } else if (flags & TCP_FIN) {
 8009834:	07d8      	lsls	r0, r3, #31
    pcb->tmr = tcp_ticks;
 8009836:	bf42      	ittt	mi
 8009838:	4b86      	ldrmi	r3, [pc, #536]	; (8009a54 <tcp_input+0x57c>)
 800983a:	681b      	ldrmi	r3, [r3, #0]
 800983c:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800983e:	9b04      	ldr	r3, [sp, #16]
 8009840:	881b      	ldrh	r3, [r3, #0]
 8009842:	b133      	cbz	r3, 8009852 <tcp_input+0x37a>
    pcb->flags |= TF_ACK_NOW;
 8009844:	7ea3      	ldrb	r3, [r4, #26]
 8009846:	f043 0302 	orr.w	r3, r3, #2
 800984a:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 800984c:	4620      	mov	r0, r4
 800984e:	f000 ffad 	bl	800a7ac <tcp_output>
  pbuf_free(p);
 8009852:	4628      	mov	r0, r5
}
 8009854:	b009      	add	sp, #36	; 0x24
 8009856:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800985a:	f7fd bebd 	b.w	80075d8 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800985e:	68e4      	ldr	r4, [r4, #12]
 8009860:	2c00      	cmp	r4, #0
 8009862:	d1b1      	bne.n	80097c8 <tcp_input+0x2f0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009864:	4b7c      	ldr	r3, [pc, #496]	; (8009a58 <tcp_input+0x580>)
      if (lpcb->local_port == tcphdr->dest) {
 8009866:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009868:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800986a:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800986e:	4689      	mov	r9, r1
 8009870:	f1b9 0f00 	cmp.w	r9, #0
 8009874:	d111      	bne.n	800989a <tcp_input+0x3c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009876:	8990      	ldrh	r0, [r2, #12]
 8009878:	f7fc f8ee 	bl	8005a58 <lwip_htons>
 800987c:	0743      	lsls	r3, r0, #29
 800987e:	d4e8      	bmi.n	8009852 <tcp_input+0x37a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009880:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009882:	9a04      	ldr	r2, [sp, #16]
 8009884:	f8db 1000 	ldr.w	r1, [fp]
 8009888:	8810      	ldrh	r0, [r2, #0]
 800988a:	881a      	ldrh	r2, [r3, #0]
 800988c:	9201      	str	r2, [sp, #4]
 800988e:	885b      	ldrh	r3, [r3, #2]
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	4b6f      	ldr	r3, [pc, #444]	; (8009a50 <tcp_input+0x578>)
 8009894:	4401      	add	r1, r0
 8009896:	1d1a      	adds	r2, r3, #4
 8009898:	e7c8      	b.n	800982c <tcp_input+0x354>
      if (lpcb->local_port == tcphdr->dest) {
 800989a:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 800989e:	8853      	ldrh	r3, [r2, #2]
 80098a0:	4283      	cmp	r3, r0
 80098a2:	d107      	bne.n	80098b4 <tcp_input+0x3dc>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80098a4:	f8d9 3000 	ldr.w	r3, [r9]
 80098a8:	4573      	cmp	r3, lr
 80098aa:	f000 82dd 	beq.w	8009e68 <tcp_input+0x990>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 82da 	beq.w	8009e68 <tcp_input+0x990>
 80098b4:	464c      	mov	r4, r9
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80098b6:	f8d9 900c 	ldr.w	r9, [r9, #12]
 80098ba:	e7d9      	b.n	8009870 <tcp_input+0x398>
  } else if (flags & TCP_SYN) {
 80098bc:	0798      	lsls	r0, r3, #30
 80098be:	d5c8      	bpl.n	8009852 <tcp_input+0x37a>
    npcb = tcp_alloc(pcb->prio);
 80098c0:	f899 0015 	ldrb.w	r0, [r9, #21]
 80098c4:	f7fe ffb8 	bl	8008838 <tcp_alloc>
    if (npcb == NULL) {
 80098c8:	4604      	mov	r4, r0
 80098ca:	b950      	cbnz	r0, 80098e2 <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80098cc:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d0be      	beq.n	8009852 <tcp_input+0x37a>
 80098d4:	4601      	mov	r1, r0
 80098d6:	f04f 32ff 	mov.w	r2, #4294967295
 80098da:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80098de:	4798      	blx	r3
 80098e0:	e7b7      	b.n	8009852 <tcp_input+0x37a>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80098e2:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 80098e6:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80098e8:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80098ea:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80098ee:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 80098f0:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 80098f4:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 80098f6:	7813      	ldrb	r3, [r2, #0]
 80098f8:	7852      	ldrb	r2, [r2, #1]
 80098fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80098fe:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8009900:	2303      	movs	r3, #3
 8009902:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8009904:	f8db 3000 	ldr.w	r3, [fp]
 8009908:	3301      	adds	r3, #1
 800990a:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800990c:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800990e:	f7ff f81f 	bl	8008950 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009912:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 8009916:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009918:	3b01      	subs	r3, #1
 800991a:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800991c:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_nxt = iss;
 8009920:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 8009922:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009924:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 8009926:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8009928:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800992c:	f899 3008 	ldrb.w	r3, [r9, #8]
 8009930:	f003 030c 	and.w	r3, r3, #12
 8009934:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8009936:	4b49      	ldr	r3, [pc, #292]	; (8009a5c <tcp_input+0x584>)
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	60e2      	str	r2, [r4, #12]
 800993c:	601c      	str	r4, [r3, #0]
 800993e:	f001 fa55 	bl	800adec <tcp_timer_needed>
 8009942:	4b47      	ldr	r3, [pc, #284]	; (8009a60 <tcp_input+0x588>)
 8009944:	2201      	movs	r2, #1
 8009946:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 8009948:	9b06      	ldr	r3, [sp, #24]
 800994a:	881b      	ldrh	r3, [r3, #0]
 800994c:	b11b      	cbz	r3, 8009956 <tcp_input+0x47e>
 800994e:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8009952:	f7ff fd69 	bl	8009428 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 8009956:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009958:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800995a:	89db      	ldrh	r3, [r3, #14]
 800995c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009960:	1d21      	adds	r1, r4, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009962:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009966:	f7fe ffff 	bl	8008968 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800996a:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800996c:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800996e:	4620      	mov	r0, r4
 8009970:	f000 fe2c 	bl	800a5cc <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8009974:	2800      	cmp	r0, #0
 8009976:	f43f af69 	beq.w	800984c <tcp_input+0x374>
      tcp_abandon(npcb, 0);
 800997a:	2100      	movs	r1, #0
 800997c:	4620      	mov	r0, r4
 800997e:	f7fe fe9d 	bl	80086bc <tcp_abandon>
 8009982:	e766      	b.n	8009852 <tcp_input+0x37a>
  if (flags & TCP_RST) {
 8009984:	9b03      	ldr	r3, [sp, #12]
    tcp_input_pcb = pcb;
 8009986:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	0759      	lsls	r1, r3, #29
 800998c:	d535      	bpl.n	80099fa <tcp_input+0x522>
    if (pcb->state == SYN_SENT) {
 800998e:	7d21      	ldrb	r1, [r4, #20]
 8009990:	2902      	cmp	r1, #2
 8009992:	d122      	bne.n	80099da <tcp_input+0x502>
      if (ackno == pcb->snd_nxt) {
 8009994:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	429a      	cmp	r2, r3
 800999a:	d109      	bne.n	80099b0 <tcp_input+0x4d8>
      recv_flags |= TF_RESET;
 800999c:	f898 3000 	ldrb.w	r3, [r8]
 80099a0:	f043 0308 	orr.w	r3, r3, #8
 80099a4:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 80099a8:	7ea3      	ldrb	r3, [r4, #26]
 80099aa:	f023 0301 	bic.w	r3, r3, #1
 80099ae:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 80099b0:	f898 3000 	ldrb.w	r3, [r8]
 80099b4:	0719      	lsls	r1, r3, #28
 80099b6:	f140 81ed 	bpl.w	8009d94 <tcp_input+0x8bc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80099ba:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80099be:	b11b      	cbz	r3, 80099c8 <tcp_input+0x4f0>
 80099c0:	f06f 010d 	mvn.w	r1, #13
 80099c4:	6920      	ldr	r0, [r4, #16]
 80099c6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80099c8:	4621      	mov	r1, r4
 80099ca:	4824      	ldr	r0, [pc, #144]	; (8009a5c <tcp_input+0x584>)
 80099cc:	f7fe fcde 	bl	800838c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80099d0:	4621      	mov	r1, r4
 80099d2:	2001      	movs	r0, #1
 80099d4:	f7fd fc9c 	bl	8007310 <memp_free>
 80099d8:	e6b0      	b.n	800973c <tcp_input+0x264>
      if (seqno == pcb->rcv_nxt) {
 80099da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80099dc:	f8db 3000 	ldr.w	r3, [fp]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	f000 825a 	beq.w	8009e9a <tcp_input+0x9c2>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80099e6:	1a9b      	subs	r3, r3, r2
 80099e8:	d4e2      	bmi.n	80099b0 <tcp_input+0x4d8>
 80099ea:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80099ec:	1a9b      	subs	r3, r3, r2
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	dcde      	bgt.n	80099b0 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 80099f2:	7ea3      	ldrb	r3, [r4, #26]
 80099f4:	f043 0302 	orr.w	r3, r3, #2
 80099f8:	e7d9      	b.n	80099ae <tcp_input+0x4d6>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80099fa:	f013 0102 	ands.w	r1, r3, #2
 80099fe:	d003      	beq.n	8009a08 <tcp_input+0x530>
 8009a00:	7d22      	ldrb	r2, [r4, #20]
 8009a02:	3a02      	subs	r2, #2
 8009a04:	2a01      	cmp	r2, #1
 8009a06:	d8f4      	bhi.n	80099f2 <tcp_input+0x51a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009a08:	7ea2      	ldrb	r2, [r4, #26]
 8009a0a:	06d2      	lsls	r2, r2, #27
    pcb->tmr = tcp_ticks;
 8009a0c:	bf5e      	ittt	pl
 8009a0e:	4a11      	ldrpl	r2, [pc, #68]	; (8009a54 <tcp_input+0x57c>)
 8009a10:	6812      	ldrpl	r2, [r2, #0]
 8009a12:	6222      	strpl	r2, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8009a14:	2200      	movs	r2, #0
 8009a16:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 8009a1a:	9a06      	ldr	r2, [sp, #24]
 8009a1c:	8812      	ldrh	r2, [r2, #0]
 8009a1e:	b13a      	cbz	r2, 8009a30 <tcp_input+0x558>
 8009a20:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8009a24:	9107      	str	r1, [sp, #28]
 8009a26:	9306      	str	r3, [sp, #24]
 8009a28:	f7ff fcfe 	bl	8009428 <tcp_parseopt.isra.1.part.2>
 8009a2c:	9907      	ldr	r1, [sp, #28]
 8009a2e:	9b06      	ldr	r3, [sp, #24]
  switch (pcb->state) {
 8009a30:	7d22      	ldrb	r2, [r4, #20]
 8009a32:	3a02      	subs	r2, #2
 8009a34:	2a07      	cmp	r2, #7
 8009a36:	d8bb      	bhi.n	80099b0 <tcp_input+0x4d8>
 8009a38:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009a3c:	00940014 	.word	0x00940014
 8009a40:	010000fc 	.word	0x010000fc
 8009a44:	00fc014a 	.word	0x00fc014a
 8009a48:	01830164 	.word	0x01830164
 8009a4c:	0800f3a7 	.word	0x0800f3a7
 8009a50:	20001b3c 	.word	0x20001b3c
 8009a54:	20005058 	.word	0x20005058
 8009a58:	2000505c 	.word	0x2000505c
 8009a5c:	20005054 	.word	0x20005054
 8009a60:	20005050 	.word	0x20005050
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009a64:	f003 0212 	and.w	r2, r3, #18
 8009a68:	2a12      	cmp	r2, #18
 8009a6a:	d15e      	bne.n	8009b2a <tcp_input+0x652>
        && (ackno == pcb->lastack + 1)) {
 8009a6c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	3201      	adds	r2, #1
 8009a72:	428a      	cmp	r2, r1
 8009a74:	d159      	bne.n	8009b2a <tcp_input+0x652>
      pcb->rcv_nxt = seqno + 1;
 8009a76:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 8009a7a:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 8009a7c:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8009a7e:	6832      	ldr	r2, [r6, #0]
      pcb->rcv_nxt = seqno + 1;
 8009a80:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009a82:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009a84:	3b01      	subs	r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8009a86:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009a88:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8009a8a:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 8009a8c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8009a90:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 8009a94:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009a96:	18e1      	adds	r1, r4, r3
 8009a98:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8009a9a:	f7fe ff65 	bl	8008968 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009a9e:	f241 121c 	movw	r2, #4380	; 0x111c
 8009aa2:	0043      	lsls	r3, r0, #1
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	bf38      	it	cc
 8009aa8:	4613      	movcc	r3, r2
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009aaa:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009aac:	0080      	lsls	r0, r0, #2
 8009aae:	4283      	cmp	r3, r0
 8009ab0:	bf28      	it	cs
 8009ab2:	4603      	movcs	r3, r0
 8009ab4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009ab8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009abc:	b933      	cbnz	r3, 8009acc <tcp_input+0x5f4>
 8009abe:	4bad      	ldr	r3, [pc, #692]	; (8009d74 <tcp_input+0x89c>)
 8009ac0:	49ad      	ldr	r1, [pc, #692]	; (8009d78 <tcp_input+0x8a0>)
 8009ac2:	48ae      	ldr	r0, [pc, #696]	; (8009d7c <tcp_input+0x8a4>)
 8009ac4:	f240 321a 	movw	r2, #794	; 0x31a
 8009ac8:	f004 f920 	bl	800dd0c <iprintf>
      --pcb->snd_queuelen;
 8009acc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 8009ad0:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 8009ad8:	b9fe      	cbnz	r6, 8009b1a <tcp_input+0x642>
        rseg = pcb->unsent;
 8009ada:	6ea6      	ldr	r6, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8009adc:	b936      	cbnz	r6, 8009aec <tcp_input+0x614>
 8009ade:	4ba5      	ldr	r3, [pc, #660]	; (8009d74 <tcp_input+0x89c>)
 8009ae0:	49a7      	ldr	r1, [pc, #668]	; (8009d80 <tcp_input+0x8a8>)
 8009ae2:	48a6      	ldr	r0, [pc, #664]	; (8009d7c <tcp_input+0x8a4>)
 8009ae4:	f240 3222 	movw	r2, #802	; 0x322
 8009ae8:	f004 f910 	bl	800dd0c <iprintf>
        pcb->unsent = rseg->next;
 8009aec:	6833      	ldr	r3, [r6, #0]
 8009aee:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8009af0:	4630      	mov	r0, r6
 8009af2:	f7fe f9b3 	bl	8007e5c <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8009af6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009af8:	b993      	cbnz	r3, 8009b20 <tcp_input+0x648>
        pcb->rtime = -1;
 8009afa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009afe:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009b00:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f43f af74 	beq.w	80099f2 <tcp_input+0x51a>
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	6920      	ldr	r0, [r4, #16]
 8009b10:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8009b12:	300d      	adds	r0, #13
 8009b14:	f47f af6d 	bne.w	80099f2 <tcp_input+0x51a>
 8009b18:	e610      	b.n	800973c <tcp_input+0x264>
        pcb->unacked = rseg->next;
 8009b1a:	6833      	ldr	r3, [r6, #0]
 8009b1c:	66e3      	str	r3, [r4, #108]	; 0x6c
 8009b1e:	e7e7      	b.n	8009af0 <tcp_input+0x618>
        pcb->rtime = 0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8009b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b28:	e7ea      	b.n	8009b00 <tcp_input+0x628>
    else if (flags & TCP_ACK) {
 8009b2a:	06db      	lsls	r3, r3, #27
 8009b2c:	f57f af40 	bpl.w	80099b0 <tcp_input+0x4d8>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b30:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b32:	9a04      	ldr	r2, [sp, #16]
 8009b34:	f8db 1000 	ldr.w	r1, [fp]
 8009b38:	8810      	ldrh	r0, [r2, #0]
 8009b3a:	881a      	ldrh	r2, [r3, #0]
 8009b3c:	9201      	str	r2, [sp, #4]
 8009b3e:	885b      	ldrh	r3, [r3, #2]
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	4b90      	ldr	r3, [pc, #576]	; (8009d84 <tcp_input+0x8ac>)
 8009b44:	4401      	add	r1, r0
 8009b46:	1d1a      	adds	r2, r3, #4
 8009b48:	6838      	ldr	r0, [r7, #0]
 8009b4a:	f000 ffad 	bl	800aaa8 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009b4e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009b52:	2b05      	cmp	r3, #5
 8009b54:	f63f af2c 	bhi.w	80099b0 <tcp_input+0x4d8>
        pcb->rtime = 0;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	f000 fffd 	bl	800ab5c <tcp_rexmit_rto>
 8009b62:	e725      	b.n	80099b0 <tcp_input+0x4d8>
    if (flags & TCP_ACK) {
 8009b64:	06d8      	lsls	r0, r3, #27
 8009b66:	d557      	bpl.n	8009c18 <tcp_input+0x740>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8009b68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009b6a:	6838      	ldr	r0, [r7, #0]
 8009b6c:	43db      	mvns	r3, r3
 8009b6e:	42c3      	cmn	r3, r0
 8009b70:	d443      	bmi.n	8009bfa <tcp_input+0x722>
 8009b72:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009b74:	1ac3      	subs	r3, r0, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	dc3f      	bgt.n	8009bfa <tcp_input+0x722>
        pcb->state = ESTABLISHED;
 8009b7a:	2304      	movs	r3, #4
 8009b7c:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8009b7e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009b80:	b143      	cbz	r3, 8009b94 <tcp_input+0x6bc>
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	b933      	cbnz	r3, 8009b94 <tcp_input+0x6bc>
 8009b86:	4b7b      	ldr	r3, [pc, #492]	; (8009d74 <tcp_input+0x89c>)
 8009b88:	497f      	ldr	r1, [pc, #508]	; (8009d88 <tcp_input+0x8b0>)
 8009b8a:	487c      	ldr	r0, [pc, #496]	; (8009d7c <tcp_input+0x8a4>)
 8009b8c:	f240 3251 	movw	r2, #849	; 0x351
 8009b90:	f004 f8bc 	bl	800dd0c <iprintf>
        if (pcb->listener == NULL) {
 8009b94:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009b96:	b91b      	cbnz	r3, 8009ba0 <tcp_input+0x6c8>
            tcp_abort(pcb);
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f7fe fe05 	bl	80087a8 <tcp_abort>
            goto aborted;
 8009b9e:	e5cd      	b.n	800973c <tcp_input+0x264>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d0f8      	beq.n	8009b98 <tcp_input+0x6c0>
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	4621      	mov	r1, r4
 8009baa:	6920      	ldr	r0, [r4, #16]
 8009bac:	4798      	blx	r3
        if (err != ERR_OK) {
 8009bae:	b110      	cbz	r0, 8009bb6 <tcp_input+0x6de>
          if (err != ERR_ABRT) {
 8009bb0:	300d      	adds	r0, #13
 8009bb2:	d1f1      	bne.n	8009b98 <tcp_input+0x6c0>
 8009bb4:	e5c2      	b.n	800973c <tcp_input+0x264>
        tcp_receive(pcb);
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f7fe ff4a 	bl	8008a50 <tcp_receive>
        if (recv_acked != 0) {
 8009bbc:	9b05      	ldr	r3, [sp, #20]
 8009bbe:	881b      	ldrh	r3, [r3, #0]
 8009bc0:	b113      	cbz	r3, 8009bc8 <tcp_input+0x6f0>
          recv_acked--;
 8009bc2:	9a05      	ldr	r2, [sp, #20]
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009bc8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8009bca:	f241 111c 	movw	r1, #4380	; 0x111c
 8009bce:	0053      	lsls	r3, r2, #1
 8009bd0:	428b      	cmp	r3, r1
 8009bd2:	bf38      	it	cc
 8009bd4:	460b      	movcc	r3, r1
 8009bd6:	0092      	lsls	r2, r2, #2
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	bf28      	it	cs
 8009bdc:	4613      	movcs	r3, r2
 8009bde:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009be2:	f898 3000 	ldrb.w	r3, [r8]
 8009be6:	069a      	lsls	r2, r3, #26
 8009be8:	f57f aee2 	bpl.w	80099b0 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8009bec:	7ea3      	ldrb	r3, [r4, #26]
 8009bee:	f043 0302 	orr.w	r3, r3, #2
 8009bf2:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 8009bf4:	2307      	movs	r3, #7
        pcb->state = CLOSING;
 8009bf6:	7523      	strb	r3, [r4, #20]
 8009bf8:	e6da      	b.n	80099b0 <tcp_input+0x4d8>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009bfa:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bfc:	9a04      	ldr	r2, [sp, #16]
 8009bfe:	f8db 1000 	ldr.w	r1, [fp]
 8009c02:	8816      	ldrh	r6, [r2, #0]
 8009c04:	881a      	ldrh	r2, [r3, #0]
 8009c06:	9201      	str	r2, [sp, #4]
 8009c08:	885b      	ldrh	r3, [r3, #2]
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	4b5d      	ldr	r3, [pc, #372]	; (8009d84 <tcp_input+0x8ac>)
 8009c0e:	4431      	add	r1, r6
 8009c10:	1d1a      	adds	r2, r3, #4
 8009c12:	f000 ff49 	bl	800aaa8 <tcp_rst>
 8009c16:	e6cb      	b.n	80099b0 <tcp_input+0x4d8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009c18:	2900      	cmp	r1, #0
 8009c1a:	f43f aec9 	beq.w	80099b0 <tcp_input+0x4d8>
 8009c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c20:	f8db 2000 	ldr.w	r2, [fp]
 8009c24:	3b01      	subs	r3, #1
 8009c26:	4293      	cmp	r3, r2
 8009c28:	f47f aec2 	bne.w	80099b0 <tcp_input+0x4d8>
      tcp_rexmit(pcb);
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	f000 ffb1 	bl	800ab94 <tcp_rexmit>
 8009c32:	e6bd      	b.n	80099b0 <tcp_input+0x4d8>
    tcp_receive(pcb);
 8009c34:	4620      	mov	r0, r4
 8009c36:	f7fe ff0b 	bl	8008a50 <tcp_receive>
 8009c3a:	e7d2      	b.n	8009be2 <tcp_input+0x70a>
    tcp_receive(pcb);
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f7fe ff07 	bl	8008a50 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009c42:	f898 3000 	ldrb.w	r3, [r8]
 8009c46:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 8009c4e:	d031      	beq.n	8009cb4 <tcp_input+0x7dc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c50:	f013 0f10 	tst.w	r3, #16
 8009c54:	7ea3      	ldrb	r3, [r4, #26]
 8009c56:	d028      	beq.n	8009caa <tcp_input+0x7d2>
 8009c58:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009c5a:	683a      	ldr	r2, [r7, #0]
 8009c5c:	4291      	cmp	r1, r2
 8009c5e:	d124      	bne.n	8009caa <tcp_input+0x7d2>
 8009c60:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8009c62:	bb12      	cbnz	r2, 8009caa <tcp_input+0x7d2>
        tcp_ack_now(pcb);
 8009c64:	f043 0302 	orr.w	r3, r3, #2
 8009c68:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f7fe f98c 	bl	8007f88 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009c70:	f8d9 3000 	ldr.w	r3, [r9]
 8009c74:	429c      	cmp	r4, r3
 8009c76:	d10a      	bne.n	8009c8e <tcp_input+0x7b6>
      TCP_RMV_ACTIVE(pcb);
 8009c78:	68e3      	ldr	r3, [r4, #12]
 8009c7a:	f8c9 3000 	str.w	r3, [r9]
 8009c7e:	e008      	b.n	8009c92 <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8009c80:	68da      	ldr	r2, [r3, #12]
 8009c82:	4294      	cmp	r4, r2
 8009c84:	d102      	bne.n	8009c8c <tcp_input+0x7b4>
      TCP_RMV_ACTIVE(pcb);
 8009c86:	68e2      	ldr	r2, [r4, #12]
 8009c88:	60da      	str	r2, [r3, #12]
 8009c8a:	e002      	b.n	8009c92 <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1f6      	bne.n	8009c80 <tcp_input+0x7a8>
      TCP_RMV_ACTIVE(pcb);
 8009c92:	4b3e      	ldr	r3, [pc, #248]	; (8009d8c <tcp_input+0x8b4>)
 8009c94:	2201      	movs	r2, #1
 8009c96:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8009c98:	230a      	movs	r3, #10
 8009c9a:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8009c9c:	4b3c      	ldr	r3, [pc, #240]	; (8009d90 <tcp_input+0x8b8>)
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	60e2      	str	r2, [r4, #12]
 8009ca2:	601c      	str	r4, [r3, #0]
 8009ca4:	f001 f8a2 	bl	800adec <tcp_timer_needed>
 8009ca8:	e682      	b.n	80099b0 <tcp_input+0x4d8>
        tcp_ack_now(pcb);
 8009caa:	f043 0302 	orr.w	r3, r3, #2
 8009cae:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8009cb0:	2308      	movs	r3, #8
 8009cb2:	e7a0      	b.n	8009bf6 <tcp_input+0x71e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009cb4:	06db      	lsls	r3, r3, #27
 8009cb6:	f57f ae7b 	bpl.w	80099b0 <tcp_input+0x4d8>
 8009cba:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	f47f ae76 	bne.w	80099b0 <tcp_input+0x4d8>
 8009cc4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f47f ae72 	bne.w	80099b0 <tcp_input+0x4d8>
      pcb->state = FIN_WAIT_2;
 8009ccc:	2306      	movs	r3, #6
 8009cce:	e792      	b.n	8009bf6 <tcp_input+0x71e>
    tcp_receive(pcb);
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f7fe febd 	bl	8008a50 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009cd6:	f898 3000 	ldrb.w	r3, [r8]
 8009cda:	069f      	lsls	r7, r3, #26
 8009cdc:	f57f ae68 	bpl.w	80099b0 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8009ce0:	7ea3      	ldrb	r3, [r4, #26]
 8009ce2:	f043 0302 	orr.w	r3, r3, #2
 8009ce6:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f7fe f94d 	bl	8007f88 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009cee:	f8d9 3000 	ldr.w	r3, [r9]
 8009cf2:	429c      	cmp	r4, r3
 8009cf4:	d0c0      	beq.n	8009c78 <tcp_input+0x7a0>
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0cb      	beq.n	8009c92 <tcp_input+0x7ba>
 8009cfa:	68da      	ldr	r2, [r3, #12]
 8009cfc:	4294      	cmp	r4, r2
 8009cfe:	d0c2      	beq.n	8009c86 <tcp_input+0x7ae>
 8009d00:	4613      	mov	r3, r2
 8009d02:	e7f8      	b.n	8009cf6 <tcp_input+0x81e>
    tcp_receive(pcb);
 8009d04:	4620      	mov	r0, r4
 8009d06:	f7fe fea3 	bl	8008a50 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009d0a:	9b03      	ldr	r3, [sp, #12]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	06de      	lsls	r6, r3, #27
 8009d10:	f57f ae4e 	bpl.w	80099b0 <tcp_input+0x4d8>
 8009d14:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	f47f ae49 	bne.w	80099b0 <tcp_input+0x4d8>
 8009d1e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f47f ae45 	bne.w	80099b0 <tcp_input+0x4d8>
      tcp_pcb_purge(pcb);
 8009d26:	4620      	mov	r0, r4
 8009d28:	f7fe f92e 	bl	8007f88 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009d2c:	f8d9 3000 	ldr.w	r3, [r9]
 8009d30:	429c      	cmp	r4, r3
 8009d32:	d0a1      	beq.n	8009c78 <tcp_input+0x7a0>
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d0ac      	beq.n	8009c92 <tcp_input+0x7ba>
 8009d38:	68da      	ldr	r2, [r3, #12]
 8009d3a:	4294      	cmp	r4, r2
 8009d3c:	d0a3      	beq.n	8009c86 <tcp_input+0x7ae>
 8009d3e:	4613      	mov	r3, r2
 8009d40:	e7f8      	b.n	8009d34 <tcp_input+0x85c>
    tcp_receive(pcb);
 8009d42:	4620      	mov	r0, r4
 8009d44:	f7fe fe84 	bl	8008a50 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009d48:	9b03      	ldr	r3, [sp, #12]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	06d8      	lsls	r0, r3, #27
 8009d4e:	f57f ae2f 	bpl.w	80099b0 <tcp_input+0x4d8>
 8009d52:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	f47f ae2a 	bne.w	80099b0 <tcp_input+0x4d8>
 8009d5c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f47f ae26 	bne.w	80099b0 <tcp_input+0x4d8>
      recv_flags |= TF_CLOSED;
 8009d64:	f898 3000 	ldrb.w	r3, [r8]
 8009d68:	f043 0310 	orr.w	r3, r3, #16
 8009d6c:	f888 3000 	strb.w	r3, [r8]
 8009d70:	e61e      	b.n	80099b0 <tcp_input+0x4d8>
 8009d72:	bf00      	nop
 8009d74:	080106fc 	.word	0x080106fc
 8009d78:	0801069b 	.word	0x0801069b
 8009d7c:	0800f3a7 	.word	0x0800f3a7
 8009d80:	080106b1 	.word	0x080106b1
 8009d84:	20001b3c 	.word	0x20001b3c
 8009d88:	080106c4 	.word	0x080106c4
 8009d8c:	20005050 	.word	0x20005050
 8009d90:	20005064 	.word	0x20005064
        if (recv_acked > 0) {
 8009d94:	9b05      	ldr	r3, [sp, #20]
 8009d96:	881a      	ldrh	r2, [r3, #0]
 8009d98:	b122      	cbz	r2, 8009da4 <tcp_input+0x8cc>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009d9a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8009d9c:	b9eb      	cbnz	r3, 8009dda <tcp_input+0x902>
          recv_acked = 0;
 8009d9e:	9a05      	ldr	r2, [sp, #20]
 8009da0:	2300      	movs	r3, #0
 8009da2:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009da4:	4620      	mov	r0, r4
 8009da6:	f7ff fb77 	bl	8009498 <tcp_input_delayed_close>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	f47f acc6 	bne.w	800973c <tcp_input+0x264>
        if (recv_data != NULL) {
 8009db0:	f8da 3000 	ldr.w	r3, [sl]
 8009db4:	b33b      	cbz	r3, 8009e06 <tcp_input+0x92e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009db6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009db8:	b133      	cbz	r3, 8009dc8 <tcp_input+0x8f0>
 8009dba:	4b40      	ldr	r3, [pc, #256]	; (8009ebc <tcp_input+0x9e4>)
 8009dbc:	4940      	ldr	r1, [pc, #256]	; (8009ec0 <tcp_input+0x9e8>)
 8009dbe:	4841      	ldr	r0, [pc, #260]	; (8009ec4 <tcp_input+0x9ec>)
 8009dc0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8009dc4:	f003 ffa2 	bl	800dd0c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009dc8:	7ea3      	ldrb	r3, [r4, #26]
 8009dca:	f013 0310 	ands.w	r3, r3, #16
 8009dce:	d00a      	beq.n	8009de6 <tcp_input+0x90e>
            pbuf_free(recv_data);
 8009dd0:	f8da 0000 	ldr.w	r0, [sl]
 8009dd4:	f7fd fc00 	bl	80075d8 <pbuf_free>
 8009dd8:	e6de      	b.n	8009b98 <tcp_input+0x6c0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009dda:	4621      	mov	r1, r4
 8009ddc:	6920      	ldr	r0, [r4, #16]
 8009dde:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8009de0:	300d      	adds	r0, #13
 8009de2:	d1dc      	bne.n	8009d9e <tcp_input+0x8c6>
 8009de4:	e4aa      	b.n	800973c <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009de6:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8009dea:	b31e      	cbz	r6, 8009e34 <tcp_input+0x95c>
 8009dec:	f8da 2000 	ldr.w	r2, [sl]
 8009df0:	6920      	ldr	r0, [r4, #16]
 8009df2:	4621      	mov	r1, r4
 8009df4:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 8009df6:	f110 0f0d 	cmn.w	r0, #13
 8009dfa:	f43f ac9f 	beq.w	800973c <tcp_input+0x264>
          if (err != ERR_OK) {
 8009dfe:	b110      	cbz	r0, 8009e06 <tcp_input+0x92e>
            pcb->refused_data = recv_data;
 8009e00:	f8da 3000 	ldr.w	r3, [sl]
 8009e04:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 8009e06:	f898 3000 	ldrb.w	r3, [r8]
 8009e0a:	069a      	lsls	r2, r3, #26
 8009e0c:	d505      	bpl.n	8009e1a <tcp_input+0x942>
          if (pcb->refused_data != NULL) {
 8009e0e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009e10:	b1c3      	cbz	r3, 8009e44 <tcp_input+0x96c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009e12:	7b5a      	ldrb	r2, [r3, #13]
 8009e14:	f042 0220 	orr.w	r2, r2, #32
 8009e18:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8009e1a:	4b2b      	ldr	r3, [pc, #172]	; (8009ec8 <tcp_input+0x9f0>)
 8009e1c:	2200      	movs	r2, #0
        if (tcp_input_delayed_close(pcb)) {
 8009e1e:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8009e20:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009e22:	f7ff fb39 	bl	8009498 <tcp_input_delayed_close>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	f47f ac88 	bne.w	800973c <tcp_input+0x264>
        tcp_output(pcb);
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f000 fcbd 	bl	800a7ac <tcp_output>
 8009e32:	e483      	b.n	800973c <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009e34:	4633      	mov	r3, r6
 8009e36:	f8da 2000 	ldr.w	r2, [sl]
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	f7fe fba5 	bl	800858c <tcp_recv_null>
 8009e42:	e7d8      	b.n	8009df6 <tcp_input+0x91e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009e44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8009e46:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009e4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 8009e4e:	bf1c      	itt	ne
 8009e50:	3301      	addne	r3, #1
 8009e52:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8009e54:	2e00      	cmp	r6, #0
 8009e56:	d0e0      	beq.n	8009e1a <tcp_input+0x942>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	6920      	ldr	r0, [r4, #16]
 8009e60:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 8009e62:	300d      	adds	r0, #13
 8009e64:	d1d9      	bne.n	8009e1a <tcp_input+0x942>
 8009e66:	e469      	b.n	800973c <tcp_input+0x264>
      if (prev != NULL) {
 8009e68:	b13c      	cbz	r4, 8009e7a <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009e6a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009e6e:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009e70:	4b16      	ldr	r3, [pc, #88]	; (8009ecc <tcp_input+0x9f4>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009e72:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009e76:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 8009e7a:	9b03      	ldr	r3, [sp, #12]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	0759      	lsls	r1, r3, #29
 8009e80:	f53f ace7 	bmi.w	8009852 <tcp_input+0x37a>
  if (flags & TCP_ACK) {
 8009e84:	06dc      	lsls	r4, r3, #27
 8009e86:	f57f ad19 	bpl.w	80098bc <tcp_input+0x3e4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e8a:	9b04      	ldr	r3, [sp, #16]
 8009e8c:	f8db 1000 	ldr.w	r1, [fp]
 8009e90:	881c      	ldrh	r4, [r3, #0]
 8009e92:	8813      	ldrh	r3, [r2, #0]
 8009e94:	e88d 0009 	stmia.w	sp, {r0, r3}
 8009e98:	e4c5      	b.n	8009826 <tcp_input+0x34e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009e9a:	2900      	cmp	r1, #0
 8009e9c:	f47f ad7e 	bne.w	800999c <tcp_input+0x4c4>
 8009ea0:	4b06      	ldr	r3, [pc, #24]	; (8009ebc <tcp_input+0x9e4>)
 8009ea2:	490b      	ldr	r1, [pc, #44]	; (8009ed0 <tcp_input+0x9f8>)
 8009ea4:	4807      	ldr	r0, [pc, #28]	; (8009ec4 <tcp_input+0x9ec>)
 8009ea6:	f240 22e7 	movw	r2, #743	; 0x2e7
 8009eaa:	f003 ff2f 	bl	800dd0c <iprintf>
 8009eae:	e575      	b.n	800999c <tcp_input+0x4c4>
      if (prev != NULL) {
 8009eb0:	f1ba 0f00 	cmp.w	sl, #0
 8009eb4:	f47f abff 	bne.w	80096b6 <tcp_input+0x1de>
 8009eb8:	e40e      	b.n	80096d8 <tcp_input+0x200>
 8009eba:	bf00      	nop
 8009ebc:	080106fc 	.word	0x080106fc
 8009ec0:	080106e2 	.word	0x080106e2
 8009ec4:	0800f3a7 	.word	0x0800f3a7
 8009ec8:	20005068 	.word	0x20005068
 8009ecc:	2000505c 	.word	0x2000505c
 8009ed0:	0801067b 	.word	0x0801067b

08009ed4 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8009ed4:	4a02      	ldr	r2, [pc, #8]	; (8009ee0 <tcp_trigger_input_pcb_close+0xc>)
 8009ed6:	7813      	ldrb	r3, [r2, #0]
 8009ed8:	f043 0310 	orr.w	r3, r3, #16
 8009edc:	7013      	strb	r3, [r2, #0]
 8009ede:	4770      	bx	lr
 8009ee0:	20000d40 	.word	0x20000d40

08009ee4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009ee4:	b570      	push	{r4, r5, r6, lr}
 8009ee6:	460c      	mov	r4, r1
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009ee8:	4294      	cmp	r4, r2
{
 8009eea:	461e      	mov	r6, r3
 8009eec:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8009ef0:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 8009ef2:	d228      	bcs.n	8009f46 <tcp_pbuf_prealloc+0x62>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009ef4:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8009ef8:	07ad      	lsls	r5, r5, #30
 8009efa:	d407      	bmi.n	8009f0c <tcp_pbuf_prealloc+0x28>
 8009efc:	7e9d      	ldrb	r5, [r3, #26]
 8009efe:	066d      	lsls	r5, r5, #25
 8009f00:	d421      	bmi.n	8009f46 <tcp_pbuf_prealloc+0x62>
        (!(pcb->flags & TF_NODELAY) &&
 8009f02:	b119      	cbz	r1, 8009f0c <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 8009f04:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8009f06:	b909      	cbnz	r1, 8009f0c <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 8009f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f0a:	b1e3      	cbz	r3, 8009f46 <tcp_pbuf_prealloc+0x62>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009f0c:	f204 231b 	addw	r3, r4, #539	; 0x21b
 8009f10:	f023 0103 	bic.w	r1, r3, #3
 8009f14:	428a      	cmp	r2, r1
 8009f16:	bf28      	it	cs
 8009f18:	460a      	movcs	r2, r1
 8009f1a:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f7fd fbbd 	bl	800769c <pbuf_alloc>
  if (p == NULL) {
 8009f22:	4605      	mov	r5, r0
 8009f24:	b168      	cbz	r0, 8009f42 <tcp_pbuf_prealloc+0x5e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8009f26:	6803      	ldr	r3, [r0, #0]
 8009f28:	b133      	cbz	r3, 8009f38 <tcp_pbuf_prealloc+0x54>
 8009f2a:	4b08      	ldr	r3, [pc, #32]	; (8009f4c <tcp_pbuf_prealloc+0x68>)
 8009f2c:	4908      	ldr	r1, [pc, #32]	; (8009f50 <tcp_pbuf_prealloc+0x6c>)
 8009f2e:	4809      	ldr	r0, [pc, #36]	; (8009f54 <tcp_pbuf_prealloc+0x70>)
 8009f30:	f44f 7288 	mov.w	r2, #272	; 0x110
 8009f34:	f003 feea 	bl	800dd0c <iprintf>
  *oversize = p->len - length;
 8009f38:	896b      	ldrh	r3, [r5, #10]
 8009f3a:	1b1b      	subs	r3, r3, r4
 8009f3c:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8009f3e:	812c      	strh	r4, [r5, #8]
 8009f40:	816c      	strh	r4, [r5, #10]
  return p;
}
 8009f42:	4628      	mov	r0, r5
 8009f44:	bd70      	pop	{r4, r5, r6, pc}
 8009f46:	4621      	mov	r1, r4
 8009f48:	e7e8      	b.n	8009f1c <tcp_pbuf_prealloc+0x38>
 8009f4a:	bf00      	nop
 8009f4c:	080109ff 	.word	0x080109ff
 8009f50:	08010a32 	.word	0x08010a32
 8009f54:	0800f3a7 	.word	0x0800f3a7

08009f58 <tcp_create_segment>:
{
 8009f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f5c:	f89d a020 	ldrb.w	sl, [sp, #32]
 8009f60:	4680      	mov	r8, r0
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009f62:	f01a 0f01 	tst.w	sl, #1
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009f66:	f04f 0003 	mov.w	r0, #3
{
 8009f6a:	460f      	mov	r7, r1
 8009f6c:	4616      	mov	r6, r2
 8009f6e:	4699      	mov	r9, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009f70:	bf14      	ite	ne
 8009f72:	2504      	movne	r5, #4
 8009f74:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009f76:	f7fd f9af 	bl	80072d8 <memp_malloc>
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	b928      	cbnz	r0, 8009f8a <tcp_create_segment+0x32>
    pbuf_free(p);
 8009f7e:	4638      	mov	r0, r7
 8009f80:	f7fd fb2a 	bl	80075d8 <pbuf_free>
}
 8009f84:	4620      	mov	r0, r4
 8009f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 8009f8a:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 8009f8e:	2300      	movs	r3, #0
  seg->p = p;
 8009f90:	e880 0088 	stmia.w	r0, {r3, r7}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009f94:	893b      	ldrh	r3, [r7, #8]
 8009f96:	fa1f fa85 	uxth.w	sl, r5
 8009f9a:	4553      	cmp	r3, sl
 8009f9c:	d205      	bcs.n	8009faa <tcp_create_segment+0x52>
 8009f9e:	4b1f      	ldr	r3, [pc, #124]	; (800a01c <tcp_create_segment+0xc4>)
 8009fa0:	491f      	ldr	r1, [pc, #124]	; (800a020 <tcp_create_segment+0xc8>)
 8009fa2:	4820      	ldr	r0, [pc, #128]	; (800a024 <tcp_create_segment+0xcc>)
 8009fa4:	22ba      	movs	r2, #186	; 0xba
 8009fa6:	f003 feb1 	bl	800dd0c <iprintf>
  seg->len = p->tot_len - optlen;
 8009faa:	893b      	ldrh	r3, [r7, #8]
 8009fac:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_header(p, TCP_HLEN)) {
 8009fb0:	4638      	mov	r0, r7
  seg->len = p->tot_len - optlen;
 8009fb2:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8009fb4:	2114      	movs	r1, #20
 8009fb6:	f7fd fb09 	bl	80075cc <pbuf_header>
 8009fba:	4607      	mov	r7, r0
 8009fbc:	b120      	cbz	r0, 8009fc8 <tcp_create_segment+0x70>
    tcp_seg_free(seg);
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f7fd ff4c 	bl	8007e5c <tcp_seg_free>
    return NULL;
 8009fc4:	2400      	movs	r4, #0
 8009fc6:	e7dd      	b.n	8009f84 <tcp_create_segment+0x2c>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009fc8:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009fca:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009fce:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8009fd2:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009fd6:	f7fb fd3f 	bl	8005a58 <lwip_htons>
 8009fda:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009fde:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 8009fe2:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8009fe6:	f7fb fd37 	bl	8005a58 <lwip_htons>
 8009fea:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009fee:	4648      	mov	r0, r9
 8009ff0:	f8d4 800c 	ldr.w	r8, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009ff4:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009ff6:	f7fb fd32 	bl	8005a5e <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009ffa:	3505      	adds	r5, #5
 8009ffc:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a000:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800a004:	b2a8      	uxth	r0, r5
 800a006:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800a00a:	f7fb fd25 	bl	8005a58 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800a00e:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800a010:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 800a014:	749f      	strb	r7, [r3, #18]
 800a016:	74df      	strb	r7, [r3, #19]
  return seg;
 800a018:	e7b4      	b.n	8009f84 <tcp_create_segment+0x2c>
 800a01a:	bf00      	nop
 800a01c:	080109ff 	.word	0x080109ff
 800a020:	08010887 	.word	0x08010887
 800a024:	0800f3a7 	.word	0x0800f3a7

0800a028 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a028:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800a02a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a02c:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800a02e:	4605      	mov	r5, r0
 800a030:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a032:	2001      	movs	r0, #1
 800a034:	2200      	movs	r2, #0
 800a036:	f7fd fb31 	bl	800769c <pbuf_alloc>
  if (p != NULL) {
 800a03a:	4606      	mov	r6, r0
 800a03c:	b340      	cbz	r0, 800a090 <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a03e:	8943      	ldrh	r3, [r0, #10]
 800a040:	2b13      	cmp	r3, #19
 800a042:	dc05      	bgt.n	800a050 <tcp_output_alloc_header.constprop.0+0x28>
 800a044:	4b13      	ldr	r3, [pc, #76]	; (800a094 <tcp_output_alloc_header.constprop.0+0x6c>)
 800a046:	4914      	ldr	r1, [pc, #80]	; (800a098 <tcp_output_alloc_header.constprop.0+0x70>)
 800a048:	4814      	ldr	r0, [pc, #80]	; (800a09c <tcp_output_alloc_header.constprop.0+0x74>)
 800a04a:	2273      	movs	r2, #115	; 0x73
 800a04c:	f003 fe5e 	bl	800dd0c <iprintf>
    tcphdr->src = lwip_htons(pcb->local_port);
 800a050:	8ae8      	ldrh	r0, [r5, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 800a052:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 800a054:	f7fb fd00 	bl	8005a58 <lwip_htons>
 800a058:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800a05a:	8b28      	ldrh	r0, [r5, #24]
 800a05c:	f7fb fcfc 	bl	8005a58 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800a060:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800a062:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a064:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a066:	f7fb fcfa 	bl	8005a5e <lwip_htonl>
 800a06a:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800a06c:	f245 0010 	movw	r0, #20496	; 0x5010
 800a070:	f7fb fcf2 	bl	8005a58 <lwip_htons>
 800a074:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a076:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800a078:	f7fb fcee 	bl	8005a58 <lwip_htons>
    tcphdr->chksum = 0;
 800a07c:	2300      	movs	r3, #0
 800a07e:	7423      	strb	r3, [r4, #16]
 800a080:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800a082:	74a3      	strb	r3, [r4, #18]
 800a084:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a086:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800a088:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a08a:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a08c:	4413      	add	r3, r2
 800a08e:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 800a090:	4630      	mov	r0, r6
 800a092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a094:	080109ff 	.word	0x080109ff
 800a098:	080109d1 	.word	0x080109d1
 800a09c:	0800f3a7 	.word	0x0800f3a7

0800a0a0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800a0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a4:	b091      	sub	sp, #68	; 0x44
 800a0a6:	4605      	mov	r5, r0
 800a0a8:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800a0b0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
{
 800a0b4:	9205      	str	r2, [sp, #20]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800a0b6:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a0b8:	9108      	str	r1, [sp, #32]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800a0ba:	085b      	lsrs	r3, r3, #1
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	bf28      	it	cs
 800a0c0:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	bf08      	it	eq
 800a0c6:	4613      	moveq	r3, r2
 800a0c8:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a0ca:	b959      	cbnz	r1, 800a0e4 <tcp_write+0x44>
 800a0cc:	4ba1      	ldr	r3, [pc, #644]	; (800a354 <tcp_write+0x2b4>)
 800a0ce:	49a2      	ldr	r1, [pc, #648]	; (800a358 <tcp_write+0x2b8>)
 800a0d0:	48a2      	ldr	r0, [pc, #648]	; (800a35c <tcp_write+0x2bc>)
 800a0d2:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800a0d6:	f003 fe19 	bl	800dd0c <iprintf>
 800a0da:	f06f 000f 	mvn.w	r0, #15
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 800a0de:	b011      	add	sp, #68	; 0x44
 800a0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->state != ESTABLISHED) &&
 800a0e4:	7d2b      	ldrb	r3, [r5, #20]
 800a0e6:	2b07      	cmp	r3, #7
 800a0e8:	d003      	beq.n	800a0f2 <tcp_write+0x52>
      (pcb->state != CLOSE_WAIT) &&
 800a0ea:	3b02      	subs	r3, #2
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	f200 8254 	bhi.w	800a59a <tcp_write+0x4fa>
  } else if (len == 0) {
 800a0f2:	9b05      	ldr	r3, [sp, #20]
 800a0f4:	b1db      	cbz	r3, 800a12e <tcp_write+0x8e>
  if (len > pcb->snd_buf) {
 800a0f6:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800a0fa:	9a05      	ldr	r2, [sp, #20]
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d206      	bcs.n	800a10e <tcp_write+0x6e>
    pcb->flags |= TF_NAGLEMEMERR;
 800a100:	7eab      	ldrb	r3, [r5, #26]
 800a102:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a106:	76ab      	strb	r3, [r5, #26]
  return ERR_MEM;
 800a108:	f04f 30ff 	mov.w	r0, #4294967295
 800a10c:	e7e7      	b.n	800a0de <tcp_write+0x3e>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800a10e:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
 800a112:	2a08      	cmp	r2, #8
 800a114:	d8f4      	bhi.n	800a100 <tcp_write+0x60>
 800a116:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 800a118:	b30a      	cbz	r2, 800a15e <tcp_write+0xbe>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a11a:	b943      	cbnz	r3, 800a12e <tcp_write+0x8e>
 800a11c:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800a11e:	b933      	cbnz	r3, 800a12e <tcp_write+0x8e>
 800a120:	4b8c      	ldr	r3, [pc, #560]	; (800a354 <tcp_write+0x2b4>)
 800a122:	498f      	ldr	r1, [pc, #572]	; (800a360 <tcp_write+0x2c0>)
 800a124:	f44f 72ab 	mov.w	r2, #342	; 0x156
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a128:	488c      	ldr	r0, [pc, #560]	; (800a35c <tcp_write+0x2bc>)
 800a12a:	f003 fdef 	bl	800dd0c <iprintf>
  if (pcb->unsent != NULL) {
 800a12e:	6eac      	ldr	r4, [r5, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 800a130:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 800a134:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 800a136:	b9dc      	cbnz	r4, 800a170 <tcp_write+0xd0>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a138:	f8b5 8064 	ldrh.w	r8, [r5, #100]	; 0x64
 800a13c:	f1b8 0f00 	cmp.w	r8, #0
 800a140:	f000 8103 	beq.w	800a34a <tcp_write+0x2aa>
 800a144:	4b83      	ldr	r3, [pc, #524]	; (800a354 <tcp_write+0x2b4>)
 800a146:	4987      	ldr	r1, [pc, #540]	; (800a364 <tcp_write+0x2c4>)
 800a148:	4884      	ldr	r0, [pc, #528]	; (800a35c <tcp_write+0x2bc>)
 800a14a:	f240 2225 	movw	r2, #549	; 0x225
 800a14e:	f003 fddd 	bl	800dd0c <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a152:	4627      	mov	r7, r4
  u16_t extendlen = 0;
 800a154:	46a2      	mov	sl, r4
  u16_t oversize_used = 0;
 800a156:	4626      	mov	r6, r4
  u16_t pos = 0; /* position in 'arg' data */
 800a158:	46a0      	mov	r8, r4
  struct pbuf *concat_p = NULL;
 800a15a:	46a1      	mov	r9, r4
 800a15c:	e094      	b.n	800a288 <tcp_write+0x1e8>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a15e:	b913      	cbnz	r3, 800a166 <tcp_write+0xc6>
 800a160:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800a162:	2b00      	cmp	r3, #0
 800a164:	d0e3      	beq.n	800a12e <tcp_write+0x8e>
 800a166:	4b7b      	ldr	r3, [pc, #492]	; (800a354 <tcp_write+0x2b4>)
 800a168:	497f      	ldr	r1, [pc, #508]	; (800a368 <tcp_write+0x2c8>)
 800a16a:	f240 1259 	movw	r2, #345	; 0x159
 800a16e:	e7db      	b.n	800a128 <tcp_write+0x88>
  if (pcb->unsent != NULL) {
 800a170:	4627      	mov	r7, r4
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a172:	f8d7 b000 	ldr.w	fp, [r7]
 800a176:	f1bb 0f00 	cmp.w	fp, #0
 800a17a:	f040 80b6 	bne.w	800a2ea <tcp_write+0x24a>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800a17e:	7abb      	ldrb	r3, [r7, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a180:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800a182:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a186:	893b      	ldrh	r3, [r7, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800a188:	bf14      	ite	ne
 800a18a:	2404      	movne	r4, #4
 800a18c:	2400      	moveq	r4, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a18e:	4423      	add	r3, r4
 800a190:	429a      	cmp	r2, r3
 800a192:	da06      	bge.n	800a1a2 <tcp_write+0x102>
 800a194:	4b6f      	ldr	r3, [pc, #444]	; (800a354 <tcp_write+0x2b4>)
 800a196:	4975      	ldr	r1, [pc, #468]	; (800a36c <tcp_write+0x2cc>)
 800a198:	4870      	ldr	r0, [pc, #448]	; (800a35c <tcp_write+0x2bc>)
 800a19a:	f240 12c7 	movw	r2, #455	; 0x1c7
 800a19e:	f003 fdb5 	bl	800dd0c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a1a2:	f8b7 9008 	ldrh.w	r9, [r7, #8]
 800a1a6:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 800a1a8:	f8b5 6064 	ldrh.w	r6, [r5, #100]	; 0x64
 800a1ac:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a1b0:	eba3 0909 	sub.w	r9, r3, r9
 800a1b4:	eba9 0904 	sub.w	r9, r9, r4
 800a1b8:	fa1f f989 	uxth.w	r9, r9
    if (oversize > 0) {
 800a1bc:	2e00      	cmp	r6, #0
 800a1be:	f000 8096 	beq.w	800a2ee <tcp_write+0x24e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a1c2:	45b1      	cmp	r9, r6
 800a1c4:	d206      	bcs.n	800a1d4 <tcp_write+0x134>
 800a1c6:	4b63      	ldr	r3, [pc, #396]	; (800a354 <tcp_write+0x2b4>)
 800a1c8:	4969      	ldr	r1, [pc, #420]	; (800a370 <tcp_write+0x2d0>)
 800a1ca:	4864      	ldr	r0, [pc, #400]	; (800a35c <tcp_write+0x2bc>)
 800a1cc:	f240 12d9 	movw	r2, #473	; 0x1d9
 800a1d0:	f003 fd9c 	bl	800dd0c <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a1d4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a1d8:	9a05      	ldr	r2, [sp, #20]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	bf28      	it	cs
 800a1de:	461a      	movcs	r2, r3
 800a1e0:	454a      	cmp	r2, r9
 800a1e2:	4616      	mov	r6, r2
 800a1e4:	bfa8      	it	ge
 800a1e6:	464e      	movge	r6, r9
      oversize -= oversize_used;
 800a1e8:	1b9b      	subs	r3, r3, r6
      space -= oversize_used;
 800a1ea:	eba9 0906 	sub.w	r9, r9, r6
      oversize -= oversize_used;
 800a1ee:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800a1f2:	fa1f f989 	uxth.w	r9, r9
 800a1f6:	463c      	mov	r4, r7
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a1f8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a1fc:	b153      	cbz	r3, 800a214 <tcp_write+0x174>
 800a1fe:	9b05      	ldr	r3, [sp, #20]
 800a200:	429e      	cmp	r6, r3
 800a202:	f000 81cd 	beq.w	800a5a0 <tcp_write+0x500>
 800a206:	4b53      	ldr	r3, [pc, #332]	; (800a354 <tcp_write+0x2b4>)
 800a208:	495a      	ldr	r1, [pc, #360]	; (800a374 <tcp_write+0x2d4>)
 800a20a:	4854      	ldr	r0, [pc, #336]	; (800a35c <tcp_write+0x2bc>)
 800a20c:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a210:	f003 fd7c 	bl	800dd0c <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a214:	9b05      	ldr	r3, [sp, #20]
 800a216:	429e      	cmp	r6, r3
 800a218:	f080 81c2 	bcs.w	800a5a0 <tcp_write+0x500>
 800a21c:	f1b9 0f00 	cmp.w	r9, #0
 800a220:	f000 808f 	beq.w	800a342 <tcp_write+0x2a2>
 800a224:	f8b7 a008 	ldrh.w	sl, [r7, #8]
 800a228:	f1ba 0f00 	cmp.w	sl, #0
 800a22c:	f000 808a 	beq.w	800a344 <tcp_write+0x2a4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a230:	1b9c      	subs	r4, r3, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a234:	454c      	cmp	r4, r9
 800a236:	bfa8      	it	ge
 800a238:	464c      	movge	r4, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a23a:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a23c:	fa1f f884 	uxth.w	r8, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a240:	d557      	bpl.n	800a2f2 <tcp_write+0x252>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a242:	2301      	movs	r3, #1
 800a244:	9302      	str	r3, [sp, #8]
 800a246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a248:	9301      	str	r3, [sp, #4]
 800a24a:	464a      	mov	r2, r9
 800a24c:	9500      	str	r5, [sp, #0]
 800a24e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800a252:	4641      	mov	r1, r8
 800a254:	2004      	movs	r0, #4
 800a256:	f7ff fe45 	bl	8009ee4 <tcp_pbuf_prealloc>
 800a25a:	4681      	mov	r9, r0
 800a25c:	2800      	cmp	r0, #0
 800a25e:	f000 8199 	beq.w	800a594 <tcp_write+0x4f4>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a262:	9b08      	ldr	r3, [sp, #32]
 800a264:	6840      	ldr	r0, [r0, #4]
 800a266:	4642      	mov	r2, r8
 800a268:	1999      	adds	r1, r3, r6
 800a26a:	f003 fc90 	bl	800db8e <memcpy>
        queuelen += pbuf_clen(concat_p);
 800a26e:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 800a270:	f7fd fb64 	bl	800793c <pbuf_clen>
 800a274:	9b06      	ldr	r3, [sp, #24]
 800a276:	4403      	add	r3, r0
 800a278:	b29b      	uxth	r3, r3
 800a27a:	9306      	str	r3, [sp, #24]
  u16_t extendlen = 0;
 800a27c:	f04f 0a00 	mov.w	sl, #0
      pos += seglen;
 800a280:	44b0      	add	r8, r6
 800a282:	fa1f f888 	uxth.w	r8, r8
 800a286:	463c      	mov	r4, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a28a:	f04f 0b00 	mov.w	fp, #0
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a296:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 800a298:	9b05      	ldr	r3, [sp, #20]
 800a29a:	4598      	cmp	r8, r3
 800a29c:	d370      	bcc.n	800a380 <tcp_write+0x2e0>
  if (oversize_used > 0) {
 800a29e:	b146      	cbz	r6, 800a2b2 <tcp_write+0x212>
    for (p = last_unsent->p; p; p = p->next) {
 800a2a0:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800a2a4:	f1b8 0f00 	cmp.w	r8, #0
 800a2a8:	f040 8110 	bne.w	800a4cc <tcp_write+0x42c>
    last_unsent->len += oversize_used;
 800a2ac:	893b      	ldrh	r3, [r7, #8]
 800a2ae:	441e      	add	r6, r3
 800a2b0:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
 800a2b2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a2b6:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  if (concat_p != NULL) {
 800a2ba:	f1b9 0f00 	cmp.w	r9, #0
 800a2be:	f000 811e 	beq.w	800a4fe <tcp_write+0x45e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a2c2:	b937      	cbnz	r7, 800a2d2 <tcp_write+0x232>
 800a2c4:	4b23      	ldr	r3, [pc, #140]	; (800a354 <tcp_write+0x2b4>)
 800a2c6:	492c      	ldr	r1, [pc, #176]	; (800a378 <tcp_write+0x2d8>)
 800a2c8:	4824      	ldr	r0, [pc, #144]	; (800a35c <tcp_write+0x2bc>)
 800a2ca:	f240 22bb 	movw	r2, #699	; 0x2bb
 800a2ce:	f003 fd1d 	bl	800dd0c <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800a2d2:	4649      	mov	r1, r9
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f7fd fb4d 	bl	8007974 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a2da:	893b      	ldrh	r3, [r7, #8]
 800a2dc:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	813b      	strh	r3, [r7, #8]
    last_unsent->next = queue;
 800a2e4:	f8c7 b000 	str.w	fp, [r7]
 800a2e8:	e12b      	b.n	800a542 <tcp_write+0x4a2>
 800a2ea:	465f      	mov	r7, fp
 800a2ec:	e741      	b.n	800a172 <tcp_write+0xd2>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a2ee:	4634      	mov	r4, r6
 800a2f0:	e782      	b.n	800a1f8 <tcp_write+0x158>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 9000 	ldr.w	r9, [r3]
 800a2f8:	f1b9 0f00 	cmp.w	r9, #0
 800a2fc:	d112      	bne.n	800a324 <tcp_write+0x284>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a2fe:	7b1a      	ldrb	r2, [r3, #12]
 800a300:	2a01      	cmp	r2, #1
 800a302:	d111      	bne.n	800a328 <tcp_write+0x288>
 800a304:	895a      	ldrh	r2, [r3, #10]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	4413      	add	r3, r2
 800a30a:	9a08      	ldr	r2, [sp, #32]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d10b      	bne.n	800a328 <tcp_write+0x288>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a310:	b136      	cbz	r6, 800a320 <tcp_write+0x280>
 800a312:	4b10      	ldr	r3, [pc, #64]	; (800a354 <tcp_write+0x2b4>)
 800a314:	4919      	ldr	r1, [pc, #100]	; (800a37c <tcp_write+0x2dc>)
 800a316:	4811      	ldr	r0, [pc, #68]	; (800a35c <tcp_write+0x2bc>)
 800a318:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800a31c:	f003 fcf6 	bl	800dd0c <iprintf>
          extendlen = seglen;
 800a320:	46c2      	mov	sl, r8
 800a322:	e7ad      	b.n	800a280 <tcp_write+0x1e0>
 800a324:	464b      	mov	r3, r9
 800a326:	e7e5      	b.n	800a2f4 <tcp_write+0x254>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a328:	2201      	movs	r2, #1
 800a32a:	4641      	mov	r1, r8
 800a32c:	2004      	movs	r0, #4
 800a32e:	f7fd f9b5 	bl	800769c <pbuf_alloc>
 800a332:	4681      	mov	r9, r0
 800a334:	2800      	cmp	r0, #0
 800a336:	f000 812d 	beq.w	800a594 <tcp_write+0x4f4>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800a33a:	9b08      	ldr	r3, [sp, #32]
 800a33c:	4433      	add	r3, r6
 800a33e:	6043      	str	r3, [r0, #4]
 800a340:	e796      	b.n	800a270 <tcp_write+0x1d0>
  u16_t extendlen = 0;
 800a342:	46ca      	mov	sl, r9
 800a344:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 800a346:	46d1      	mov	r9, sl
 800a348:	e79e      	b.n	800a288 <tcp_write+0x1e8>
  u16_t extendlen = 0;
 800a34a:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 800a34c:	4646      	mov	r6, r8
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a34e:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 800a350:	46c1      	mov	r9, r8
 800a352:	e799      	b.n	800a288 <tcp_write+0x1e8>
 800a354:	080109ff 	.word	0x080109ff
 800a358:	08010a46 	.word	0x08010a46
 800a35c:	0800f3a7 	.word	0x0800f3a7
 800a360:	08010a77 	.word	0x08010a77
 800a364:	08010b61 	.word	0x08010b61
 800a368:	08010ab1 	.word	0x08010ab1
 800a36c:	08010ae3 	.word	0x08010ae3
 800a370:	08010afa 	.word	0x08010afa
 800a374:	08010b1a 	.word	0x08010b1a
 800a378:	08010bed 	.word	0x08010bed
 800a37c:	08010b38 	.word	0x08010b38
    u16_t left = len - pos;
 800a380:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a382:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 800a384:	eba3 0308 	sub.w	r3, r3, r8
    u16_t seglen = LWIP_MIN(left, max_len);
 800a388:	b29b      	uxth	r3, r3
 800a38a:	4293      	cmp	r3, r2
 800a38c:	bf28      	it	cs
 800a38e:	4613      	movcs	r3, r2
 800a390:	b29b      	uxth	r3, r3
 800a392:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a396:	b363      	cbz	r3, 800a3f2 <tcp_write+0x352>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a398:	fabb f38b 	clz	r3, fp
 800a39c:	095b      	lsrs	r3, r3, #5
 800a39e:	9302      	str	r3, [sp, #8]
 800a3a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a2:	9301      	str	r3, [sp, #4]
 800a3a4:	9500      	str	r5, [sp, #0]
 800a3a6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800a3aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	f7ff fd99 	bl	8009ee4 <tcp_pbuf_prealloc>
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d03b      	beq.n	800a430 <tcp_write+0x390>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a3b8:	8943      	ldrh	r3, [r0, #10]
 800a3ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d206      	bcs.n	800a3ce <tcp_write+0x32e>
 800a3c0:	4b7b      	ldr	r3, [pc, #492]	; (800a5b0 <tcp_write+0x510>)
 800a3c2:	497c      	ldr	r1, [pc, #496]	; (800a5b4 <tcp_write+0x514>)
 800a3c4:	487c      	ldr	r0, [pc, #496]	; (800a5b8 <tcp_write+0x518>)
 800a3c6:	f240 2241 	movw	r2, #577	; 0x241
 800a3ca:	f003 fc9f 	bl	800dd0c <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800a3ce:	9b08      	ldr	r3, [sp, #32]
 800a3d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3d2:	6860      	ldr	r0, [r4, #4]
 800a3d4:	eb03 0108 	add.w	r1, r3, r8
 800a3d8:	f003 fbd9 	bl	800db8e <memcpy>
    queuelen += pbuf_clen(p);
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f7fd faad 	bl	800793c <pbuf_clen>
 800a3e2:	9b06      	ldr	r3, [sp, #24]
 800a3e4:	4403      	add	r3, r0
 800a3e6:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800a3e8:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 800a3ea:	9306      	str	r3, [sp, #24]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800a3ec:	d949      	bls.n	800a482 <tcp_write+0x3e2>
      pbuf_free(p);
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	e01c      	b.n	800a42c <tcp_write+0x38c>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a3f2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a3f6:	b133      	cbz	r3, 800a406 <tcp_write+0x366>
 800a3f8:	4b6d      	ldr	r3, [pc, #436]	; (800a5b0 <tcp_write+0x510>)
 800a3fa:	4970      	ldr	r1, [pc, #448]	; (800a5bc <tcp_write+0x51c>)
 800a3fc:	486e      	ldr	r0, [pc, #440]	; (800a5b8 <tcp_write+0x518>)
 800a3fe:	f240 224b 	movw	r2, #587	; 0x24b
 800a402:	f003 fc83 	bl	800dd0c <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a406:	2201      	movs	r2, #1
 800a408:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a40a:	2000      	movs	r0, #0
 800a40c:	f7fd f946 	bl	800769c <pbuf_alloc>
 800a410:	b170      	cbz	r0, 800a430 <tcp_write+0x390>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800a412:	9a08      	ldr	r2, [sp, #32]
 800a414:	900d      	str	r0, [sp, #52]	; 0x34
 800a416:	4442      	add	r2, r8
 800a418:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a41a:	2200      	movs	r2, #0
 800a41c:	4611      	mov	r1, r2
 800a41e:	4610      	mov	r0, r2
 800a420:	f7fd f93c 	bl	800769c <pbuf_alloc>
 800a424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a426:	4604      	mov	r4, r0
 800a428:	bb38      	cbnz	r0, 800a47a <tcp_write+0x3da>
        pbuf_free(p2);
 800a42a:	4618      	mov	r0, r3
      pbuf_free(p);
 800a42c:	f7fd f8d4 	bl	80075d8 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 800a430:	7eab      	ldrb	r3, [r5, #26]
 800a432:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a436:	76ab      	strb	r3, [r5, #26]
  if (concat_p != NULL) {
 800a438:	f1b9 0f00 	cmp.w	r9, #0
 800a43c:	d002      	beq.n	800a444 <tcp_write+0x3a4>
    pbuf_free(concat_p);
 800a43e:	4648      	mov	r0, r9
 800a440:	f7fd f8ca 	bl	80075d8 <pbuf_free>
  if (queue != NULL) {
 800a444:	f1bb 0f00 	cmp.w	fp, #0
 800a448:	d002      	beq.n	800a450 <tcp_write+0x3b0>
    tcp_segs_free(queue);
 800a44a:	4658      	mov	r0, fp
 800a44c:	f7fd fd14 	bl	8007e78 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800a450:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 800a454:	2b00      	cmp	r3, #0
 800a456:	f43f ae57 	beq.w	800a108 <tcp_write+0x68>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a45a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f47f ae53 	bne.w	800a108 <tcp_write+0x68>
 800a462:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800a464:	2b00      	cmp	r3, #0
 800a466:	f47f ae4f 	bne.w	800a108 <tcp_write+0x68>
 800a46a:	4b51      	ldr	r3, [pc, #324]	; (800a5b0 <tcp_write+0x510>)
 800a46c:	4954      	ldr	r1, [pc, #336]	; (800a5c0 <tcp_write+0x520>)
 800a46e:	4852      	ldr	r0, [pc, #328]	; (800a5b8 <tcp_write+0x518>)
 800a470:	f240 3202 	movw	r2, #770	; 0x302
 800a474:	f003 fc4a 	bl	800dd0c <iprintf>
 800a478:	e646      	b.n	800a108 <tcp_write+0x68>
      pbuf_cat(p/*header*/, p2/*data*/);
 800a47a:	4619      	mov	r1, r3
 800a47c:	f7fd fa7a 	bl	8007974 <pbuf_cat>
 800a480:	e7ac      	b.n	800a3dc <tcp_write+0x33c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a482:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a484:	2200      	movs	r2, #0
 800a486:	4621      	mov	r1, r4
 800a488:	9200      	str	r2, [sp, #0]
 800a48a:	4443      	add	r3, r8
 800a48c:	4628      	mov	r0, r5
 800a48e:	f7ff fd63 	bl	8009f58 <tcp_create_segment>
 800a492:	4604      	mov	r4, r0
 800a494:	2800      	cmp	r0, #0
 800a496:	d0cb      	beq.n	800a430 <tcp_write+0x390>
    if (queue == NULL) {
 800a498:	f1bb 0f00 	cmp.w	fp, #0
 800a49c:	d010      	beq.n	800a4c0 <tcp_write+0x420>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a49e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4a0:	b933      	cbnz	r3, 800a4b0 <tcp_write+0x410>
 800a4a2:	4b43      	ldr	r3, [pc, #268]	; (800a5b0 <tcp_write+0x510>)
 800a4a4:	4947      	ldr	r1, [pc, #284]	; (800a5c4 <tcp_write+0x524>)
 800a4a6:	4844      	ldr	r0, [pc, #272]	; (800a5b8 <tcp_write+0x518>)
 800a4a8:	f240 2285 	movw	r2, #645	; 0x285
 800a4ac:	f003 fc2e 	bl	800dd0c <iprintf>
      prev_seg->next = seg;
 800a4b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4b2:	601c      	str	r4, [r3, #0]
    pos += seglen;
 800a4b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b6:	940b      	str	r4, [sp, #44]	; 0x2c
 800a4b8:	4498      	add	r8, r3
 800a4ba:	fa1f f888 	uxth.w	r8, r8
 800a4be:	e6eb      	b.n	800a298 <tcp_write+0x1f8>
 800a4c0:	4683      	mov	fp, r0
 800a4c2:	e7f7      	b.n	800a4b4 <tcp_write+0x414>
  if (oversize_used > 0) {
 800a4c4:	f04f 0a00 	mov.w	sl, #0
 800a4c8:	46d1      	mov	r9, sl
 800a4ca:	e6e9      	b.n	800a2a0 <tcp_write+0x200>
      p->tot_len += oversize_used;
 800a4cc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800a4d0:	4433      	add	r3, r6
 800a4d2:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (p->next == NULL) {
 800a4d6:	f8d8 3000 	ldr.w	r3, [r8]
 800a4da:	b96b      	cbnz	r3, 800a4f8 <tcp_write+0x458>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a4dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a4e0:	f8b8 000a 	ldrh.w	r0, [r8, #10]
 800a4e4:	9908      	ldr	r1, [sp, #32]
 800a4e6:	4418      	add	r0, r3
 800a4e8:	4632      	mov	r2, r6
 800a4ea:	f003 fb50 	bl	800db8e <memcpy>
        p->len += oversize_used;
 800a4ee:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800a4f2:	4433      	add	r3, r6
 800a4f4:	f8a8 300a 	strh.w	r3, [r8, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a4f8:	f8d8 8000 	ldr.w	r8, [r8]
 800a4fc:	e6d2      	b.n	800a2a4 <tcp_write+0x204>
  } else if (extendlen > 0) {
 800a4fe:	f1ba 0f00 	cmp.w	sl, #0
 800a502:	d019      	beq.n	800a538 <tcp_write+0x498>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a504:	b10f      	cbz	r7, 800a50a <tcp_write+0x46a>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	b933      	cbnz	r3, 800a518 <tcp_write+0x478>
 800a50a:	4b29      	ldr	r3, [pc, #164]	; (800a5b0 <tcp_write+0x510>)
 800a50c:	492e      	ldr	r1, [pc, #184]	; (800a5c8 <tcp_write+0x528>)
 800a50e:	482a      	ldr	r0, [pc, #168]	; (800a5b8 <tcp_write+0x518>)
 800a510:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a514:	f003 fbfa 	bl	800dd0c <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	891a      	ldrh	r2, [r3, #8]
 800a51c:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 800a51e:	4452      	add	r2, sl
 800a520:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a522:	b939      	cbnz	r1, 800a534 <tcp_write+0x494>
    p->len += extendlen;
 800a524:	895a      	ldrh	r2, [r3, #10]
 800a526:	4452      	add	r2, sl
 800a528:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a52a:	893b      	ldrh	r3, [r7, #8]
 800a52c:	449a      	add	sl, r3
 800a52e:	f8a7 a008 	strh.w	sl, [r7, #8]
 800a532:	e6d7      	b.n	800a2e4 <tcp_write+0x244>
      p->tot_len += extendlen;
 800a534:	460b      	mov	r3, r1
 800a536:	e7f0      	b.n	800a51a <tcp_write+0x47a>
  if (last_unsent == NULL) {
 800a538:	2f00      	cmp	r7, #0
 800a53a:	f47f aed3 	bne.w	800a2e4 <tcp_write+0x244>
    pcb->unsent = queue;
 800a53e:	f8c5 b068 	str.w	fp, [r5, #104]	; 0x68
  pcb->snd_lbb += len;
 800a542:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a544:	9a05      	ldr	r2, [sp, #20]
 800a546:	4413      	add	r3, r2
 800a548:	65ab      	str	r3, [r5, #88]	; 0x58
  pcb->snd_buf -= len;
 800a54a:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800a54e:	1a9b      	subs	r3, r3, r2
 800a550:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800a554:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800a558:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800a55c:	9b06      	ldr	r3, [sp, #24]
 800a55e:	b153      	cbz	r3, 800a576 <tcp_write+0x4d6>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a560:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a562:	b943      	cbnz	r3, 800a576 <tcp_write+0x4d6>
 800a564:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800a566:	b933      	cbnz	r3, 800a576 <tcp_write+0x4d6>
 800a568:	4b11      	ldr	r3, [pc, #68]	; (800a5b0 <tcp_write+0x510>)
 800a56a:	4915      	ldr	r1, [pc, #84]	; (800a5c0 <tcp_write+0x520>)
 800a56c:	4812      	ldr	r0, [pc, #72]	; (800a5b8 <tcp_write+0x518>)
 800a56e:	f240 22ed 	movw	r2, #749	; 0x2ed
 800a572:	f003 fbcb 	bl	800dd0c <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800a576:	b15c      	cbz	r4, 800a590 <tcp_write+0x4f0>
 800a578:	68e4      	ldr	r4, [r4, #12]
 800a57a:	b14c      	cbz	r4, 800a590 <tcp_write+0x4f0>
 800a57c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a57e:	f013 0602 	ands.w	r6, r3, #2
 800a582:	d105      	bne.n	800a590 <tcp_write+0x4f0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a584:	2008      	movs	r0, #8
 800a586:	89a5      	ldrh	r5, [r4, #12]
 800a588:	f7fb fa66 	bl	8005a58 <lwip_htons>
 800a58c:	4328      	orrs	r0, r5
 800a58e:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
 800a590:	2000      	movs	r0, #0
 800a592:	e5a4      	b.n	800a0de <tcp_write+0x3e>
      p->tot_len += extendlen;
 800a594:	f04f 0900 	mov.w	r9, #0
 800a598:	e74a      	b.n	800a430 <tcp_write+0x390>
    return ERR_CONN;
 800a59a:	f06f 000a 	mvn.w	r0, #10
 800a59e:	e59e      	b.n	800a0de <tcp_write+0x3e>
  if (oversize_used > 0) {
 800a5a0:	2e00      	cmp	r6, #0
 800a5a2:	d18f      	bne.n	800a4c4 <tcp_write+0x424>
  pcb->unsent_oversize = oversize;
 800a5a4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a5a8:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 800a5ac:	e69a      	b.n	800a2e4 <tcp_write+0x244>
 800a5ae:	bf00      	nop
 800a5b0:	080109ff 	.word	0x080109ff
 800a5b4:	08010b90 	.word	0x08010b90
 800a5b8:	0800f3a7 	.word	0x0800f3a7
 800a5bc:	08010bce 	.word	0x08010bce
 800a5c0:	08010c5a 	.word	0x08010c5a
 800a5c4:	08010bdc 	.word	0x08010bdc
 800a5c8:	08010c25 	.word	0x08010c25

0800a5cc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a5cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a5d0:	f011 0803 	ands.w	r8, r1, #3
{
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a5d8:	d106      	bne.n	800a5e8 <tcp_enqueue_flags+0x1c>
 800a5da:	4b41      	ldr	r3, [pc, #260]	; (800a6e0 <tcp_enqueue_flags+0x114>)
 800a5dc:	4941      	ldr	r1, [pc, #260]	; (800a6e4 <tcp_enqueue_flags+0x118>)
 800a5de:	4842      	ldr	r0, [pc, #264]	; (800a6e8 <tcp_enqueue_flags+0x11c>)
 800a5e0:	f240 321b 	movw	r2, #795	; 0x31b
 800a5e4:	f003 fb92 	bl	800dd0c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a5e8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a5ec:	2b08      	cmp	r3, #8
 800a5ee:	d90a      	bls.n	800a606 <tcp_enqueue_flags+0x3a>
 800a5f0:	07f1      	lsls	r1, r6, #31
 800a5f2:	d408      	bmi.n	800a606 <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 800a5f4:	7ea3      	ldrb	r3, [r4, #26]
 800a5f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a5fa:	76a3      	strb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a5fc:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 800a600:	b003      	add	sp, #12
 800a602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a606:	f006 0302 	and.w	r3, r6, #2
  if (flags & TCP_SYN) {
 800a60a:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a60c:	bf14      	ite	ne
 800a60e:	2704      	movne	r7, #4
 800a610:	2700      	moveq	r7, #0
 800a612:	f04f 0200 	mov.w	r2, #0
 800a616:	4639      	mov	r1, r7
 800a618:	4610      	mov	r0, r2
  u8_t optflags = 0;
 800a61a:	bf14      	ite	ne
 800a61c:	f04f 0901 	movne.w	r9, #1
 800a620:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a624:	f7fd f83a 	bl	800769c <pbuf_alloc>
 800a628:	4605      	mov	r5, r0
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d0e2      	beq.n	800a5f4 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a62e:	8943      	ldrh	r3, [r0, #10]
 800a630:	42bb      	cmp	r3, r7
 800a632:	d206      	bcs.n	800a642 <tcp_enqueue_flags+0x76>
 800a634:	4b2a      	ldr	r3, [pc, #168]	; (800a6e0 <tcp_enqueue_flags+0x114>)
 800a636:	492d      	ldr	r1, [pc, #180]	; (800a6ec <tcp_enqueue_flags+0x120>)
 800a638:	482b      	ldr	r0, [pc, #172]	; (800a6e8 <tcp_enqueue_flags+0x11c>)
 800a63a:	f240 3241 	movw	r2, #833	; 0x341
 800a63e:	f003 fb65 	bl	800dd0c <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a642:	f8cd 9000 	str.w	r9, [sp]
 800a646:	4629      	mov	r1, r5
 800a648:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a64a:	4632      	mov	r2, r6
 800a64c:	4620      	mov	r0, r4
 800a64e:	f7ff fc83 	bl	8009f58 <tcp_create_segment>
 800a652:	4605      	mov	r5, r0
 800a654:	2800      	cmp	r0, #0
 800a656:	d0cd      	beq.n	800a5f4 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a658:	68c3      	ldr	r3, [r0, #12]
 800a65a:	079a      	lsls	r2, r3, #30
 800a65c:	d006      	beq.n	800a66c <tcp_enqueue_flags+0xa0>
 800a65e:	4b20      	ldr	r3, [pc, #128]	; (800a6e0 <tcp_enqueue_flags+0x114>)
 800a660:	4923      	ldr	r1, [pc, #140]	; (800a6f0 <tcp_enqueue_flags+0x124>)
 800a662:	4821      	ldr	r0, [pc, #132]	; (800a6e8 <tcp_enqueue_flags+0x11c>)
 800a664:	f240 3249 	movw	r2, #841	; 0x349
 800a668:	f003 fb50 	bl	800dd0c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a66c:	892b      	ldrh	r3, [r5, #8]
 800a66e:	b133      	cbz	r3, 800a67e <tcp_enqueue_flags+0xb2>
 800a670:	4b1b      	ldr	r3, [pc, #108]	; (800a6e0 <tcp_enqueue_flags+0x114>)
 800a672:	4920      	ldr	r1, [pc, #128]	; (800a6f4 <tcp_enqueue_flags+0x128>)
 800a674:	481c      	ldr	r0, [pc, #112]	; (800a6e8 <tcp_enqueue_flags+0x11c>)
 800a676:	f240 324a 	movw	r2, #842	; 0x34a
 800a67a:	f003 fb47 	bl	800dd0c <iprintf>
  if (pcb->unsent == NULL) {
 800a67e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a680:	bb4b      	cbnz	r3, 800a6d6 <tcp_enqueue_flags+0x10a>
    pcb->unsent = seg;
 800a682:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 800a684:	2300      	movs	r3, #0
 800a686:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a68a:	f1b8 0f00 	cmp.w	r8, #0
 800a68e:	d002      	beq.n	800a696 <tcp_enqueue_flags+0xca>
    pcb->snd_lbb++;
 800a690:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a692:	3301      	adds	r3, #1
 800a694:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 800a696:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 800a698:	bf42      	ittt	mi
 800a69a:	7ea3      	ldrbmi	r3, [r4, #26]
 800a69c:	f043 0320 	orrmi.w	r3, r3, #32
 800a6a0:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a6a2:	6868      	ldr	r0, [r5, #4]
 800a6a4:	f7fd f94a 	bl	800793c <pbuf_clen>
 800a6a8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a6ac:	4418      	add	r0, r3
 800a6ae:	b280      	uxth	r0, r0
 800a6b0:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d0a3      	beq.n	800a600 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a6b8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a6ba:	b948      	cbnz	r0, 800a6d0 <tcp_enqueue_flags+0x104>
 800a6bc:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 800a6be:	2c00      	cmp	r4, #0
 800a6c0:	d19e      	bne.n	800a600 <tcp_enqueue_flags+0x34>
 800a6c2:	4b07      	ldr	r3, [pc, #28]	; (800a6e0 <tcp_enqueue_flags+0x114>)
 800a6c4:	490c      	ldr	r1, [pc, #48]	; (800a6f8 <tcp_enqueue_flags+0x12c>)
 800a6c6:	4808      	ldr	r0, [pc, #32]	; (800a6e8 <tcp_enqueue_flags+0x11c>)
 800a6c8:	f240 326d 	movw	r2, #877	; 0x36d
 800a6cc:	f003 fb1e 	bl	800dd0c <iprintf>
  return ERR_OK;
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	e795      	b.n	800a600 <tcp_enqueue_flags+0x34>
 800a6d4:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	2a00      	cmp	r2, #0
 800a6da:	d1fb      	bne.n	800a6d4 <tcp_enqueue_flags+0x108>
    useg->next = seg;
 800a6dc:	601d      	str	r5, [r3, #0]
 800a6de:	e7d1      	b.n	800a684 <tcp_enqueue_flags+0xb8>
 800a6e0:	080109ff 	.word	0x080109ff
 800a6e4:	0801089c 	.word	0x0801089c
 800a6e8:	0800f3a7 	.word	0x0800f3a7
 800a6ec:	080108f1 	.word	0x080108f1
 800a6f0:	0801092a 	.word	0x0801092a
 800a6f4:	08010942 	.word	0x08010942
 800a6f8:	0801096c 	.word	0x0801096c

0800a6fc <tcp_send_fin>:
{
 800a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 800a6fe:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 800a700:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 800a702:	b934      	cbnz	r4, 800a712 <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a704:	4628      	mov	r0, r5
 800a706:	2101      	movs	r1, #1
}
 800a708:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a70c:	f7ff bf5e 	b.w	800a5cc <tcp_enqueue_flags>
 800a710:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a712:	6823      	ldr	r3, [r4, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d1fb      	bne.n	800a710 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a718:	68e3      	ldr	r3, [r4, #12]
 800a71a:	8998      	ldrh	r0, [r3, #12]
 800a71c:	f7fb f99c 	bl	8005a58 <lwip_htons>
 800a720:	f010 0707 	ands.w	r7, r0, #7
 800a724:	d1ee      	bne.n	800a704 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a726:	68e6      	ldr	r6, [r4, #12]
 800a728:	2001      	movs	r0, #1
 800a72a:	89b4      	ldrh	r4, [r6, #12]
 800a72c:	f7fb f994 	bl	8005a58 <lwip_htons>
 800a730:	4320      	orrs	r0, r4
 800a732:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 800a734:	7eab      	ldrb	r3, [r5, #26]
 800a736:	f043 0320 	orr.w	r3, r3, #32
 800a73a:	76ab      	strb	r3, [r5, #26]
}
 800a73c:	4638      	mov	r0, r7
 800a73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a740 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a740:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a742:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a744:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800a746:	f7fb f98a 	bl	8005a5e <lwip_htonl>
 800a74a:	2100      	movs	r1, #0
 800a74c:	4602      	mov	r2, r0
 800a74e:	4620      	mov	r0, r4
 800a750:	f7ff fc6a 	bl	800a028 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800a754:	4606      	mov	r6, r0
 800a756:	b940      	cbnz	r0, 800a76a <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a758:	7ea3      	ldrb	r3, [r4, #26]
 800a75a:	f043 0303 	orr.w	r3, r3, #3
 800a75e:	76a3      	strb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a760:	f06f 0501 	mvn.w	r5, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800a764:	4628      	mov	r0, r5
 800a766:	b004      	add	sp, #16
 800a768:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a76a:	1d25      	adds	r5, r4, #4
 800a76c:	4628      	mov	r0, r5
 800a76e:	f7fb fe67 	bl	8006440 <ip4_route>
  if (netif == NULL) {
 800a772:	b1a0      	cbz	r0, 800a79e <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800a774:	2206      	movs	r2, #6
 800a776:	9201      	str	r2, [sp, #4]
 800a778:	7a62      	ldrb	r2, [r4, #9]
 800a77a:	9002      	str	r0, [sp, #8]
 800a77c:	9200      	str	r2, [sp, #0]
 800a77e:	7aa3      	ldrb	r3, [r4, #10]
 800a780:	462a      	mov	r2, r5
 800a782:	4621      	mov	r1, r4
 800a784:	4630      	mov	r0, r6
 800a786:	f7fb ffc1 	bl	800670c <ip4_output_if>
 800a78a:	4605      	mov	r5, r0
  pbuf_free(p);
 800a78c:	4630      	mov	r0, r6
 800a78e:	f7fc ff23 	bl	80075d8 <pbuf_free>
 800a792:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 800a794:	b135      	cbz	r5, 800a7a4 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a796:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a79a:	76a3      	strb	r3, [r4, #26]
 800a79c:	e7e2      	b.n	800a764 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 800a79e:	f06f 0503 	mvn.w	r5, #3
 800a7a2:	e7f3      	b.n	800a78c <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a7a4:	f023 0303 	bic.w	r3, r3, #3
 800a7a8:	e7f7      	b.n	800a79a <tcp_send_empty_ack+0x5a>
	...

0800a7ac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a7b0:	7d03      	ldrb	r3, [r0, #20]
 800a7b2:	2b01      	cmp	r3, #1
{
 800a7b4:	b087      	sub	sp, #28
 800a7b6:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a7b8:	d106      	bne.n	800a7c8 <tcp_output+0x1c>
 800a7ba:	4ba5      	ldr	r3, [pc, #660]	; (800aa50 <tcp_output+0x2a4>)
 800a7bc:	49a5      	ldr	r1, [pc, #660]	; (800aa54 <tcp_output+0x2a8>)
 800a7be:	48a6      	ldr	r0, [pc, #664]	; (800aa58 <tcp_output+0x2ac>)
 800a7c0:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800a7c4:	f003 faa2 	bl	800dd0c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a7c8:	4ba4      	ldr	r3, [pc, #656]	; (800aa5c <tcp_output+0x2b0>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	429c      	cmp	r4, r3
 800a7ce:	d052      	beq.n	800a876 <tcp_output+0xca>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a7d0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800a7d4:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 800a7d8:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a7da:	429f      	cmp	r7, r3
 800a7dc:	bf28      	it	cs
 800a7de:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800a7e0:	7ea3      	ldrb	r3, [r4, #26]
 800a7e2:	0799      	lsls	r1, r3, #30
 800a7e4:	d510      	bpl.n	800a808 <tcp_output+0x5c>
 800a7e6:	b92d      	cbnz	r5, 800a7f4 <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 800a7e8:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 800a7ea:	b007      	add	sp, #28
 800a7ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 800a7f0:	f7ff bfa6 	b.w	800a740 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800a7f4:	68eb      	ldr	r3, [r5, #12]
 800a7f6:	6858      	ldr	r0, [r3, #4]
 800a7f8:	f7fb f931 	bl	8005a5e <lwip_htonl>
 800a7fc:	892b      	ldrh	r3, [r5, #8]
 800a7fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a800:	1a9b      	subs	r3, r3, r2
 800a802:	4418      	add	r0, r3
     (seg == NULL ||
 800a804:	4287      	cmp	r7, r0
 800a806:	d3ef      	bcc.n	800a7e8 <tcp_output+0x3c>
  useg = pcb->unacked;
 800a808:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 800a80a:	2e00      	cmp	r6, #0
 800a80c:	d136      	bne.n	800a87c <tcp_output+0xd0>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a80e:	f104 0804 	add.w	r8, r4, #4
 800a812:	4640      	mov	r0, r8
 800a814:	f7fb fe14 	bl	8006440 <ip4_route>
  if (netif == NULL) {
 800a818:	4681      	mov	r9, r0
 800a81a:	2800      	cmp	r0, #0
 800a81c:	f000 813c 	beq.w	800aa98 <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 800a820:	b10c      	cbz	r4, 800a826 <tcp_output+0x7a>
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	b913      	cbnz	r3, 800a82c <tcp_output+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a826:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a82a:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 800a82c:	b1d5      	cbz	r5, 800a864 <tcp_output+0xb8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a82e:	68eb      	ldr	r3, [r5, #12]
 800a830:	6858      	ldr	r0, [r3, #4]
 800a832:	f7fb f914 	bl	8005a5e <lwip_htonl>
 800a836:	892b      	ldrh	r3, [r5, #8]
 800a838:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a83a:	1a9b      	subs	r3, r3, r2
 800a83c:	4418      	add	r0, r3
  if (seg != NULL &&
 800a83e:	4287      	cmp	r7, r0
 800a840:	d26f      	bcs.n	800a922 <tcp_output+0x176>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a842:	2f00      	cmp	r7, #0
 800a844:	d06d      	beq.n	800a922 <tcp_output+0x176>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800a846:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800a84a:	429f      	cmp	r7, r3
 800a84c:	d169      	bne.n	800a922 <tcp_output+0x176>
 800a84e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a850:	2b00      	cmp	r3, #0
 800a852:	d166      	bne.n	800a922 <tcp_output+0x176>
    if (pcb->persist_backoff == 0) {
 800a854:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800a858:	b923      	cbnz	r3, 800a864 <tcp_output+0xb8>
      pcb->persist_cnt = 0;
 800a85a:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
      pcb->persist_backoff = 1;
 800a85e:	2301      	movs	r3, #1
 800a860:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (pcb->unsent == NULL) {
 800a864:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a866:	b913      	cbnz	r3, 800a86e <tcp_output+0xc2>
    pcb->unsent_oversize = 0;
 800a868:	2300      	movs	r3, #0
 800a86a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 800a86e:	7ea3      	ldrb	r3, [r4, #26]
 800a870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a874:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 800a876:	2000      	movs	r0, #0
 800a878:	e0e6      	b.n	800aa48 <tcp_output+0x29c>
 800a87a:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 800a87c:	6833      	ldr	r3, [r6, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1fb      	bne.n	800a87a <tcp_output+0xce>
 800a882:	e7c4      	b.n	800a80e <tcp_output+0x62>
    pcb->unsent = seg->next;
 800a884:	682b      	ldr	r3, [r5, #0]
 800a886:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800a888:	7d23      	ldrb	r3, [r4, #20]
 800a88a:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a88c:	bf1e      	ittt	ne
 800a88e:	7ea3      	ldrbne	r3, [r4, #26]
 800a890:	f023 0303 	bicne.w	r3, r3, #3
 800a894:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a896:	68eb      	ldr	r3, [r5, #12]
 800a898:	6858      	ldr	r0, [r3, #4]
 800a89a:	f7fb f8e0 	bl	8005a5e <lwip_htonl>
 800a89e:	68e9      	ldr	r1, [r5, #12]
 800a8a0:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800a8a4:	4683      	mov	fp, r0
 800a8a6:	8988      	ldrh	r0, [r1, #12]
 800a8a8:	f7fb f8d6 	bl	8005a58 <lwip_htons>
 800a8ac:	f010 0003 	ands.w	r0, r0, #3
 800a8b0:	eb0b 030a 	add.w	r3, fp, sl
 800a8b4:	bf18      	it	ne
 800a8b6:	2001      	movne	r0, #1
 800a8b8:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a8ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 800a8bc:	68ea      	ldr	r2, [r5, #12]
 800a8be:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a8c2:	1a1b      	subs	r3, r3, r0
 800a8c4:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 800a8c6:	bfb8      	it	lt
 800a8c8:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 800a8ca:	8990      	ldrh	r0, [r2, #12]
 800a8cc:	f7fb f8c4 	bl	8005a58 <lwip_htons>
 800a8d0:	f010 0003 	ands.w	r0, r0, #3
 800a8d4:	bf18      	it	ne
 800a8d6:	2001      	movne	r0, #1
 800a8d8:	eb10 0f0a 	cmn.w	r0, sl
 800a8dc:	f000 80d8 	beq.w	800aa90 <tcp_output+0x2e4>
      seg->next = NULL;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800a8e4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a8e6:	b913      	cbnz	r3, 800a8ee <tcp_output+0x142>
        pcb->unacked = seg;
 800a8e8:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 800a8ea:	462e      	mov	r6, r5
 800a8ec:	e016      	b.n	800a91c <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a8ee:	68eb      	ldr	r3, [r5, #12]
 800a8f0:	6858      	ldr	r0, [r3, #4]
 800a8f2:	f7fb f8b4 	bl	8005a5e <lwip_htonl>
 800a8f6:	68f2      	ldr	r2, [r6, #12]
 800a8f8:	4682      	mov	sl, r0
 800a8fa:	6850      	ldr	r0, [r2, #4]
 800a8fc:	f7fb f8af 	bl	8005a5e <lwip_htonl>
 800a900:	ebaa 0000 	sub.w	r0, sl, r0
 800a904:	2800      	cmp	r0, #0
 800a906:	f280 80c1 	bge.w	800aa8c <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a90a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	2a00      	cmp	r2, #0
 800a912:	f040 80a9 	bne.w	800aa68 <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800a91a:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800a91c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 800a91e:	2d00      	cmp	r5, #0
 800a920:	d0a2      	beq.n	800a868 <tcp_output+0xbc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a922:	68eb      	ldr	r3, [r5, #12]
 800a924:	6858      	ldr	r0, [r3, #4]
 800a926:	f7fb f89a 	bl	8005a5e <lwip_htonl>
 800a92a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a92c:	1ac0      	subs	r0, r0, r3
 800a92e:	892b      	ldrh	r3, [r5, #8]
 800a930:	4418      	add	r0, r3
  while (seg != NULL &&
 800a932:	4287      	cmp	r7, r0
 800a934:	d396      	bcc.n	800a864 <tcp_output+0xb8>
    LWIP_ASSERT("RST not expected here!",
 800a936:	68eb      	ldr	r3, [r5, #12]
 800a938:	8998      	ldrh	r0, [r3, #12]
 800a93a:	f7fb f88d 	bl	8005a58 <lwip_htons>
 800a93e:	0742      	lsls	r2, r0, #29
 800a940:	d506      	bpl.n	800a950 <tcp_output+0x1a4>
 800a942:	4b43      	ldr	r3, [pc, #268]	; (800aa50 <tcp_output+0x2a4>)
 800a944:	4946      	ldr	r1, [pc, #280]	; (800aa60 <tcp_output+0x2b4>)
 800a946:	4844      	ldr	r0, [pc, #272]	; (800aa58 <tcp_output+0x2ac>)
 800a948:	f240 4246 	movw	r2, #1094	; 0x446
 800a94c:	f003 f9de 	bl	800dd0c <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a950:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a952:	b19b      	cbz	r3, 800a97c <tcp_output+0x1d0>
 800a954:	7ea2      	ldrb	r2, [r4, #26]
 800a956:	f012 0f44 	tst.w	r2, #68	; 0x44
 800a95a:	d10f      	bne.n	800a97c <tcp_output+0x1d0>
 800a95c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a95e:	b12b      	cbz	r3, 800a96c <tcp_output+0x1c0>
 800a960:	6819      	ldr	r1, [r3, #0]
 800a962:	b959      	cbnz	r1, 800a97c <tcp_output+0x1d0>
 800a964:	8919      	ldrh	r1, [r3, #8]
 800a966:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a968:	4299      	cmp	r1, r3
 800a96a:	d207      	bcs.n	800a97c <tcp_output+0x1d0>
 800a96c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800a970:	b123      	cbz	r3, 800a97c <tcp_output+0x1d0>
 800a972:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a976:	2b08      	cmp	r3, #8
 800a978:	f240 8091 	bls.w	800aa9e <tcp_output+0x2f2>
    if (pcb->state != SYN_SENT) {
 800a97c:	7d23      	ldrb	r3, [r4, #20]
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d00a      	beq.n	800a998 <tcp_output+0x1ec>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a982:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a986:	2010      	movs	r0, #16
 800a988:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 800a98c:	f7fb f864 	bl	8005a58 <lwip_htons>
 800a990:	ea4b 0000 	orr.w	r0, fp, r0
 800a994:	f8aa 000c 	strh.w	r0, [sl, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800a998:	686b      	ldr	r3, [r5, #4]
 800a99a:	89db      	ldrh	r3, [r3, #14]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	f47f af71 	bne.w	800a884 <tcp_output+0xd8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a9a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a9a4:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a9a8:	f7fb f859 	bl	8005a5e <lwip_htonl>
 800a9ac:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a9b0:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800a9b2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a9b6:	f7fb f84f 	bl	8005a58 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a9ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a9bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a9be:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a9c2:	4413      	add	r3, r2
 800a9c4:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a9c6:	7aab      	ldrb	r3, [r5, #10]
 800a9c8:	07db      	lsls	r3, r3, #31
 800a9ca:	d50c      	bpl.n	800a9e6 <tcp_output+0x23a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800a9cc:	4641      	mov	r1, r8
 800a9ce:	f44f 7006 	mov.w	r0, #536	; 0x218
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a9d2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800a9d6:	f7fd ffc7 	bl	8008968 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a9da:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800a9de:	f7fb f83e 	bl	8005a5e <lwip_htonl>
 800a9e2:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a9e6:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800a9ea:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800a9ec:	bfbc      	itt	lt
 800a9ee:	2300      	movlt	r3, #0
 800a9f0:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a9f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9f4:	b93b      	cbnz	r3, 800aa06 <tcp_output+0x25a>
    pcb->rttest = tcp_ticks;
 800a9f6:	4b1b      	ldr	r3, [pc, #108]	; (800aa64 <tcp_output+0x2b8>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a9fc:	68eb      	ldr	r3, [r5, #12]
 800a9fe:	6858      	ldr	r0, [r3, #4]
 800aa00:	f7fb f82d 	bl	8005a5e <lwip_htonl>
 800aa04:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800aa06:	6868      	ldr	r0, [r5, #4]
 800aa08:	68ea      	ldr	r2, [r5, #12]
 800aa0a:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800aa0c:	8941      	ldrh	r1, [r0, #10]
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 800aa0e:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800aa14:	1ac9      	subs	r1, r1, r3
 800aa16:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800aa18:	8901      	ldrh	r1, [r0, #8]
 800aa1a:	1acb      	subs	r3, r1, r3
 800aa1c:	8103      	strh	r3, [r0, #8]

  seg->tcphdr->chksum = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	7413      	strb	r3, [r2, #16]
 800aa22:	7453      	strb	r3, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800aa24:	2206      	movs	r2, #6
 800aa26:	9201      	str	r2, [sp, #4]
 800aa28:	7a62      	ldrb	r2, [r4, #9]
 800aa2a:	9200      	str	r2, [sp, #0]
 800aa2c:	7aa3      	ldrb	r3, [r4, #10]
 800aa2e:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa32:	4642      	mov	r2, r8
 800aa34:	4621      	mov	r1, r4
 800aa36:	f7fb fe69 	bl	800670c <ip4_output_if>
    if (err != ERR_OK) {
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	f43f af22 	beq.w	800a884 <tcp_output+0xd8>
      pcb->flags |= TF_NAGLEMEMERR;
 800aa40:	7ea3      	ldrb	r3, [r4, #26]
 800aa42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa46:	76a3      	strb	r3, [r4, #26]
}
 800aa48:	b007      	add	sp, #28
 800aa4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa4e:	bf00      	nop
 800aa50:	080109ff 	.word	0x080109ff
 800aa54:	08010994 	.word	0x08010994
 800aa58:	0800f3a7 	.word	0x0800f3a7
 800aa5c:	20005068 	.word	0x20005068
 800aa60:	080109ba 	.word	0x080109ba
 800aa64:	20005058 	.word	0x20005058
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800aa68:	68d2      	ldr	r2, [r2, #12]
 800aa6a:	9305      	str	r3, [sp, #20]
 800aa6c:	6850      	ldr	r0, [r2, #4]
 800aa6e:	f7fa fff6 	bl	8005a5e <lwip_htonl>
 800aa72:	68e9      	ldr	r1, [r5, #12]
 800aa74:	4682      	mov	sl, r0
 800aa76:	6848      	ldr	r0, [r1, #4]
 800aa78:	f7fa fff1 	bl	8005a5e <lwip_htonl>
 800aa7c:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 800aa80:	2800      	cmp	r0, #0
 800aa82:	9b05      	ldr	r3, [sp, #20]
 800aa84:	f6bf af47 	bge.w	800a916 <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	e740      	b.n	800a90e <tcp_output+0x162>
          useg->next = seg;
 800aa8c:	6035      	str	r5, [r6, #0]
 800aa8e:	e72c      	b.n	800a8ea <tcp_output+0x13e>
      tcp_seg_free(seg);
 800aa90:	4628      	mov	r0, r5
 800aa92:	f7fd f9e3 	bl	8007e5c <tcp_seg_free>
 800aa96:	e741      	b.n	800a91c <tcp_output+0x170>
    return ERR_RTE;
 800aa98:	f06f 0003 	mvn.w	r0, #3
 800aa9c:	e7d4      	b.n	800aa48 <tcp_output+0x29c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aa9e:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800aaa2:	f47f af6b 	bne.w	800a97c <tcp_output+0x1d0>
 800aaa6:	e6dd      	b.n	800a864 <tcp_output+0xb8>

0800aaa8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaac:	b085      	sub	sp, #20
 800aaae:	4681      	mov	r9, r0
 800aab0:	460e      	mov	r6, r1
 800aab2:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800aab4:	2114      	movs	r1, #20
 800aab6:	2200      	movs	r2, #0
 800aab8:	2001      	movs	r0, #1
{
 800aaba:	461f      	mov	r7, r3
 800aabc:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 800aac0:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800aac4:	f7fc fdea 	bl	800769c <pbuf_alloc>
  if (p == NULL) {
 800aac8:	4605      	mov	r5, r0
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d03c      	beq.n	800ab48 <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800aace:	8943      	ldrh	r3, [r0, #10]
 800aad0:	2b13      	cmp	r3, #19
 800aad2:	d806      	bhi.n	800aae2 <tcp_rst+0x3a>
 800aad4:	4b1e      	ldr	r3, [pc, #120]	; (800ab50 <tcp_rst+0xa8>)
 800aad6:	491f      	ldr	r1, [pc, #124]	; (800ab54 <tcp_rst+0xac>)
 800aad8:	481f      	ldr	r0, [pc, #124]	; (800ab58 <tcp_rst+0xb0>)
 800aada:	f240 524d 	movw	r2, #1357	; 0x54d
 800aade:	f003 f915 	bl	800dd0c <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = lwip_htons(local_port);
 800aae2:	4658      	mov	r0, fp
  tcphdr = (struct tcp_hdr *)p->payload;
 800aae4:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 800aae6:	f7fa ffb7 	bl	8005a58 <lwip_htons>
 800aaea:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800aaec:	4650      	mov	r0, sl
 800aaee:	f7fa ffb3 	bl	8005a58 <lwip_htons>
 800aaf2:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800aaf4:	4648      	mov	r0, r9
 800aaf6:	f7fa ffb2 	bl	8005a5e <lwip_htonl>
 800aafa:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800aafc:	4630      	mov	r0, r6
 800aafe:	f7fa ffae 	bl	8005a5e <lwip_htonl>
 800ab02:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800ab04:	f245 0014 	movw	r0, #20500	; 0x5014
 800ab08:	f7fa ffa6 	bl	8005a58 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800ab0c:	2308      	movs	r3, #8
 800ab0e:	2600      	movs	r6, #0
 800ab10:	73a3      	strb	r3, [r4, #14]
 800ab12:	2360      	movs	r3, #96	; 0x60
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800ab14:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800ab16:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 800ab18:	7426      	strb	r6, [r4, #16]
 800ab1a:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 800ab1c:	74a6      	strb	r6, [r4, #18]
 800ab1e:	74e6      	strb	r6, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800ab20:	4638      	mov	r0, r7
 800ab22:	f7fb fc8d 	bl	8006440 <ip4_route>
  if (netif != NULL) {
 800ab26:	b148      	cbz	r0, 800ab3c <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800ab28:	2306      	movs	r3, #6
 800ab2a:	9002      	str	r0, [sp, #8]
 800ab2c:	9301      	str	r3, [sp, #4]
 800ab2e:	9600      	str	r6, [sp, #0]
 800ab30:	23ff      	movs	r3, #255	; 0xff
 800ab32:	463a      	mov	r2, r7
 800ab34:	4641      	mov	r1, r8
 800ab36:	4628      	mov	r0, r5
 800ab38:	f7fb fde8 	bl	800670c <ip4_output_if>
  }
  pbuf_free(p);
 800ab3c:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ab3e:	b005      	add	sp, #20
 800ab40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800ab44:	f7fc bd48 	b.w	80075d8 <pbuf_free>
}
 800ab48:	b005      	add	sp, #20
 800ab4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab4e:	bf00      	nop
 800ab50:	080109ff 	.word	0x080109ff
 800ab54:	080109d1 	.word	0x080109d1
 800ab58:	0800f3a7 	.word	0x0800f3a7

0800ab5c <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800ab5c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 800ab5e:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 800ab60:	b1aa      	cbz	r2, 800ab8e <tcp_rexmit_rto+0x32>
 800ab62:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800ab64:	680b      	ldr	r3, [r1, #0]
 800ab66:	b983      	cbnz	r3, 800ab8a <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ab68:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800ab6a:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ab6c:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ab6e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  pcb->unsent = pcb->unacked;
 800ab72:	6682      	str	r2, [r0, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800ab74:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800ab76:	bf1c      	itt	ne
 800ab78:	3301      	addne	r3, #1
 800ab7a:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 800ab82:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 800ab86:	f7ff be11 	b.w	800a7ac <tcp_output>
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	e7ea      	b.n	800ab64 <tcp_rexmit_rto+0x8>
}
 800ab8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ab94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800ab96:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 800ab98:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 800ab9a:	b1ad      	cbz	r5, 800abc8 <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800ab9c:	682b      	ldr	r3, [r5, #0]
 800ab9e:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800aba0:	f100 0668 	add.w	r6, r0, #104	; 0x68
  while (*cur_seg &&
 800aba4:	6833      	ldr	r3, [r6, #0]
 800aba6:	b983      	cbnz	r3, 800abca <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 800aba8:	6833      	ldr	r3, [r6, #0]
 800abaa:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800abac:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800abae:	682b      	ldr	r3, [r5, #0]
 800abb0:	b90b      	cbnz	r3, 800abb6 <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800abb2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800abb6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800abba:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800abbc:	bf1c      	itt	ne
 800abbe:	3301      	addne	r3, #1
 800abc0:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800abc4:	2300      	movs	r3, #0
 800abc6:	6363      	str	r3, [r4, #52]	; 0x34
 800abc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	6858      	ldr	r0, [r3, #4]
 800abce:	f7fa ff46 	bl	8005a5e <lwip_htonl>
 800abd2:	68eb      	ldr	r3, [r5, #12]
 800abd4:	4607      	mov	r7, r0
 800abd6:	6858      	ldr	r0, [r3, #4]
 800abd8:	f7fa ff41 	bl	8005a5e <lwip_htonl>
 800abdc:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800abde:	2800      	cmp	r0, #0
 800abe0:	dae2      	bge.n	800aba8 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 800abe2:	6836      	ldr	r6, [r6, #0]
 800abe4:	e7de      	b.n	800aba4 <tcp_rexmit+0x10>

0800abe6 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800abe6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 800abe8:	b510      	push	{r4, lr}
 800abea:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800abec:	b30b      	cbz	r3, 800ac32 <tcp_rexmit_fast+0x4c>
 800abee:	7e83      	ldrb	r3, [r0, #26]
 800abf0:	075b      	lsls	r3, r3, #29
 800abf2:	d41e      	bmi.n	800ac32 <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800abf4:	f7ff ffce 	bl	800ab94 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800abf8:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800abfc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800ac00:	4293      	cmp	r3, r2
 800ac02:	bf38      	it	cc
 800ac04:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800ac06:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ac08:	bf28      	it	cs
 800ac0a:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800ac0c:	0059      	lsls	r1, r3, #1
 800ac0e:	428a      	cmp	r2, r1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ac10:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800ac14:	bf38      	it	cc
 800ac16:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ac1a:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800ac1e:	440b      	add	r3, r1
 800ac20:	4413      	add	r3, r2
 800ac22:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800ac26:	7ea3      	ldrb	r3, [r4, #26]
 800ac28:	f043 0304 	orr.w	r3, r3, #4
 800ac2c:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	8623      	strh	r3, [r4, #48]	; 0x30
 800ac32:	bd10      	pop	{r4, pc}

0800ac34 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ac34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ac36:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ac38:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800ac3a:	3801      	subs	r0, #1
 800ac3c:	f7fa ff0f 	bl	8005a5e <lwip_htonl>
 800ac40:	2100      	movs	r1, #0
 800ac42:	4602      	mov	r2, r0
 800ac44:	4620      	mov	r0, r4
 800ac46:	f7ff f9ef 	bl	800a028 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800ac4a:	4605      	mov	r5, r0
 800ac4c:	b1c8      	cbz	r0, 800ac82 <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ac4e:	1d26      	adds	r6, r4, #4
 800ac50:	4630      	mov	r0, r6
 800ac52:	f7fb fbf5 	bl	8006440 <ip4_route>
  if (netif == NULL) {
 800ac56:	b188      	cbz	r0, 800ac7c <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800ac58:	2100      	movs	r1, #0
 800ac5a:	2206      	movs	r2, #6
 800ac5c:	7aa3      	ldrb	r3, [r4, #10]
 800ac5e:	9002      	str	r0, [sp, #8]
 800ac60:	e88d 0006 	stmia.w	sp, {r1, r2}
 800ac64:	4628      	mov	r0, r5
 800ac66:	4621      	mov	r1, r4
 800ac68:	4632      	mov	r2, r6
 800ac6a:	f7fb fd4f 	bl	800670c <ip4_output_if>
 800ac6e:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800ac70:	4628      	mov	r0, r5
 800ac72:	f7fc fcb1 	bl	80075d8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800ac76:	4620      	mov	r0, r4
 800ac78:	b004      	add	sp, #16
 800ac7a:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 800ac7c:	f06f 0403 	mvn.w	r4, #3
 800ac80:	e7f6      	b.n	800ac70 <tcp_keepalive+0x3c>
    return ERR_MEM;
 800ac82:	f04f 34ff 	mov.w	r4, #4294967295
 800ac86:	e7f6      	b.n	800ac76 <tcp_keepalive+0x42>

0800ac88 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ac88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800ac8c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 800ac8e:	4606      	mov	r6, r0

  if (seg == NULL) {
 800ac90:	b914      	cbnz	r4, 800ac98 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 800ac92:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 800ac94:	2c00      	cmp	r4, #0
 800ac96:	d042      	beq.n	800ad1e <tcp_zero_window_probe+0x96>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ac98:	68e3      	ldr	r3, [r4, #12]
 800ac9a:	8998      	ldrh	r0, [r3, #12]
 800ac9c:	f7fa fedc 	bl	8005a58 <lwip_htons>
 800aca0:	f010 0501 	ands.w	r5, r0, #1
 800aca4:	bf18      	it	ne
 800aca6:	8925      	ldrhne	r5, [r4, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800aca8:	68e3      	ldr	r3, [r4, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800acaa:	bf1c      	itt	ne
 800acac:	fab5 f585 	clzne	r5, r5
 800acb0:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800acb2:	685a      	ldr	r2, [r3, #4]
 800acb4:	f085 0101 	eor.w	r1, r5, #1
 800acb8:	4630      	mov	r0, r6
 800acba:	f7ff f9b5 	bl	800a028 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800acbe:	4607      	mov	r7, r0
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d03e      	beq.n	800ad42 <tcp_zero_window_probe+0xba>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800acc4:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800acc8:	b36d      	cbz	r5, 800ad26 <tcp_zero_window_probe+0x9e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800acca:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 800acce:	2011      	movs	r0, #17
 800acd0:	f7fa fec2 	bl	8005a58 <lwip_htons>
 800acd4:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800acd8:	b2ad      	uxth	r5, r5
 800acda:	4328      	orrs	r0, r5
 800acdc:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ace0:	68e3      	ldr	r3, [r4, #12]
 800ace2:	6858      	ldr	r0, [r3, #4]
 800ace4:	f7fa febb 	bl	8005a5e <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ace8:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800acea:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800acec:	1a1b      	subs	r3, r3, r0
 800acee:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800acf0:	f106 0404 	add.w	r4, r6, #4
    pcb->snd_nxt = snd_nxt;
 800acf4:	bfb8      	it	lt
 800acf6:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800acf8:	4620      	mov	r0, r4
 800acfa:	f7fb fba1 	bl	8006440 <ip4_route>
  if (netif == NULL) {
 800acfe:	b1e8      	cbz	r0, 800ad3c <tcp_zero_window_probe+0xb4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ad00:	2100      	movs	r1, #0
 800ad02:	2206      	movs	r2, #6
 800ad04:	e88d 0006 	stmia.w	sp, {r1, r2}
 800ad08:	9002      	str	r0, [sp, #8]
 800ad0a:	4622      	mov	r2, r4
 800ad0c:	7ab3      	ldrb	r3, [r6, #10]
 800ad0e:	4631      	mov	r1, r6
 800ad10:	4638      	mov	r0, r7
 800ad12:	f7fb fcfb 	bl	800670c <ip4_output_if>
 800ad16:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800ad18:	4638      	mov	r0, r7
 800ad1a:	f7fc fc5d 	bl	80075d8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800ad1e:	4620      	mov	r0, r4
 800ad20:	b004      	add	sp, #16
 800ad22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ad26:	6860      	ldr	r0, [r4, #4]
 800ad28:	8922      	ldrh	r2, [r4, #8]
 800ad2a:	8903      	ldrh	r3, [r0, #8]
 800ad2c:	1a9b      	subs	r3, r3, r2
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	2201      	movs	r2, #1
 800ad32:	f108 0114 	add.w	r1, r8, #20
 800ad36:	f7fc fee1 	bl	8007afc <pbuf_copy_partial>
 800ad3a:	e7d1      	b.n	800ace0 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 800ad3c:	f06f 0403 	mvn.w	r4, #3
 800ad40:	e7ea      	b.n	800ad18 <tcp_zero_window_probe+0x90>
    return ERR_MEM;
 800ad42:	f04f 34ff 	mov.w	r4, #4294967295
 800ad46:	e7ea      	b.n	800ad1e <tcp_zero_window_probe+0x96>

0800ad48 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ad48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4c:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ad4e:	2006      	movs	r0, #6
{
 800ad50:	460f      	mov	r7, r1
 800ad52:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ad54:	f7fc fac0 	bl	80072d8 <memp_malloc>
  if (timeout == NULL) {
 800ad58:	4604      	mov	r4, r0
 800ad5a:	b938      	cbnz	r0, 800ad6c <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ad5c:	4b1e      	ldr	r3, [pc, #120]	; (800add8 <sys_timeout+0x90>)
 800ad5e:	491f      	ldr	r1, [pc, #124]	; (800addc <sys_timeout+0x94>)
 800ad60:	481f      	ldr	r0, [pc, #124]	; (800ade0 <sys_timeout+0x98>)
 800ad62:	22d4      	movs	r2, #212	; 0xd4
        t->next = timeout;
        break;
      }
    }
  }
}
 800ad64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ad68:	f002 bfd0 	b.w	800dd0c <iprintf>
  now = sys_now();
 800ad6c:	f001 f9bc 	bl	800c0e8 <sys_now>
  if (next_timeout == NULL) {
 800ad70:	4a1c      	ldr	r2, [pc, #112]	; (800ade4 <sys_timeout+0x9c>)
 800ad72:	491d      	ldr	r1, [pc, #116]	; (800ade8 <sys_timeout+0xa0>)
 800ad74:	6813      	ldr	r3, [r2, #0]
 800ad76:	b95b      	cbnz	r3, 800ad90 <sys_timeout+0x48>
    timeouts_last_time = now;
 800ad78:	6008      	str	r0, [r1, #0]
    diff = 0;
 800ad7a:	4618      	mov	r0, r3
  timeout->next = NULL;
 800ad7c:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 800ad7e:	4428      	add	r0, r5
  timeout->next = NULL;
 800ad80:	6021      	str	r1, [r4, #0]
  timeout->h = handler;
 800ad82:	60a7      	str	r7, [r4, #8]
  timeout->arg = arg;
 800ad84:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 800ad86:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 800ad88:	b92b      	cbnz	r3, 800ad96 <sys_timeout+0x4e>
    next_timeout = timeout;
 800ad8a:	6014      	str	r4, [r2, #0]
 800ad8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 800ad90:	6809      	ldr	r1, [r1, #0]
 800ad92:	1a40      	subs	r0, r0, r1
 800ad94:	e7f2      	b.n	800ad7c <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 800ad96:	6859      	ldr	r1, [r3, #4]
 800ad98:	428d      	cmp	r5, r1
 800ad9a:	d217      	bcs.n	800adcc <sys_timeout+0x84>
    next_timeout->time -= msecs;
 800ad9c:	1b4d      	subs	r5, r1, r5
 800ad9e:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	e7f2      	b.n	800ad8a <sys_timeout+0x42>
      if (t->next == NULL || t->next->time > timeout->time) {
 800ada4:	684e      	ldr	r6, [r1, #4]
 800ada6:	42b2      	cmp	r2, r6
 800ada8:	d312      	bcc.n	800add0 <sys_timeout+0x88>
 800adaa:	4608      	mov	r0, r1
      timeout->time -= t->time;
 800adac:	6841      	ldr	r1, [r0, #4]
 800adae:	6862      	ldr	r2, [r4, #4]
 800adb0:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 800adb2:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 800adb4:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800adb6:	2900      	cmp	r1, #0
 800adb8:	d1f4      	bne.n	800ada4 <sys_timeout+0x5c>
        } else if (timeout->time > msecs) {
 800adba:	4295      	cmp	r5, r2
 800adbc:	d202      	bcs.n	800adc4 <sys_timeout+0x7c>
          timeout->time = msecs + next_timeout->time;
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	441d      	add	r5, r3
 800adc2:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 800adc4:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 800adc6:	6004      	str	r4, [r0, #0]
        break;
 800adc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adcc:	4618      	mov	r0, r3
 800adce:	e7ed      	b.n	800adac <sys_timeout+0x64>
          t->next->time -= timeout->time;
 800add0:	1ab2      	subs	r2, r6, r2
 800add2:	604a      	str	r2, [r1, #4]
 800add4:	e7f6      	b.n	800adc4 <sys_timeout+0x7c>
 800add6:	bf00      	nop
 800add8:	08010c90 	.word	0x08010c90
 800addc:	08010cc4 	.word	0x08010cc4
 800ade0:	0800f3a7 	.word	0x0800f3a7
 800ade4:	20000d5c 	.word	0x20000d5c
 800ade8:	20000d64 	.word	0x20000d64

0800adec <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800adec:	4b08      	ldr	r3, [pc, #32]	; (800ae10 <tcp_timer_needed+0x24>)
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	b962      	cbnz	r2, 800ae0c <tcp_timer_needed+0x20>
 800adf2:	4a08      	ldr	r2, [pc, #32]	; (800ae14 <tcp_timer_needed+0x28>)
 800adf4:	6812      	ldr	r2, [r2, #0]
 800adf6:	b912      	cbnz	r2, 800adfe <tcp_timer_needed+0x12>
 800adf8:	4a07      	ldr	r2, [pc, #28]	; (800ae18 <tcp_timer_needed+0x2c>)
 800adfa:	6812      	ldr	r2, [r2, #0]
 800adfc:	b132      	cbz	r2, 800ae0c <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800adfe:	2201      	movs	r2, #1
 800ae00:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ae02:	4906      	ldr	r1, [pc, #24]	; (800ae1c <tcp_timer_needed+0x30>)
 800ae04:	2200      	movs	r2, #0
 800ae06:	20fa      	movs	r0, #250	; 0xfa
 800ae08:	f7ff bf9e 	b.w	800ad48 <sys_timeout>
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	20000d60 	.word	0x20000d60
 800ae14:	20005054 	.word	0x20005054
 800ae18:	20005064 	.word	0x20005064
 800ae1c:	0800ae21 	.word	0x0800ae21

0800ae20 <tcpip_tcp_timer>:
{
 800ae20:	b508      	push	{r3, lr}
  tcp_tmr();
 800ae22:	f7fd fc39 	bl	8008698 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ae26:	4b08      	ldr	r3, [pc, #32]	; (800ae48 <tcpip_tcp_timer+0x28>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	b913      	cbnz	r3, 800ae32 <tcpip_tcp_timer+0x12>
 800ae2c:	4b07      	ldr	r3, [pc, #28]	; (800ae4c <tcpip_tcp_timer+0x2c>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	b133      	cbz	r3, 800ae40 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ae32:	2200      	movs	r2, #0
 800ae34:	4906      	ldr	r1, [pc, #24]	; (800ae50 <tcpip_tcp_timer+0x30>)
 800ae36:	20fa      	movs	r0, #250	; 0xfa
}
 800ae38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ae3c:	f7ff bf84 	b.w	800ad48 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800ae40:	4a04      	ldr	r2, [pc, #16]	; (800ae54 <tcpip_tcp_timer+0x34>)
 800ae42:	6013      	str	r3, [r2, #0]
 800ae44:	bd08      	pop	{r3, pc}
 800ae46:	bf00      	nop
 800ae48:	20005054 	.word	0x20005054
 800ae4c:	20005064 	.word	0x20005064
 800ae50:	0800ae21 	.word	0x0800ae21
 800ae54:	20000d60 	.word	0x20000d60

0800ae58 <sys_timeouts_init>:
{
 800ae58:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800ae5a:	4d0a      	ldr	r5, [pc, #40]	; (800ae84 <sys_timeouts_init+0x2c>)
 800ae5c:	4c0a      	ldr	r4, [pc, #40]	; (800ae88 <sys_timeouts_init+0x30>)
 800ae5e:	f105 0208 	add.w	r2, r5, #8
 800ae62:	4621      	mov	r1, r4
 800ae64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ae68:	f7ff ff6e 	bl	800ad48 <sys_timeout>
 800ae6c:	f105 0210 	add.w	r2, r5, #16
 800ae70:	4621      	mov	r1, r4
 800ae72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ae76:	f7ff ff67 	bl	800ad48 <sys_timeout>
  timeouts_last_time = sys_now();
 800ae7a:	f001 f935 	bl	800c0e8 <sys_now>
 800ae7e:	4b03      	ldr	r3, [pc, #12]	; (800ae8c <sys_timeouts_init+0x34>)
 800ae80:	6018      	str	r0, [r3, #0]
 800ae82:	bd38      	pop	{r3, r4, r5, pc}
 800ae84:	08010c78 	.word	0x08010c78
 800ae88:	0800ae91 	.word	0x0800ae91
 800ae8c:	20000d64 	.word	0x20000d64

0800ae90 <cyclic_timer>:
{
 800ae90:	b510      	push	{r4, lr}
 800ae92:	4604      	mov	r4, r0
  cyclic->handler();
 800ae94:	6843      	ldr	r3, [r0, #4]
 800ae96:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800ae98:	4622      	mov	r2, r4
 800ae9a:	6820      	ldr	r0, [r4, #0]
 800ae9c:	4902      	ldr	r1, [pc, #8]	; (800aea8 <cyclic_timer+0x18>)
}
 800ae9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800aea2:	f7ff bf51 	b.w	800ad48 <sys_timeout>
 800aea6:	bf00      	nop
 800aea8:	0800ae91 	.word	0x0800ae91

0800aeac <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800aeac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (next_timeout) {
 800aeb0:	4d13      	ldr	r5, [pc, #76]	; (800af00 <sys_check_timeouts+0x54>)
 800aeb2:	682b      	ldr	r3, [r5, #0]
 800aeb4:	b30b      	cbz	r3, 800aefa <sys_check_timeouts+0x4e>
    u8_t had_one;
    u32_t now;

    now = sys_now();
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800aeb6:	4e13      	ldr	r6, [pc, #76]	; (800af04 <sys_check_timeouts+0x58>)
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800aeb8:	4f13      	ldr	r7, [pc, #76]	; (800af08 <sys_check_timeouts+0x5c>)
    now = sys_now();
 800aeba:	f001 f915 	bl	800c0e8 <sys_now>
    diff = now - timeouts_last_time;
 800aebe:	6834      	ldr	r4, [r6, #0]
 800aec0:	1b04      	subs	r4, r0, r4
      PBUF_CHECK_FREE_OOSEQ();
 800aec2:	783b      	ldrb	r3, [r7, #0]
 800aec4:	b10b      	cbz	r3, 800aeca <sys_check_timeouts+0x1e>
 800aec6:	f7fc fb33 	bl	8007530 <pbuf_free_ooseq>
      had_one = 0;
      tmptimeout = next_timeout;
 800aeca:	6829      	ldr	r1, [r5, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800aecc:	b1a9      	cbz	r1, 800aefa <sys_check_timeouts+0x4e>
 800aece:	684b      	ldr	r3, [r1, #4]
 800aed0:	429c      	cmp	r4, r3
 800aed2:	d312      	bcc.n	800aefa <sys_check_timeouts+0x4e>
        /* timeout has expired */
        had_one = 1;
        timeouts_last_time += tmptimeout->time;
 800aed4:	6832      	ldr	r2, [r6, #0]
        diff -= tmptimeout->time;
        next_timeout = tmptimeout->next;
        handler = tmptimeout->h;
 800aed6:	f8d1 8008 	ldr.w	r8, [r1, #8]
        arg = tmptimeout->arg;
 800aeda:	f8d1 900c 	ldr.w	r9, [r1, #12]
        timeouts_last_time += tmptimeout->time;
 800aede:	441a      	add	r2, r3
        diff -= tmptimeout->time;
 800aee0:	1ae4      	subs	r4, r4, r3
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800aee2:	2006      	movs	r0, #6
        next_timeout = tmptimeout->next;
 800aee4:	680b      	ldr	r3, [r1, #0]
        timeouts_last_time += tmptimeout->time;
 800aee6:	6032      	str	r2, [r6, #0]
        next_timeout = tmptimeout->next;
 800aee8:	602b      	str	r3, [r5, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800aeea:	f7fc fa11 	bl	8007310 <memp_free>
        if (handler != NULL) {
 800aeee:	f1b8 0f00 	cmp.w	r8, #0
 800aef2:	d0e6      	beq.n	800aec2 <sys_check_timeouts+0x16>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800aef4:	4648      	mov	r0, r9
 800aef6:	47c0      	blx	r8
 800aef8:	e7e3      	b.n	800aec2 <sys_check_timeouts+0x16>
 800aefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aefe:	bf00      	nop
 800af00:	20000d5c 	.word	0x20000d5c
 800af04:	20000d64 	.word	0x20000d64
 800af08:	2000504c 	.word	0x2000504c

0800af0c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800af0c:	4770      	bx	lr
	...

0800af10 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800af10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800af14:	8943      	ldrh	r3, [r0, #10]
 800af16:	2b07      	cmp	r3, #7
{
 800af18:	b085      	sub	sp, #20
 800af1a:	4605      	mov	r5, r0
 800af1c:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 800af1e:	d805      	bhi.n	800af2c <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800af20:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800af22:	b005      	add	sp, #20
 800af24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800af28:	f7fc bb56 	b.w	80075d8 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800af2c:	4e3e      	ldr	r6, [pc, #248]	; (800b028 <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 800af2e:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800af30:	6831      	ldr	r1, [r6, #0]
 800af32:	6970      	ldr	r0, [r6, #20]
 800af34:	f7fb fbfb 	bl	800672e <ip4_addr_isbroadcast_u32>
 800af38:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 800af3a:	8820      	ldrh	r0, [r4, #0]
 800af3c:	f7fa fd8c 	bl	8005a58 <lwip_htons>
 800af40:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 800af42:	8860      	ldrh	r0, [r4, #2]
 800af44:	f7fa fd88 	bl	8005a58 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800af48:	4a38      	ldr	r2, [pc, #224]	; (800b02c <udp_input+0x11c>)
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800af4a:	6971      	ldr	r1, [r6, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800af4c:	f8d6 e010 	ldr.w	lr, [r6, #16]
 800af50:	9603      	str	r6, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 800af52:	4682      	mov	sl, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800af54:	6810      	ldr	r0, [r2, #0]
  uncon_pcb = NULL;
 800af56:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800af58:	4603      	mov	r3, r0
  prev = NULL;
 800af5a:	46a4      	mov	ip, r4
 800af5c:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800af5e:	b92b      	cbnz	r3, 800af6c <udp_input+0x5c>
  if (pcb != NULL) {
 800af60:	bb0c      	cbnz	r4, 800afa6 <udp_input+0x96>
  if (for_us) {
 800af62:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800af66:	428b      	cmp	r3, r1
 800af68:	d1da      	bne.n	800af20 <udp_input+0x10>
 800af6a:	e01c      	b.n	800afa6 <udp_input+0x96>
    if ((pcb->local_port == dest) &&
 800af6c:	8a5a      	ldrh	r2, [r3, #18]
 800af6e:	4552      	cmp	r2, sl
 800af70:	d12b      	bne.n	800afca <udp_input+0xba>
 800af72:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 800af74:	b32f      	cbz	r7, 800afc2 <udp_input+0xb2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800af76:	b13a      	cbz	r2, 800af88 <udp_input+0x78>
 800af78:	1c4e      	adds	r6, r1, #1
 800af7a:	d005      	beq.n	800af88 <udp_input+0x78>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800af7c:	404a      	eors	r2, r1
 800af7e:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800af80:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800af84:	4216      	tst	r6, r2
 800af86:	d120      	bne.n	800afca <udp_input+0xba>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800af88:	7c1a      	ldrb	r2, [r3, #16]
 800af8a:	0752      	lsls	r2, r2, #29
 800af8c:	d402      	bmi.n	800af94 <udp_input+0x84>
 800af8e:	2c00      	cmp	r4, #0
 800af90:	bf08      	it	eq
 800af92:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 800af94:	8a9a      	ldrh	r2, [r3, #20]
 800af96:	4542      	cmp	r2, r8
 800af98:	d117      	bne.n	800afca <udp_input+0xba>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800af9a:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 800af9c:	b9c2      	cbnz	r2, 800afd0 <udp_input+0xc0>
        if (prev != NULL) {
 800af9e:	f1bc 0f00 	cmp.w	ip, #0
 800afa2:	d118      	bne.n	800afd6 <udp_input+0xc6>
 800afa4:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 800afa6:	f06f 0107 	mvn.w	r1, #7
 800afaa:	4628      	mov	r0, r5
 800afac:	f7fc fb0e 	bl	80075cc <pbuf_header>
 800afb0:	b1c0      	cbz	r0, 800afe4 <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800afb2:	4b1f      	ldr	r3, [pc, #124]	; (800b030 <udp_input+0x120>)
 800afb4:	491f      	ldr	r1, [pc, #124]	; (800b034 <udp_input+0x124>)
 800afb6:	4820      	ldr	r0, [pc, #128]	; (800b038 <udp_input+0x128>)
 800afb8:	f240 1255 	movw	r2, #341	; 0x155
 800afbc:	f002 fea6 	bl	800dd0c <iprintf>
 800afc0:	e7ae      	b.n	800af20 <udp_input+0x10>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800afc2:	2a00      	cmp	r2, #0
 800afc4:	d0e0      	beq.n	800af88 <udp_input+0x78>
 800afc6:	428a      	cmp	r2, r1
 800afc8:	d0de      	beq.n	800af88 <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800afca:	469c      	mov	ip, r3
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	e7c6      	b.n	800af5e <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800afd0:	4572      	cmp	r2, lr
 800afd2:	d1fa      	bne.n	800afca <udp_input+0xba>
 800afd4:	e7e3      	b.n	800af9e <udp_input+0x8e>
          prev->next = pcb->next;
 800afd6:	68da      	ldr	r2, [r3, #12]
 800afd8:	f8cc 200c 	str.w	r2, [ip, #12]
          udp_pcbs = pcb;
 800afdc:	f8cb 3000 	str.w	r3, [fp]
          pcb->next = udp_pcbs;
 800afe0:	60d8      	str	r0, [r3, #12]
 800afe2:	e7df      	b.n	800afa4 <udp_input+0x94>
    if (pcb != NULL) {
 800afe4:	b164      	cbz	r4, 800b000 <udp_input+0xf0>
      if (pcb->recv != NULL) {
 800afe6:	69a6      	ldr	r6, [r4, #24]
 800afe8:	2e00      	cmp	r6, #0
 800afea:	d099      	beq.n	800af20 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800afec:	f8cd 8000 	str.w	r8, [sp]
 800aff0:	4b12      	ldr	r3, [pc, #72]	; (800b03c <udp_input+0x12c>)
 800aff2:	69e0      	ldr	r0, [r4, #28]
 800aff4:	462a      	mov	r2, r5
 800aff6:	4621      	mov	r1, r4
 800aff8:	47b0      	blx	r6
}
 800affa:	b005      	add	sp, #20
 800affc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b000:	2f00      	cmp	r7, #0
 800b002:	d18d      	bne.n	800af20 <udp_input+0x10>
 800b004:	9b03      	ldr	r3, [sp, #12]
 800b006:	695b      	ldr	r3, [r3, #20]
 800b008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b00c:	2be0      	cmp	r3, #224	; 0xe0
 800b00e:	d087      	beq.n	800af20 <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b010:	9b03      	ldr	r3, [sp, #12]
 800b012:	8999      	ldrh	r1, [r3, #12]
 800b014:	3108      	adds	r1, #8
 800b016:	b209      	sxth	r1, r1
 800b018:	4628      	mov	r0, r5
 800b01a:	f7fc fada 	bl	80075d2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b01e:	2103      	movs	r1, #3
 800b020:	4628      	mov	r0, r5
 800b022:	f7fb fa03 	bl	800642c <icmp_dest_unreach>
 800b026:	e77b      	b.n	800af20 <udp_input+0x10>
 800b028:	20001b2c 	.word	0x20001b2c
 800b02c:	2000506c 	.word	0x2000506c
 800b030:	08010d01 	.word	0x08010d01
 800b034:	08010d30 	.word	0x08010d30
 800b038:	0800f3a7 	.word	0x0800f3a7
 800b03c:	20001b3c 	.word	0x20001b3c

0800b040 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800b040:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b042:	b138      	cbz	r0, 800b054 <udp_netif_ip_addr_changed+0x14>
 800b044:	6803      	ldr	r3, [r0, #0]
 800b046:	b12b      	cbz	r3, 800b054 <udp_netif_ip_addr_changed+0x14>
 800b048:	b121      	cbz	r1, 800b054 <udp_netif_ip_addr_changed+0x14>
 800b04a:	680b      	ldr	r3, [r1, #0]
 800b04c:	b113      	cbz	r3, 800b054 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b04e:	4b06      	ldr	r3, [pc, #24]	; (800b068 <udp_netif_ip_addr_changed+0x28>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	b903      	cbnz	r3, 800b056 <udp_netif_ip_addr_changed+0x16>
 800b054:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b056:	681c      	ldr	r4, [r3, #0]
 800b058:	6802      	ldr	r2, [r0, #0]
 800b05a:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b05c:	bf04      	itt	eq
 800b05e:	680a      	ldreq	r2, [r1, #0]
 800b060:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	e7f5      	b.n	800b052 <udp_netif_ip_addr_changed+0x12>
 800b066:	bf00      	nop
 800b068:	2000506c 	.word	0x2000506c

0800b06c <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800b06c:	8943      	ldrh	r3, [r0, #10]
 800b06e:	2b0e      	cmp	r3, #14
{
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	4604      	mov	r4, r0
 800b074:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800b076:	d914      	bls.n	800b0a2 <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800b078:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800b07a:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800b07c:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800b07e:	07d9      	lsls	r1, r3, #31
 800b080:	d50a      	bpl.n	800b098 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800b082:	2b01      	cmp	r3, #1
 800b084:	d111      	bne.n	800b0aa <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b086:	7843      	ldrb	r3, [r0, #1]
 800b088:	b933      	cbnz	r3, 800b098 <ethernet_input+0x2c>
 800b08a:	7883      	ldrb	r3, [r0, #2]
 800b08c:	2b5e      	cmp	r3, #94	; 0x5e
 800b08e:	d103      	bne.n	800b098 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800b090:	7b63      	ldrb	r3, [r4, #13]
 800b092:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800b096:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800b098:	2e08      	cmp	r6, #8
 800b09a:	d010      	beq.n	800b0be <ethernet_input+0x52>
 800b09c:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800b0a0:	d01e      	beq.n	800b0e0 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f7fc fa98 	bl	80075d8 <pbuf_free>
  return ERR_OK;
 800b0a8:	e018      	b.n	800b0dc <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800b0aa:	2206      	movs	r2, #6
 800b0ac:	4914      	ldr	r1, [pc, #80]	; (800b100 <ethernet_input+0x94>)
 800b0ae:	f002 fd5f 	bl	800db70 <memcmp>
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	d1f0      	bne.n	800b098 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 800b0b6:	7b63      	ldrb	r3, [r4, #13]
 800b0b8:	f043 0308 	orr.w	r3, r3, #8
 800b0bc:	e7eb      	b.n	800b096 <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b0be:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800b0c2:	071a      	lsls	r2, r3, #28
 800b0c4:	d5ed      	bpl.n	800b0a2 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800b0c6:	f06f 010d 	mvn.w	r1, #13
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f7fc fa7e 	bl	80075cc <pbuf_header>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	d1e6      	bne.n	800b0a2 <ethernet_input+0x36>
        ip4_input(p, netif);
 800b0d4:	4629      	mov	r1, r5
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f7fb f9de 	bl	8006498 <ip4_input>
}
 800b0dc:	2000      	movs	r0, #0
 800b0de:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b0e0:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800b0e4:	071b      	lsls	r3, r3, #28
 800b0e6:	d5dc      	bpl.n	800b0a2 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800b0e8:	f06f 010d 	mvn.w	r1, #13
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	f7fc fa6d 	bl	80075cc <pbuf_header>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d1d5      	bne.n	800b0a2 <ethernet_input+0x36>
        etharp_input(p, netif);
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f7fa fe3f 	bl	8005d7c <etharp_input>
      break;
 800b0fe:	e7ed      	b.n	800b0dc <ethernet_input+0x70>
 800b100:	08010d44 	.word	0x08010d44

0800b104 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800b104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b108:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800b10a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 800b10e:	460d      	mov	r5, r1
 800b110:	4616      	mov	r6, r2
 800b112:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800b114:	f7fa fca0 	bl	8005a58 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800b118:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800b11a:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800b11c:	4628      	mov	r0, r5
 800b11e:	f7fc fa55 	bl	80075cc <pbuf_header>
 800b122:	b9e0      	cbnz	r0, 800b15e <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800b124:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800b126:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	600b      	str	r3, [r1, #0]
 800b12e:	88bb      	ldrh	r3, [r7, #4]
 800b130:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800b132:	6833      	ldr	r3, [r6, #0]
 800b134:	f8c1 3006 	str.w	r3, [r1, #6]
 800b138:	88b3      	ldrh	r3, [r6, #4]
 800b13a:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800b13c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800b140:	2b06      	cmp	r3, #6
 800b142:	d006      	beq.n	800b152 <ethernet_output+0x4e>
 800b144:	4b08      	ldr	r3, [pc, #32]	; (800b168 <ethernet_output+0x64>)
 800b146:	4909      	ldr	r1, [pc, #36]	; (800b16c <ethernet_output+0x68>)
 800b148:	4809      	ldr	r0, [pc, #36]	; (800b170 <ethernet_output+0x6c>)
 800b14a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b14e:	f002 fddd 	bl	800dd0c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800b152:	69a3      	ldr	r3, [r4, #24]
 800b154:	4629      	mov	r1, r5
 800b156:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800b158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800b15c:	4718      	bx	r3
}
 800b15e:	f06f 0001 	mvn.w	r0, #1
 800b162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b166:	bf00      	nop
 800b168:	08010d4a 	.word	0x08010d4a
 800b16c:	08010d7f 	.word	0x08010d7f
 800b170:	0800f3a7 	.word	0x0800f3a7

0800b174 <bum_notify_recv>:

#include <bum_private.h>

void bum_notify_recv( uint8_t c )
{
  xbee_notify_recv( c );
 800b174:	f002 ba6e 	b.w	800d654 <xbee_notify_recv>

0800b178 <bum_process>:
}

void bum_process( int ms )
{
	xbee_process( ms );
 800b178:	f002 bbe0 	b.w	800d93c <xbee_process>

0800b17c <bum_notify_endtx>:
}

void bum_notify_endtx()
{
	xbee_notify_endtx();
 800b17c:	f002 b8cc 	b.w	800d318 <xbee_notify_endtx>

0800b180 <web_interface_init>:
}

void web_interface_init( WebInterface *wi )
{
 800b180:	b510      	push	{r4, lr}
 800b182:	4604      	mov	r4, r0
  event_init( &wi->evt );
 800b184:	f000 ffb2 	bl	800c0ec <event_init>
  wi->button_register_player = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	7063      	strb	r3, [r4, #1]
  wi->button_acc = 0;
 800b18c:	70a3      	strb	r3, [r4, #2]
  wi->acc_x = 0;
 800b18e:	70e3      	strb	r3, [r4, #3]
  wi->acc_y = 0;
 800b190:	7123      	strb	r3, [r4, #4]
 800b192:	bd10      	pop	{r4, pc}

0800b194 <bum_log>:
}

void bum_log( const char *msg )
{
	xbee_log( msg );
 800b194:	f002 bc5c 	b.w	800da50 <xbee_log>

0800b198 <bum_init_player>:

static BumperStatePlayer bumper_state;


void bum_init_player( BumperProtocolPlayer *p )
{
 800b198:	b510      	push	{r4, lr}
  xbee_init( 0, p->error );
 800b19a:	6901      	ldr	r1, [r0, #16]
{
 800b19c:	4604      	mov	r4, r0
  xbee_init( 0, p->error );
 800b19e:	2000      	movs	r0, #0
 800b1a0:	f002 fb92 	bl	800d8c8 <xbee_init>

  // Not used
  //bumper_state.unit_addr = xbee_api_read_unique_id();

  // At startup, we don't know the referee address, so let's broadcast by default
  bumper_state.referee_addr = XBEE_BROADCAST;
 800b1a4:	4b03      	ldr	r3, [pc, #12]	; (800b1b4 <bum_init_player+0x1c>)
 800b1a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	e9c3 0104 	strd	r0, r1, [r3, #16]

  bumper_state.player = p;
 800b1b0:	609c      	str	r4, [r3, #8]
 800b1b2:	bd10      	pop	{r4, pc}
 800b1b4:	20000d68 	.word	0x20000d68

0800b1b8 <bum_game_register>:
}


// name : only 5 first chars are taken into account
int bum_game_register( const char *name )
{
 800b1b8:	b507      	push	{r0, r1, r2, lr}
	int i;
	// We send a broadcast to try to find a referee

	uint8_t frame[ BUM_GAME_REGISTER_LEN ];
	frame[ 0 ] = BUM_GAME_REGISTER_TYPE;
 800b1ba:	aa02      	add	r2, sp, #8
 800b1bc:	2301      	movs	r3, #1
 800b1be:	f802 3d08 	strb.w	r3, [r2, #-8]!
	for ( i = 0 ; ( i < PLAYER_NAME_SIZE ) && name[ i ] ; i++ ) frame[ i + 1 ] = name[ i ];
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	5cc1      	ldrb	r1, [r0, r3]
 800b1c6:	b961      	cbnz	r1, 800b1e2 <bum_game_register+0x2a>
	for ( ; ( i < PLAYER_NAME_SIZE + 1 ) ; i++ ) frame[ i + 1 ] = 0;
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	2b06      	cmp	r3, #6
 800b1cc:	54d1      	strb	r1, [r2, r3]
 800b1ce:	d1fb      	bne.n	800b1c8 <bum_game_register+0x10>

	return xbee_api_send_to( bumper_state.referee_addr, frame, BUM_GAME_REGISTER_LEN );
 800b1d0:	4908      	ldr	r1, [pc, #32]	; (800b1f4 <bum_game_register+0x3c>)
 800b1d2:	2307      	movs	r3, #7
 800b1d4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b1d8:	f002 fae6 	bl	800d7a8 <xbee_api_send_to>
}
 800b1dc:	b003      	add	sp, #12
 800b1de:	f85d fb04 	ldr.w	pc, [sp], #4
	for ( i = 0 ; ( i < PLAYER_NAME_SIZE ) && name[ i ] ; i++ ) frame[ i + 1 ] = name[ i ];
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	2b05      	cmp	r3, #5
 800b1e6:	54d1      	strb	r1, [r2, r3]
 800b1e8:	d1ec      	bne.n	800b1c4 <bum_game_register+0xc>
	for ( ; ( i < PLAYER_NAME_SIZE + 1 ) ; i++ ) frame[ i + 1 ] = 0;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	f88d 3006 	strb.w	r3, [sp, #6]
 800b1f0:	e7ee      	b.n	800b1d0 <bum_game_register+0x18>
 800b1f2:	bf00      	nop
 800b1f4:	20000d68 	.word	0x20000d68

0800b1f8 <bum_game_acceleration>:
// ax, ay, az: acceleration between -100 to 100
// ax: negative = toward left
// ay: negative = toward top
// az: negative = toward floor
int bum_game_acceleration( int8_t ax, int8_t ay, int8_t az )
{
 800b1f8:	b507      	push	{r0, r1, r2, lr}
 800b1fa:	2864      	cmp	r0, #100	; 0x64
 800b1fc:	bfa8      	it	ge
 800b1fe:	2064      	movge	r0, #100	; 0x64

	if ( az < -100 ) az = -100;
	else if ( az > 100 ) az = 100;

	uint8_t frame[ BUM_GAME_ACCELERATION_LEN ];
	frame[ 0 ] = BUM_GAME_ACCELERATION_TYPE;
 800b200:	2302      	movs	r3, #2
 800b202:	2964      	cmp	r1, #100	; 0x64
 800b204:	bfa8      	it	ge
 800b206:	2164      	movge	r1, #100	; 0x64
 800b208:	f88d 3004 	strb.w	r3, [sp, #4]
 800b20c:	2a64      	cmp	r2, #100	; 0x64
	frame[ 1 ] = ax + 100;
 800b20e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b212:	bfa8      	it	ge
 800b214:	2264      	movge	r2, #100	; 0x64
 800b216:	4298      	cmp	r0, r3
 800b218:	bfb8      	it	lt
 800b21a:	4618      	movlt	r0, r3
	frame[ 2 ] = ay + 100;
 800b21c:	4299      	cmp	r1, r3
 800b21e:	bfb8      	it	lt
 800b220:	4619      	movlt	r1, r3
 800b222:	3164      	adds	r1, #100	; 0x64
	frame[ 3 ] = az + 100;
 800b224:	429a      	cmp	r2, r3
 800b226:	bfb8      	it	lt
 800b228:	461a      	movlt	r2, r3
	frame[ 2 ] = ay + 100;
 800b22a:	f88d 1006 	strb.w	r1, [sp, #6]

	return xbee_api_send_to( bumper_state.referee_addr, frame, BUM_GAME_ACCELERATION_LEN );
 800b22e:	4908      	ldr	r1, [pc, #32]	; (800b250 <bum_game_acceleration+0x58>)
 800b230:	2304      	movs	r3, #4
	frame[ 1 ] = ax + 100;
 800b232:	3064      	adds	r0, #100	; 0x64
	frame[ 3 ] = az + 100;
 800b234:	3264      	adds	r2, #100	; 0x64
	frame[ 1 ] = ax + 100;
 800b236:	f88d 0005 	strb.w	r0, [sp, #5]
	frame[ 3 ] = az + 100;
 800b23a:	f88d 2007 	strb.w	r2, [sp, #7]
	return xbee_api_send_to( bumper_state.referee_addr, frame, BUM_GAME_ACCELERATION_LEN );
 800b23e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b242:	eb0d 0203 	add.w	r2, sp, r3
 800b246:	f002 faaf 	bl	800d7a8 <xbee_api_send_to>
}
 800b24a:	b003      	add	sp, #12
 800b24c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b250:	20000d68 	.word	0x20000d68

0800b254 <bum_process_player>:
	{ \
		bumper_state.referee_addr = from; \
	}

void bum_process_player()
{
 800b254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b256:	b085      	sub	sp, #20
  static uint8_t data[ DATA_SIZE ];
  uint16_t len;

  if ( !event_check( xbee_get_recv_event() ) ) return;
 800b258:	f002 f8ea 	bl	800d430 <xbee_get_recv_event>
 800b25c:	f000 ff4c 	bl	800c0f8 <event_check>
 800b260:	b150      	cbz	r0, 800b278 <bum_process_player+0x24>

  len = DATA_SIZE;
 800b262:	2364      	movs	r3, #100	; 0x64
 800b264:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch ( xbee_recv_get_frame_type() )
 800b268:	f002 f8e6 	bl	800d438 <xbee_recv_get_frame_type>
 800b26c:	2888      	cmp	r0, #136	; 0x88
 800b26e:	d003      	beq.n	800b278 <bum_process_player+0x24>
 800b270:	d804      	bhi.n	800b27c <bum_process_player+0x28>
 800b272:	2800      	cmp	r0, #0
 800b274:	f040 8097 	bne.w	800b3a6 <bum_process_player+0x152>
	  {
		xbee_recv_full( data, &len );
		break;
	  }
  }
}
 800b278:	b005      	add	sp, #20
 800b27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch ( xbee_recv_get_frame_type() )
 800b27c:	288b      	cmp	r0, #139	; 0x8b
 800b27e:	d0fb      	beq.n	800b278 <bum_process_player+0x24>
 800b280:	2890      	cmp	r0, #144	; 0x90
 800b282:	f040 8090 	bne.w	800b3a6 <bum_process_player+0x152>
		if ( xbee_recv( &from, data, &len ) && ( len > 0 ) )
 800b286:	4c4b      	ldr	r4, [pc, #300]	; (800b3b4 <bum_process_player+0x160>)
 800b288:	f10d 0206 	add.w	r2, sp, #6
 800b28c:	4621      	mov	r1, r4
 800b28e:	a802      	add	r0, sp, #8
 800b290:	f002 f99c 	bl	800d5cc <xbee_recv>
 800b294:	2800      	cmp	r0, #0
 800b296:	d0ef      	beq.n	800b278 <bum_process_player+0x24>
 800b298:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800b29c:	2800      	cmp	r0, #0
 800b29e:	d0eb      	beq.n	800b278 <bum_process_player+0x24>
			switch ( data[ 0 ] )
 800b2a0:	7823      	ldrb	r3, [r4, #0]
 800b2a2:	3b81      	subs	r3, #129	; 0x81
 800b2a4:	2b03      	cmp	r3, #3
 800b2a6:	d8e7      	bhi.n	800b278 <bum_process_player+0x24>
 800b2a8:	e8df f003 	tbb	[pc, r3]
 800b2ac:	67402002 	.word	0x67402002
				BUM_SAVE_REFEREE_ADDR();
 800b2b0:	4d41      	ldr	r5, [pc, #260]	; (800b3b8 <bum_process_player+0x164>)
 800b2b2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b2bc:	428b      	cmp	r3, r1
 800b2be:	bf08      	it	eq
 800b2c0:	4282      	cmpeq	r2, r0
 800b2c2:	d103      	bne.n	800b2cc <bum_process_player+0x78>
 800b2c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2c8:	e9c5 2304 	strd	r2, r3, [r5, #16]
				if ( data[ 1 ] == BUM_STEP_REGISTERED )
 800b2cc:	7863      	ldrb	r3, [r4, #1]
 800b2ce:	b91b      	cbnz	r3, 800b2d8 <bum_process_player+0x84>
				{ bumper_state.player->debug( BUM_GAME_STEP_TYPE ); }
 800b2d0:	68ab      	ldr	r3, [r5, #8]
 800b2d2:	2081      	movs	r0, #129	; 0x81
 800b2d4:	695b      	ldr	r3, [r3, #20]
 800b2d6:	4798      	blx	r3
				if ( len != BUM_GAME_STEP_LEN ) return;
 800b2d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b2dc:	2b03      	cmp	r3, #3
 800b2de:	d1cb      	bne.n	800b278 <bum_process_player+0x24>
				bumper_state.player->game_step( data[ 1 ], data[ 2 ] );
 800b2e0:	68ab      	ldr	r3, [r5, #8]
 800b2e2:	78a1      	ldrb	r1, [r4, #2]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	7860      	ldrb	r0, [r4, #1]
 800b2e8:	4798      	blx	r3
				break;
 800b2ea:	e7c5      	b.n	800b278 <bum_process_player+0x24>
				BUM_SAVE_REFEREE_ADDR();
 800b2ec:	4932      	ldr	r1, [pc, #200]	; (800b3b8 <bum_process_player+0x164>)
 800b2ee:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 800b2f2:	2700      	movs	r7, #0
 800b2f4:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800b2f8:	42bb      	cmp	r3, r7
 800b2fa:	bf08      	it	eq
 800b2fc:	42b2      	cmpeq	r2, r6
 800b2fe:	d103      	bne.n	800b308 <bum_process_player+0xb4>
 800b300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b304:	e9c1 2304 	strd	r2, r3, [r1, #16]
				if ( len != BUM_GAME_NEWPLAYER_LEN ) return;
 800b308:	280c      	cmp	r0, #12
 800b30a:	d1b5      	bne.n	800b278 <bum_process_player+0x24>
				uint32_t color = ( data[ 2 ] << 24 ) | ( data[ 3 ] << 16 ) | ( data[ 4 ] << 8 ) | data[ 5 ];
 800b30c:	78e3      	ldrb	r3, [r4, #3]
 800b30e:	78a2      	ldrb	r2, [r4, #2]
				bumper_state.player->game_new_player( data[ 1 ], ( const char * )data + 6, color );
 800b310:	6889      	ldr	r1, [r1, #8]
 800b312:	7860      	ldrb	r0, [r4, #1]
 800b314:	684d      	ldr	r5, [r1, #4]
 800b316:	4929      	ldr	r1, [pc, #164]	; (800b3bc <bum_process_player+0x168>)
				uint32_t color = ( data[ 2 ] << 24 ) | ( data[ 3 ] << 16 ) | ( data[ 4 ] << 8 ) | data[ 5 ];
 800b318:	041b      	lsls	r3, r3, #16
 800b31a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b31e:	7962      	ldrb	r2, [r4, #5]
 800b320:	4313      	orrs	r3, r2
 800b322:	7922      	ldrb	r2, [r4, #4]
				bumper_state.player->game_new_player( data[ 1 ], ( const char * )data + 6, color );
 800b324:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800b328:	47a8      	blx	r5
				break;
 800b32a:	e7a5      	b.n	800b278 <bum_process_player+0x24>
				BUM_SAVE_REFEREE_ADDR();
 800b32c:	4d22      	ldr	r5, [pc, #136]	; (800b3b8 <bum_process_player+0x164>)
 800b32e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800b332:	2100      	movs	r1, #0
 800b334:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b338:	428b      	cmp	r3, r1
 800b33a:	bf08      	it	eq
 800b33c:	4282      	cmpeq	r2, r0
 800b33e:	d103      	bne.n	800b348 <bum_process_player+0xf4>
 800b340:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b344:	e9c5 2304 	strd	r2, r3, [r5, #16]
				bumper_state.player->debug( BUM_GAME_PLAYERMOVE_TYPE );
 800b348:	68ab      	ldr	r3, [r5, #8]
 800b34a:	2083      	movs	r0, #131	; 0x83
 800b34c:	695b      	ldr	r3, [r3, #20]
 800b34e:	4798      	blx	r3
				if ( len != BUM_GAME_PLAYERMOVE_LEN ) return;
 800b350:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b354:	2b08      	cmp	r3, #8
 800b356:	d18f      	bne.n	800b278 <bum_process_player+0x24>
				uint16_t x = ( ((uint16_t)data[ 2 ]) << 8 ) | data[ 3 ];
 800b358:	78a0      	ldrb	r0, [r4, #2]
				uint16_t s = ( ((uint16_t)data[ 6 ]) << 8 ) | data[ 7 ];
 800b35a:	79a7      	ldrb	r7, [r4, #6]
 800b35c:	79e3      	ldrb	r3, [r4, #7]
				uint16_t y = ( ((uint16_t)data[ 4 ]) << 8 ) | data[ 5 ];
 800b35e:	7926      	ldrb	r6, [r4, #4]
 800b360:	7962      	ldrb	r2, [r4, #5]
				uint16_t x = ( ((uint16_t)data[ 2 ]) << 8 ) | data[ 3 ];
 800b362:	78e1      	ldrb	r1, [r4, #3]
				bumper_state.player->game_player_move( data[ 1 ], x, y, s );
 800b364:	68ad      	ldr	r5, [r5, #8]
 800b366:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800b36a:	68ad      	ldr	r5, [r5, #8]
 800b36c:	7860      	ldrb	r0, [r4, #1]
 800b36e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800b372:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 800b376:	47a8      	blx	r5
				break;
 800b378:	e77e      	b.n	800b278 <bum_process_player+0x24>
				BUM_SAVE_REFEREE_ADDR();
 800b37a:	4b0f      	ldr	r3, [pc, #60]	; (800b3b8 <bum_process_player+0x164>)
 800b37c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800b380:	2700      	movs	r7, #0
 800b382:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800b386:	42bd      	cmp	r5, r7
 800b388:	bf08      	it	eq
 800b38a:	42b4      	cmpeq	r4, r6
 800b38c:	d103      	bne.n	800b396 <bum_process_player+0x142>
 800b38e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b392:	e9c3 4504 	strd	r4, r5, [r3, #16]
				if ( len != BUM_GAME_PRINT_LEN ) return;
 800b396:	281b      	cmp	r0, #27
 800b398:	f47f af6e 	bne.w	800b278 <bum_process_player+0x24>
				bumper_state.player->game_print( ( const char * )data + 1 );
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	4808      	ldr	r0, [pc, #32]	; (800b3c0 <bum_process_player+0x16c>)
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	4798      	blx	r3
				break;
 800b3a4:	e768      	b.n	800b278 <bum_process_player+0x24>
		xbee_recv_full( data, &len );
 800b3a6:	f10d 0106 	add.w	r1, sp, #6
 800b3aa:	4802      	ldr	r0, [pc, #8]	; (800b3b4 <bum_process_player+0x160>)
 800b3ac:	f002 f904 	bl	800d5b8 <xbee_recv_full>
		break;
 800b3b0:	e762      	b.n	800b278 <bum_process_player+0x24>
 800b3b2:	bf00      	nop
 800b3b4:	20000d80 	.word	0x20000d80
 800b3b8:	20000d68 	.word	0x20000d68
 800b3bc:	20000d86 	.word	0x20000d86
 800b3c0:	20000d81 	.word	0x20000d81

0800b3c4 <bum_api_send_to>:
  0x00FFF8DC,

};

static void bum_api_send_to( uint64_t to, uint8_t *data, uint16_t len )
{
 800b3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ( to == BUM_TO_ALL )
 800b3c8:	1c4d      	adds	r5, r1, #1
 800b3ca:	bf08      	it	eq
 800b3cc:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
 800b3d0:	4616      	mov	r6, r2
 800b3d2:	461f      	mov	r7, r3
	if ( to == BUM_TO_ALL )
 800b3d4:	d111      	bne.n	800b3fa <bum_api_send_to+0x36>
	{
		for ( int i = 0 ; i < referee_state.n_players ; i++ )
 800b3d6:	4d0b      	ldr	r5, [pc, #44]	; (800b404 <bum_api_send_to+0x40>)
 800b3d8:	2400      	movs	r4, #0
 800b3da:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 800b3de:	429c      	cmp	r4, r3
 800b3e0:	db01      	blt.n	800b3e6 <bum_api_send_to+0x22>
 800b3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			xbee_api_send_to( referee_state.player_data[ i ].addr, data, len );
 800b3e6:	eb05 1184 	add.w	r1, r5, r4, lsl #6
 800b3ea:	463b      	mov	r3, r7
 800b3ec:	4632      	mov	r2, r6
 800b3ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3f2:	f002 f9d9 	bl	800d7a8 <xbee_api_send_to>
		for ( int i = 0 ; i < referee_state.n_players ; i++ )
 800b3f6:	3401      	adds	r4, #1
 800b3f8:	e7ef      	b.n	800b3da <bum_api_send_to+0x16>
	}
	else
	{
		xbee_api_send_to( to, data, len );
	}
}
 800b3fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		xbee_api_send_to( to, data, len );
 800b3fe:	f002 b9d3 	b.w	800d7a8 <xbee_api_send_to>
 800b402:	bf00      	nop
 800b404:	20005070 	.word	0x20005070

0800b408 <bumper_start_location_calc>:
{
 800b408:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  bumper_state.referee->utility_random( &random, N_STARTING_BOXES - referee_state.n_players );
 800b40c:	4b1a      	ldr	r3, [pc, #104]	; (800b478 <bumper_start_location_calc+0x70>)
 800b40e:	4c1b      	ldr	r4, [pc, #108]	; (800b47c <bumper_start_location_calc+0x74>)
 800b410:	689b      	ldr	r3, [r3, #8]
{
 800b412:	460f      	mov	r7, r1
  bumper_state.referee->utility_random( &random, N_STARTING_BOXES - referee_state.n_players );
 800b414:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
 800b418:	68db      	ldr	r3, [r3, #12]
{
 800b41a:	4680      	mov	r8, r0
  bumper_state.referee->utility_random( &random, N_STARTING_BOXES - referee_state.n_players );
 800b41c:	f1c1 0119 	rsb	r1, r1, #25
 800b420:	a801      	add	r0, sp, #4
 800b422:	4798      	blx	r3
  int i = random;
 800b424:	9a01      	ldr	r2, [sp, #4]
 800b426:	4623      	mov	r3, r4
{
 800b428:	4614      	mov	r4, r2
 800b42a:	e004      	b.n	800b436 <bumper_start_location_calc+0x2e>
    i++;
 800b42c:	3401      	adds	r4, #1
    if ( i == N_STARTING_BOXES ) i = 0;
 800b42e:	2c19      	cmp	r4, #25
 800b430:	f04f 0200 	mov.w	r2, #0
 800b434:	d0f8      	beq.n	800b428 <bumper_start_location_calc+0x20>
  while ( referee_state.start_location[ i ] )
 800b436:	191a      	adds	r2, r3, r4
 800b438:	f892 1504 	ldrb.w	r1, [r2, #1284]	; 0x504
 800b43c:	2900      	cmp	r1, #0
 800b43e:	d1f5      	bne.n	800b42c <bumper_start_location_calc+0x24>
  *x = ( X * ( BOARD_W / 5 ) ) + ( BOARD_W / 10 );
 800b440:	26c8      	movs	r6, #200	; 0xc8
  referee_state.start_location[ i ] = 1;
 800b442:	2301      	movs	r3, #1
  int X = i / 5;
 800b444:	2505      	movs	r5, #5
 800b446:	fb94 f5f5 	sdiv	r5, r4, r5
  *x = ( X * ( BOARD_W / 5 ) ) + ( BOARD_W / 10 );
 800b44a:	fb06 f005 	mul.w	r0, r6, r5
  referee_state.start_location[ i ] = 1;
 800b44e:	f882 3504 	strb.w	r3, [r2, #1284]	; 0x504
  *x = ( X * ( BOARD_W / 5 ) ) + ( BOARD_W / 10 );
 800b452:	3064      	adds	r0, #100	; 0x64
 800b454:	f7f5 f876 	bl	8000544 <__aeabi_i2d>
  int Y = i % 5;
 800b458:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800b45c:	1b64      	subs	r4, r4, r5
  *y = ( Y * ( BOARD_H / 5 ) ) + ( BOARD_H / 10 );
 800b45e:	4374      	muls	r4, r6
  *x = ( X * ( BOARD_W / 5 ) ) + ( BOARD_W / 10 );
 800b460:	e9c8 0100 	strd	r0, r1, [r8]
  *y = ( Y * ( BOARD_H / 5 ) ) + ( BOARD_H / 10 );
 800b464:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800b468:	f7f5 f86c 	bl	8000544 <__aeabi_i2d>
 800b46c:	e9c7 0100 	strd	r0, r1, [r7]
}
 800b470:	b002      	add	sp, #8
 800b472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b476:	bf00      	nop
 800b478:	20000de8 	.word	0x20000de8
 800b47c:	20005070 	.word	0x20005070

0800b480 <find_player_addr>:
	  if ( referee_state.player_data[ i ].id == id ) return referee_state.player_data + i;
  }
  return 0;
}
PlayerData *find_player_addr( uint64_t addr )
{
 800b480:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b482:	460f      	mov	r7, r1
  for ( int i = 0 ; i < referee_state.n_players ; i++ )
 800b484:	490a      	ldr	r1, [pc, #40]	; (800b4b0 <find_player_addr+0x30>)
{
 800b486:	4606      	mov	r6, r0
  for ( int i = 0 ; i < referee_state.n_players ; i++ )
 800b488:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800b48c:	2200      	movs	r2, #0
 800b48e:	4282      	cmp	r2, r0
 800b490:	db01      	blt.n	800b496 <find_player_addr+0x16>
  {
	  if ( referee_state.player_data[ i ].addr == addr ) return referee_state.player_data + i;
  }
  return 0;
 800b492:	2000      	movs	r0, #0
}
 800b494:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  if ( referee_state.player_data[ i ].addr == addr ) return referee_state.player_data + i;
 800b496:	eb01 1382 	add.w	r3, r1, r2, lsl #6
 800b49a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b49e:	42bd      	cmp	r5, r7
 800b4a0:	bf08      	it	eq
 800b4a2:	42b4      	cmpeq	r4, r6
 800b4a4:	d101      	bne.n	800b4aa <find_player_addr+0x2a>
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for ( int i = 0 ; i < referee_state.n_players ; i++ )
 800b4aa:	3201      	adds	r2, #1
 800b4ac:	e7ef      	b.n	800b48e <find_player_addr+0xe>
 800b4ae:	bf00      	nop
 800b4b0:	20005070 	.word	0x20005070

0800b4b4 <add_player>:

PlayerData *add_player( uint64_t addr, const char *name )
{
 800b4b4:	b570      	push	{r4, r5, r6, lr}
  PlayerData *d = referee_state.player_data + referee_state.n_players;
 800b4b6:	4d1b      	ldr	r5, [pc, #108]	; (800b524 <add_player+0x70>)
 800b4b8:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 800b4bc:	eb05 1483 	add.w	r4, r5, r3, lsl #6
{
 800b4c0:	4616      	mov	r6, r2

  d->addr = addr;
 800b4c2:	e9c4 0100 	strd	r0, r1, [r4]
  d->id = referee_state.n_players;
 800b4c6:	7223      	strb	r3, [r4, #8]

  strncpy( d->name, name, PLAYER_NAME_SIZE );
 800b4c8:	2205      	movs	r2, #5
 800b4ca:	4631      	mov	r1, r6
 800b4cc:	f104 0009 	add.w	r0, r4, #9
  d->name[ PLAYER_NAME_SIZE ] = 0;
 800b4d0:	2600      	movs	r6, #0
  strncpy( d->name, name, PLAYER_NAME_SIZE );
 800b4d2:	f002 fc9e 	bl	800de12 <strncpy>

  bumper_start_location_calc( &d->Px, &d->Py );
 800b4d6:	f104 0118 	add.w	r1, r4, #24
 800b4da:	f104 0010 	add.w	r0, r4, #16
  d->name[ PLAYER_NAME_SIZE ] = 0;
 800b4de:	73a6      	strb	r6, [r4, #14]
  bumper_start_location_calc( &d->Px, &d->Py );
 800b4e0:	f7ff ff92 	bl	800b408 <bumper_start_location_calc>
  d->r = BUM_DEFAULT_BALL_SIZE;
 800b4e4:	2328      	movs	r3, #40	; 0x28
 800b4e6:	8663      	strh	r3, [r4, #50]	; 0x32

  d->s = 1000; // No scaling
 800b4e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4ec:	8623      	strh	r3, [r4, #48]	; 0x30

  d->color = bum_colors[ referee_state.n_players ];
 800b4ee:	4a0e      	ldr	r2, [pc, #56]	; (800b528 <add_player+0x74>)
 800b4f0:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
  // Current speed
  d->Vx = 0;
  d->Vy = 0;

  // Current acceleration (-100 to 100)
  d->ax = 0;
 800b4f4:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
  d->color = bum_colors[ referee_state.n_players ];
 800b4f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b4fc:	63a2      	str	r2, [r4, #56]	; 0x38
  d->ay = 0;
  d->az = 0;

  // 1 if the player is living in the game
  d->playing = 1;
 800b4fe:	2201      	movs	r2, #1
  d->Vx = 0;
 800b500:	2000      	movs	r0, #0
 800b502:	2100      	movs	r1, #0
  d->ay = 0;
 800b504:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
  d->az = 0;
 800b508:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
  d->playing = 1;
 800b50c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c


  referee_state.n_players++;
 800b510:	4413      	add	r3, r2
  d->Vx = 0;
 800b512:	e9c4 0108 	strd	r0, r1, [r4, #32]
  d->Vy = 0;
 800b516:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
  referee_state.n_players++;
 800b51a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

  return d;
}
 800b51e:	4620      	mov	r0, r4
 800b520:	bd70      	pop	{r4, r5, r6, pc}
 800b522:	bf00      	nop
 800b524:	20005070 	.word	0x20005070
 800b528:	08010db8 	.word	0x08010db8

0800b52c <bums_referee_reset>:

void bums_referee_reset()
{
  referee_state.game_started = 0;
 800b52c:	4a06      	ldr	r2, [pc, #24]	; (800b548 <bums_referee_reset+0x1c>)
 800b52e:	2300      	movs	r3, #0
 800b530:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
  referee_state.n_players = 0;
 800b534:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

  for ( int i = 0 ; i < N_STARTING_BOXES ; i++ )
  {
	referee_state.start_location[ i ] = 0;
 800b538:	4618      	mov	r0, r3
 800b53a:	18d1      	adds	r1, r2, r3
  for ( int i = 0 ; i < N_STARTING_BOXES ; i++ )
 800b53c:	3301      	adds	r3, #1
 800b53e:	2b19      	cmp	r3, #25
	referee_state.start_location[ i ] = 0;
 800b540:	f881 0504 	strb.w	r0, [r1, #1284]	; 0x504
  for ( int i = 0 ; i < N_STARTING_BOXES ; i++ )
 800b544:	d1f9      	bne.n	800b53a <bums_referee_reset+0xe>
  }
}
 800b546:	4770      	bx	lr
 800b548:	20005070 	.word	0x20005070

0800b54c <bum_init_referee>:

void bum_init_referee( BumperProtocolReferee *p )
{
 800b54c:	b510      	push	{r4, lr}
  xbee_init( 1, p->error );
 800b54e:	6901      	ldr	r1, [r0, #16]
{
 800b550:	4604      	mov	r4, r0
  xbee_init( 1, p->error );
 800b552:	2001      	movs	r0, #1
 800b554:	f002 f9b8 	bl	800d8c8 <xbee_init>

  // Not used
  //bumper_state.unit_addr = xbee_api_read_unique_id();

  bumper_state.referee = p;
 800b558:	4b04      	ldr	r3, [pc, #16]	; (800b56c <bum_init_referee+0x20>)

  xbee_log( "Starting Referee<br/>");
 800b55a:	4805      	ldr	r0, [pc, #20]	; (800b570 <bum_init_referee+0x24>)
  bumper_state.referee = p;
 800b55c:	609c      	str	r4, [r3, #8]
  xbee_log( "Starting Referee<br/>");
 800b55e:	f002 fa77 	bl	800da50 <xbee_log>

  bums_referee_reset();
}
 800b562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  bums_referee_reset();
 800b566:	f7ff bfe1 	b.w	800b52c <bums_referee_reset>
 800b56a:	bf00      	nop
 800b56c:	20000de8 	.word	0x20000de8
 800b570:	08010e08 	.word	0x08010e08

0800b574 <bum_game_step>:

int bum_game_step( uint64_t to, uint8_t step, uint8_t param )
{
 800b574:	b513      	push	{r0, r1, r4, lr}
	uint8_t frame[ BUM_GAME_STEP_LEN ];
	frame[ 0 ] = BUM_GAME_STEP_TYPE;
 800b576:	2481      	movs	r4, #129	; 0x81
	frame[ 1 ] = step;
 800b578:	f88d 2005 	strb.w	r2, [sp, #5]
	frame[ 2 ] = param;
 800b57c:	f88d 3006 	strb.w	r3, [sp, #6]

	bum_api_send_to( to, frame, BUM_GAME_STEP_LEN );
 800b580:	aa01      	add	r2, sp, #4
 800b582:	2303      	movs	r3, #3
	frame[ 0 ] = BUM_GAME_STEP_TYPE;
 800b584:	f88d 4004 	strb.w	r4, [sp, #4]
	bum_api_send_to( to, frame, BUM_GAME_STEP_LEN );
 800b588:	f7ff ff1c 	bl	800b3c4 <bum_api_send_to>
	return 1;
}
 800b58c:	2001      	movs	r0, #1
 800b58e:	b002      	add	sp, #8
 800b590:	bd10      	pop	{r4, pc}

0800b592 <bum_game_new_player>:

int bum_game_new_player( uint64_t to, uint8_t id, const char *name, uint32_t color )
{
 800b592:	b530      	push	{r4, r5, lr}
 800b594:	b085      	sub	sp, #20
 800b596:	460d      	mov	r5, r1
 800b598:	9908      	ldr	r1, [sp, #32]
	int i;
	uint8_t frame[ BUM_GAME_NEWPLAYER_LEN ];
	frame[ 0 ] = BUM_GAME_NEWPLAYER_TYPE;
	frame[ 1 ] = id;
 800b59a:	f88d 2005 	strb.w	r2, [sp, #5]

	frame[ 2 ] = ( color >> 24 ) & 0xFF;
 800b59e:	0e0a      	lsrs	r2, r1, #24
 800b5a0:	f88d 2006 	strb.w	r2, [sp, #6]
	frame[ 3 ] = ( color >> 16 ) & 0xFF;
 800b5a4:	0c0a      	lsrs	r2, r1, #16
{
 800b5a6:	4604      	mov	r4, r0
	frame[ 3 ] = ( color >> 16 ) & 0xFF;
 800b5a8:	f88d 2007 	strb.w	r2, [sp, #7]
	frame[ 0 ] = BUM_GAME_NEWPLAYER_TYPE;
 800b5ac:	2082      	movs	r0, #130	; 0x82
	frame[ 4 ] = ( color >> 8 ) & 0xFF;
 800b5ae:	0a0a      	lsrs	r2, r1, #8
 800b5b0:	f88d 2008 	strb.w	r2, [sp, #8]
	frame[ 0 ] = BUM_GAME_NEWPLAYER_TYPE;
 800b5b4:	f88d 0004 	strb.w	r0, [sp, #4]
	frame[ 5 ] = ( color ) & 0xFF;
 800b5b8:	f88d 1009 	strb.w	r1, [sp, #9]

	for ( i = 0 ; ( i < PLAYER_NAME_SIZE ) && name[ i ] ; i++ ) frame[ i + 6 ] = name[ i ];
 800b5bc:	2200      	movs	r2, #0
 800b5be:	5c99      	ldrb	r1, [r3, r2]
 800b5c0:	b971      	cbnz	r1, 800b5e0 <bum_game_new_player+0x4e>
	for ( ; ( i < PLAYER_NAME_SIZE + 1 ) ; i++ ) frame[ i + 6 ] = 0;
 800b5c2:	ab01      	add	r3, sp, #4
 800b5c4:	4413      	add	r3, r2
 800b5c6:	3201      	adds	r2, #1
 800b5c8:	2a06      	cmp	r2, #6
 800b5ca:	7199      	strb	r1, [r3, #6]
 800b5cc:	d1f9      	bne.n	800b5c2 <bum_game_new_player+0x30>

	bum_api_send_to( to, frame, BUM_GAME_NEWPLAYER_LEN );
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	230c      	movs	r3, #12
 800b5d2:	aa01      	add	r2, sp, #4
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	f7ff fef5 	bl	800b3c4 <bum_api_send_to>
	return 1;
}
 800b5da:	2001      	movs	r0, #1
 800b5dc:	b005      	add	sp, #20
 800b5de:	bd30      	pop	{r4, r5, pc}
	for ( i = 0 ; ( i < PLAYER_NAME_SIZE ) && name[ i ] ; i++ ) frame[ i + 6 ] = name[ i ];
 800b5e0:	a801      	add	r0, sp, #4
 800b5e2:	4410      	add	r0, r2
 800b5e4:	3201      	adds	r2, #1
 800b5e6:	2a05      	cmp	r2, #5
 800b5e8:	7181      	strb	r1, [r0, #6]
 800b5ea:	d1e8      	bne.n	800b5be <bum_game_new_player+0x2c>
	for ( ; ( i < PLAYER_NAME_SIZE + 1 ) ; i++ ) frame[ i + 6 ] = 0;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f88d 300f 	strb.w	r3, [sp, #15]
 800b5f2:	e7ec      	b.n	800b5ce <bum_game_new_player+0x3c>

0800b5f4 <bum_game_player_move>:

int bum_game_player_move( uint64_t to, uint8_t id, uint16_t x, uint16_t y, uint16_t s )
{
 800b5f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5f6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 800b5fa:	f8bd 401c 	ldrh.w	r4, [sp, #28]
	uint8_t frame[ BUM_GAME_PLAYERMOVE_LEN ];
	frame[ 0 ] = BUM_GAME_PLAYERMOVE_TYPE;
	frame[ 1 ] = id;
 800b5fe:	f88d 2001 	strb.w	r2, [sp, #1]
	frame[ 2 ] = ( x >> 8 ) & 0xFF;
	frame[ 3 ] = ( x ) & 0xFF;
 800b602:	f88d 3003 	strb.w	r3, [sp, #3]
	frame[ 2 ] = ( x >> 8 ) & 0xFF;
 800b606:	0a1a      	lsrs	r2, r3, #8
	frame[ 4 ] = ( y >> 8 ) & 0xFF;
 800b608:	0a2b      	lsrs	r3, r5, #8
 800b60a:	f88d 3004 	strb.w	r3, [sp, #4]
	frame[ 5 ] = ( y ) & 0xFF;
	frame[ 6 ] = ( s >> 8 ) & 0xFF;
 800b60e:	0a23      	lsrs	r3, r4, #8
	frame[ 2 ] = ( x >> 8 ) & 0xFF;
 800b610:	f88d 2002 	strb.w	r2, [sp, #2]
	frame[ 6 ] = ( s >> 8 ) & 0xFF;
 800b614:	f88d 3006 	strb.w	r3, [sp, #6]
	frame[ 0 ] = BUM_GAME_PLAYERMOVE_TYPE;
 800b618:	2683      	movs	r6, #131	; 0x83
	frame[ 7 ] = ( s ) & 0xFF;



	bum_api_send_to( to, frame, BUM_GAME_PLAYERMOVE_LEN );
 800b61a:	2308      	movs	r3, #8
 800b61c:	466a      	mov	r2, sp
	frame[ 0 ] = BUM_GAME_PLAYERMOVE_TYPE;
 800b61e:	f88d 6000 	strb.w	r6, [sp]
	frame[ 5 ] = ( y ) & 0xFF;
 800b622:	f88d 5005 	strb.w	r5, [sp, #5]
	frame[ 7 ] = ( s ) & 0xFF;
 800b626:	f88d 4007 	strb.w	r4, [sp, #7]
	bum_api_send_to( to, frame, BUM_GAME_PLAYERMOVE_LEN );
 800b62a:	f7ff fecb 	bl	800b3c4 <bum_api_send_to>
	return 1;
}
 800b62e:	2001      	movs	r0, #1
 800b630:	b002      	add	sp, #8
 800b632:	bd70      	pop	{r4, r5, r6, pc}

0800b634 <bum_game_print>:

int bum_game_print( uint64_t to, const char *msg )
{
 800b634:	b530      	push	{r4, r5, lr}
 800b636:	b089      	sub	sp, #36	; 0x24
 800b638:	4604      	mov	r4, r0
 800b63a:	4610      	mov	r0, r2
	int i;
	uint8_t frame[ BUM_GAME_PRINT_LEN ];
	frame[ 0 ] = BUM_GAME_PRINT_TYPE;
 800b63c:	aa08      	add	r2, sp, #32
 800b63e:	2384      	movs	r3, #132	; 0x84
 800b640:	f802 3d1c 	strb.w	r3, [r2, #-28]!
{
 800b644:	460d      	mov	r5, r1
	for ( i = 0 ; ( i < BUM_MSG_SIZE ) && msg[ i ] ; i++ ) frame[ i + 1 ] = msg[ i ];
 800b646:	2300      	movs	r3, #0
 800b648:	5cc1      	ldrb	r1, [r0, r3]
 800b64a:	b959      	cbnz	r1, 800b664 <bum_game_print+0x30>
	for ( ; ( i < BUM_MSG_SIZE + 1 ) ; i++ ) frame[ i + 1 ] = 0;
 800b64c:	3301      	adds	r3, #1
 800b64e:	2b1a      	cmp	r3, #26
 800b650:	54d1      	strb	r1, [r2, r3]
 800b652:	d1fb      	bne.n	800b64c <bum_game_print+0x18>
	bum_api_send_to( to, frame, BUM_GAME_PRINT_LEN );
 800b654:	4620      	mov	r0, r4
 800b656:	231b      	movs	r3, #27
 800b658:	4629      	mov	r1, r5
 800b65a:	f7ff feb3 	bl	800b3c4 <bum_api_send_to>
	return 1;
}
 800b65e:	2001      	movs	r0, #1
 800b660:	b009      	add	sp, #36	; 0x24
 800b662:	bd30      	pop	{r4, r5, pc}
	for ( i = 0 ; ( i < BUM_MSG_SIZE ) && msg[ i ] ; i++ ) frame[ i + 1 ] = msg[ i ];
 800b664:	3301      	adds	r3, #1
 800b666:	2b19      	cmp	r3, #25
 800b668:	54d1      	strb	r1, [r2, r3]
 800b66a:	d1ed      	bne.n	800b648 <bum_game_print+0x14>
	for ( ; ( i < BUM_MSG_SIZE + 1 ) ; i++ ) frame[ i + 1 ] = 0;
 800b66c:	2300      	movs	r3, #0
 800b66e:	f88d 301e 	strb.w	r3, [sp, #30]
 800b672:	e7ef      	b.n	800b654 <bum_game_print+0x20>

0800b674 <bum_process_referee>:

#define DATA_SIZE 100


void bum_process_referee()
{
 800b674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b678:	b089      	sub	sp, #36	; 0x24
  static uint8_t data[ DATA_SIZE ];
  uint16_t len;

  if ( !event_check( xbee_get_recv_event() ) ) return;
 800b67a:	f001 fed9 	bl	800d430 <xbee_get_recv_event>
 800b67e:	f000 fd3b 	bl	800c0f8 <event_check>
 800b682:	b150      	cbz	r0, 800b69a <bum_process_referee+0x26>

  len = DATA_SIZE;
 800b684:	2364      	movs	r3, #100	; 0x64
 800b686:	f8ad 3016 	strh.w	r3, [sp, #22]
  switch ( xbee_recv_get_frame_type() )
 800b68a:	f001 fed5 	bl	800d438 <xbee_recv_get_frame_type>
 800b68e:	2888      	cmp	r0, #136	; 0x88
 800b690:	d003      	beq.n	800b69a <bum_process_referee+0x26>
 800b692:	d805      	bhi.n	800b6a0 <bum_process_referee+0x2c>
 800b694:	2800      	cmp	r0, #0
 800b696:	f040 80cc 	bne.w	800b832 <bum_process_referee+0x1be>
		break;
	  }

  }

}
 800b69a:	b009      	add	sp, #36	; 0x24
 800b69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch ( xbee_recv_get_frame_type() )
 800b6a0:	288b      	cmp	r0, #139	; 0x8b
 800b6a2:	d0fa      	beq.n	800b69a <bum_process_referee+0x26>
 800b6a4:	2890      	cmp	r0, #144	; 0x90
 800b6a6:	f040 80c4 	bne.w	800b832 <bum_process_referee+0x1be>
		if ( xbee_recv( &from, data, &len ) && ( len > 0 ) )
 800b6aa:	4c65      	ldr	r4, [pc, #404]	; (800b840 <bum_process_referee+0x1cc>)
 800b6ac:	f10d 0216 	add.w	r2, sp, #22
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	a806      	add	r0, sp, #24
 800b6b4:	f001 ff8a 	bl	800d5cc <xbee_recv>
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	d0ee      	beq.n	800b69a <bum_process_referee+0x26>
 800b6bc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d0ea      	beq.n	800b69a <bum_process_referee+0x26>
			switch ( data[ 0 ] )
 800b6c4:	7822      	ldrb	r2, [r4, #0]
 800b6c6:	2a01      	cmp	r2, #1
 800b6c8:	d01e      	beq.n	800b708 <bum_process_referee+0x94>
 800b6ca:	2a02      	cmp	r2, #2
 800b6cc:	d1e5      	bne.n	800b69a <bum_process_referee+0x26>
				  if ( len != BUM_GAME_ACCELERATION_LEN ) return;
 800b6ce:	2b04      	cmp	r3, #4
 800b6d0:	d1e3      	bne.n	800b69a <bum_process_referee+0x26>
				  PlayerData *d = find_player_addr( from );
 800b6d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6d6:	f7ff fed3 	bl	800b480 <find_player_addr>
				  if ( d )
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	d0dd      	beq.n	800b69a <bum_process_referee+0x26>
					d->ax = data[ 1 ] - 100;
 800b6de:	7861      	ldrb	r1, [r4, #1]
 800b6e0:	3964      	subs	r1, #100	; 0x64
 800b6e2:	b249      	sxtb	r1, r1
 800b6e4:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
					d->ay = data[ 2 ] - 100;
 800b6e8:	78a2      	ldrb	r2, [r4, #2]
 800b6ea:	3a64      	subs	r2, #100	; 0x64
 800b6ec:	b252      	sxtb	r2, r2
 800b6ee:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
					d->az = data[ 3 ] - 100;
 800b6f2:	78e3      	ldrb	r3, [r4, #3]
					bumper_state.referee->game_acceleration( d->id, d->ax, d->ay, d->az );
 800b6f4:	4c53      	ldr	r4, [pc, #332]	; (800b844 <bum_process_referee+0x1d0>)
					d->az = data[ 3 ] - 100;
 800b6f6:	3b64      	subs	r3, #100	; 0x64
 800b6f8:	b25b      	sxtb	r3, r3
					bumper_state.referee->game_acceleration( d->id, d->ax, d->ay, d->az );
 800b6fa:	68a4      	ldr	r4, [r4, #8]
					d->az = data[ 3 ] - 100;
 800b6fc:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
					bumper_state.referee->game_acceleration( d->id, d->ax, d->ay, d->az );
 800b700:	6864      	ldr	r4, [r4, #4]
 800b702:	7a00      	ldrb	r0, [r0, #8]
 800b704:	47a0      	blx	r4
 800b706:	e7c8      	b.n	800b69a <bum_process_referee+0x26>
				if ( len != BUM_GAME_REGISTER_LEN ) return;
 800b708:	2b07      	cmp	r3, #7
 800b70a:	d1c6      	bne.n	800b69a <bum_process_referee+0x26>
				if ( referee_state.game_started )
 800b70c:	4e4e      	ldr	r6, [pc, #312]	; (800b848 <bum_process_referee+0x1d4>)
 800b70e:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
 800b712:	2b00      	cmp	r3, #0
 800b714:	d13b      	bne.n	800b78e <bum_process_referee+0x11a>
				else if ( referee_state.n_players == MAX_PLAYERS )
 800b716:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 800b71a:	2b14      	cmp	r3, #20
 800b71c:	d03a      	beq.n	800b794 <bum_process_referee+0x120>
				  d = find_player_addr( from );
 800b71e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800b722:	4640      	mov	r0, r8
 800b724:	4649      	mov	r1, r9
 800b726:	f7ff feab 	bl	800b480 <find_player_addr>
				  if ( d )
 800b72a:	4604      	mov	r4, r0
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d134      	bne.n	800b79a <bum_process_referee+0x126>
					d = add_player( from, ( const char * )data + 1 );
 800b730:	4a46      	ldr	r2, [pc, #280]	; (800b84c <bum_process_referee+0x1d8>)
 800b732:	4640      	mov	r0, r8
 800b734:	4649      	mov	r1, r9
 800b736:	f7ff febd 	bl	800b4b4 <add_player>
				{ result = 4; }
 800b73a:	1c05      	adds	r5, r0, #0
					if ( d ) { result = 1; }
 800b73c:	4604      	mov	r4, r0
				{ result = 4; }
 800b73e:	bf18      	it	ne
 800b740:	2501      	movne	r5, #1
				bum_game_step( from, BUM_STEP_REGISTERED, result );
 800b742:	462b      	mov	r3, r5
 800b744:	2200      	movs	r2, #0
 800b746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b74a:	f7ff ff13 	bl	800b574 <bum_game_step>
				if ( result == 1 )
 800b74e:	2d01      	cmp	r5, #1
 800b750:	d1a3      	bne.n	800b69a <bum_process_referee+0x26>
					bum_game_print( from, "WAIT..." );
 800b752:	4a3f      	ldr	r2, [pc, #252]	; (800b850 <bum_process_referee+0x1dc>)
 800b754:	4d3f      	ldr	r5, [pc, #252]	; (800b854 <bum_process_referee+0x1e0>)
 800b756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b75a:	f7ff ff6b 	bl	800b634 <bum_game_print>
					for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b75e:	2700      	movs	r7, #0
 800b760:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 800b764:	429f      	cmp	r7, r3
 800b766:	db1a      	blt.n	800b79e <bum_process_referee+0x12a>
 800b768:	4d37      	ldr	r5, [pc, #220]	; (800b848 <bum_process_referee+0x1d4>)
 800b76a:	2700      	movs	r7, #0
 800b76c:	f104 0a09 	add.w	sl, r4, #9
					for ( i = 0 ; i < referee_state.n_players - 1 ; i++ )
 800b770:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 800b774:	7a22      	ldrb	r2, [r4, #8]
 800b776:	3b01      	subs	r3, #1
 800b778:	429f      	cmp	r7, r3
 800b77a:	f105 0540 	add.w	r5, r5, #64	; 0x40
 800b77e:	db37      	blt.n	800b7f0 <bum_process_referee+0x17c>
					bumper_state.referee->game_register( d->id, d->name );
 800b780:	4b30      	ldr	r3, [pc, #192]	; (800b844 <bum_process_referee+0x1d0>)
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	4651      	mov	r1, sl
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4610      	mov	r0, r2
 800b78a:	4798      	blx	r3
 800b78c:	e785      	b.n	800b69a <bum_process_referee+0x26>
				PlayerData *d = 0;
 800b78e:	2400      	movs	r4, #0
				{ result = 4; }
 800b790:	2504      	movs	r5, #4
 800b792:	e7d6      	b.n	800b742 <bum_process_referee+0xce>
				PlayerData *d = 0;
 800b794:	2400      	movs	r4, #0
				{ result = 3; }
 800b796:	2503      	movs	r5, #3
 800b798:	e7d3      	b.n	800b742 <bum_process_referee+0xce>
				  { result = 2; }
 800b79a:	2502      	movs	r5, #2
 800b79c:	e7d1      	b.n	800b742 <bum_process_referee+0xce>
						bum_game_new_player( from, referee_state.player_data[ i ].id, referee_state.player_data[ i ].name, referee_state.player_data[ i ].color );
 800b79e:	f8d5 302f 	ldr.w	r3, [r5, #47]	; 0x2f
 800b7a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7ac:	462b      	mov	r3, r5
 800b7ae:	f7ff fef0 	bl	800b592 <bum_game_new_player>
						bum_game_player_move( from, referee_state.player_data[ i ].id, ( uint16_t )referee_state.player_data[ i ].Px, ( uint16_t )referee_state.player_data[ i ].Py, referee_state.player_data[ i ].s );
 800b7b2:	1deb      	adds	r3, r5, #7
 800b7b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7b8:	f7f5 f9ec 	bl	8000b94 <__aeabi_d2uiz>
 800b7bc:	f8b5 3027 	ldrh.w	r3, [r5, #39]	; 0x27
 800b7c0:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 800b7c4:	9301      	str	r3, [sp, #4]
 800b7c6:	f105 030f 	add.w	r3, r5, #15
 800b7ca:	fa1f fb80 	uxth.w	fp, r0
 800b7ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7d2:	f7f5 f9df 	bl	8000b94 <__aeabi_d2uiz>
 800b7d6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800b7da:	b280      	uxth	r0, r0
 800b7dc:	9000      	str	r0, [sp, #0]
 800b7de:	465b      	mov	r3, fp
 800b7e0:	4652      	mov	r2, sl
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	4649      	mov	r1, r9
 800b7e6:	f7ff ff05 	bl	800b5f4 <bum_game_player_move>
					for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b7ea:	3701      	adds	r7, #1
 800b7ec:	3540      	adds	r5, #64	; 0x40
 800b7ee:	e7b7      	b.n	800b760 <bum_process_referee+0xec>
						bum_game_new_player( referee_state.player_data[ i ].addr, d->id, d->name, d->color );
 800b7f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b7f2:	9300      	str	r3, [sp, #0]
 800b7f4:	e955 0110 	ldrd	r0, r1, [r5, #-64]	; 0x40
 800b7f8:	4653      	mov	r3, sl
 800b7fa:	f7ff feca 	bl	800b592 <bum_game_new_player>
						bum_game_player_move( referee_state.player_data[ i ].addr, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800b7fe:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800b802:	f7f5 f9c7 	bl	8000b94 <__aeabi_d2uiz>
 800b806:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 800b808:	f894 b008 	ldrb.w	fp, [r4, #8]
 800b80c:	e955 8910 	ldrd	r8, r9, [r5, #-64]	; 0x40
 800b810:	9201      	str	r2, [sp, #4]
 800b812:	b283      	uxth	r3, r0
 800b814:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 800b818:	9303      	str	r3, [sp, #12]
 800b81a:	f7f5 f9bb 	bl	8000b94 <__aeabi_d2uiz>
 800b81e:	b280      	uxth	r0, r0
 800b820:	9000      	str	r0, [sp, #0]
 800b822:	9b03      	ldr	r3, [sp, #12]
 800b824:	465a      	mov	r2, fp
 800b826:	4640      	mov	r0, r8
 800b828:	4649      	mov	r1, r9
 800b82a:	f7ff fee3 	bl	800b5f4 <bum_game_player_move>
					for ( i = 0 ; i < referee_state.n_players - 1 ; i++ )
 800b82e:	3701      	adds	r7, #1
 800b830:	e79e      	b.n	800b770 <bum_process_referee+0xfc>
		xbee_recv_full( data, &len );
 800b832:	f10d 0116 	add.w	r1, sp, #22
 800b836:	4802      	ldr	r0, [pc, #8]	; (800b840 <bum_process_referee+0x1cc>)
 800b838:	f001 febe 	bl	800d5b8 <xbee_recv_full>
		break;
 800b83c:	e72d      	b.n	800b69a <bum_process_referee+0x26>
 800b83e:	bf00      	nop
 800b840:	20000df8 	.word	0x20000df8
 800b844:	20000de8 	.word	0x20000de8
 800b848:	20005070 	.word	0x20005070
 800b84c:	20000df9 	.word	0x20000df9
 800b850:	08010e1e 	.word	0x08010e1e
 800b854:	20005079 	.word	0x20005079

0800b858 <bum_referee_calculate>:

void bum_referee_calculate( uint16_t dt )
{
 800b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( !referee_state.game_started ) return;
 800b85c:	4b76      	ldr	r3, [pc, #472]	; (800ba38 <bum_referee_calculate+0x1e0>)
{
 800b85e:	b0af      	sub	sp, #188	; 0xbc
  if ( !referee_state.game_started ) return;
 800b860:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
{
 800b864:	9025      	str	r0, [sp, #148]	; 0x94
 800b866:	9324      	str	r3, [sp, #144]	; 0x90
  if ( !referee_state.game_started ) return;
 800b868:	b35a      	cbz	r2, 800b8c2 <bum_referee_calculate+0x6a>

  int i, j;
  PlayerData *d;

  int n_playing = 0;
  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b86a:	f04f 0b00 	mov.w	fp, #0
 800b86e:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 800b872:	465b      	mov	r3, fp
 800b874:	4293      	cmp	r3, r2
 800b876:	db27      	blt.n	800b8c8 <bum_referee_calculate+0x70>
 800b878:	2300      	movs	r3, #0
 800b87a:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 800ba38 <bum_referee_calculate+0x1e0>
 800b87e:	9309      	str	r3, [sp, #36]	; 0x24
	d = referee_state.player_data + i;

	if ( d->playing ) n_playing++;
  }

  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b880:	4a6d      	ldr	r2, [pc, #436]	; (800ba38 <bum_referee_calculate+0x1e0>)
 800b882:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
 800b886:	930d      	str	r3, [sp, #52]	; 0x34
 800b888:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b88a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b88c:	428b      	cmp	r3, r1
 800b88e:	db25      	blt.n	800b8dc <bum_referee_calculate+0x84>
	}

  }


  if ( n_playing == 0 )
 800b890:	f1bb 0f00 	cmp.w	fp, #0
 800b894:	f040 8212 	bne.w	800bcbc <bum_referee_calculate+0x464>
  {
	  // No winner
	  bum_game_print( BUM_TO_ALL, "No winner..." );
 800b898:	4a68      	ldr	r2, [pc, #416]	; (800ba3c <bum_referee_calculate+0x1e4>)
	if ( d )
	{ bum_game_step( BUM_TO_ALL, BUM_STEP_RESULT, d->id ); }

	char buffer[ BUM_MSG_SIZE ];
	sprintf( buffer, "The winner is %s", d->name );
	bum_game_print( BUM_TO_ALL, buffer );
 800b89a:	f04f 31ff 	mov.w	r1, #4294967295
 800b89e:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a2:	f7ff fec7 	bl	800b634 <bum_game_print>

	bum_game_step( BUM_TO_ALL, BUM_STEP_END, 0 );
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	2203      	movs	r2, #3
 800b8aa:	f04f 31ff 	mov.w	r1, #4294967295
 800b8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b2:	f7ff fe5f 	bl	800b574 <bum_game_step>
	bumper_state.referee->game_over();
 800b8b6:	4b62      	ldr	r3, [pc, #392]	; (800ba40 <bum_referee_calculate+0x1e8>)
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	4798      	blx	r3

    bums_referee_reset();
 800b8be:	f7ff fe35 	bl	800b52c <bums_referee_reset>
#endif
  }

}
 800b8c2:	b02f      	add	sp, #188	; 0xbc
 800b8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ( d->playing ) n_playing++;
 800b8c8:	9924      	ldr	r1, [sp, #144]	; 0x90
 800b8ca:	eb01 1183 	add.w	r1, r1, r3, lsl #6
 800b8ce:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 800b8d2:	b109      	cbz	r1, 800b8d8 <bum_referee_calculate+0x80>
 800b8d4:	f10b 0b01 	add.w	fp, fp, #1
  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b8d8:	3301      	adds	r3, #1
 800b8da:	e7cb      	b.n	800b874 <bum_referee_calculate+0x1c>
	if ( !d->playing ) continue;
 800b8dc:	f89a 303c 	ldrb.w	r3, [sl, #60]	; 0x3c
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f000 8097 	beq.w	800ba14 <bum_referee_calculate+0x1bc>
	double sdt = ( ( double )dt );
 800b8e6:	9825      	ldr	r0, [sp, #148]	; 0x94
 800b8e8:	f7f4 fe1c 	bl	8000524 <__aeabi_ui2d>
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	460d      	mov	r5, r1
	d->Vx += ( ( double )d->ax ) * sdt * Vfactor;
 800b8f0:	f99a 0034 	ldrsb.w	r0, [sl, #52]	; 0x34
 800b8f4:	f7f4 fe26 	bl	8000544 <__aeabi_i2d>
 800b8f8:	4622      	mov	r2, r4
 800b8fa:	462b      	mov	r3, r5
 800b8fc:	f7f4 fe88 	bl	8000610 <__aeabi_dmul>
 800b900:	a347      	add	r3, pc, #284	; (adr r3, 800ba20 <bum_referee_calculate+0x1c8>)
 800b902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b906:	f7f4 fe83 	bl	8000610 <__aeabi_dmul>
 800b90a:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 800b90e:	f7f4 fccd 	bl	80002ac <__adddf3>
 800b912:	4680      	mov	r8, r0
 800b914:	4689      	mov	r9, r1
 800b916:	e9ca 8908 	strd	r8, r9, [sl, #32]
	d->Vy += ( ( double )d->ay ) * sdt * Vfactor;
 800b91a:	f99a 0035 	ldrsb.w	r0, [sl, #53]	; 0x35
 800b91e:	f7f4 fe11 	bl	8000544 <__aeabi_i2d>
 800b922:	4622      	mov	r2, r4
 800b924:	462b      	mov	r3, r5
 800b926:	f7f4 fe73 	bl	8000610 <__aeabi_dmul>
 800b92a:	a33d      	add	r3, pc, #244	; (adr r3, 800ba20 <bum_referee_calculate+0x1c8>)
 800b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b930:	f7f4 fe6e 	bl	8000610 <__aeabi_dmul>
 800b934:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 800b938:	f7f4 fcb8 	bl	80002ac <__adddf3>
 800b93c:	4606      	mov	r6, r0
 800b93e:	460f      	mov	r7, r1
	d->Px += d->Vx * sdt * Pfactor;
 800b940:	4642      	mov	r2, r8
 800b942:	464b      	mov	r3, r9
	d->Vy += ( ( double )d->ay ) * sdt * Vfactor;
 800b944:	e9ca 670a 	strd	r6, r7, [sl, #40]	; 0x28
	d->Px += d->Vx * sdt * Pfactor;
 800b948:	4620      	mov	r0, r4
 800b94a:	4629      	mov	r1, r5
 800b94c:	f7f4 fe60 	bl	8000610 <__aeabi_dmul>
 800b950:	a335      	add	r3, pc, #212	; (adr r3, 800ba28 <bum_referee_calculate+0x1d0>)
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	f7f4 fe5b 	bl	8000610 <__aeabi_dmul>
 800b95a:	e9da 2304 	ldrd	r2, r3, [sl, #16]
 800b95e:	f7f4 fca5 	bl	80002ac <__adddf3>
	d->Py += d->Vy * sdt * Pfactor;
 800b962:	4632      	mov	r2, r6
	d->Px += d->Vx * sdt * Pfactor;
 800b964:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b968:	e9ca 0104 	strd	r0, r1, [sl, #16]
	d->Py += d->Vy * sdt * Pfactor;
 800b96c:	463b      	mov	r3, r7
 800b96e:	4620      	mov	r0, r4
 800b970:	4629      	mov	r1, r5
 800b972:	f7f4 fe4d 	bl	8000610 <__aeabi_dmul>
 800b976:	a32c      	add	r3, pc, #176	; (adr r3, 800ba28 <bum_referee_calculate+0x1d0>)
 800b978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97c:	f7f4 fe48 	bl	8000610 <__aeabi_dmul>
 800b980:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 800b984:	f7f4 fc92 	bl	80002ac <__adddf3>
	if ( ( d->Px < 0 ) || ( d->Px > BOARD_W ) || ( d->Py < 0 ) || ( d->Py > BOARD_H ) )
 800b988:	2200      	movs	r2, #0
	d->Py += d->Vy * sdt * Pfactor;
 800b98a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b98e:	e9ca 0106 	strd	r0, r1, [sl, #24]
	if ( ( d->Px < 0 ) || ( d->Px > BOARD_W ) || ( d->Py < 0 ) || ( d->Py > BOARD_H ) )
 800b992:	2300      	movs	r3, #0
 800b994:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b998:	f7f5 f8ac 	bl	8000af4 <__aeabi_dcmplt>
 800b99c:	b9b0      	cbnz	r0, 800b9cc <bum_referee_calculate+0x174>
 800b99e:	2200      	movs	r2, #0
 800b9a0:	4b28      	ldr	r3, [pc, #160]	; (800ba44 <bum_referee_calculate+0x1ec>)
 800b9a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9a6:	f7f5 f8c3 	bl	8000b30 <__aeabi_dcmpgt>
 800b9aa:	b978      	cbnz	r0, 800b9cc <bum_referee_calculate+0x174>
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9b4:	f7f5 f89e 	bl	8000af4 <__aeabi_dcmplt>
 800b9b8:	b940      	cbnz	r0, 800b9cc <bum_referee_calculate+0x174>
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	4b21      	ldr	r3, [pc, #132]	; (800ba44 <bum_referee_calculate+0x1ec>)
 800b9be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9c2:	f7f5 f8b5 	bl	8000b30 <__aeabi_dcmpgt>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	f000 8175 	beq.w	800bcb6 <bum_referee_calculate+0x45e>
		d->Py = 50 + ( n_playing * d->r );
 800b9cc:	f8ba 5032 	ldrh.w	r5, [sl, #50]	; 0x32
		d->Px = 0; // - d->r / 2;
 800b9d0:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800ba30 <bum_referee_calculate+0x1d8>
		d->Py = 50 + ( n_playing * d->r );
 800b9d4:	fb0b f405 	mul.w	r4, fp, r5
		d->playing = 0;
 800b9d8:	2600      	movs	r6, #0
		d->Py = 50 + ( n_playing * d->r );
 800b9da:	3432      	adds	r4, #50	; 0x32
 800b9dc:	4620      	mov	r0, r4
		d->playing = 0;
 800b9de:	f88a 603c 	strb.w	r6, [sl, #60]	; 0x3c
		d->Px = 0; // - d->r / 2;
 800b9e2:	ed8a 7b04 	vstr	d7, [sl, #16]
		d->Py = 50 + ( n_playing * d->r );
 800b9e6:	f7f4 fdad 	bl	8000544 <__aeabi_i2d>
 800b9ea:	e9ca 0106 	strd	r0, r1, [sl, #24]
		d->s = 400;
 800b9ee:	f44f 73c8 	mov.w	r3, #400	; 0x190
		d->r /= 2;
 800b9f2:	086d      	lsrs	r5, r5, #1
        bum_game_player_move( BUM_TO_ALL, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800b9f4:	b2a4      	uxth	r4, r4
 800b9f6:	f89a 2008 	ldrb.w	r2, [sl, #8]
		d->s = 400;
 800b9fa:	f8aa 3030 	strh.w	r3, [sl, #48]	; 0x30
        bum_game_player_move( BUM_TO_ALL, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800b9fe:	9301      	str	r3, [sp, #4]
		d->r /= 2;
 800ba00:	f8aa 5032 	strh.w	r5, [sl, #50]	; 0x32
        bum_game_player_move( BUM_TO_ALL, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800ba04:	9400      	str	r4, [sp, #0]
 800ba06:	4633      	mov	r3, r6
	      bum_game_player_move( BUM_TO_ALL, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800ba08:	f04f 30ff 	mov.w	r0, #4294967295
 800ba0c:	f04f 31ff 	mov.w	r1, #4294967295
 800ba10:	f7ff fdf0 	bl	800b5f4 <bum_game_player_move>
  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800ba14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba16:	3301      	adds	r3, #1
 800ba18:	9309      	str	r3, [sp, #36]	; 0x24
 800ba1a:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
 800ba1e:	e72f      	b.n	800b880 <bum_referee_calculate+0x28>
 800ba20:	eb1c432d 	.word	0xeb1c432d
 800ba24:	3f2a36e2 	.word	0x3f2a36e2
 800ba28:	bc6a7efa 	.word	0xbc6a7efa
 800ba2c:	3f489374 	.word	0x3f489374
	...
 800ba38:	20005070 	.word	0x20005070
 800ba3c:	08010e26 	.word	0x08010e26
 800ba40:	20000de8 	.word	0x20000de8
 800ba44:	408f4000 	.word	0x408f4000
			  if ( i == j ) continue;
 800ba48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	f000 8116 	beq.w	800bc7e <bum_referee_calculate+0x426>
  			  if ( !e->playing ) continue;
 800ba52:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f000 8111 	beq.w	800bc7e <bum_referee_calculate+0x426>
  			  int16_t dx = d->Px - e->Px;
 800ba5c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800ba60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba64:	f7f4 fc20 	bl	80002a8 <__aeabi_dsub>
 800ba68:	f7f5 f86c 	bl	8000b44 <__aeabi_d2iz>
  			  int16_t dy = d->Py - e->Py;
 800ba6c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
  			  int16_t dx = d->Px - e->Px;
 800ba70:	b206      	sxth	r6, r0
  			  int16_t dy = d->Py - e->Py;
 800ba72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba76:	f7f4 fc17 	bl	80002a8 <__aeabi_dsub>
 800ba7a:	f7f5 f863 	bl	8000b44 <__aeabi_d2iz>
  			  int32_t DR = d->r + e->r;
 800ba7e:	f8ba 3032 	ldrh.w	r3, [sl, #50]	; 0x32
 800ba82:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  			  int16_t dy = d->Py - e->Py;
 800ba84:	b200      	sxth	r0, r0
  			  int32_t D = dx * dx + dy * dy;
 800ba86:	fb06 f806 	mul.w	r8, r6, r6
 800ba8a:	fb00 f900 	mul.w	r9, r0, r0
  			  int32_t DR = d->r + e->r;
 800ba8e:	4413      	add	r3, r2
  			  int32_t D = dx * dx + dy * dy;
 800ba90:	eb08 0509 	add.w	r5, r8, r9
  			  DR = DR * DR;
 800ba94:	435b      	muls	r3, r3
  			  if ( D <= DR )
 800ba96:	429d      	cmp	r5, r3
 800ba98:	f300 80f1 	bgt.w	800bc7e <bum_referee_calculate+0x426>
  				double x1 = (yi2*b1*a1 - yi1*b1*a1 + b1*b1*xi1 + a1*a1*xi2)/(D);
 800ba9c:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
  				  if ( D == 0 ) D = 1;
 800baa0:	2d00      	cmp	r5, #0
 800baa2:	bf08      	it	eq
 800baa4:	2501      	moveq	r5, #1
  				double x1 = (yi2*b1*a1 - yi1*b1*a1 + b1*b1*xi1 + a1*a1*xi2)/(D);
 800baa6:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800baaa:	f7f4 fd4b 	bl	8000544 <__aeabi_i2d>
 800baae:	4602      	mov	r2, r0
 800bab0:	460b      	mov	r3, r1
 800bab2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bab6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800baba:	f7f4 fda9 	bl	8000610 <__aeabi_dmul>
 800babe:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800bac2:	4630      	mov	r0, r6
 800bac4:	f7f4 fd3e 	bl	8000544 <__aeabi_i2d>
 800bac8:	4606      	mov	r6, r0
 800baca:	460f      	mov	r7, r1
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800bad4:	f7f4 fd9c 	bl	8000610 <__aeabi_dmul>
 800bad8:	ed9a 7b0a 	vldr	d7, [sl, #40]	; 0x28
 800badc:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 800bae0:	ec53 2b17 	vmov	r2, r3, d7
 800bae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bae8:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800baec:	f7f4 fd90 	bl	8000610 <__aeabi_dmul>
 800baf0:	4602      	mov	r2, r0
 800baf2:	460b      	mov	r3, r1
 800baf4:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800baf8:	4630      	mov	r0, r6
 800bafa:	4639      	mov	r1, r7
 800bafc:	f7f4 fd88 	bl	8000610 <__aeabi_dmul>
 800bb00:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 800bb04:	4648      	mov	r0, r9
 800bb06:	f7f4 fd1d 	bl	8000544 <__aeabi_i2d>
 800bb0a:	ed9a 7b08 	vldr	d7, [sl, #32]
 800bb0e:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 800bb12:	4640      	mov	r0, r8
 800bb14:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800bb18:	f7f4 fd14 	bl	8000544 <__aeabi_i2d>
 800bb1c:	ed94 7b08 	vldr	d7, [r4, #32]
 800bb20:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bb24:	4628      	mov	r0, r5
 800bb26:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bb2a:	f7f4 fd0b 	bl	8000544 <__aeabi_i2d>
  				double y1 = (yi2*b1*b1 + b1*xi2*a1 - a1*xi1*b1 + a1*a1*yi1)/(D);
 800bb2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  				double x1 = (yi2*b1*a1 - yi1*b1*a1 + b1*b1*xi1 + a1*a1*xi2)/(D);
 800bb32:	4680      	mov	r8, r0
 800bb34:	4689      	mov	r9, r1
  				double y1 = (yi2*b1*b1 + b1*xi2*a1 - a1*xi1*b1 + a1*a1*yi1)/(D);
 800bb36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb3a:	f7f4 fd69 	bl	8000610 <__aeabi_dmul>
 800bb3e:	4632      	mov	r2, r6
 800bb40:	463b      	mov	r3, r7
 800bb42:	f7f4 fd65 	bl	8000610 <__aeabi_dmul>
 800bb46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bb4a:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 800bb4e:	4630      	mov	r0, r6
 800bb50:	4639      	mov	r1, r7
 800bb52:	f7f4 fd5d 	bl	8000610 <__aeabi_dmul>
 800bb56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb5a:	f7f4 fd59 	bl	8000610 <__aeabi_dmul>
  				double x1 = (yi2*b1*a1 - yi1*b1*a1 + b1*b1*xi1 + a1*a1*xi2)/(D);
 800bb5e:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  				double y1 = (yi2*b1*b1 + b1*xi2*a1 - a1*xi1*b1 + a1*a1*yi1)/(D);
 800bb62:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
  				double x1 = (yi2*b1*a1 - yi1*b1*a1 + b1*b1*xi1 + a1*a1*xi2)/(D);
 800bb66:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800bb6a:	f7f4 fb9d 	bl	80002a8 <__aeabi_dsub>
 800bb6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bb72:	4606      	mov	r6, r0
 800bb74:	460f      	mov	r7, r1
 800bb76:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800bb7a:	f7f4 fd49 	bl	8000610 <__aeabi_dmul>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	460b      	mov	r3, r1
 800bb82:	4630      	mov	r0, r6
 800bb84:	4639      	mov	r1, r7
 800bb86:	f7f4 fb91 	bl	80002ac <__adddf3>
 800bb8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb8e:	4606      	mov	r6, r0
 800bb90:	460f      	mov	r7, r1
 800bb92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bb96:	f7f4 fd3b 	bl	8000610 <__aeabi_dmul>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	4630      	mov	r0, r6
 800bba0:	4639      	mov	r1, r7
 800bba2:	f7f4 fb83 	bl	80002ac <__adddf3>
 800bba6:	4642      	mov	r2, r8
 800bba8:	464b      	mov	r3, r9
 800bbaa:	f7f4 fe5b 	bl	8000864 <__aeabi_ddiv>
  				double y1 = (yi2*b1*b1 + b1*xi2*a1 - a1*xi1*b1 + a1*a1*yi1)/(D);
 800bbae:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
				d->Vx = x1;
 800bbb2:	e9ca 0108 	strd	r0, r1, [sl, #32]
  				double y1 = (yi2*b1*b1 + b1*xi2*a1 - a1*xi1*b1 + a1*a1*yi1)/(D);
 800bbb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbba:	f7f4 fd29 	bl	8000610 <__aeabi_dmul>
 800bbbe:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800bbc2:	f7f4 fb73 	bl	80002ac <__adddf3>
 800bbc6:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800bbca:	f7f4 fb6d 	bl	80002a8 <__aeabi_dsub>
 800bbce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	460f      	mov	r7, r1
 800bbd6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800bbda:	f7f4 fd19 	bl	8000610 <__aeabi_dmul>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	4639      	mov	r1, r7
 800bbe6:	f7f4 fb61 	bl	80002ac <__adddf3>
 800bbea:	4642      	mov	r2, r8
 800bbec:	464b      	mov	r3, r9
 800bbee:	f7f4 fe39 	bl	8000864 <__aeabi_ddiv>
  				double x2 = (a1*a1*xi1 - yi2*b1*a1 + yi1*b1*a1 + b1*b1*xi2)/(D);
 800bbf2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
				d->Vy = y1;
 800bbf6:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
  				double x2 = (a1*a1*xi1 - yi2*b1*a1 + yi1*b1*a1 + b1*b1*xi2)/(D);
 800bbfa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bbfe:	f7f4 fd07 	bl	8000610 <__aeabi_dmul>
 800bc02:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800bc06:	f7f4 fb4f 	bl	80002a8 <__aeabi_dsub>
 800bc0a:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800bc0e:	f7f4 fb4d 	bl	80002ac <__adddf3>
 800bc12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bc16:	4606      	mov	r6, r0
 800bc18:	460f      	mov	r7, r1
 800bc1a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800bc1e:	f7f4 fcf7 	bl	8000610 <__aeabi_dmul>
 800bc22:	4602      	mov	r2, r0
 800bc24:	460b      	mov	r3, r1
 800bc26:	4630      	mov	r0, r6
 800bc28:	4639      	mov	r1, r7
 800bc2a:	f7f4 fb3f 	bl	80002ac <__adddf3>
 800bc2e:	4642      	mov	r2, r8
 800bc30:	464b      	mov	r3, r9
 800bc32:	f7f4 fe17 	bl	8000864 <__aeabi_ddiv>
  				double y2 = (a1*xi1*b1 + yi1*b1*b1 - b1*xi2*a1 + a1*a1*yi2)/(D);
 800bc36:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
				e->Vx = x2;
 800bc3a:	e9c4 0108 	strd	r0, r1, [r4, #32]
  				double y2 = (a1*xi1*b1 + yi1*b1*b1 - b1*xi2*a1 + a1*a1*yi2)/(D);
 800bc3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc42:	f7f4 fce5 	bl	8000610 <__aeabi_dmul>
 800bc46:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800bc4a:	f7f4 fb2f 	bl	80002ac <__adddf3>
 800bc4e:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800bc52:	f7f4 fb29 	bl	80002a8 <__aeabi_dsub>
 800bc56:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bc5a:	4606      	mov	r6, r0
 800bc5c:	460f      	mov	r7, r1
 800bc5e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800bc62:	f7f4 fcd5 	bl	8000610 <__aeabi_dmul>
 800bc66:	4602      	mov	r2, r0
 800bc68:	460b      	mov	r3, r1
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	4639      	mov	r1, r7
 800bc6e:	f7f4 fb1d 	bl	80002ac <__adddf3>
 800bc72:	4642      	mov	r2, r8
 800bc74:	464b      	mov	r3, r9
 800bc76:	f7f4 fdf5 	bl	8000864 <__aeabi_ddiv>
				e->Vy = y2;
 800bc7a:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
		  for ( j = 0 ; j < referee_state.n_players ; j++ )
 800bc7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc80:	3301      	adds	r3, #1
 800bc82:	930c      	str	r3, [sp, #48]	; 0x30
 800bc84:	3440      	adds	r4, #64	; 0x40
 800bc86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	f47f aedc 	bne.w	800ba48 <bum_referee_calculate+0x1f0>
	      bum_game_player_move( BUM_TO_ALL, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800bc90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc94:	f7f4 ff7e 	bl	8000b94 <__aeabi_d2uiz>
 800bc98:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 800bc9c:	9301      	str	r3, [sp, #4]
 800bc9e:	b285      	uxth	r5, r0
 800bca0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bca4:	f7f4 ff76 	bl	8000b94 <__aeabi_d2uiz>
 800bca8:	f89a 4008 	ldrb.w	r4, [sl, #8]
 800bcac:	b280      	uxth	r0, r0
 800bcae:	9000      	str	r0, [sp, #0]
 800bcb0:	462b      	mov	r3, r5
 800bcb2:	4622      	mov	r2, r4
 800bcb4:	e6a8      	b.n	800ba08 <bum_referee_calculate+0x1b0>
 800bcb6:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800bcb8:	900c      	str	r0, [sp, #48]	; 0x30
 800bcba:	e7e4      	b.n	800bc86 <bum_referee_calculate+0x42e>
  else  if ( n_playing == 1 )
 800bcbc:	f1bb 0f01 	cmp.w	fp, #1
 800bcc0:	f47f adff 	bne.w	800b8c2 <bum_referee_calculate+0x6a>
 800bcc4:	2300      	movs	r3, #0
	  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800bcc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bcc8:	428b      	cmp	r3, r1
 800bcca:	db01      	blt.n	800bcd0 <bum_referee_calculate+0x478>
	  d = 0;
 800bccc:	2400      	movs	r4, #0
 800bcce:	e005      	b.n	800bcdc <bum_referee_calculate+0x484>
		if ( referee_state.player_data[ i ].playing )
 800bcd0:	eb02 1483 	add.w	r4, r2, r3, lsl #6
 800bcd4:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800bcd8:	b141      	cbz	r1, 800bcec <bum_referee_calculate+0x494>
	if ( d )
 800bcda:	b94c      	cbnz	r4, 800bcf0 <bum_referee_calculate+0x498>
	sprintf( buffer, "The winner is %s", d->name );
 800bcdc:	f104 0209 	add.w	r2, r4, #9
 800bce0:	4908      	ldr	r1, [pc, #32]	; (800bd04 <bum_referee_calculate+0x4ac>)
 800bce2:	a827      	add	r0, sp, #156	; 0x9c
 800bce4:	f002 f83a 	bl	800dd5c <siprintf>
	bum_game_print( BUM_TO_ALL, buffer );
 800bce8:	aa27      	add	r2, sp, #156	; 0x9c
 800bcea:	e5d6      	b.n	800b89a <bum_referee_calculate+0x42>
	  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800bcec:	3301      	adds	r3, #1
 800bcee:	e7ea      	b.n	800bcc6 <bum_referee_calculate+0x46e>
	{ bum_game_step( BUM_TO_ALL, BUM_STEP_RESULT, d->id ); }
 800bcf0:	7a23      	ldrb	r3, [r4, #8]
 800bcf2:	2202      	movs	r2, #2
 800bcf4:	f04f 31ff 	mov.w	r1, #4294967295
 800bcf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcfc:	f7ff fc3a 	bl	800b574 <bum_game_step>
 800bd00:	e7ec      	b.n	800bcdc <bum_referee_calculate+0x484>
 800bd02:	bf00      	nop
 800bd04:	08010e33 	.word	0x08010e33

0800bd08 <bum_referee_start_game>:

void bum_referee_start_game()
{
  if ( referee_state.game_started ) return;
 800bd08:	4b0c      	ldr	r3, [pc, #48]	; (800bd3c <bum_referee_start_game+0x34>)
{
 800bd0a:	b570      	push	{r4, r5, r6, lr}
  if ( referee_state.game_started ) return;
 800bd0c:	f8d3 5520 	ldr.w	r5, [r3, #1312]	; 0x520
 800bd10:	b99d      	cbnz	r5, 800bd3a <bum_referee_start_game+0x32>

  referee_state.game_started = 1;
 800bd12:	2401      	movs	r4, #1

  bum_game_print( BUM_TO_ALL, "START !" );
 800bd14:	4a0a      	ldr	r2, [pc, #40]	; (800bd40 <bum_referee_start_game+0x38>)
  referee_state.game_started = 1;
 800bd16:	f8c3 4520 	str.w	r4, [r3, #1312]	; 0x520
  bum_game_print( BUM_TO_ALL, "START !" );
 800bd1a:	f04f 31ff 	mov.w	r1, #4294967295
 800bd1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd22:	f7ff fc87 	bl	800b634 <bum_game_print>

  bum_game_step( BUM_TO_ALL, BUM_STEP_START, 0 );
 800bd26:	462b      	mov	r3, r5
 800bd28:	4622      	mov	r2, r4
 800bd2a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2e:	f04f 31ff 	mov.w	r1, #4294967295
}
 800bd32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  bum_game_step( BUM_TO_ALL, BUM_STEP_START, 0 );
 800bd36:	f7ff bc1d 	b.w	800b574 <bum_game_step>
 800bd3a:	bd70      	pop	{r4, r5, r6, pc}
 800bd3c:	20005070 	.word	0x20005070
 800bd40:	08010e44 	.word	0x08010e44

0800bd44 <bum_referee_get_n_players>:

int bum_referee_get_n_players()
{
	return referee_state.n_players;
}
 800bd44:	4b01      	ldr	r3, [pc, #4]	; (800bd4c <bum_referee_get_n_players+0x8>)
 800bd46:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800bd4a:	4770      	bx	lr
 800bd4c:	20005070 	.word	0x20005070

0800bd50 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bd50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800bd54:	4a25      	ldr	r2, [pc, #148]	; (800bdec <low_level_output+0x9c>)
 800bd56:	9200      	str	r2, [sp, #0]
 800bd58:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800bd5a:	f04f 0800 	mov.w	r8, #0
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800bd5e:	68ab      	ldr	r3, [r5, #8]
{
 800bd60:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 800bd62:	4647      	mov	r7, r8
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bd64:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  for(q = p; q != NULL; q = q->next)
 800bd68:	b92c      	cbnz	r4, 800bd76 <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800bd6a:	4639      	mov	r1, r7
 800bd6c:	481f      	ldr	r0, [pc, #124]	; (800bdec <low_level_output+0x9c>)
 800bd6e:	f7f5 fcdb 	bl	8001728 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800bd72:	4620      	mov	r0, r4
 800bd74:	e004      	b.n	800bd80 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bd76:	682a      	ldr	r2, [r5, #0]
 800bd78:	2a00      	cmp	r2, #0
 800bd7a:	da11      	bge.n	800bda0 <low_level_output+0x50>
        errval = ERR_USE;
 800bd7c:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800bd80:	9b00      	ldr	r3, [sp, #0]
 800bd82:	f241 0214 	movw	r2, #4116	; 0x1014
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	5899      	ldr	r1, [r3, r2]
 800bd8a:	0689      	lsls	r1, r1, #26
 800bd8c:	d505      	bpl.n	800bd9a <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800bd8e:	2120      	movs	r1, #32
 800bd90:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800bd92:	f241 0204 	movw	r2, #4100	; 0x1004
 800bd96:	2100      	movs	r1, #0
 800bd98:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800bd9a:	b003      	add	sp, #12
 800bd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 800bda0:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bda4:	4646      	mov	r6, r8
      payloadoffset = 0;
 800bda6:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bdaa:	eb06 0809 	add.w	r8, r6, r9
 800bdae:	45d8      	cmp	r8, fp
 800bdb0:	eb03 0006 	add.w	r0, r3, r6
 800bdb4:	6861      	ldr	r1, [r4, #4]
 800bdb6:	d808      	bhi.n	800bdca <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800bdb8:	464a      	mov	r2, r9
 800bdba:	4451      	add	r1, sl
 800bdbc:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800bdbe:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800bdc0:	f001 fee5 	bl	800db8e <memcpy>
  for(q = p; q != NULL; q = q->next)
 800bdc4:	6824      	ldr	r4, [r4, #0]
 800bdc6:	9b01      	ldr	r3, [sp, #4]
 800bdc8:	e7ce      	b.n	800bd68 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800bdca:	ebab 0606 	sub.w	r6, fp, r6
 800bdce:	4632      	mov	r2, r6
 800bdd0:	4451      	add	r1, sl
 800bdd2:	f001 fedc 	bl	800db8e <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800bdd6:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bdd8:	682b      	ldr	r3, [r5, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	dbce      	blt.n	800bd7c <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800bdde:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800bde0:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800bde2:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800bde4:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 800bde8:	2600      	movs	r6, #0
 800bdea:	e7de      	b.n	800bdaa <low_level_output+0x5a>
 800bdec:	20006e68 	.word	0x20006e68

0800bdf0 <HAL_ETH_MspInit>:
{
 800bdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bdf6:	2214      	movs	r2, #20
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	a807      	add	r0, sp, #28
 800bdfc:	f001 fed2 	bl	800dba4 <memset>
  if(ethHandle->Instance==ETH)
 800be00:	6822      	ldr	r2, [r4, #0]
 800be02:	4b32      	ldr	r3, [pc, #200]	; (800becc <HAL_ETH_MspInit+0xdc>)
 800be04:	429a      	cmp	r2, r3
 800be06:	d15f      	bne.n	800bec8 <HAL_ETH_MspInit+0xd8>
    __HAL_RCC_ETH_CLK_ENABLE();
 800be08:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800be0c:	2400      	movs	r4, #0
 800be0e:	9401      	str	r4, [sp, #4]
 800be10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800be12:	482f      	ldr	r0, [pc, #188]	; (800bed0 <HAL_ETH_MspInit+0xe0>)
    __HAL_RCC_ETH_CLK_ENABLE();
 800be14:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800be18:	631a      	str	r2, [r3, #48]	; 0x30
 800be1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be1c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800be20:	9201      	str	r2, [sp, #4]
 800be22:	9a01      	ldr	r2, [sp, #4]
 800be24:	9402      	str	r4, [sp, #8]
 800be26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be28:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800be2c:	631a      	str	r2, [r3, #48]	; 0x30
 800be2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be30:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800be34:	9202      	str	r2, [sp, #8]
 800be36:	9a02      	ldr	r2, [sp, #8]
 800be38:	9403      	str	r4, [sp, #12]
 800be3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be3c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800be40:	631a      	str	r2, [r3, #48]	; 0x30
 800be42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be44:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800be48:	9203      	str	r2, [sp, #12]
 800be4a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800be4c:	9404      	str	r4, [sp, #16]
 800be4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be50:	f042 0204 	orr.w	r2, r2, #4
 800be54:	631a      	str	r2, [r3, #48]	; 0x30
 800be56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be58:	f002 0204 	and.w	r2, r2, #4
 800be5c:	9204      	str	r2, [sp, #16]
 800be5e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be60:	9405      	str	r4, [sp, #20]
 800be62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be64:	f042 0201 	orr.w	r2, r2, #1
 800be68:	631a      	str	r2, [r3, #48]	; 0x30
 800be6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be6c:	f002 0201 	and.w	r2, r2, #1
 800be70:	9205      	str	r2, [sp, #20]
 800be72:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800be74:	9406      	str	r4, [sp, #24]
 800be76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be78:	f042 0202 	orr.w	r2, r2, #2
 800be7c:	631a      	str	r2, [r3, #48]	; 0x30
 800be7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be80:	f003 0302 	and.w	r3, r3, #2
 800be84:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be86:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be88:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800be8a:	250b      	movs	r5, #11
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800be8c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be8e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800be90:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800be92:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800be94:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be96:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800be98:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800be9a:	f7f5 fea1 	bl	8001be0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800be9e:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bea0:	a907      	add	r1, sp, #28
 800bea2:	480c      	ldr	r0, [pc, #48]	; (800bed4 <HAL_ETH_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800bea4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bea6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bea8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800beaa:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800beac:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800beae:	f7f5 fe97 	bl	8001be0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800beb2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800beb6:	a907      	add	r1, sp, #28
 800beb8:	4807      	ldr	r0, [pc, #28]	; (800bed8 <HAL_ETH_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800beba:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bebc:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bebe:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bec0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bec2:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bec4:	f7f5 fe8c 	bl	8001be0 <HAL_GPIO_Init>
}
 800bec8:	b00d      	add	sp, #52	; 0x34
 800beca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800becc:	40028000 	.word	0x40028000
 800bed0:	40020800 	.word	0x40020800
 800bed4:	40020000 	.word	0x40020000
 800bed8:	40020400 	.word	0x40020400

0800bedc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800bedc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800bee0:	4c35      	ldr	r4, [pc, #212]	; (800bfb8 <ethernetif_input+0xdc>)
{
 800bee2:	9001      	str	r0, [sp, #4]
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800bee4:	4620      	mov	r0, r4
 800bee6:	f7f5 fc93 	bl	8001810 <HAL_ETH_GetReceivedFrame>
 800beea:	4605      	mov	r5, r0
 800beec:	2800      	cmp	r0, #0
 800beee:	d160      	bne.n	800bfb2 <ethernetif_input+0xd6>
  len = heth.RxFrameInfos.length;
 800bef0:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800bef2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bef4:	9300      	str	r3, [sp, #0]
  if (len > 0)
 800bef6:	bb19      	cbnz	r1, 800bf40 <ethernetif_input+0x64>
  struct pbuf *p = NULL;
 800bef8:	2700      	movs	r7, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800befa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800befc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800befe:	2200      	movs	r2, #0
 800bf00:	4282      	cmp	r2, r0
 800bf02:	d14f      	bne.n	800bfa4 <ethernetif_input+0xc8>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800bf04:	f241 0114 	movw	r1, #4116	; 0x1014
 800bf08:	6823      	ldr	r3, [r4, #0]
 800bf0a:	5858      	ldr	r0, [r3, r1]
 800bf0c:	0600      	lsls	r0, r0, #24
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800bf0e:	bf42      	ittt	mi
 800bf10:	2080      	movmi	r0, #128	; 0x80
 800bf12:	5058      	strmi	r0, [r3, r1]
    heth.Instance->DMARPDR = 0;
 800bf14:	f241 0108 	movwmi	r1, #4104	; 0x1008
    heth.RxFrameInfos.SegCount =0;  
 800bf18:	f04f 0200 	mov.w	r2, #0
 800bf1c:	63a2      	str	r2, [r4, #56]	; 0x38
    heth.Instance->DMARPDR = 0;
 800bf1e:	bf48      	it	mi
 800bf20:	505a      	strmi	r2, [r3, r1]

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800bf22:	2f00      	cmp	r7, #0
 800bf24:	d045      	beq.n	800bfb2 <ethernetif_input+0xd6>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800bf26:	9b01      	ldr	r3, [sp, #4]
 800bf28:	9901      	ldr	r1, [sp, #4]
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	4638      	mov	r0, r7
 800bf2e:	4798      	blx	r3
    
  if (err != ERR_OK)
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d03e      	beq.n	800bfb2 <ethernetif_input+0xd6>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800bf34:	4638      	mov	r0, r7
    p = NULL;    
  }
}
 800bf36:	b003      	add	sp, #12
 800bf38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 800bf3c:	f7fb bb4c 	b.w	80075d8 <pbuf_free>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800bf40:	2203      	movs	r2, #3
 800bf42:	2004      	movs	r0, #4
 800bf44:	f7fb fbaa 	bl	800769c <pbuf_alloc>
  if (p != NULL)
 800bf48:	4607      	mov	r7, r0
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d0d4      	beq.n	800bef8 <ethernetif_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800bf4e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800bf52:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800bf54:	f240 5bf4 	movw	fp, #1524	; 0x5f4
      byteslefttocopy = q->len;
 800bf58:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800bf5c:	462e      	mov	r6, r5
      payloadoffset = 0;
 800bf5e:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800bf62:	18b5      	adds	r5, r6, r2
 800bf64:	9b00      	ldr	r3, [sp, #0]
 800bf66:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bf6a:	455d      	cmp	r5, fp
 800bf6c:	eb03 0106 	add.w	r1, r3, r6
 800bf70:	d808      	bhi.n	800bf84 <ethernetif_input+0xa8>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800bf72:	4448      	add	r0, r9
 800bf74:	f001 fe0b 	bl	800db8e <memcpy>
    for(q = p; q != NULL; q = q->next)
 800bf78:	f8d8 8000 	ldr.w	r8, [r8]
 800bf7c:	f1b8 0f00 	cmp.w	r8, #0
 800bf80:	d1ea      	bne.n	800bf58 <ethernetif_input+0x7c>
 800bf82:	e7ba      	b.n	800befa <ethernetif_input+0x1e>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800bf84:	ebab 0606 	sub.w	r6, fp, r6
 800bf88:	4632      	mov	r2, r6
 800bf8a:	4448      	add	r0, r9
 800bf8c:	f001 fdff 	bl	800db8e <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800bf90:	f8da a00c 	ldr.w	sl, [sl, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800bf94:	f8da 3008 	ldr.w	r3, [sl, #8]
 800bf98:	9300      	str	r3, [sp, #0]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800bf9a:	44b1      	add	r9, r6
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800bf9c:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        bufferoffset = 0;
 800bfa0:	2600      	movs	r6, #0
 800bfa2:	e7de      	b.n	800bf62 <ethernetif_input+0x86>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800bfa4:	6819      	ldr	r1, [r3, #0]
 800bfa6:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800bfaa:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800bfac:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800bfae:	3201      	adds	r2, #1
 800bfb0:	e7a6      	b.n	800bf00 <ethernetif_input+0x24>
}
 800bfb2:	b003      	add	sp, #12
 800bfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb8:	20006e68 	.word	0x20006e68

0800bfbc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800bfbc:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800bfbe:	4604      	mov	r4, r0
{
 800bfc0:	b085      	sub	sp, #20
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800bfc2:	b930      	cbnz	r0, 800bfd2 <ethernetif_init+0x16>
 800bfc4:	4b3d      	ldr	r3, [pc, #244]	; (800c0bc <ethernetif_init+0x100>)
 800bfc6:	493e      	ldr	r1, [pc, #248]	; (800c0c0 <ethernetif_init+0x104>)
 800bfc8:	483e      	ldr	r0, [pc, #248]	; (800c0c4 <ethernetif_init+0x108>)
 800bfca:	f240 2206 	movw	r2, #518	; 0x206
 800bfce:	f001 fe9d 	bl	800dd0c <iprintf>
  heth.Instance = ETH;
 800bfd2:	4d3d      	ldr	r5, [pc, #244]	; (800c0c8 <ethernetif_init+0x10c>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800bfd4:	493d      	ldr	r1, [pc, #244]	; (800c0cc <ethernetif_init+0x110>)
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800bfd6:	2373      	movs	r3, #115	; 0x73
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800bfd8:	2201      	movs	r2, #1
  netif->name[0] = IFNAME0;
 800bfda:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800bfde:	2374      	movs	r3, #116	; 0x74
 800bfe0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800bfe4:	e885 0006 	stmia.w	r5, {r1, r2}
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800bfe8:	4b39      	ldr	r3, [pc, #228]	; (800c0d0 <ethernetif_init+0x114>)
 800bfea:	6163      	str	r3, [r4, #20]
  MACAddr[1] = 0x80;
 800bfec:	2280      	movs	r2, #128	; 0x80
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800bfee:	4b39      	ldr	r3, [pc, #228]	; (800c0d4 <ethernetif_init+0x118>)
  MACAddr[1] = 0x80;
 800bff0:	f88d 2009 	strb.w	r2, [sp, #9]
  MACAddr[2] = 0xE1;
 800bff4:	22e1      	movs	r2, #225	; 0xe1
  netif->linkoutput = low_level_output;
 800bff6:	61a3      	str	r3, [r4, #24]
  MACAddr[2] = 0xE1;
 800bff8:	f88d 200a 	strb.w	r2, [sp, #10]
  uint32_t regvalue = 0;
 800bffc:	2300      	movs	r3, #0
  MACAddr[5] = 0xFF;
 800bffe:	22ff      	movs	r2, #255	; 0xff
  uint32_t regvalue = 0;
 800c000:	9301      	str	r3, [sp, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800c002:	822b      	strh	r3, [r5, #16]
  MACAddr[0] = 0x00;
 800c004:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[3] = 0x00;
 800c008:	f88d 300b 	strb.w	r3, [sp, #11]
  MACAddr[4] = 0x00;
 800c00c:	f88d 300c 	strb.w	r3, [sp, #12]
  MACAddr[5] = 0xFF;
 800c010:	f88d 200d 	strb.w	r2, [sp, #13]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800c014:	61ab      	str	r3, [r5, #24]
  heth.Init.MACAddr = &MACAddr[0];
 800c016:	aa02      	add	r2, sp, #8
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800c018:	61eb      	str	r3, [r5, #28]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c01a:	4628      	mov	r0, r5
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800c01c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.MACAddr = &MACAddr[0];
 800c020:	616a      	str	r2, [r5, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800c022:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c024:	f7f5 fca4 	bl	8001970 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800c028:	b928      	cbnz	r0, 800c036 <ethernetif_init+0x7a>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800c02a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800c02e:	f043 0304 	orr.w	r3, r3, #4
 800c032:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800c036:	2304      	movs	r3, #4
 800c038:	4a27      	ldr	r2, [pc, #156]	; (800c0d8 <ethernetif_init+0x11c>)
 800c03a:	4928      	ldr	r1, [pc, #160]	; (800c0dc <ethernetif_init+0x120>)
 800c03c:	4822      	ldr	r0, [pc, #136]	; (800c0c8 <ethernetif_init+0x10c>)
 800c03e:	f7f5 faf9 	bl	8001634 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800c042:	4927      	ldr	r1, [pc, #156]	; (800c0e0 <ethernetif_init+0x124>)
 800c044:	4a27      	ldr	r2, [pc, #156]	; (800c0e4 <ethernetif_init+0x128>)
 800c046:	4820      	ldr	r0, [pc, #128]	; (800c0c8 <ethernetif_init+0x10c>)
 800c048:	2304      	movs	r3, #4
 800c04a:	f7f5 fb30 	bl	80016ae <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c04e:	2306      	movs	r3, #6
 800c050:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c054:	696b      	ldr	r3, [r5, #20]
  HAL_ETH_Start(&heth);
 800c056:	481c      	ldr	r0, [pc, #112]	; (800c0c8 <ethernetif_init+0x10c>)
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c058:	781a      	ldrb	r2, [r3, #0]
 800c05a:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c05e:	785a      	ldrb	r2, [r3, #1]
 800c060:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c064:	789a      	ldrb	r2, [r3, #2]
 800c066:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c06a:	78da      	ldrb	r2, [r3, #3]
 800c06c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c070:	791a      	ldrb	r2, [r3, #4]
 800c072:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c076:	795b      	ldrb	r3, [r3, #5]
 800c078:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 800c07c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800c080:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c082:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800c086:	f043 030a 	orr.w	r3, r3, #10
 800c08a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_Start(&heth);
 800c08e:	f7f5 fd6b 	bl	8001b68 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800c092:	aa01      	add	r2, sp, #4
 800c094:	211d      	movs	r1, #29
 800c096:	480c      	ldr	r0, [pc, #48]	; (800c0c8 <ethernetif_init+0x10c>)
 800c098:	f7f5 fbf9 	bl	800188e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800c09c:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800c09e:	480a      	ldr	r0, [pc, #40]	; (800c0c8 <ethernetif_init+0x10c>)
  regvalue |= (PHY_ISFR_INT4);
 800c0a0:	f042 020b 	orr.w	r2, r2, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800c0a4:	211d      	movs	r1, #29
  regvalue |= (PHY_ISFR_INT4);
 800c0a6:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800c0a8:	f7f5 fc2b 	bl	8001902 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800c0ac:	aa01      	add	r2, sp, #4
 800c0ae:	211d      	movs	r1, #29
 800c0b0:	4805      	ldr	r0, [pc, #20]	; (800c0c8 <ethernetif_init+0x10c>)
 800c0b2:	f7f5 fbec 	bl	800188e <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800c0b6:	2000      	movs	r0, #0
 800c0b8:	b005      	add	sp, #20
 800c0ba:	bd30      	pop	{r4, r5, pc}
 800c0bc:	08012268 	.word	0x08012268
 800c0c0:	0800f7d0 	.word	0x0800f7d0
 800c0c4:	0800f3a7 	.word	0x0800f3a7
 800c0c8:	20006e68 	.word	0x20006e68
 800c0cc:	40028000 	.word	0x40028000
 800c0d0:	08006141 	.word	0x08006141
 800c0d4:	0800bd51 	.word	0x0800bd51
 800c0d8:	20006eb0 	.word	0x20006eb0
 800c0dc:	20005598 	.word	0x20005598
 800c0e0:	20006de8 	.word	0x20006de8
 800c0e4:	20005618 	.word	0x20005618

0800c0e8 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 800c0e8:	f7f4 bf46 	b.w	8000f78 <HAL_GetTick>

0800c0ec <event_init>:
#include <event.h>

void event_init( event *e )
{ *e = 0; }
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	7003      	strb	r3, [r0, #0]
 800c0f0:	4770      	bx	lr

0800c0f2 <event_trigger>:

void event_trigger( event *e )
{ *e = 1; }
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	7003      	strb	r3, [r0, #0]
 800c0f6:	4770      	bx	lr

0800c0f8 <event_check>:

int event_check( event *e )
{
  if ( *e )
 800c0f8:	7803      	ldrb	r3, [r0, #0]
 800c0fa:	b11b      	cbz	r3, 800c104 <event_check+0xc>
  {
    *e = 0;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	7003      	strb	r3, [r0, #0]
	return 1;
 800c100:	2001      	movs	r0, #1
 800c102:	4770      	bx	lr
  }

  return 0;
 800c104:	4618      	mov	r0, r3
}
 800c106:	4770      	bx	lr

0800c108 <MX_LWIP_Init_>:
uint8_t GATEWAY_ADDRESS[4];

/* USER CODE BEGIN 2 */

void MX_LWIP_Init_( uint8_t x )
{
 800c108:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
  IP_ADDRESS[1] = 168;
  IP_ADDRESS[2] = 1;
  IP_ADDRESS[3] = x;
  NETMASK_ADDRESS[0] = 255;
 800c10a:	4e2e      	ldr	r6, [pc, #184]	; (800c1c4 <MX_LWIP_Init_+0xbc>)
  NETMASK_ADDRESS[1] = 255;
  NETMASK_ADDRESS[2] = 255;
  NETMASK_ADDRESS[3] = 0;
  GATEWAY_ADDRESS[0] = 192;
 800c10c:	4d2e      	ldr	r5, [pc, #184]	; (800c1c8 <MX_LWIP_Init_+0xc0>)
  IP_ADDRESS[0] = 192;
 800c10e:	4f2f      	ldr	r7, [pc, #188]	; (800c1cc <MX_LWIP_Init_+0xc4>)
  NETMASK_ADDRESS[0] = 255;
 800c110:	23ff      	movs	r3, #255	; 0xff
{
 800c112:	b085      	sub	sp, #20
  IP_ADDRESS[0] = 192;
 800c114:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
  IP_ADDRESS[1] = 168;
 800c118:	21a8      	movs	r1, #168	; 0xa8
  IP_ADDRESS[2] = 1;
 800c11a:	2201      	movs	r2, #1
  NETMASK_ADDRESS[0] = 255;
 800c11c:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 800c11e:	7073      	strb	r3, [r6, #1]
  NETMASK_ADDRESS[2] = 255;
 800c120:	70b3      	strb	r3, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 800c122:	2400      	movs	r4, #0
  GATEWAY_ADDRESS[1] = 168;
  GATEWAY_ADDRESS[2] = 1;
  GATEWAY_ADDRESS[3] = 254;
 800c124:	23fe      	movs	r3, #254	; 0xfe
  GATEWAY_ADDRESS[0] = 192;
 800c126:	f885 e000 	strb.w	lr, [r5]
  IP_ADDRESS[0] = 192;
 800c12a:	f887 e000 	strb.w	lr, [r7]
  GATEWAY_ADDRESS[1] = 168;
 800c12e:	7069      	strb	r1, [r5, #1]
  GATEWAY_ADDRESS[2] = 1;
 800c130:	70aa      	strb	r2, [r5, #2]
  GATEWAY_ADDRESS[3] = 254;
 800c132:	70eb      	strb	r3, [r5, #3]
  IP_ADDRESS[1] = 168;
 800c134:	7079      	strb	r1, [r7, #1]
  IP_ADDRESS[2] = 1;
 800c136:	70ba      	strb	r2, [r7, #2]
  IP_ADDRESS[3] = x;
 800c138:	70f8      	strb	r0, [r7, #3]
  NETMASK_ADDRESS[3] = 0;
 800c13a:	70f4      	strb	r4, [r6, #3]

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800c13c:	f7f9 fcf0 	bl	8005b20 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c140:	787b      	ldrb	r3, [r7, #1]
 800c142:	783a      	ldrb	r2, [r7, #0]
 800c144:	4922      	ldr	r1, [pc, #136]	; (800c1d0 <MX_LWIP_Init_+0xc8>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c146:	7868      	ldrb	r0, [r5, #1]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c148:	041b      	lsls	r3, r3, #16
 800c14a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c14e:	78fa      	ldrb	r2, [r7, #3]
 800c150:	4313      	orrs	r3, r2
 800c152:	78ba      	ldrb	r2, [r7, #2]
 800c154:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c158:	ba1b      	rev	r3, r3
 800c15a:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800c15c:	7873      	ldrb	r3, [r6, #1]
 800c15e:	7832      	ldrb	r2, [r6, #0]
 800c160:	041b      	lsls	r3, r3, #16
 800c162:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c166:	78f2      	ldrb	r2, [r6, #3]
 800c168:	4313      	orrs	r3, r2
 800c16a:	78b2      	ldrb	r2, [r6, #2]
 800c16c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c170:	4a18      	ldr	r2, [pc, #96]	; (800c1d4 <MX_LWIP_Init_+0xcc>)
 800c172:	ba1b      	rev	r3, r3
 800c174:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c176:	782b      	ldrb	r3, [r5, #0]
 800c178:	0400      	lsls	r0, r0, #16
 800c17a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800c17e:	78eb      	ldrb	r3, [r5, #3]
 800c180:	4318      	orrs	r0, r3
 800c182:	78ab      	ldrb	r3, [r5, #2]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800c184:	4d14      	ldr	r5, [pc, #80]	; (800c1d8 <MX_LWIP_Init_+0xd0>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c186:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800c18a:	4b14      	ldr	r3, [pc, #80]	; (800c1dc <MX_LWIP_Init_+0xd4>)
 800c18c:	ba00      	rev	r0, r0
 800c18e:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800c190:	4813      	ldr	r0, [pc, #76]	; (800c1e0 <MX_LWIP_Init_+0xd8>)
 800c192:	9002      	str	r0, [sp, #8]
 800c194:	4813      	ldr	r0, [pc, #76]	; (800c1e4 <MX_LWIP_Init_+0xdc>)
 800c196:	9001      	str	r0, [sp, #4]
 800c198:	9400      	str	r4, [sp, #0]
 800c19a:	4628      	mov	r0, r5
 800c19c:	f7fb f91a 	bl	80073d4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	f7fb f955 	bl	8007450 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800c1a6:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800c1aa:	075b      	lsls	r3, r3, #29
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800c1ac:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 800c1ae:	d504      	bpl.n	800c1ba <MX_LWIP_Init_+0xb2>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c1b0:	b005      	add	sp, #20
 800c1b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 800c1b6:	f7fb b951 	b.w	800745c <netif_set_up>
}
 800c1ba:	b005      	add	sp, #20
 800c1bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 800c1c0:	f7fb b95b 	b.w	800747a <netif_set_down>
 800c1c4:	200086b8 	.word	0x200086b8
 800c1c8:	20008680 	.word	0x20008680
 800c1cc:	200086bc 	.word	0x200086bc
 800c1d0:	200086b4 	.word	0x200086b4
 800c1d4:	200086c0 	.word	0x200086c0
 800c1d8:	20008684 	.word	0x20008684
 800c1dc:	200086c4 	.word	0x200086c4
 800c1e0:	0800b06d 	.word	0x0800b06d
 800c1e4:	0800bfbd 	.word	0x0800bfbd

0800c1e8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 800c1e8:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800c1ea:	4803      	ldr	r0, [pc, #12]	; (800c1f8 <MX_LWIP_Process+0x10>)
 800c1ec:	f7ff fe76 	bl	800bedc <ethernetif_input>
  /* Handle timeouts */
  sys_check_timeouts();

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800c1f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_check_timeouts();
 800c1f4:	f7fe be5a 	b.w	800aeac <sys_check_timeouts>
 800c1f8:	20008684 	.word	0x20008684

0800c1fc <bumper_game_register>:

#if 1
int bumper_game_register( uint8_t id, const char *name )
{
	return 1;
}
 800c1fc:	2001      	movs	r0, #1
 800c1fe:	4770      	bx	lr

0800c200 <bumper_game_acceleration>:

int bumper_game_acceleration( uint8_t id, int8_t ax, int8_t ay, int8_t az )
{
	return 1;
}
 800c200:	2001      	movs	r0, #1
 800c202:	4770      	bx	lr

0800c204 <bumper_game_over>:

int bumper_game_over()
{
	user_button_pushed = 0;
 800c204:	4b02      	ldr	r3, [pc, #8]	; (800c210 <bumper_game_over+0xc>)
 800c206:	2200      	movs	r2, #0
 800c208:	701a      	strb	r2, [r3, #0]
	return 1;
}
 800c20a:	2001      	movs	r0, #1
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	20000e65 	.word	0x20000e65

0800c214 <bumper_signal_error>:
{
 800c214:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin( LD3_GPIO_Port, LD5_Pin, 1 ); // RED
 800c216:	2201      	movs	r2, #1
{
 800c218:	b086      	sub	sp, #24
 800c21a:	4604      	mov	r4, r0
	HAL_GPIO_WritePin( LD3_GPIO_Port, LD5_Pin, 1 ); // RED
 800c21c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c220:	4806      	ldr	r0, [pc, #24]	; (800c23c <bumper_signal_error+0x28>)
 800c222:	f7f5 fdbd 	bl	8001da0 <HAL_GPIO_WritePin>
	sprintf( buff, "ERROR %d<br/>", x );
 800c226:	4622      	mov	r2, r4
 800c228:	4905      	ldr	r1, [pc, #20]	; (800c240 <bumper_signal_error+0x2c>)
 800c22a:	a801      	add	r0, sp, #4
 800c22c:	f001 fd96 	bl	800dd5c <siprintf>
	bum_log( buff );
 800c230:	a801      	add	r0, sp, #4
 800c232:	f7fe ffaf 	bl	800b194 <bum_log>
}
 800c236:	b006      	add	sp, #24
 800c238:	bd10      	pop	{r4, pc}
 800c23a:	bf00      	nop
 800c23c:	40020c00 	.word	0x40020c00
 800c240:	0801291e 	.word	0x0801291e

0800c244 <bumper_signal_debug>:
	HAL_GPIO_TogglePin( LD6_GPIO_Port, LD6_Pin ); // BLUE
 800c244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c248:	4801      	ldr	r0, [pc, #4]	; (800c250 <bumper_signal_debug+0xc>)
 800c24a:	f7f5 bdae 	b.w	8001daa <HAL_GPIO_TogglePin>
 800c24e:	bf00      	nop
 800c250:	40020c00 	.word	0x40020c00

0800c254 <bumper_game_new_player>:
{
 800c254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int len = strlen( json_orders );
 800c256:	4c0b      	ldr	r4, [pc, #44]	; (800c284 <bumper_game_new_player+0x30>)
{
 800c258:	4605      	mov	r5, r0
	int len = strlen( json_orders );
 800c25a:	4620      	mov	r0, r4
{
 800c25c:	460e      	mov	r6, r1
 800c25e:	4617      	mov	r7, r2
	int len = strlen( json_orders );
 800c260:	f7f3 ffc0 	bl	80001e4 <strlen>
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c264:	f5b0 7fe1 	cmp.w	r0, #450	; 0x1c2
 800c268:	dc09      	bgt.n	800c27e <bumper_game_new_player+0x2a>
	sprintf( json_orders + len, "{\"new_player\":[{\"i\":%d,\"name\":\"%s\",\"color\": \"#%06X\"}]},", ( unsigned int )id, name, ( unsigned int )color );
 800c26a:	9700      	str	r7, [sp, #0]
 800c26c:	4633      	mov	r3, r6
 800c26e:	462a      	mov	r2, r5
 800c270:	4905      	ldr	r1, [pc, #20]	; (800c288 <bumper_game_new_player+0x34>)
 800c272:	4420      	add	r0, r4
 800c274:	f001 fd72 	bl	800dd5c <siprintf>
	return 1;
 800c278:	2001      	movs	r0, #1
}
 800c27a:	b003      	add	sp, #12
 800c27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c27e:	2000      	movs	r0, #0
 800c280:	e7fb      	b.n	800c27a <bumper_game_new_player+0x26>
 800c282:	bf00      	nop
 800c284:	200087e4 	.word	0x200087e4
 800c288:	080127cc 	.word	0x080127cc

0800c28c <bumper_game_player_move>:
{
 800c28c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int len = strlen( json_orders );
 800c290:	4d0f      	ldr	r5, [pc, #60]	; (800c2d0 <bumper_game_player_move+0x44>)
{
 800c292:	b085      	sub	sp, #20
 800c294:	4606      	mov	r6, r0
	int len = strlen( json_orders );
 800c296:	4628      	mov	r0, r5
{
 800c298:	460f      	mov	r7, r1
 800c29a:	4690      	mov	r8, r2
 800c29c:	4699      	mov	r9, r3
	int len = strlen( json_orders );
 800c29e:	f7f3 ffa1 	bl	80001e4 <strlen>
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c2a2:	f5b0 7fe1 	cmp.w	r0, #450	; 0x1c2
 800c2a6:	f04f 0400 	mov.w	r4, #0
 800c2aa:	dc0e      	bgt.n	800c2ca <bumper_game_player_move+0x3e>
	sprintf( json_orders + len, "{\"move\":[{\"i\":%d,\"x\":%d,\"y\":%d,\"a\":%d,\"s\":%d}]},", ( unsigned int )id, ( unsigned int )x, ( unsigned int )y, 0, ( unsigned int )s );
 800c2ac:	f8cd 9008 	str.w	r9, [sp, #8]
 800c2b0:	9401      	str	r4, [sp, #4]
 800c2b2:	f8cd 8000 	str.w	r8, [sp]
 800c2b6:	463b      	mov	r3, r7
 800c2b8:	4632      	mov	r2, r6
 800c2ba:	4906      	ldr	r1, [pc, #24]	; (800c2d4 <bumper_game_player_move+0x48>)
 800c2bc:	4428      	add	r0, r5
 800c2be:	f001 fd4d 	bl	800dd5c <siprintf>
	return 1;
 800c2c2:	2001      	movs	r0, #1
}
 800c2c4:	b005      	add	sp, #20
 800c2c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	e7fa      	b.n	800c2c4 <bumper_game_player_move+0x38>
 800c2ce:	bf00      	nop
 800c2d0:	200087e4 	.word	0x200087e4
 800c2d4:	08012804 	.word	0x08012804

0800c2d8 <bumper_game_print>:
{
 800c2d8:	b538      	push	{r3, r4, r5, lr}
	int len = strlen( json_orders );
 800c2da:	4c08      	ldr	r4, [pc, #32]	; (800c2fc <bumper_game_print+0x24>)
{
 800c2dc:	4605      	mov	r5, r0
	int len = strlen( json_orders );
 800c2de:	4620      	mov	r0, r4
 800c2e0:	f7f3 ff80 	bl	80001e4 <strlen>
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c2e4:	f5b0 7fe1 	cmp.w	r0, #450	; 0x1c2
 800c2e8:	dc06      	bgt.n	800c2f8 <bumper_game_print+0x20>
	sprintf( json_orders + len, "{\"display\":[{\"id\":\"score\",\"x\":10,\"y\":-5,\"content\":\"%s\"}]},", msg );
 800c2ea:	462a      	mov	r2, r5
 800c2ec:	4904      	ldr	r1, [pc, #16]	; (800c300 <bumper_game_print+0x28>)
 800c2ee:	4420      	add	r0, r4
 800c2f0:	f001 fd34 	bl	800dd5c <siprintf>
	return 1;
 800c2f4:	2001      	movs	r0, #1
 800c2f6:	bd38      	pop	{r3, r4, r5, pc}
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c2f8:	2000      	movs	r0, #0
}
 800c2fa:	bd38      	pop	{r3, r4, r5, pc}
 800c2fc:	200087e4 	.word	0x200087e4
 800c300:	08012835 	.word	0x08012835

0800c304 <bumper_game_step>:
{
 800c304:	b570      	push	{r4, r5, r6, lr}
 800c306:	4606      	mov	r6, r0
 800c308:	b08a      	sub	sp, #40	; 0x28
	int len = strlen( json_orders );
 800c30a:	4820      	ldr	r0, [pc, #128]	; (800c38c <bumper_game_step+0x88>)
{
 800c30c:	460d      	mov	r5, r1
	int len = strlen( json_orders );
 800c30e:	f7f3 ff69 	bl	80001e4 <strlen>
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c312:	f5b0 7fe1 	cmp.w	r0, #450	; 0x1c2
	int len = strlen( json_orders );
 800c316:	4604      	mov	r4, r0
 800c318:	f04f 0000 	mov.w	r0, #0
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c31c:	dc25      	bgt.n	800c36a <bumper_game_step+0x66>
	msg[ 0 ] = 0;
 800c31e:	f88d 0000 	strb.w	r0, [sp]
	switch ( step )
 800c322:	2e03      	cmp	r6, #3
 800c324:	d82f      	bhi.n	800c386 <bumper_game_step+0x82>
 800c326:	e8df f006 	tbb	[pc, r6]
 800c32a:	2a02      	.short	0x2a02
 800c32c:	2c16      	.short	0x2c16
		switch ( param )
 800c32e:	2d04      	cmp	r5, #4
 800c330:	d823      	bhi.n	800c37a <bumper_game_step+0x76>
 800c332:	e8df f005 	tbb	[pc, r5]
 800c336:	0803      	.short	0x0803
 800c338:	1e1c      	.short	0x1e1c
 800c33a:	20          	.byte	0x20
 800c33b:	00          	.byte	0x00
			strcpy( msg, "Internal Error" ); break;
 800c33c:	4914      	ldr	r1, [pc, #80]	; (800c390 <bumper_game_step+0x8c>)
		strcpy( msg, "step ???" ); break;
 800c33e:	4668      	mov	r0, sp
 800c340:	f001 fd4d 	bl	800ddde <strcpy>
 800c344:	e007      	b.n	800c356 <bumper_game_step+0x52>
			strcpy( msg, "OK registered as " ); strcat( msg, bum_player.name ); break;
 800c346:	4913      	ldr	r1, [pc, #76]	; (800c394 <bumper_game_step+0x90>)
		strcpy( msg, "Playing as " ); strcat( msg, bum_player.name ); break;
 800c348:	4668      	mov	r0, sp
 800c34a:	f001 fd48 	bl	800ddde <strcpy>
 800c34e:	4912      	ldr	r1, [pc, #72]	; (800c398 <bumper_game_step+0x94>)
 800c350:	4668      	mov	r0, sp
 800c352:	f001 fd27 	bl	800dda4 <strcat>
	if ( msg[ 0 ] )
 800c356:	f89d 3000 	ldrb.w	r3, [sp]
 800c35a:	b12b      	cbz	r3, 800c368 <bumper_game_step+0x64>
		sprintf( json_orders + len, "{\"display\":[{\"id\":\"step\",\"x\":200,\"y\":-5,\"content\":\"%s\"}]},", msg );
 800c35c:	480b      	ldr	r0, [pc, #44]	; (800c38c <bumper_game_step+0x88>)
 800c35e:	490f      	ldr	r1, [pc, #60]	; (800c39c <bumper_game_step+0x98>)
 800c360:	466a      	mov	r2, sp
 800c362:	4420      	add	r0, r4
 800c364:	f001 fcfa 	bl	800dd5c <siprintf>
	return 1;
 800c368:	2001      	movs	r0, #1
}
 800c36a:	b00a      	add	sp, #40	; 0x28
 800c36c:	bd70      	pop	{r4, r5, r6, pc}
			strcpy( msg, "OK already as " ); strcat( msg, bum_player.name ); break;
 800c36e:	490c      	ldr	r1, [pc, #48]	; (800c3a0 <bumper_game_step+0x9c>)
 800c370:	e7ea      	b.n	800c348 <bumper_game_step+0x44>
			strcpy( msg, "Too many players" ); break;
 800c372:	490c      	ldr	r1, [pc, #48]	; (800c3a4 <bumper_game_step+0xa0>)
 800c374:	e7e3      	b.n	800c33e <bumper_game_step+0x3a>
			strcpy( msg, "Too late" ); break;
 800c376:	490c      	ldr	r1, [pc, #48]	; (800c3a8 <bumper_game_step+0xa4>)
 800c378:	e7e1      	b.n	800c33e <bumper_game_step+0x3a>
			strcpy( msg, "param ???" ); break;
 800c37a:	490c      	ldr	r1, [pc, #48]	; (800c3ac <bumper_game_step+0xa8>)
 800c37c:	e7df      	b.n	800c33e <bumper_game_step+0x3a>
		strcpy( msg, "Playing as " ); strcat( msg, bum_player.name ); break;
 800c37e:	490c      	ldr	r1, [pc, #48]	; (800c3b0 <bumper_game_step+0xac>)
 800c380:	e7e2      	b.n	800c348 <bumper_game_step+0x44>
		sprintf( msg, "Game Over" ); break;
 800c382:	490c      	ldr	r1, [pc, #48]	; (800c3b4 <bumper_game_step+0xb0>)
 800c384:	e7db      	b.n	800c33e <bumper_game_step+0x3a>
		strcpy( msg, "step ???" ); break;
 800c386:	490c      	ldr	r1, [pc, #48]	; (800c3b8 <bumper_game_step+0xb4>)
 800c388:	e7d9      	b.n	800c33e <bumper_game_step+0x3a>
 800c38a:	bf00      	nop
 800c38c:	200087e4 	.word	0x200087e4
 800c390:	08012870 	.word	0x08012870
 800c394:	0801287f 	.word	0x0801287f
 800c398:	20008af8 	.word	0x20008af8
 800c39c:	080128e3 	.word	0x080128e3
 800c3a0:	08012891 	.word	0x08012891
 800c3a4:	080128a0 	.word	0x080128a0
 800c3a8:	080128b1 	.word	0x080128b1
 800c3ac:	080128ba 	.word	0x080128ba
 800c3b0:	080128c4 	.word	0x080128c4
 800c3b4:	080128d0 	.word	0x080128d0
 800c3b8:	080128da 	.word	0x080128da

0800c3bc <bumper_utility_random>:
#endif


int bumper_utility_random( uint32_t *value, uint32_t max )
{
 800c3bc:	b538      	push	{r3, r4, r5, lr}
 800c3be:	4604      	mov	r4, r0
 800c3c0:	460d      	mov	r5, r1
  if ( HAL_RNG_GenerateRandomNumber( &hrng, value ) != HAL_OK ) return 0;
 800c3c2:	4601      	mov	r1, r0
 800c3c4:	4806      	ldr	r0, [pc, #24]	; (800c3e0 <bumper_utility_random+0x24>)
 800c3c6:	f7f6 fc71 	bl	8002cac <HAL_RNG_GenerateRandomNumber>
 800c3ca:	b938      	cbnz	r0, 800c3dc <bumper_utility_random+0x20>

#if 0
  uint32_t zones = 0xFFFFFFFF / max;
  *value /= zones;
#else
  *value %= max;
 800c3cc:	6823      	ldr	r3, [r4, #0]
 800c3ce:	fbb3 f1f5 	udiv	r1, r3, r5
 800c3d2:	fb05 3111 	mls	r1, r5, r1, r3
 800c3d6:	6021      	str	r1, [r4, #0]
#endif

  return 1;
 800c3d8:	2001      	movs	r0, #1
 800c3da:	bd38      	pop	{r3, r4, r5, pc}
  if ( HAL_RNG_GenerateRandomNumber( &hrng, value ) != HAL_OK ) return 0;
 800c3dc:	2000      	movs	r0, #0
}
 800c3de:	bd38      	pop	{r3, r4, r5, pc}
 800c3e0:	20008a48 	.word	0x20008a48

0800c3e4 <HAL_UART_RxCpltCallback>:
  if ( huart->Instance == USART6 )
 800c3e4:	6802      	ldr	r2, [r0, #0]
 800c3e6:	4b0e      	ldr	r3, [pc, #56]	; (800c420 <HAL_UART_RxCpltCallback+0x3c>)
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d118      	bne.n	800c41e <HAL_UART_RxCpltCallback+0x3a>
	  switch ( recv6_car )
 800c3ec:	4b0d      	ldr	r3, [pc, #52]	; (800c424 <HAL_UART_RxCpltCallback+0x40>)
 800c3ee:	781a      	ldrb	r2, [r3, #0]
 800c3f0:	4b0d      	ldr	r3, [pc, #52]	; (800c428 <HAL_UART_RxCpltCallback+0x44>)
 800c3f2:	2a71      	cmp	r2, #113	; 0x71
 800c3f4:	d009      	beq.n	800c40a <HAL_UART_RxCpltCallback+0x26>
 800c3f6:	2a73      	cmp	r2, #115	; 0x73
 800c3f8:	d00d      	beq.n	800c416 <HAL_UART_RxCpltCallback+0x32>
	  __HAL_TIM_SET_COUNTER( &htim2, 0 );
 800c3fa:	681b      	ldr	r3, [r3, #0]
	  HAL_UART_Receive_IT( &huart6, &recv6_car, 1 );
 800c3fc:	4909      	ldr	r1, [pc, #36]	; (800c424 <HAL_UART_RxCpltCallback+0x40>)
 800c3fe:	480b      	ldr	r0, [pc, #44]	; (800c42c <HAL_UART_RxCpltCallback+0x48>)
	  __HAL_TIM_SET_COUNTER( &htim2, 0 );
 800c400:	2200      	movs	r2, #0
 800c402:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_UART_Receive_IT( &huart6, &recv6_car, 1 );
 800c404:	2201      	movs	r2, #1
 800c406:	f7f7 b9ef 	b.w	80037e8 <HAL_UART_Receive_IT>
			__HAL_TIM_SET_AUTORELOAD( &htim2, 499 );
 800c40a:	6819      	ldr	r1, [r3, #0]
 800c40c:	f240 12f3 	movw	r2, #499	; 0x1f3
			__HAL_TIM_SET_AUTORELOAD( &htim2, 4999 );
 800c410:	62ca      	str	r2, [r1, #44]	; 0x2c
 800c412:	60da      	str	r2, [r3, #12]
		  break;
 800c414:	e7f1      	b.n	800c3fa <HAL_UART_RxCpltCallback+0x16>
			__HAL_TIM_SET_AUTORELOAD( &htim2, 4999 );
 800c416:	6819      	ldr	r1, [r3, #0]
 800c418:	f241 3287 	movw	r2, #4999	; 0x1387
 800c41c:	e7f8      	b.n	800c410 <HAL_UART_RxCpltCallback+0x2c>
 800c41e:	4770      	bx	lr
 800c420:	40011400 	.word	0x40011400
 800c424:	20000e64 	.word	0x20000e64
 800c428:	20008aa0 	.word	0x20008aa0
 800c42c:	20008a60 	.word	0x20008a60

0800c430 <_write>:
{
 800c430:	b510      	push	{r4, lr}
  HAL_UART_Transmit( &huart6, ( uint8_t * )ptr, len, 1000 );
 800c432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 800c436:	4614      	mov	r4, r2
  HAL_UART_Transmit( &huart6, ( uint8_t * )ptr, len, 1000 );
 800c438:	4802      	ldr	r0, [pc, #8]	; (800c444 <_write+0x14>)
 800c43a:	b292      	uxth	r2, r2
 800c43c:	f7f7 f958 	bl	80036f0 <HAL_UART_Transmit>
}
 800c440:	4620      	mov	r0, r4
 800c442:	bd10      	pop	{r4, pc}
 800c444:	20008a60 	.word	0x20008a60

0800c448 <bumper_init_player>:
  bum_player.game_step = bumper_game_step;
 800c448:	4807      	ldr	r0, [pc, #28]	; (800c468 <bumper_init_player+0x20>)
 800c44a:	4b08      	ldr	r3, [pc, #32]	; (800c46c <bumper_init_player+0x24>)
 800c44c:	6003      	str	r3, [r0, #0]
  bum_player.game_new_player = bumper_game_new_player;
 800c44e:	4b08      	ldr	r3, [pc, #32]	; (800c470 <bumper_init_player+0x28>)
 800c450:	6043      	str	r3, [r0, #4]
  bum_player.game_player_move = bumper_game_player_move;
 800c452:	4b08      	ldr	r3, [pc, #32]	; (800c474 <bumper_init_player+0x2c>)
 800c454:	6083      	str	r3, [r0, #8]
  bum_player.game_print = bumper_game_print;
 800c456:	4b08      	ldr	r3, [pc, #32]	; (800c478 <bumper_init_player+0x30>)
 800c458:	60c3      	str	r3, [r0, #12]
  bum_player.error = bumper_signal_error;
 800c45a:	4b08      	ldr	r3, [pc, #32]	; (800c47c <bumper_init_player+0x34>)
 800c45c:	6103      	str	r3, [r0, #16]
  bum_player.debug = bumper_signal_debug;
 800c45e:	4b08      	ldr	r3, [pc, #32]	; (800c480 <bumper_init_player+0x38>)
 800c460:	6143      	str	r3, [r0, #20]
  bum_init_player( &bum_player );
 800c462:	f7fe be99 	b.w	800b198 <bum_init_player>
 800c466:	bf00      	nop
 800c468:	20008ae0 	.word	0x20008ae0
 800c46c:	0800c305 	.word	0x0800c305
 800c470:	0800c255 	.word	0x0800c255
 800c474:	0800c28d 	.word	0x0800c28d
 800c478:	0800c2d9 	.word	0x0800c2d9
 800c47c:	0800c215 	.word	0x0800c215
 800c480:	0800c245 	.word	0x0800c245

0800c484 <bumper_init_referee>:


void bumper_init_referee()
{
#if 1
  bum_referee.game_register = bumper_game_register;
 800c484:	4807      	ldr	r0, [pc, #28]	; (800c4a4 <bumper_init_referee+0x20>)
 800c486:	4b08      	ldr	r3, [pc, #32]	; (800c4a8 <bumper_init_referee+0x24>)
 800c488:	6003      	str	r3, [r0, #0]
  bum_referee.game_acceleration = bumper_game_acceleration;
 800c48a:	4b08      	ldr	r3, [pc, #32]	; (800c4ac <bumper_init_referee+0x28>)
 800c48c:	6043      	str	r3, [r0, #4]
  bum_referee.game_over = bumper_game_over;
 800c48e:	4b08      	ldr	r3, [pc, #32]	; (800c4b0 <bumper_init_referee+0x2c>)
 800c490:	6083      	str	r3, [r0, #8]

  bum_referee.utility_random = bumper_utility_random;
 800c492:	4b08      	ldr	r3, [pc, #32]	; (800c4b4 <bumper_init_referee+0x30>)
 800c494:	60c3      	str	r3, [r0, #12]
#endif
  bum_referee.error = bumper_signal_error;
 800c496:	4b08      	ldr	r3, [pc, #32]	; (800c4b8 <bumper_init_referee+0x34>)
 800c498:	6103      	str	r3, [r0, #16]
  bum_referee.debug = 0;
 800c49a:	2300      	movs	r3, #0
 800c49c:	6143      	str	r3, [r0, #20]

  bum_init_referee( &bum_referee );
 800c49e:	f7ff b855 	b.w	800b54c <bum_init_referee>
 800c4a2:	bf00      	nop
 800c4a4:	200089f0 	.word	0x200089f0
 800c4a8:	0800c1fd 	.word	0x0800c1fd
 800c4ac:	0800c201 	.word	0x0800c201
 800c4b0:	0800c205 	.word	0x0800c205
 800c4b4:	0800c3bd 	.word	0x0800c3bd
 800c4b8:	0800c215 	.word	0x0800c215

0800c4bc <check_board_id>:
// **********************************************************************************************
// **********************************************************************************************


int check_board_id()
{
 800c4bc:	b538      	push	{r3, r4, r5, lr}
	  uint32_t UID[ 3 ];
	  UID[0] = HAL_GetUIDw0();
 800c4be:	f7f4 fd75 	bl	8000fac <HAL_GetUIDw0>
 800c4c2:	4605      	mov	r5, r0
	  UID[1] = HAL_GetUIDw1();
 800c4c4:	f7f4 fd78 	bl	8000fb8 <HAL_GetUIDw1>
 800c4c8:	4604      	mov	r4, r0
	  UID[2] = HAL_GetUIDw2();
 800c4ca:	f7f4 fd7b 	bl	8000fc4 <HAL_GetUIDw2>
	  uint32_t UID_PLAYER_1[ 3 ];
	  UID_PLAYER_1[0] = 0x470058;
	  UID_PLAYER_1[1] = 0x58485018;
	  UID_PLAYER_1[2] = 0x20383852;

	  if ( ( UID[0] == UID_COORDINATOR[0] ) && ( UID[1] == UID_COORDINATOR[1] ) && ( UID[2] == UID_COORDINATOR[2] ) ) return 0;
 800c4ce:	4b11      	ldr	r3, [pc, #68]	; (800c514 <check_board_id+0x58>)
 800c4d0:	429d      	cmp	r5, r3
 800c4d2:	d10c      	bne.n	800c4ee <check_board_id+0x32>
 800c4d4:	4b10      	ldr	r3, [pc, #64]	; (800c518 <check_board_id+0x5c>)
 800c4d6:	429c      	cmp	r4, r3
 800c4d8:	d11a      	bne.n	800c510 <check_board_id+0x54>
 800c4da:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 800c4de:	f5a3 53a6 	sub.w	r3, r3, #5312	; 0x14c0
 800c4e2:	3b1b      	subs	r3, #27
 800c4e4:	4298      	cmp	r0, r3
 800c4e6:	bf14      	ite	ne
 800c4e8:	2002      	movne	r0, #2
 800c4ea:	2000      	moveq	r0, #0
 800c4ec:	bd38      	pop	{r3, r4, r5, pc}

	  if ( ( UID[0] == UID_PLAYER_1[0] ) && ( UID[1] == UID_PLAYER_1[1] ) && ( UID[2] == UID_PLAYER_1[2] ) ) return 1;
 800c4ee:	4b0b      	ldr	r3, [pc, #44]	; (800c51c <check_board_id+0x60>)
 800c4f0:	429d      	cmp	r5, r3
 800c4f2:	d10d      	bne.n	800c510 <check_board_id+0x54>
 800c4f4:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 800c4f8:	f503 33a7 	add.w	r3, r3, #85504	; 0x14e00
 800c4fc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800c500:	429c      	cmp	r4, r3
 800c502:	d105      	bne.n	800c510 <check_board_id+0x54>
 800c504:	4b06      	ldr	r3, [pc, #24]	; (800c520 <check_board_id+0x64>)
 800c506:	4298      	cmp	r0, r3
 800c508:	bf14      	ite	ne
 800c50a:	2002      	movne	r0, #2
 800c50c:	2001      	moveq	r0, #1
 800c50e:	bd38      	pop	{r3, r4, r5, pc}

	  return 2;
 800c510:	2002      	movs	r0, #2
}
 800c512:	bd38      	pop	{r3, r4, r5, pc}
 800c514:	002d0025 	.word	0x002d0025
 800c518:	3137470f 	.word	0x3137470f
 800c51c:	00470058 	.word	0x00470058
 800c520:	20383852 	.word	0x20383852

0800c524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c524:	b530      	push	{r4, r5, lr}
 800c526:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c528:	2230      	movs	r2, #48	; 0x30
 800c52a:	2100      	movs	r1, #0
 800c52c:	a808      	add	r0, sp, #32
 800c52e:	f001 fb39 	bl	800dba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c532:	2100      	movs	r1, #0
 800c534:	2214      	movs	r2, #20
 800c536:	a803      	add	r0, sp, #12
 800c538:	f001 fb34 	bl	800dba4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c53c:	2400      	movs	r4, #0
 800c53e:	4b1d      	ldr	r3, [pc, #116]	; (800c5b4 <SystemClock_Config+0x90>)
 800c540:	9401      	str	r4, [sp, #4]
 800c542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c544:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c548:	641a      	str	r2, [r3, #64]	; 0x40
 800c54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c54c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c550:	9301      	str	r3, [sp, #4]
 800c552:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c554:	4b18      	ldr	r3, [pc, #96]	; (800c5b8 <SystemClock_Config+0x94>)
 800c556:	9402      	str	r4, [sp, #8]
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c55e:	601a      	str	r2, [r3, #0]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c566:	9302      	str	r3, [sp, #8]
 800c568:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c56a:	2301      	movs	r3, #1
 800c56c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c56e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c572:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c574:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c578:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800c57a:	2308      	movs	r3, #8
 800c57c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800c57e:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c582:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 800c584:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c586:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800c588:	2307      	movs	r3, #7
 800c58a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c58c:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c58e:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c590:	f7f6 f904 	bl	800279c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c594:	230f      	movs	r3, #15
 800c596:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c598:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c59c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c59e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c5a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c5a4:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c5a6:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c5a8:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c5aa:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c5ac:	f7f6 faa6 	bl	8002afc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800c5b0:	b015      	add	sp, #84	; 0x54
 800c5b2:	bd30      	pop	{r4, r5, pc}
 800c5b4:	40023800 	.word	0x40023800
 800c5b8:	40007000 	.word	0x40007000

0800c5bc <main>:
{
 800c5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5c0:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 800c5c2:	f7f4 fcb3 	bl	8000f2c <HAL_Init>
  SystemClock_Config();
 800c5c6:	f7ff ffad 	bl	800c524 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5ca:	2214      	movs	r2, #20
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	a80b      	add	r0, sp, #44	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c5d0:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5d2:	f001 fae7 	bl	800dba4 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c5d6:	4baa      	ldr	r3, [pc, #680]	; (800c880 <main+0x2c4>)
 800c5d8:	9401      	str	r4, [sp, #4]
 800c5da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800c5dc:	48a9      	ldr	r0, [pc, #676]	; (800c884 <main+0x2c8>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c5de:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 800c8cc <main+0x310>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c5e2:	f042 0210 	orr.w	r2, r2, #16
 800c5e6:	631a      	str	r2, [r3, #48]	; 0x30
 800c5e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5ea:	f002 0210 	and.w	r2, r2, #16
 800c5ee:	9201      	str	r2, [sp, #4]
 800c5f0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c5f2:	9402      	str	r4, [sp, #8]
 800c5f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5f6:	f042 0204 	orr.w	r2, r2, #4
 800c5fa:	631a      	str	r2, [r3, #48]	; 0x30
 800c5fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5fe:	f002 0204 	and.w	r2, r2, #4
 800c602:	9202      	str	r2, [sp, #8]
 800c604:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c606:	9403      	str	r4, [sp, #12]
 800c608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c60a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c60e:	631a      	str	r2, [r3, #48]	; 0x30
 800c610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c612:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c616:	9203      	str	r2, [sp, #12]
 800c618:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c61a:	9404      	str	r4, [sp, #16]
 800c61c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c61e:	f042 0201 	orr.w	r2, r2, #1
 800c622:	631a      	str	r2, [r3, #48]	; 0x30
 800c624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c626:	f002 0201 	and.w	r2, r2, #1
 800c62a:	9204      	str	r2, [sp, #16]
 800c62c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c62e:	9405      	str	r4, [sp, #20]
 800c630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c632:	f042 0202 	orr.w	r2, r2, #2
 800c636:	631a      	str	r2, [r3, #48]	; 0x30
 800c638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c63a:	f002 0202 	and.w	r2, r2, #2
 800c63e:	9205      	str	r2, [sp, #20]
 800c640:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c642:	9406      	str	r4, [sp, #24]
 800c644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c646:	f042 0208 	orr.w	r2, r2, #8
 800c64a:	631a      	str	r2, [r3, #48]	; 0x30
 800c64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c64e:	f003 0308 	and.w	r3, r3, #8
 800c652:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800c654:	4622      	mov	r2, r4
 800c656:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c658:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800c65a:	f7f5 fba1 	bl	8001da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800c65e:	2201      	movs	r2, #1
 800c660:	4611      	mov	r1, r2
 800c662:	4889      	ldr	r0, [pc, #548]	; (800c888 <main+0x2cc>)
 800c664:	f7f5 fb9c 	bl	8001da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800c668:	4622      	mov	r2, r4
 800c66a:	f24f 0110 	movw	r1, #61456	; 0xf010
 800c66e:	4887      	ldr	r0, [pc, #540]	; (800c88c <main+0x2d0>)
 800c670:	f7f5 fb96 	bl	8001da0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c674:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800c676:	2508      	movs	r5, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800c678:	a90b      	add	r1, sp, #44	; 0x2c
 800c67a:	4882      	ldr	r0, [pc, #520]	; (800c884 <main+0x2c8>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800c67c:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c67e:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c680:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c682:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800c684:	f7f5 faac 	bl	8001be0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B_COORDINATOR_Pin;
 800c688:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(B_COORDINATOR_GPIO_Port, &GPIO_InitStruct);
 800c68a:	a90b      	add	r1, sp, #44	; 0x2c
 800c68c:	487d      	ldr	r0, [pc, #500]	; (800c884 <main+0x2c8>)
  GPIO_InitStruct.Pin = B_COORDINATOR_Pin;
 800c68e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c690:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c692:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(B_COORDINATOR_GPIO_Port, &GPIO_InitStruct);
 800c694:	f7f5 faa4 	bl	8001be0 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800c698:	a90b      	add	r1, sp, #44	; 0x2c
 800c69a:	487b      	ldr	r0, [pc, #492]	; (800c888 <main+0x2cc>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800c69c:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c69e:	2705      	movs	r7, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c6a0:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6a2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6a4:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800c6a6:	f7f5 fa9b 	bl	8001be0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800c6aa:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800c6ac:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6ae:	2502      	movs	r5, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800c6b0:	4875      	ldr	r0, [pc, #468]	; (800c888 <main+0x2cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6b2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c6b4:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6b6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6b8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800c6ba:	f7f5 fa91 	bl	8001be0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800c6be:	a90b      	add	r1, sp, #44	; 0x2c
 800c6c0:	4873      	ldr	r0, [pc, #460]	; (800c890 <main+0x2d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c6c2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin;
 800c6c6:	f04f 0960 	mov.w	r9, #96	; 0x60
  GPIO_InitStruct.Pin = B1_Pin;
 800c6ca:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6cc:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800c6ce:	f7f5 fa87 	bl	8001be0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c6d2:	a90b      	add	r1, sp, #44	; 0x2c
 800c6d4:	486e      	ldr	r0, [pc, #440]	; (800c890 <main+0x2d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6d6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c6d8:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin;
 800c6da:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6de:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6e0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c6e2:	f7f5 fa7d 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800c6e6:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800c6e8:	a90b      	add	r1, sp, #44	; 0x2c
 800c6ea:	486a      	ldr	r0, [pc, #424]	; (800c894 <main+0x2d8>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800c6ec:	930b      	str	r3, [sp, #44]	; 0x2c

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800c6ee:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c6f2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6f4:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800c6f6:	f7f5 fa73 	bl	8001be0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800c6fa:	a90b      	add	r1, sp, #44	; 0x2c
 800c6fc:	4865      	ldr	r0, [pc, #404]	; (800c894 <main+0x2d8>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800c6fe:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c702:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c704:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c706:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c708:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800c70a:	f7f5 fa69 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800c70e:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c712:	a90b      	add	r1, sp, #44	; 0x2c
 800c714:	485d      	ldr	r0, [pc, #372]	; (800c88c <main+0x2d0>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800c716:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c718:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c71a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c71c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c71e:	f7f5 fa5f 	bl	8001be0 <HAL_GPIO_Init>
  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800c722:	2306      	movs	r3, #6
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 800c724:	a90b      	add	r1, sp, #44	; 0x2c
 800c726:	4858      	ldr	r0, [pc, #352]	; (800c888 <main+0x2cc>)
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
 800c728:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c72c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800c72e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c730:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c732:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 800c734:	f7f5 fa54 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800c738:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800c73a:	a90b      	add	r1, sp, #44	; 0x2c
 800c73c:	4853      	ldr	r0, [pc, #332]	; (800c88c <main+0x2d0>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800c73e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c740:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c742:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800c744:	f7f5 fa4c 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800c748:	a90b      	add	r1, sp, #44	; 0x2c
 800c74a:	484e      	ldr	r0, [pc, #312]	; (800c884 <main+0x2c8>)
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800c74c:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c74e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c752:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800c754:	f7f5 fa44 	bl	8001be0 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 800c758:	484f      	ldr	r0, [pc, #316]	; (800c898 <main+0x2dc>)
  hi2c1.Init.ClockSpeed = 100000;
 800c75a:	4a50      	ldr	r2, [pc, #320]	; (800c89c <main+0x2e0>)
 800c75c:	4b50      	ldr	r3, [pc, #320]	; (800c8a0 <main+0x2e4>)
  htim2.Instance = TIM2;
 800c75e:	4d51      	ldr	r5, [pc, #324]	; (800c8a4 <main+0x2e8>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800c760:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 800c762:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c766:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c76a:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 800c76c:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c76e:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800c770:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c772:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c774:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c776:	f7f5 ff6d 	bl	8002654 <HAL_I2C_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c77a:	2210      	movs	r2, #16
 800c77c:	4621      	mov	r1, r4
 800c77e:	a80b      	add	r0, sp, #44	; 0x2c
 800c780:	f001 fa10 	bl	800dba4 <memset>
  htim2.Init.Prescaler = 8399;
 800c784:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c788:	f242 03cf 	movw	r3, #8399	; 0x20cf
 800c78c:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c790:	4628      	mov	r0, r5
  htim2.Init.Period = 4999;
 800c792:	f241 3387 	movw	r3, #4999	; 0x1387
 800c796:	60eb      	str	r3, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c798:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c79a:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c79c:	61ac      	str	r4, [r5, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c79e:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c7a2:	9407      	str	r4, [sp, #28]
 800c7a4:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c7a6:	f7f6 fc6d 	bl	8003084 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c7aa:	a90b      	add	r1, sp, #44	; 0x2c
 800c7ac:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c7ae:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c7b2:	f7f6 fd3d 	bl	8003230 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c7b6:	a907      	add	r1, sp, #28
 800c7b8:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c7ba:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c7bc:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c7be:	f7f6 fdf9 	bl	80033b4 <HAL_TIMEx_MasterConfigSynchronization>
  __HAL_TIM_SET_AUTORELOAD( &htim2, ( TIM2_MS * 10 ) - 1 );
 800c7c2:	682a      	ldr	r2, [r5, #0]
 800c7c4:	2363      	movs	r3, #99	; 0x63
 800c7c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c7c8:	60eb      	str	r3, [r5, #12]
  MX_USB_HOST_Init();
 800c7ca:	f000 fc53 	bl	800d074 <MX_USB_HOST_Init>
  huart6.Instance = USART6;
 800c7ce:	4836      	ldr	r0, [pc, #216]	; (800c8a8 <main+0x2ec>)
  huart6.Init.BaudRate = 115200;
 800c7d0:	4b36      	ldr	r3, [pc, #216]	; (800c8ac <main+0x2f0>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800c7d2:	6084      	str	r4, [r0, #8]
  huart6.Init.BaudRate = 115200;
 800c7d4:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c7d8:	270c      	movs	r7, #12
  huart6.Init.BaudRate = 115200;
 800c7da:	e880 0108 	stmia.w	r0, {r3, r8}
  huart6.Init.StopBits = UART_STOPBITS_1;
 800c7de:	60c4      	str	r4, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800c7e0:	6104      	str	r4, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c7e2:	6147      	str	r7, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c7e4:	6184      	str	r4, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800c7e6:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800c7e8:	f7f6 ff54 	bl	8003694 <HAL_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 800c7ec:	2210      	movs	r2, #16
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	a80b      	add	r0, sp, #44	; 0x2c
 800c7f2:	f001 f9d7 	bl	800dba4 <memset>
  hadc1.Instance = ADC1;
 800c7f6:	4d2e      	ldr	r5, [pc, #184]	; (800c8b0 <main+0x2f4>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c7f8:	482e      	ldr	r0, [pc, #184]	; (800c8b4 <main+0x2f8>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c7fa:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c7fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c800:	e885 0009 	stmia.w	r5, {r0, r3}
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c804:	4b2c      	ldr	r3, [pc, #176]	; (800c8b8 <main+0x2fc>)
 800c806:	62ab      	str	r3, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c808:	4628      	mov	r0, r5
  hadc1.Init.ScanConvMode = DISABLE;
 800c80a:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800c80c:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c80e:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c812:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c814:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 800c816:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800c818:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c81c:	616e      	str	r6, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c81e:	f7f4 fbd7 	bl	8000fd0 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c822:	4628      	mov	r0, r5
  hdac.Instance = DAC;
 800c824:	4d25      	ldr	r5, [pc, #148]	; (800c8bc <main+0x300>)
  sConfig.Rank = 1;
 800c826:	960c      	str	r6, [sp, #48]	; 0x30
  sConfig.Channel = ADC_CHANNEL_9;
 800c828:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c82a:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.Channel = ADC_CHANNEL_9;
 800c82c:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800c82e:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c830:	f7f4 fcea 	bl	8001208 <HAL_ADC_ConfigChannel>
  hdac.Instance = DAC;
 800c834:	4b22      	ldr	r3, [pc, #136]	; (800c8c0 <main+0x304>)
 800c836:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800c838:	4628      	mov	r0, r5
  DAC_ChannelConfTypeDef sConfig = {0};
 800c83a:	940b      	str	r4, [sp, #44]	; 0x2c
 800c83c:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800c83e:	f7f4 fde3 	bl	8001408 <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800c842:	4622      	mov	r2, r4
 800c844:	a90b      	add	r1, sp, #44	; 0x2c
 800c846:	4628      	mov	r0, r5
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800c848:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800c84a:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800c84c:	f7f4 fe1d 	bl	800148a <HAL_DAC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c850:	2210      	movs	r2, #16
 800c852:	4621      	mov	r1, r4
 800c854:	a807      	add	r0, sp, #28
 800c856:	f001 f9a5 	bl	800dba4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c85a:	221c      	movs	r2, #28
 800c85c:	4621      	mov	r1, r4
 800c85e:	a80b      	add	r0, sp, #44	; 0x2c
 800c860:	f001 f9a0 	bl	800dba4 <memset>
  htim9.Instance = TIM9;
 800c864:	4d17      	ldr	r5, [pc, #92]	; (800c8c4 <main+0x308>)
  htim9.Init.Prescaler = 1679;
 800c866:	4b18      	ldr	r3, [pc, #96]	; (800c8c8 <main+0x30c>)
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c868:	60ac      	str	r4, [r5, #8]
  htim9.Init.Prescaler = 1679;
 800c86a:	f240 6e8f 	movw	lr, #1679	; 0x68f
 800c86e:	e885 4008 	stmia.w	r5, {r3, lr}
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800c872:	4628      	mov	r0, r5
  htim9.Init.Period = 2150;
 800c874:	f640 0366 	movw	r3, #2150	; 0x866
 800c878:	60eb      	str	r3, [r5, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c87a:	612c      	str	r4, [r5, #16]
 800c87c:	e028      	b.n	800c8d0 <main+0x314>
 800c87e:	bf00      	nop
 800c880:	40023800 	.word	0x40023800
 800c884:	40021000 	.word	0x40021000
 800c888:	40020800 	.word	0x40020800
 800c88c:	40020c00 	.word	0x40020c00
 800c890:	40020000 	.word	0x40020000
 800c894:	40020400 	.word	0x40020400
 800c898:	20008708 	.word	0x20008708
 800c89c:	40005400 	.word	0x40005400
 800c8a0:	000186a0 	.word	0x000186a0
 800c8a4:	20008aa0 	.word	0x20008aa0
 800c8a8:	20008a60 	.word	0x20008a60
 800c8ac:	40011400 	.word	0x40011400
 800c8b0:	2000879c 	.word	0x2000879c
 800c8b4:	40012000 	.word	0x40012000
 800c8b8:	0f000001 	.word	0x0f000001
 800c8bc:	200089dc 	.word	0x200089dc
 800c8c0:	40007400 	.word	0x40007400
 800c8c4:	20008a08 	.word	0x20008a08
 800c8c8:	40014000 	.word	0x40014000
 800c8cc:	10120000 	.word	0x10120000
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c8d0:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800c8d2:	f7f6 fbd7 	bl	8003084 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800c8d6:	a907      	add	r1, sp, #28
 800c8d8:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c8da:	f8cd a01c 	str.w	sl, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800c8de:	f7f6 fca7 	bl	8003230 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	f7f6 fbe8 	bl	80030b8 <HAL_TIM_PWM_Init>
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c8e8:	4622      	mov	r2, r4
 800c8ea:	a90b      	add	r1, sp, #44	; 0x2c
  sConfigOC.Pulse = 150;
 800c8ec:	2396      	movs	r3, #150	; 0x96
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c8ee:	4628      	mov	r0, r5
  sConfigOC.Pulse = 150;
 800c8f0:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c8f2:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c8f6:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c8f8:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c8fa:	f7f6 fc2d 	bl	8003158 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim9);
 800c8fe:	4628      	mov	r0, r5
 800c900:	f000 f9fa 	bl	800ccf8 <HAL_TIM_MspPostInit>
  hrng.Instance = RNG;
 800c904:	4861      	ldr	r0, [pc, #388]	; (800ca8c <main+0x4d0>)
 800c906:	4b62      	ldr	r3, [pc, #392]	; (800ca90 <main+0x4d4>)
 800c908:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800c90a:	f7f6 f9b7 	bl	8002c7c <HAL_RNG_Init>
  huart5.Instance = UART5;
 800c90e:	4861      	ldr	r0, [pc, #388]	; (800ca94 <main+0x4d8>)
 800c910:	4b61      	ldr	r3, [pc, #388]	; (800ca98 <main+0x4dc>)
  huart3.Instance = USART3;
 800c912:	4d62      	ldr	r5, [pc, #392]	; (800ca9c <main+0x4e0>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800c914:	6084      	str	r4, [r0, #8]
  huart5.Init.BaudRate = 115200;
 800c916:	e880 0108 	stmia.w	r0, {r3, r8}
  huart5.Init.StopBits = UART_STOPBITS_1;
 800c91a:	60c4      	str	r4, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800c91c:	6104      	str	r4, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800c91e:	6147      	str	r7, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c920:	6184      	str	r4, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800c922:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800c924:	f7f6 feb6 	bl	8003694 <HAL_UART_Init>
  huart3.Instance = USART3;
 800c928:	4b5d      	ldr	r3, [pc, #372]	; (800caa0 <main+0x4e4>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c92a:	60ac      	str	r4, [r5, #8]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c92c:	4628      	mov	r0, r5
  huart3.Init.BaudRate = 115200;
 800c92e:	e885 0108 	stmia.w	r5, {r3, r8}
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c932:	60ec      	str	r4, [r5, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800c934:	612c      	str	r4, [r5, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c936:	616f      	str	r7, [r5, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c938:	61ac      	str	r4, [r5, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c93a:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c93c:	f7f6 feaa 	bl	8003694 <HAL_UART_Init>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 800c940:	682a      	ldr	r2, [r5, #0]
 800c942:	68d3      	ldr	r3, [r2, #12]
 800c944:	f043 0320 	orr.w	r3, r3, #32
 800c948:	60d3      	str	r3, [r2, #12]
  int board_id = check_board_id();
 800c94a:	f7ff fdb7 	bl	800c4bc <check_board_id>
  switch ( board_id )
 800c94e:	42b0      	cmp	r0, r6
 800c950:	d059      	beq.n	800ca06 <main+0x44a>
 800c952:	2802      	cmp	r0, #2
 800c954:	d05d      	beq.n	800ca12 <main+0x456>
  int referee = 0;
 800c956:	fab0 f480 	clz	r4, r0
 800c95a:	0964      	lsrs	r4, r4, #5
 800c95c:	25fa      	movs	r5, #250	; 0xfa
  web_interface_init( &wi );
 800c95e:	4851      	ldr	r0, [pc, #324]	; (800caa4 <main+0x4e8>)
 800c960:	f7fe fc0e 	bl	800b180 <web_interface_init>
  MX_LWIP_Init_( ip_address );
 800c964:	4628      	mov	r0, r5
 800c966:	f7ff fbcf 	bl	800c108 <MX_LWIP_Init_>
  HAL_TIM_Base_Start_IT( &htim2 );
 800c96a:	484f      	ldr	r0, [pc, #316]	; (800caa8 <main+0x4ec>)
 800c96c:	f7f6 fa6c 	bl	8002e48 <HAL_TIM_Base_Start_IT>
  event_init( &e );
 800c970:	484e      	ldr	r0, [pc, #312]	; (800caac <main+0x4f0>)
 800c972:	f7ff fbbb 	bl	800c0ec <event_init>
  HAL_UART_Receive_IT( &huart6, &recv6_car, 1 );
 800c976:	2201      	movs	r2, #1
 800c978:	494d      	ldr	r1, [pc, #308]	; (800cab0 <main+0x4f4>)
 800c97a:	484e      	ldr	r0, [pc, #312]	; (800cab4 <main+0x4f8>)
 800c97c:	f7f6 ff34 	bl	80037e8 <HAL_UART_Receive_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800c980:	2100      	movs	r1, #0
 800c982:	484d      	ldr	r0, [pc, #308]	; (800cab8 <main+0x4fc>)
 800c984:	f7f4 fd53 	bl	800142e <HAL_DAC_Start>
  HAL_ADC_Start( &hadc1 );
 800c988:	484c      	ldr	r0, [pc, #304]	; (800cabc <main+0x500>)
 800c98a:	f7f4 fbc7 	bl	800111c <HAL_ADC_Start>
  HAL_TIM_Base_Start( &htim9 );
 800c98e:	484c      	ldr	r0, [pc, #304]	; (800cac0 <main+0x504>)
 800c990:	f7f6 fa48 	bl	8002e24 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start( &htim9, TIM_CHANNEL_1 );
 800c994:	2100      	movs	r1, #0
 800c996:	484a      	ldr	r0, [pc, #296]	; (800cac0 <main+0x504>)
 800c998:	f7f6 fcec 	bl	8003374 <HAL_TIM_PWM_Start>
  httpd_init();
 800c99c:	f7f9 f81c 	bl	80059d8 <httpd_init>
  if ( referee )
 800c9a0:	2c00      	cmp	r4, #0
 800c9a2:	d03c      	beq.n	800ca1e <main+0x462>
    bumper_init_referee();
 800c9a4:	f7ff fd6e 	bl	800c484 <bumper_init_referee>
  strcpy( json_orders, "{\"L\":[" );
 800c9a8:	4946      	ldr	r1, [pc, #280]	; (800cac4 <main+0x508>)
 800c9aa:	4847      	ldr	r0, [pc, #284]	; (800cac8 <main+0x50c>)
		if ( event_check( &wi.evt ) )
 800c9ac:	4d3d      	ldr	r5, [pc, #244]	; (800caa4 <main+0x4e8>)
  strcpy( json_orders, "{\"L\":[" );
 800c9ae:	f001 fa16 	bl	800ddde <strcpy>
				bum_game_register( bum_player.name );
 800c9b2:	4e46      	ldr	r6, [pc, #280]	; (800cacc <main+0x510>)
  	  if ( !user_button_pushed && ( ( B1_GPIO_Port->IDR & B1_Pin ) == 1 ) )
 800c9b4:	4f46      	ldr	r7, [pc, #280]	; (800cad0 <main+0x514>)
    MX_USB_HOST_Process();
 800c9b6:	f000 fb7d 	bl	800d0b4 <MX_USB_HOST_Process>
    MX_LWIP_Process();
 800c9ba:	f7ff fc15 	bl	800c1e8 <MX_LWIP_Process>
    if ( referee )
 800c9be:	2c00      	cmp	r4, #0
 800c9c0:	d030      	beq.n	800ca24 <main+0x468>
      bum_process_referee();
 800c9c2:	f7fe fe57 	bl	800b674 <bum_process_referee>
  	  if ( !user_button_pushed && ( ( B1_GPIO_Port->IDR & B1_Pin ) == 1 ) )
 800c9c6:	783b      	ldrb	r3, [r7, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d044      	beq.n	800ca56 <main+0x49a>
    if ( event_check( &e ) ) // If the event has been triggered
 800c9cc:	4837      	ldr	r0, [pc, #220]	; (800caac <main+0x4f0>)
 800c9ce:	f7ff fb93 	bl	800c0f8 <event_check>
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	d0ef      	beq.n	800c9b6 <main+0x3fa>
		bum_process( TIM2_MS );
 800c9d6:	200a      	movs	r0, #10
 800c9d8:	f7fe fbce 	bl	800b178 <bum_process>
		N_BUMPER_DT_MS += TIM2_MS;
 800c9dc:	4a3d      	ldr	r2, [pc, #244]	; (800cad4 <main+0x518>)
 800c9de:	6813      	ldr	r3, [r2, #0]
 800c9e0:	330a      	adds	r3, #10
        if ( N_BUMPER_DT_MS >= BUMPER_DT_MS )
 800c9e2:	2b63      	cmp	r3, #99	; 0x63
 800c9e4:	dc40      	bgt.n	800ca68 <main+0x4ac>
		N_BUMPER_DT_MS += TIM2_MS;
 800c9e6:	6013      	str	r3, [r2, #0]
	  N500 += TIM2_MS;
 800c9e8:	4a3b      	ldr	r2, [pc, #236]	; (800cad8 <main+0x51c>)
 800c9ea:	6813      	ldr	r3, [r2, #0]
 800c9ec:	330a      	adds	r3, #10
	  if ( N500 >= 500 )
 800c9ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
	  N500 += TIM2_MS;
 800c9f2:	6013      	str	r3, [r2, #0]
	  if ( N500 >= 500 )
 800c9f4:	dbde      	blt.n	800c9b4 <main+0x3f8>
		N500 = 0;
 800c9f6:	2300      	movs	r3, #0
		HAL_GPIO_TogglePin( LD3_GPIO_Port, LD3_Pin ); // ORANGE
 800c9f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c9fc:	4837      	ldr	r0, [pc, #220]	; (800cadc <main+0x520>)
		N500 = 0;
 800c9fe:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin( LD3_GPIO_Port, LD3_Pin ); // ORANGE
 800ca00:	f7f5 f9d3 	bl	8001daa <HAL_GPIO_TogglePin>
 800ca04:	e7d5      	b.n	800c9b2 <main+0x3f6>
    	strcpy( bum_player.name, "Axel" );
 800ca06:	4936      	ldr	r1, [pc, #216]	; (800cae0 <main+0x524>)
 800ca08:	4830      	ldr	r0, [pc, #192]	; (800cacc <main+0x510>)
 800ca0a:	f001 f9e8 	bl	800ddde <strcpy>
    	ip_address = 251;
 800ca0e:	25fb      	movs	r5, #251	; 0xfb
    	break;
 800ca10:	e7a5      	b.n	800c95e <main+0x3a2>
    	strcpy( bum_player.name, PLAYER_NAME );
 800ca12:	4934      	ldr	r1, [pc, #208]	; (800cae4 <main+0x528>)
 800ca14:	482d      	ldr	r0, [pc, #180]	; (800cacc <main+0x510>)
 800ca16:	f001 f9e2 	bl	800ddde <strcpy>
    	ip_address = 252;
 800ca1a:	25fc      	movs	r5, #252	; 0xfc
    	break;
 800ca1c:	e79f      	b.n	800c95e <main+0x3a2>
	bumper_init_player();
 800ca1e:	f7ff fd13 	bl	800c448 <bumper_init_player>
 800ca22:	e7c1      	b.n	800c9a8 <main+0x3ec>
      bum_process_player();
 800ca24:	f7fe fc16 	bl	800b254 <bum_process_player>
		if ( event_check( &wi.evt ) )
 800ca28:	4628      	mov	r0, r5
 800ca2a:	f7ff fb65 	bl	800c0f8 <event_check>
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d0cc      	beq.n	800c9cc <main+0x410>
			if ( wi.button_register_player )
 800ca32:	786b      	ldrb	r3, [r5, #1]
 800ca34:	b11b      	cbz	r3, 800ca3e <main+0x482>
				bum_game_register( bum_player.name );
 800ca36:	4630      	mov	r0, r6
				wi.button_register_player = 0;
 800ca38:	706c      	strb	r4, [r5, #1]
				bum_game_register( bum_player.name );
 800ca3a:	f7fe fbbd 	bl	800b1b8 <bum_game_register>
			if ( wi.button_acc )
 800ca3e:	78ab      	ldrb	r3, [r5, #2]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d0c3      	beq.n	800c9cc <main+0x410>
				wi.button_acc = 0;
 800ca44:	2200      	movs	r2, #0
				bum_game_acceleration( wi.acc_x, wi.acc_y, 0 );
 800ca46:	f995 1004 	ldrsb.w	r1, [r5, #4]
 800ca4a:	f995 0003 	ldrsb.w	r0, [r5, #3]
				wi.button_acc = 0;
 800ca4e:	70aa      	strb	r2, [r5, #2]
				bum_game_acceleration( wi.acc_x, wi.acc_y, 0 );
 800ca50:	f7fe fbd2 	bl	800b1f8 <bum_game_acceleration>
 800ca54:	e7ba      	b.n	800c9cc <main+0x410>
  	  if ( !user_button_pushed && ( ( B1_GPIO_Port->IDR & B1_Pin ) == 1 ) )
 800ca56:	4b24      	ldr	r3, [pc, #144]	; (800cae8 <main+0x52c>)
 800ca58:	691b      	ldr	r3, [r3, #16]
 800ca5a:	07db      	lsls	r3, r3, #31
 800ca5c:	d5b6      	bpl.n	800c9cc <main+0x410>
  		user_button_pushed = 1;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	703b      	strb	r3, [r7, #0]
  		bum_referee_start_game();
 800ca62:	f7ff f951 	bl	800bd08 <bum_referee_start_game>
 800ca66:	e7b1      	b.n	800c9cc <main+0x410>
          N_BUMPER_DT_MS = 0;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	6013      	str	r3, [r2, #0]
		  if ( referee )
 800ca6c:	2c00      	cmp	r4, #0
 800ca6e:	d0bb      	beq.n	800c9e8 <main+0x42c>
			bum_referee_calculate( BUMPER_DT_MS );
 800ca70:	2064      	movs	r0, #100	; 0x64
 800ca72:	f7fe fef1 	bl	800b858 <bum_referee_calculate>
			if ( bum_referee_get_n_players() )
 800ca76:	f7ff f965 	bl	800bd44 <bum_referee_get_n_players>
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	b100      	cbz	r0, 800ca80 <main+0x4c4>
				HAL_GPIO_WritePin( LD3_GPIO_Port, LD6_Pin, GPIO_PIN_SET ); // BLUE
 800ca7e:	2201      	movs	r2, #1
				HAL_GPIO_WritePin( LD3_GPIO_Port, LD6_Pin, GPIO_PIN_RESET ); // BLUE
 800ca80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ca84:	4815      	ldr	r0, [pc, #84]	; (800cadc <main+0x520>)
 800ca86:	f7f5 f98b 	bl	8001da0 <HAL_GPIO_WritePin>
 800ca8a:	e7ad      	b.n	800c9e8 <main+0x42c>
 800ca8c:	20008a48 	.word	0x20008a48
 800ca90:	50060800 	.word	0x50060800
 800ca94:	2000875c 	.word	0x2000875c
 800ca98:	40005000 	.word	0x40005000
 800ca9c:	200086c8 	.word	0x200086c8
 800caa0:	40004800 	.word	0x40004800
 800caa4:	20008a58 	.word	0x20008a58
 800caa8:	20008aa0 	.word	0x20008aa0
 800caac:	20008b00 	.word	0x20008b00
 800cab0:	20000e64 	.word	0x20000e64
 800cab4:	20008a60 	.word	0x20008a60
 800cab8:	200089dc 	.word	0x200089dc
 800cabc:	2000879c 	.word	0x2000879c
 800cac0:	20008a08 	.word	0x20008a08
 800cac4:	0800ef89 	.word	0x0800ef89
 800cac8:	200087e4 	.word	0x200087e4
 800cacc:	20008af8 	.word	0x20008af8
 800cad0:	20000e65 	.word	0x20000e65
 800cad4:	20000e60 	.word	0x20000e60
 800cad8:	20000e5c 	.word	0x20000e5c
 800cadc:	40020c00 	.word	0x40020c00
 800cae0:	0801292c 	.word	0x0801292c
 800cae4:	08012931 	.word	0x08012931
 800cae8:	40020000 	.word	0x40020000

0800caec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800caec:	4770      	bx	lr

0800caee <httpd_post_begin>:
err_t httpd_post_begin(void *connection, const char *uri, const char *http_request,
                       u16_t http_request_len, int content_len, char *response_uri,
                       u16_t response_uri_len, u8_t *post_auto_wnd)
{
	return ERR_OK;
}
 800caee:	2000      	movs	r0, #0
 800caf0:	4770      	bx	lr

0800caf2 <httpd_post_receive_data>:

err_t httpd_post_receive_data(void *connection, struct pbuf *p)
{
	return ERR_OK;
}
 800caf2:	2000      	movs	r0, #0
 800caf4:	4770      	bx	lr

0800caf6 <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{
 800caf6:	4770      	bx	lr

0800caf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800caf8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cafa:	4b0c      	ldr	r3, [pc, #48]	; (800cb2c <HAL_MspInit+0x34>)
 800cafc:	2100      	movs	r1, #0
 800cafe:	9100      	str	r1, [sp, #0]
 800cb00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb06:	645a      	str	r2, [r3, #68]	; 0x44
 800cb08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb0a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800cb0e:	9200      	str	r2, [sp, #0]
 800cb10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800cb12:	9101      	str	r1, [sp, #4]
 800cb14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800cb1a:	641a      	str	r2, [r3, #64]	; 0x40
 800cb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb22:	9301      	str	r3, [sp, #4]
 800cb24:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cb26:	b002      	add	sp, #8
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	40023800 	.word	0x40023800

0800cb30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800cb30:	b510      	push	{r4, lr}
 800cb32:	4604      	mov	r4, r0
 800cb34:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb36:	2214      	movs	r2, #20
 800cb38:	2100      	movs	r1, #0
 800cb3a:	a803      	add	r0, sp, #12
 800cb3c:	f001 f832 	bl	800dba4 <memset>
  if(hadc->Instance==ADC1)
 800cb40:	6822      	ldr	r2, [r4, #0]
 800cb42:	4b12      	ldr	r3, [pc, #72]	; (800cb8c <HAL_ADC_MspInit+0x5c>)
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d11e      	bne.n	800cb86 <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800cb48:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800cb4c:	2100      	movs	r1, #0
 800cb4e:	9101      	str	r1, [sp, #4]
 800cb50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = AI_PB1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(AI_PB1_GPIO_Port, &GPIO_InitStruct);
 800cb52:	480f      	ldr	r0, [pc, #60]	; (800cb90 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800cb54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb58:	645a      	str	r2, [r3, #68]	; 0x44
 800cb5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb5c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800cb60:	9201      	str	r2, [sp, #4]
 800cb62:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cb64:	9102      	str	r1, [sp, #8]
 800cb66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb68:	f042 0202 	orr.w	r2, r2, #2
 800cb6c:	631a      	str	r2, [r3, #48]	; 0x30
 800cb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb70:	f003 0302 	and.w	r3, r3, #2
 800cb74:	9302      	str	r3, [sp, #8]
 800cb76:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AI_PB1_Pin;
 800cb78:	2302      	movs	r3, #2
 800cb7a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(AI_PB1_GPIO_Port, &GPIO_InitStruct);
 800cb7c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cb7e:	2303      	movs	r3, #3
 800cb80:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(AI_PB1_GPIO_Port, &GPIO_InitStruct);
 800cb82:	f7f5 f82d 	bl	8001be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800cb86:	b008      	add	sp, #32
 800cb88:	bd10      	pop	{r4, pc}
 800cb8a:	bf00      	nop
 800cb8c:	40012000 	.word	0x40012000
 800cb90:	40020400 	.word	0x40020400

0800cb94 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800cb94:	b510      	push	{r4, lr}
 800cb96:	4604      	mov	r4, r0
 800cb98:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb9a:	2214      	movs	r2, #20
 800cb9c:	2100      	movs	r1, #0
 800cb9e:	a803      	add	r0, sp, #12
 800cba0:	f001 f800 	bl	800dba4 <memset>
  if(hdac->Instance==DAC)
 800cba4:	6822      	ldr	r2, [r4, #0]
 800cba6:	4b12      	ldr	r3, [pc, #72]	; (800cbf0 <HAL_DAC_MspInit+0x5c>)
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d11e      	bne.n	800cbea <HAL_DAC_MspInit+0x56>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800cbac:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	9101      	str	r1, [sp, #4]
 800cbb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = AO_PA4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(AO_PA4_GPIO_Port, &GPIO_InitStruct);
 800cbb6:	480f      	ldr	r0, [pc, #60]	; (800cbf4 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 800cbb8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800cbbc:	641a      	str	r2, [r3, #64]	; 0x40
 800cbbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbc0:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800cbc4:	9201      	str	r2, [sp, #4]
 800cbc6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cbc8:	9102      	str	r1, [sp, #8]
 800cbca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbcc:	f042 0201 	orr.w	r2, r2, #1
 800cbd0:	631a      	str	r2, [r3, #48]	; 0x30
 800cbd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd4:	f003 0301 	and.w	r3, r3, #1
 800cbd8:	9302      	str	r3, [sp, #8]
 800cbda:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AO_PA4_Pin;
 800cbdc:	2310      	movs	r3, #16
 800cbde:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(AO_PA4_GPIO_Port, &GPIO_InitStruct);
 800cbe0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cbe2:	2303      	movs	r3, #3
 800cbe4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(AO_PA4_GPIO_Port, &GPIO_InitStruct);
 800cbe6:	f7f4 fffb 	bl	8001be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800cbea:	b008      	add	sp, #32
 800cbec:	bd10      	pop	{r4, pc}
 800cbee:	bf00      	nop
 800cbf0:	40007400 	.word	0x40007400
 800cbf4:	40020000 	.word	0x40020000

0800cbf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800cbf8:	b530      	push	{r4, r5, lr}
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cbfe:	2214      	movs	r2, #20
 800cc00:	2100      	movs	r1, #0
 800cc02:	a803      	add	r0, sp, #12
 800cc04:	f000 ffce 	bl	800dba4 <memset>
  if(hi2c->Instance==I2C1)
 800cc08:	6822      	ldr	r2, [r4, #0]
 800cc0a:	4b14      	ldr	r3, [pc, #80]	; (800cc5c <HAL_I2C_MspInit+0x64>)
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d122      	bne.n	800cc56 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cc10:	4c13      	ldr	r4, [pc, #76]	; (800cc60 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc12:	4814      	ldr	r0, [pc, #80]	; (800cc64 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cc14:	2500      	movs	r5, #0
 800cc16:	9501      	str	r5, [sp, #4]
 800cc18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cc1a:	f043 0302 	orr.w	r3, r3, #2
 800cc1e:	6323      	str	r3, [r4, #48]	; 0x30
 800cc20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cc22:	f003 0302 	and.w	r3, r3, #2
 800cc26:	9301      	str	r3, [sp, #4]
 800cc28:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800cc2a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800cc2e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cc30:	2312      	movs	r3, #18
 800cc32:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc34:	2301      	movs	r3, #1
 800cc36:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc38:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800cc3a:	2304      	movs	r3, #4
 800cc3c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc3e:	f7f4 ffcf 	bl	8001be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800cc42:	9502      	str	r5, [sp, #8]
 800cc44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc4a:	6423      	str	r3, [r4, #64]	; 0x40
 800cc4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc52:	9302      	str	r3, [sp, #8]
 800cc54:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800cc56:	b009      	add	sp, #36	; 0x24
 800cc58:	bd30      	pop	{r4, r5, pc}
 800cc5a:	bf00      	nop
 800cc5c:	40005400 	.word	0x40005400
 800cc60:	40023800 	.word	0x40023800
 800cc64:	40020400 	.word	0x40020400

0800cc68 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 800cc68:	6802      	ldr	r2, [r0, #0]
 800cc6a:	4b09      	ldr	r3, [pc, #36]	; (800cc90 <HAL_RNG_MspInit+0x28>)
 800cc6c:	429a      	cmp	r2, r3
{
 800cc6e:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 800cc70:	d10b      	bne.n	800cc8a <HAL_RNG_MspInit+0x22>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800cc72:	2300      	movs	r3, #0
 800cc74:	9301      	str	r3, [sp, #4]
 800cc76:	4b07      	ldr	r3, [pc, #28]	; (800cc94 <HAL_RNG_MspInit+0x2c>)
 800cc78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc7e:	635a      	str	r2, [r3, #52]	; 0x34
 800cc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc86:	9301      	str	r3, [sp, #4]
 800cc88:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800cc8a:	b002      	add	sp, #8
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	50060800 	.word	0x50060800
 800cc94:	40023800 	.word	0x40023800

0800cc98 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800cc98:	6803      	ldr	r3, [r0, #0]
 800cc9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800cc9e:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 800cca0:	d116      	bne.n	800ccd0 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800cca2:	2200      	movs	r2, #0
 800cca4:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800cca8:	9200      	str	r2, [sp, #0]
 800ccaa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ccac:	f041 0101 	orr.w	r1, r1, #1
 800ccb0:	6419      	str	r1, [r3, #64]	; 0x40
 800ccb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccb4:	f003 0301 	and.w	r3, r3, #1
 800ccb8:	9300      	str	r3, [sp, #0]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800ccba:	201c      	movs	r0, #28
 800ccbc:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ccbe:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800ccc0:	f7f4 fb4a 	bl	8001358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ccc4:	201c      	movs	r0, #28
 800ccc6:	f7f4 fb7b 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800ccca:	b003      	add	sp, #12
 800cccc:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM9)
 800ccd0:	4a07      	ldr	r2, [pc, #28]	; (800ccf0 <HAL_TIM_Base_MspInit+0x58>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d1f9      	bne.n	800ccca <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	9301      	str	r3, [sp, #4]
 800ccda:	4b06      	ldr	r3, [pc, #24]	; (800ccf4 <HAL_TIM_Base_MspInit+0x5c>)
 800ccdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccde:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cce2:	645a      	str	r2, [r3, #68]	; 0x44
 800cce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ccea:	9301      	str	r3, [sp, #4]
 800ccec:	9b01      	ldr	r3, [sp, #4]
}
 800ccee:	e7ec      	b.n	800ccca <HAL_TIM_Base_MspInit+0x32>
 800ccf0:	40014000 	.word	0x40014000
 800ccf4:	40023800 	.word	0x40023800

0800ccf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ccf8:	b510      	push	{r4, lr}
 800ccfa:	4604      	mov	r4, r0
 800ccfc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccfe:	2214      	movs	r2, #20
 800cd00:	2100      	movs	r1, #0
 800cd02:	a801      	add	r0, sp, #4
 800cd04:	f000 ff4e 	bl	800dba4 <memset>
  if(htim->Instance==TIM9)
 800cd08:	6822      	ldr	r2, [r4, #0]
 800cd0a:	4b0d      	ldr	r3, [pc, #52]	; (800cd40 <HAL_TIM_MspPostInit+0x48>)
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d115      	bne.n	800cd3c <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800cd10:	2300      	movs	r3, #0
 800cd12:	9300      	str	r3, [sp, #0]
 800cd14:	4b0b      	ldr	r3, [pc, #44]	; (800cd44 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cd16:	480c      	ldr	r0, [pc, #48]	; (800cd48 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800cd18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd1a:	f042 0210 	orr.w	r2, r2, #16
 800cd1e:	631a      	str	r2, [r3, #48]	; 0x30
 800cd20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd22:	f003 0310 	and.w	r3, r3, #16
 800cd26:	9300      	str	r3, [sp, #0]
 800cd28:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800cd2a:	2320      	movs	r3, #32
 800cd2c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd2e:	2302      	movs	r3, #2
 800cd30:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cd32:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800cd34:	2303      	movs	r3, #3
 800cd36:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cd38:	f7f4 ff52 	bl	8001be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800cd3c:	b006      	add	sp, #24
 800cd3e:	bd10      	pop	{r4, pc}
 800cd40:	40014000 	.word	0x40014000
 800cd44:	40023800 	.word	0x40023800
 800cd48:	40021000 	.word	0x40021000

0800cd4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd50:	4604      	mov	r4, r0
 800cd52:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd54:	2214      	movs	r2, #20
 800cd56:	2100      	movs	r1, #0
 800cd58:	a807      	add	r0, sp, #28
 800cd5a:	f000 ff23 	bl	800dba4 <memset>
  if(huart->Instance==UART5)
 800cd5e:	6823      	ldr	r3, [r4, #0]
 800cd60:	4a53      	ldr	r2, [pc, #332]	; (800ceb0 <HAL_UART_MspInit+0x164>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d146      	bne.n	800cdf4 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800cd66:	4b53      	ldr	r3, [pc, #332]	; (800ceb4 <HAL_UART_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd68:	4853      	ldr	r0, [pc, #332]	; (800ceb8 <HAL_UART_MspInit+0x16c>)
    __HAL_RCC_UART5_CLK_ENABLE();
 800cd6a:	2400      	movs	r4, #0
 800cd6c:	9400      	str	r4, [sp, #0]
 800cd6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd70:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cd74:	641a      	str	r2, [r3, #64]	; 0x40
 800cd76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd78:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800cd7c:	9200      	str	r2, [sp, #0]
 800cd7e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cd80:	9401      	str	r4, [sp, #4]
 800cd82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd84:	f042 0204 	orr.w	r2, r2, #4
 800cd88:	631a      	str	r2, [r3, #48]	; 0x30
 800cd8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd8c:	f002 0204 	and.w	r2, r2, #4
 800cd90:	9201      	str	r2, [sp, #4]
 800cd92:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cd94:	9402      	str	r4, [sp, #8]
 800cd96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd98:	f042 0208 	orr.w	r2, r2, #8
 800cd9c:	631a      	str	r2, [r3, #48]	; 0x30
 800cd9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cda0:	f003 0308 	and.w	r3, r3, #8
 800cda4:	9302      	str	r3, [sp, #8]
 800cda6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cda8:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800cdac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cdb0:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cdb2:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800cdb4:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cdb6:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800cdb8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdba:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cdbe:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cdc0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800cdc2:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cdc4:	f7f4 ff0c 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800cdc8:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cdca:	a907      	add	r1, sp, #28
 800cdcc:	483b      	ldr	r0, [pc, #236]	; (800cebc <HAL_UART_MspInit+0x170>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800cdce:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdd0:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cdd4:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cdd6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800cdd8:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cdda:	f7f4 ff01 	bl	8001be0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800cdde:	2035      	movs	r0, #53	; 0x35
 800cde0:	4622      	mov	r2, r4
 800cde2:	4621      	mov	r1, r4
 800cde4:	f7f4 fab8 	bl	8001358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800cde8:	2035      	movs	r0, #53	; 0x35
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800cdea:	f7f4 fae9 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800cdee:	b00c      	add	sp, #48	; 0x30
 800cdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(huart->Instance==USART3)
 800cdf4:	4a32      	ldr	r2, [pc, #200]	; (800cec0 <HAL_UART_MspInit+0x174>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d12b      	bne.n	800ce52 <HAL_UART_MspInit+0x106>
    __HAL_RCC_USART3_CLK_ENABLE();
 800cdfa:	4b2e      	ldr	r3, [pc, #184]	; (800ceb4 <HAL_UART_MspInit+0x168>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cdfc:	482f      	ldr	r0, [pc, #188]	; (800cebc <HAL_UART_MspInit+0x170>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800cdfe:	2400      	movs	r4, #0
 800ce00:	9403      	str	r4, [sp, #12]
 800ce02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce04:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ce08:	641a      	str	r2, [r3, #64]	; 0x40
 800ce0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce0c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800ce10:	9203      	str	r2, [sp, #12]
 800ce12:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ce14:	9404      	str	r4, [sp, #16]
 800ce16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce18:	f042 0208 	orr.w	r2, r2, #8
 800ce1c:	631a      	str	r2, [r3, #48]	; 0x30
 800ce1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce20:	f003 0308 	and.w	r3, r3, #8
 800ce24:	9304      	str	r3, [sp, #16]
 800ce26:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800ce28:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ce2c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce2e:	2302      	movs	r3, #2
 800ce30:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ce32:	2301      	movs	r3, #1
 800ce34:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce36:	2303      	movs	r3, #3
 800ce38:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ce3a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ce3c:	2307      	movs	r3, #7
 800ce3e:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ce40:	f7f4 fece 	bl	8001be0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800ce44:	2027      	movs	r0, #39	; 0x27
 800ce46:	4622      	mov	r2, r4
 800ce48:	4621      	mov	r1, r4
 800ce4a:	f7f4 fa85 	bl	8001358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800ce4e:	2027      	movs	r0, #39	; 0x27
 800ce50:	e7cb      	b.n	800cdea <HAL_UART_MspInit+0x9e>
  else if(huart->Instance==USART6)
 800ce52:	4a1c      	ldr	r2, [pc, #112]	; (800cec4 <HAL_UART_MspInit+0x178>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d1ca      	bne.n	800cdee <HAL_UART_MspInit+0xa2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800ce58:	4b16      	ldr	r3, [pc, #88]	; (800ceb4 <HAL_UART_MspInit+0x168>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ce5a:	4817      	ldr	r0, [pc, #92]	; (800ceb8 <HAL_UART_MspInit+0x16c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800ce5c:	2400      	movs	r4, #0
 800ce5e:	9405      	str	r4, [sp, #20]
 800ce60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce62:	f042 0220 	orr.w	r2, r2, #32
 800ce66:	645a      	str	r2, [r3, #68]	; 0x44
 800ce68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce6a:	f002 0220 	and.w	r2, r2, #32
 800ce6e:	9205      	str	r2, [sp, #20]
 800ce70:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ce72:	9406      	str	r4, [sp, #24]
 800ce74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce76:	f042 0204 	orr.w	r2, r2, #4
 800ce7a:	631a      	str	r2, [r3, #48]	; 0x30
 800ce7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce7e:	f003 0304 	and.w	r3, r3, #4
 800ce82:	9306      	str	r3, [sp, #24]
 800ce84:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ce86:	23c0      	movs	r3, #192	; 0xc0
 800ce88:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce8a:	2302      	movs	r3, #2
 800ce8c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce92:	2303      	movs	r3, #3
 800ce94:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ce96:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800ce98:	2308      	movs	r3, #8
 800ce9a:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ce9c:	f7f4 fea0 	bl	8001be0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800cea0:	2047      	movs	r0, #71	; 0x47
 800cea2:	4622      	mov	r2, r4
 800cea4:	4621      	mov	r1, r4
 800cea6:	f7f4 fa57 	bl	8001358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800ceaa:	2047      	movs	r0, #71	; 0x47
 800ceac:	e79d      	b.n	800cdea <HAL_UART_MspInit+0x9e>
 800ceae:	bf00      	nop
 800ceb0:	40005000 	.word	0x40005000
 800ceb4:	40023800 	.word	0x40023800
 800ceb8:	40020800 	.word	0x40020800
 800cebc:	40020c00 	.word	0x40020c00
 800cec0:	40004800 	.word	0x40004800
 800cec4:	40011400 	.word	0x40011400

0800cec8 <NMI_Handler>:
 800cec8:	4770      	bx	lr

0800ceca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ceca:	e7fe      	b.n	800ceca <HardFault_Handler>

0800cecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cecc:	e7fe      	b.n	800cecc <MemManage_Handler>

0800cece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800cece:	e7fe      	b.n	800cece <BusFault_Handler>

0800ced0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ced0:	e7fe      	b.n	800ced0 <UsageFault_Handler>

0800ced2 <SVC_Handler>:
 800ced2:	4770      	bx	lr

0800ced4 <DebugMon_Handler>:
 800ced4:	4770      	bx	lr

0800ced6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ced6:	4770      	bx	lr

0800ced8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ced8:	f7f4 b842 	b.w	8000f60 <HAL_IncTick>

0800cedc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800cedc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  event_trigger( &e );
 800cede:	4804      	ldr	r0, [pc, #16]	; (800cef0 <TIM2_IRQHandler+0x14>)
 800cee0:	f7ff f907 	bl	800c0f2 <event_trigger>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800cee4:	4803      	ldr	r0, [pc, #12]	; (800cef4 <TIM2_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800cee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim2);
 800ceea:	f7f5 bfc3 	b.w	8002e74 <HAL_TIM_IRQHandler>
 800ceee:	bf00      	nop
 800cef0:	20008b00 	.word	0x20008b00
 800cef4:	20008aa0 	.word	0x20008aa0

0800cef8 <USART3_IRQHandler>:
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */
  uint32_t isrflags   = READ_REG(huart3.Instance->SR);
 800cef8:	4a1e      	ldr	r2, [pc, #120]	; (800cf74 <USART3_IRQHandler+0x7c>)
 800cefa:	6813      	ldr	r3, [r2, #0]
 800cefc:	6819      	ldr	r1, [r3, #0]
  uint32_t cr1its     = READ_REG(huart3.Instance->CR1);
 800cefe:	68d8      	ldr	r0, [r3, #12]
{
 800cf00:	b410      	push	{r4}
  //uint32_t cr3its     = READ_REG(huart3.Instance->CR3);
  uint32_t errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));

  if ( !errorflags )
 800cf02:	070c      	lsls	r4, r1, #28
 800cf04:	d109      	bne.n	800cf1a <USART3_IRQHandler+0x22>
  {
	  if (( (isrflags & USART_SR_RXNE) != RESET ) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cf06:	068c      	lsls	r4, r1, #26
 800cf08:	d508      	bpl.n	800cf1c <USART3_IRQHandler+0x24>
 800cf0a:	0684      	lsls	r4, r0, #26
 800cf0c:	d506      	bpl.n	800cf1c <USART3_IRQHandler+0x24>
	  {
		  bum_notify_recv( huart3.Instance->DR & 0xFF );
 800cf0e:	6858      	ldr	r0, [r3, #4]
  /* USER CODE END USART3_IRQn 0 */
  //HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800cf10:	f85d 4b04 	ldr.w	r4, [sp], #4
		  bum_notify_recv( huart3.Instance->DR & 0xFF );
 800cf14:	b2c0      	uxtb	r0, r0
 800cf16:	f7fe b92d 	b.w	800b174 <bum_notify_recv>
	  (void)huart3.Instance->DR;
 800cf1a:	685c      	ldr	r4, [r3, #4]
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cf1c:	060c      	lsls	r4, r1, #24
 800cf1e:	d51a      	bpl.n	800cf56 <USART3_IRQHandler+0x5e>
 800cf20:	0604      	lsls	r4, r0, #24
 800cf22:	d518      	bpl.n	800cf56 <USART3_IRQHandler+0x5e>
    	  if (huart3.gState == HAL_UART_STATE_BUSY_TX)
 800cf24:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 800cf28:	2921      	cmp	r1, #33	; 0x21
 800cf2a:	d111      	bne.n	800cf50 <USART3_IRQHandler+0x58>
    		  huart3.Instance->DR = (uint8_t)(*huart3.pTxBuffPtr++ & (uint8_t)0x00FF);
 800cf2c:	6a11      	ldr	r1, [r2, #32]
 800cf2e:	1c48      	adds	r0, r1, #1
 800cf30:	6210      	str	r0, [r2, #32]
 800cf32:	7809      	ldrb	r1, [r1, #0]
 800cf34:	6059      	str	r1, [r3, #4]
    	    if (--huart3.TxXferCount == 0U)
 800cf36:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800cf38:	3901      	subs	r1, #1
 800cf3a:	b289      	uxth	r1, r1
 800cf3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cf3e:	b939      	cbnz	r1, 800cf50 <USART3_IRQHandler+0x58>
    	      __HAL_UART_DISABLE_IT(&huart3, UART_IT_TXE);
 800cf40:	68da      	ldr	r2, [r3, #12]
 800cf42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cf46:	60da      	str	r2, [r3, #12]
    	      __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 800cf48:	68da      	ldr	r2, [r3, #12]
 800cf4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf4e:	60da      	str	r2, [r3, #12]
}
 800cf50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf54:	4770      	bx	lr
    if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cf56:	064c      	lsls	r4, r1, #25
 800cf58:	d5fa      	bpl.n	800cf50 <USART3_IRQHandler+0x58>
 800cf5a:	0641      	lsls	r1, r0, #25
 800cf5c:	d5f8      	bpl.n	800cf50 <USART3_IRQHandler+0x58>
    	  __HAL_UART_DISABLE_IT(&huart3, UART_IT_TC);
 800cf5e:	68d9      	ldr	r1, [r3, #12]
}
 800cf60:	f85d 4b04 	ldr.w	r4, [sp], #4
    	  __HAL_UART_DISABLE_IT(&huart3, UART_IT_TC);
 800cf64:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800cf68:	60d9      	str	r1, [r3, #12]
    	  huart3.gState = HAL_UART_STATE_READY;
 800cf6a:	2320      	movs	r3, #32
 800cf6c:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
    	  bum_notify_endtx();
 800cf70:	f7fe b904 	b.w	800b17c <bum_notify_endtx>
 800cf74:	200086c8 	.word	0x200086c8

0800cf78 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800cf78:	4801      	ldr	r0, [pc, #4]	; (800cf80 <UART5_IRQHandler+0x8>)
 800cf7a:	f7f6 bc9d 	b.w	80038b8 <HAL_UART_IRQHandler>
 800cf7e:	bf00      	nop
 800cf80:	2000875c 	.word	0x2000875c

0800cf84 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800cf84:	4801      	ldr	r0, [pc, #4]	; (800cf8c <OTG_FS_IRQHandler+0x8>)
 800cf86:	f7f5 b80d 	b.w	8001fa4 <HAL_HCD_IRQHandler>
 800cf8a:	bf00      	nop
 800cf8c:	20008ed0 	.word	0x20008ed0

0800cf90 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800cf90:	4801      	ldr	r0, [pc, #4]	; (800cf98 <USART6_IRQHandler+0x8>)
 800cf92:	f7f6 bc91 	b.w	80038b8 <HAL_UART_IRQHandler>
 800cf96:	bf00      	nop
 800cf98:	20008a60 	.word	0x20008a60

0800cf9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cf9c:	b570      	push	{r4, r5, r6, lr}
 800cf9e:	460e      	mov	r6, r1
 800cfa0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cfa2:	460c      	mov	r4, r1
 800cfa4:	1ba3      	subs	r3, r4, r6
 800cfa6:	429d      	cmp	r5, r3
 800cfa8:	dc01      	bgt.n	800cfae <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800cfaa:	4628      	mov	r0, r5
 800cfac:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800cfae:	f3af 8000 	nop.w
 800cfb2:	f804 0b01 	strb.w	r0, [r4], #1
 800cfb6:	e7f5      	b.n	800cfa4 <_read+0x8>

0800cfb8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800cfb8:	4b09      	ldr	r3, [pc, #36]	; (800cfe0 <_sbrk+0x28>)
 800cfba:	6819      	ldr	r1, [r3, #0]
{
 800cfbc:	4602      	mov	r2, r0
	if (heap_end == 0)
 800cfbe:	b909      	cbnz	r1, 800cfc4 <_sbrk+0xc>
		heap_end = &end;
 800cfc0:	4908      	ldr	r1, [pc, #32]	; (800cfe4 <_sbrk+0x2c>)
 800cfc2:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800cfc4:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800cfc6:	4669      	mov	r1, sp
 800cfc8:	4402      	add	r2, r0
 800cfca:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800cfcc:	bf89      	itett	hi
 800cfce:	4b06      	ldrhi	r3, [pc, #24]	; (800cfe8 <_sbrk+0x30>)
		return (caddr_t) -1;
	}

	heap_end += incr;
 800cfd0:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 800cfd2:	220c      	movhi	r2, #12
		return (caddr_t) -1;
 800cfd4:	f04f 30ff 	movhi.w	r0, #4294967295
		errno = ENOMEM;
 800cfd8:	bf88      	it	hi
 800cfda:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop
 800cfe0:	20000e68 	.word	0x20000e68
 800cfe4:	2000a52c 	.word	0x2000a52c
 800cfe8:	2000a528 	.word	0x2000a528

0800cfec <_close>:

int _close(int file)
{
	return -1;
}
 800cfec:	f04f 30ff 	mov.w	r0, #4294967295
 800cff0:	4770      	bx	lr

0800cff2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800cff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cff6:	604b      	str	r3, [r1, #4]
	return 0;
}
 800cff8:	2000      	movs	r0, #0
 800cffa:	4770      	bx	lr

0800cffc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800cffc:	2001      	movs	r0, #1
 800cffe:	4770      	bx	lr

0800d000 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800d000:	2000      	movs	r0, #0
 800d002:	4770      	bx	lr

0800d004 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d004:	490f      	ldr	r1, [pc, #60]	; (800d044 <SystemInit+0x40>)
 800d006:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800d00a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d00e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d012:	4b0d      	ldr	r3, [pc, #52]	; (800d048 <SystemInit+0x44>)
 800d014:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d016:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800d018:	f042 0201 	orr.w	r2, r2, #1
 800d01c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800d01e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800d026:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d02a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800d02c:	4a07      	ldr	r2, [pc, #28]	; (800d04c <SystemInit+0x48>)
 800d02e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d036:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d038:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d03a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d03e:	608b      	str	r3, [r1, #8]
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop
 800d044:	e000ed00 	.word	0xe000ed00
 800d048:	40023800 	.word	0x40023800
 800d04c:	24003010 	.word	0x24003010

0800d050 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d050:	2904      	cmp	r1, #4
 800d052:	d00a      	beq.n	800d06a <USBH_UserProcess+0x1a>
 800d054:	2905      	cmp	r1, #5
 800d056:	d004      	beq.n	800d062 <USBH_UserProcess+0x12>
 800d058:	2902      	cmp	r1, #2
 800d05a:	d105      	bne.n	800d068 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d05c:	4b04      	ldr	r3, [pc, #16]	; (800d070 <USBH_UserProcess+0x20>)
 800d05e:	7019      	strb	r1, [r3, #0]
  break;
 800d060:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800d062:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d064:	4b02      	ldr	r3, [pc, #8]	; (800d070 <USBH_UserProcess+0x20>)
 800d066:	701a      	strb	r2, [r3, #0]
 800d068:	4770      	bx	lr
 800d06a:	2201      	movs	r2, #1
 800d06c:	e7fa      	b.n	800d064 <USBH_UserProcess+0x14>
 800d06e:	bf00      	nop
 800d070:	20000e6c 	.word	0x20000e6c

0800d074 <MX_USB_HOST_Init>:
{
 800d074:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d076:	2201      	movs	r2, #1
 800d078:	490b      	ldr	r1, [pc, #44]	; (800d0a8 <MX_USB_HOST_Init+0x34>)
 800d07a:	480c      	ldr	r0, [pc, #48]	; (800d0ac <MX_USB_HOST_Init+0x38>)
 800d07c:	f7f7 f9fc 	bl	8004478 <USBH_Init>
 800d080:	b108      	cbz	r0, 800d086 <MX_USB_HOST_Init+0x12>
    Error_Handler();
 800d082:	f7ff fd33 	bl	800caec <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800d086:	490a      	ldr	r1, [pc, #40]	; (800d0b0 <MX_USB_HOST_Init+0x3c>)
 800d088:	4808      	ldr	r0, [pc, #32]	; (800d0ac <MX_USB_HOST_Init+0x38>)
 800d08a:	f7f7 fa0c 	bl	80044a6 <USBH_RegisterClass>
 800d08e:	b108      	cbz	r0, 800d094 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 800d090:	f7ff fd2c 	bl	800caec <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d094:	4805      	ldr	r0, [pc, #20]	; (800d0ac <MX_USB_HOST_Init+0x38>)
 800d096:	f7f7 fa39 	bl	800450c <USBH_Start>
 800d09a:	b118      	cbz	r0, 800d0a4 <MX_USB_HOST_Init+0x30>
}
 800d09c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800d0a0:	f7ff bd24 	b.w	800caec <Error_Handler>
 800d0a4:	bd08      	pop	{r3, pc}
 800d0a6:	bf00      	nop
 800d0a8:	0800d051 	.word	0x0800d051
 800d0ac:	20008b04 	.word	0x20008b04
 800d0b0:	20000008 	.word	0x20000008

0800d0b4 <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 800d0b4:	4801      	ldr	r0, [pc, #4]	; (800d0bc <MX_USB_HOST_Process+0x8>)
 800d0b6:	f7f7 ba33 	b.w	8004520 <USBH_Process>
 800d0ba:	bf00      	nop
 800d0bc:	20008b04 	.word	0x20008b04

0800d0c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d0c0:	b530      	push	{r4, r5, lr}
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d0c6:	2214      	movs	r2, #20
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	a803      	add	r0, sp, #12
 800d0cc:	f000 fd6a 	bl	800dba4 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800d0d0:	6823      	ldr	r3, [r4, #0]
 800d0d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d0d6:	d135      	bne.n	800d144 <HAL_HCD_MspInit+0x84>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d0d8:	4c1b      	ldr	r4, [pc, #108]	; (800d148 <HAL_HCD_MspInit+0x88>)
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d0da:	481c      	ldr	r0, [pc, #112]	; (800d14c <HAL_HCD_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d0dc:	2500      	movs	r5, #0
 800d0de:	9501      	str	r5, [sp, #4]
 800d0e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d0e2:	f043 0301 	orr.w	r3, r3, #1
 800d0e6:	6323      	str	r3, [r4, #48]	; 0x30
 800d0e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d0ea:	f003 0301 	and.w	r3, r3, #1
 800d0ee:	9301      	str	r3, [sp, #4]
 800d0f0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d0f2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800d0f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0f8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d0fa:	f7f4 fd71 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d0fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d102:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d104:	2302      	movs	r3, #2
 800d106:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d108:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d10a:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d10c:	480f      	ldr	r0, [pc, #60]	; (800d14c <HAL_HCD_MspInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d10e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d110:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d112:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d114:	f7f4 fd64 	bl	8001be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d118:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d11a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d11e:	6363      	str	r3, [r4, #52]	; 0x34
 800d120:	9502      	str	r5, [sp, #8]
 800d122:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d128:	6463      	str	r3, [r4, #68]	; 0x44
 800d12a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d12c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d130:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d132:	2043      	movs	r0, #67	; 0x43
 800d134:	462a      	mov	r2, r5
 800d136:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d138:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d13a:	f7f4 f90d 	bl	8001358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d13e:	2043      	movs	r0, #67	; 0x43
 800d140:	f7f4 f93e 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d144:	b009      	add	sp, #36	; 0x24
 800d146:	bd30      	pop	{r4, r5, pc}
 800d148:	40023800 	.word	0x40023800
 800d14c:	40020000 	.word	0x40020000

0800d150 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 800d150:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800d154:	f7f7 bb2c 	b.w	80047b0 <USBH_LL_IncTimer>

0800d158 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 800d158:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800d15c:	f7f7 bb3e 	b.w	80047dc <USBH_LL_Connect>

0800d160 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 800d160:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800d164:	f7f7 bb4e 	b.w	8004804 <USBH_LL_Disconnect>

0800d168 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d168:	4770      	bx	lr

0800d16a <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 800d16a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800d16e:	f7f7 bb2d 	b.w	80047cc <USBH_LL_PortEnabled>

0800d172 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 800d172:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800d176:	f7f7 bb2d 	b.w	80047d4 <USBH_LL_PortDisabled>
	...

0800d17c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d17c:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d17e:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800d182:	2b01      	cmp	r3, #1
{
 800d184:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 800d186:	d11b      	bne.n	800d1c0 <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d188:	480e      	ldr	r0, [pc, #56]	; (800d1c4 <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_FS;
 800d18a:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d18e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d192:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d194:	2208      	movs	r2, #8
 800d196:	6082      	str	r2, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d198:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d19a:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d19c:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 800d19e:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d1a2:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d1a4:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d1a6:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d1a8:	f7f4 fe50 	bl	8001e4c <HAL_HCD_Init>
 800d1ac:	b108      	cbz	r0, 800d1b2 <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 800d1ae:	f7ff fc9d 	bl	800caec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d1b2:	4804      	ldr	r0, [pc, #16]	; (800d1c4 <USBH_LL_Init+0x48>)
 800d1b4:	f7f5 fa48 	bl	8002648 <HAL_HCD_GetCurrentFrame>
 800d1b8:	4601      	mov	r1, r0
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	f7f7 faf5 	bl	80047aa <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	bd10      	pop	{r4, pc}
 800d1c4:	20008ed0 	.word	0x20008ed0

0800d1c8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d1c8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 800d1ca:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d1ce:	f7f5 fa05 	bl	80025dc <HAL_HCD_Start>
 800d1d2:	2803      	cmp	r0, #3
 800d1d4:	bf9a      	itte	ls
 800d1d6:	4b02      	ldrls	r3, [pc, #8]	; (800d1e0 <USBH_LL_Start+0x18>)
 800d1d8:	5c18      	ldrbls	r0, [r3, r0]
 800d1da:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800d1dc:	bd08      	pop	{r3, pc}
 800d1de:	bf00      	nop
 800d1e0:	08012950 	.word	0x08012950

0800d1e4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d1e4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 800d1e6:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d1ea:	f7f5 fa0d 	bl	8002608 <HAL_HCD_Stop>
 800d1ee:	2803      	cmp	r0, #3
 800d1f0:	bf9a      	itte	ls
 800d1f2:	4b02      	ldrls	r3, [pc, #8]	; (800d1fc <USBH_LL_Stop+0x18>)
 800d1f4:	5c18      	ldrbls	r0, [r3, r0]
 800d1f6:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 800d1f8:	bd08      	pop	{r3, pc}
 800d1fa:	bf00      	nop
 800d1fc:	08012950 	.word	0x08012950

0800d200 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d200:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d202:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d206:	f7f5 fa22 	bl	800264e <HAL_HCD_GetCurrentSpeed>
 800d20a:	2802      	cmp	r0, #2
 800d20c:	bf9a      	itte	ls
 800d20e:	4b02      	ldrls	r3, [pc, #8]	; (800d218 <USBH_LL_GetSpeed+0x18>)
 800d210:	5c18      	ldrbls	r0, [r3, r0]
 800d212:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 800d214:	bd08      	pop	{r3, pc}
 800d216:	bf00      	nop
 800d218:	0801294d 	.word	0x0801294d

0800d21c <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d21c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d21e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d222:	f7f5 fa03 	bl	800262c <HAL_HCD_ResetPort>
 800d226:	2803      	cmp	r0, #3
 800d228:	bf9a      	itte	ls
 800d22a:	4b02      	ldrls	r3, [pc, #8]	; (800d234 <USBH_LL_ResetPort+0x18>)
 800d22c:	5c18      	ldrbls	r0, [r3, r0]
 800d22e:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800d230:	bd08      	pop	{r3, pc}
 800d232:	bf00      	nop
 800d234:	08012950 	.word	0x08012950

0800d238 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d238:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d23c:	f7f5 b9ff 	b.w	800263e <HAL_HCD_HC_GetXferCount>

0800d240 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d242:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800d246:	9402      	str	r4, [sp, #8]
 800d248:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800d24c:	9401      	str	r4, [sp, #4]
 800d24e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800d252:	9400      	str	r4, [sp, #0]
 800d254:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d258:	f7f4 fdae 	bl	8001db8 <HAL_HCD_HC_Init>
 800d25c:	2803      	cmp	r0, #3
 800d25e:	bf9a      	itte	ls
 800d260:	4b02      	ldrls	r3, [pc, #8]	; (800d26c <USBH_LL_OpenPipe+0x2c>)
 800d262:	5c18      	ldrbls	r0, [r3, r0]
 800d264:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800d266:	b004      	add	sp, #16
 800d268:	bd10      	pop	{r4, pc}
 800d26a:	bf00      	nop
 800d26c:	08012950 	.word	0x08012950

0800d270 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d270:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d272:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d276:	f7f4 fdd7 	bl	8001e28 <HAL_HCD_HC_Halt>
 800d27a:	2803      	cmp	r0, #3
 800d27c:	bf9a      	itte	ls
 800d27e:	4b02      	ldrls	r3, [pc, #8]	; (800d288 <USBH_LL_ClosePipe+0x18>)
 800d280:	5c18      	ldrbls	r0, [r3, r0]
 800d282:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800d284:	bd08      	pop	{r3, pc}
 800d286:	bf00      	nop
 800d288:	08012950 	.word	0x08012950

0800d28c <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d28c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d28e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800d292:	9403      	str	r4, [sp, #12]
 800d294:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800d298:	9402      	str	r4, [sp, #8]
 800d29a:	9c07      	ldr	r4, [sp, #28]
 800d29c:	9401      	str	r4, [sp, #4]
 800d29e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800d2a2:	9400      	str	r4, [sp, #0]
 800d2a4:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d2a8:	f7f4 fe1a 	bl	8001ee0 <HAL_HCD_HC_SubmitRequest>
 800d2ac:	2803      	cmp	r0, #3
 800d2ae:	bf9a      	itte	ls
 800d2b0:	4b02      	ldrls	r3, [pc, #8]	; (800d2bc <USBH_LL_SubmitURB+0x30>)
 800d2b2:	5c18      	ldrbls	r0, [r3, r0]
 800d2b4:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800d2b6:	b004      	add	sp, #16
 800d2b8:	bd10      	pop	{r4, pc}
 800d2ba:	bf00      	nop
 800d2bc:	08012950 	.word	0x08012950

0800d2c0 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d2c0:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d2c4:	f7f5 b9b5 	b.w	8002632 <HAL_HCD_HC_GetURBState>

0800d2c8 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d2c8:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 800d2ca:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d102      	bne.n	800d2d8 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 800d2d2:	4608      	mov	r0, r1
 800d2d4:	f000 f816 	bl	800d304 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d2d8:	20c8      	movs	r0, #200	; 0xc8
 800d2da:	f7f3 fe53 	bl	8000f84 <HAL_Delay>
  return USBH_OK;
}
 800d2de:	2000      	movs	r0, #0
 800d2e0:	bd08      	pop	{r3, pc}

0800d2e2 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d2e2:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 800d2e6:	2328      	movs	r3, #40	; 0x28
 800d2e8:	fb03 0101 	mla	r1, r3, r1, r0
 800d2ec:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800d2f0:	b11b      	cbz	r3, 800d2fa <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d2f2:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 800d2f6:	2000      	movs	r0, #0
 800d2f8:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 800d2fa:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 800d2fe:	e7fa      	b.n	800d2f6 <USBH_LL_SetToggle+0x14>

0800d300 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800d300:	f7f3 be40 	b.w	8000f84 <HAL_Delay>

0800d304 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800d304:	fab0 f280 	clz	r2, r0
 800d308:	0952      	lsrs	r2, r2, #5
 800d30a:	2101      	movs	r1, #1
 800d30c:	4801      	ldr	r0, [pc, #4]	; (800d314 <MX_DriverVbusFS+0x10>)
 800d30e:	f7f4 bd47 	b.w	8001da0 <HAL_GPIO_WritePin>
 800d312:	bf00      	nop
 800d314:	40020800 	.word	0x40020800

0800d318 <xbee_notify_endtx>:

xbee_function_error xbee_signal_error;

void    xbee_notify_endtx()
{
	event_trigger( &xbee_evt_endtx );
 800d318:	4801      	ldr	r0, [pc, #4]	; (800d320 <xbee_notify_endtx+0x8>)
 800d31a:	f7fe beea 	b.w	800c0f2 <event_trigger>
 800d31e:	bf00      	nop
 800d320:	20009194 	.word	0x20009194

0800d324 <xbee_frames_copy>:
#define xbee_frames_pop_head() xbee_frames_pop( 0 )

void xbee_frames_copy( int target_rank, int source_rank )
{
	int i;
	for ( i = 0 ; i < xbee_frames[ source_rank ].len ; i++ )
 800d324:	4b0a      	ldr	r3, [pc, #40]	; (800d350 <xbee_frames_copy+0x2c>)
 800d326:	2266      	movs	r2, #102	; 0x66
 800d328:	fb02 3101 	mla	r1, r2, r1, r3
{
 800d32c:	b570      	push	{r4, r5, r6, lr}
	for ( i = 0 ; i < xbee_frames[ source_rank ].len ; i++ )
 800d32e:	f8b1 5064 	ldrh.w	r5, [r1, #100]	; 0x64
 800d332:	fb02 3400 	mla	r4, r2, r0, r3
 800d336:	2200      	movs	r2, #0
 800d338:	42aa      	cmp	r2, r5
 800d33a:	db05      	blt.n	800d348 <xbee_frames_copy+0x24>
	{
		xbee_frames[ target_rank ].rx[ i ] = xbee_frames[ source_rank ].rx[ i ];
	}

	xbee_frames[ target_rank ].len = xbee_frames[ source_rank ].len;
 800d33c:	2266      	movs	r2, #102	; 0x66
 800d33e:	fb02 3300 	mla	r3, r2, r0, r3
 800d342:	f8a3 5064 	strh.w	r5, [r3, #100]	; 0x64
 800d346:	bd70      	pop	{r4, r5, r6, pc}
		xbee_frames[ target_rank ].rx[ i ] = xbee_frames[ source_rank ].rx[ i ];
 800d348:	5c8e      	ldrb	r6, [r1, r2]
 800d34a:	54a6      	strb	r6, [r4, r2]
	for ( i = 0 ; i < xbee_frames[ source_rank ].len ; i++ )
 800d34c:	3201      	adds	r2, #1
 800d34e:	e7f3      	b.n	800d338 <xbee_frames_copy+0x14>
 800d350:	20000ed6 	.word	0x20000ed6

0800d354 <xbee_frames_pop>:
}

void xbee_frames_pop( int rank )
{
 800d354:	b570      	push	{r4, r5, r6, lr}
	if ( xbee_n_frames > 0 )
 800d356:	4d0d      	ldr	r5, [pc, #52]	; (800d38c <xbee_frames_pop+0x38>)
 800d358:	782c      	ldrb	r4, [r5, #0]
 800d35a:	b184      	cbz	r4, 800d37e <xbee_frames_pop+0x2a>
	{
		int i;
		for ( i = rank ; i < xbee_n_frames - 1 ; i++ )
 800d35c:	3c01      	subs	r4, #1
 800d35e:	42a0      	cmp	r0, r4
 800d360:	db07      	blt.n	800d372 <xbee_frames_pop+0x1e>
		{
			xbee_frames_copy( i, i + 1 );
		}
		xbee_n_frames--;
 800d362:	b2e4      	uxtb	r4, r4
 800d364:	702c      	strb	r4, [r5, #0]

		if ( xbee_n_frames ) { event_trigger( &xbee_evt ); }
 800d366:	b184      	cbz	r4, 800d38a <xbee_frames_pop+0x36>
 800d368:	4809      	ldr	r0, [pc, #36]	; (800d390 <xbee_frames_pop+0x3c>)
	}
	else
	{
		xbee_signal_error( __LINE__ );
	}
}
 800d36a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if ( xbee_n_frames ) { event_trigger( &xbee_evt ); }
 800d36e:	f7fe bec0 	b.w	800c0f2 <event_trigger>
			xbee_frames_copy( i, i + 1 );
 800d372:	1c46      	adds	r6, r0, #1
 800d374:	4631      	mov	r1, r6
 800d376:	f7ff ffd5 	bl	800d324 <xbee_frames_copy>
		for ( i = rank ; i < xbee_n_frames - 1 ; i++ )
 800d37a:	4630      	mov	r0, r6
 800d37c:	e7ef      	b.n	800d35e <xbee_frames_pop+0xa>
		xbee_signal_error( __LINE__ );
 800d37e:	4b05      	ldr	r3, [pc, #20]	; (800d394 <xbee_frames_pop+0x40>)
 800d380:	2062      	movs	r0, #98	; 0x62
 800d382:	681b      	ldr	r3, [r3, #0]
}
 800d384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		xbee_signal_error( __LINE__ );
 800d388:	4718      	bx	r3
 800d38a:	bd70      	pop	{r4, r5, r6, pc}
 800d38c:	200016cf 	.word	0x200016cf
 800d390:	2000919c 	.word	0x2000919c
 800d394:	20009198 	.word	0x20009198

0800d398 <xbee_frames_push>:

void xbee_frames_push( uint8_t *data, uint16_t len )
{
 800d398:	b4f0      	push	{r4, r5, r6, r7}
	if ( xbee_n_frames >= XBEE_N_FRAMES_MAX )
 800d39a:	4c15      	ldr	r4, [pc, #84]	; (800d3f0 <xbee_frames_push+0x58>)
 800d39c:	7823      	ldrb	r3, [r4, #0]
 800d39e:	2b13      	cmp	r3, #19
 800d3a0:	d904      	bls.n	800d3ac <xbee_frames_push+0x14>
	{
		xbee_signal_error( __LINE__ );
 800d3a2:	4b14      	ldr	r3, [pc, #80]	; (800d3f4 <xbee_frames_push+0x5c>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	206a      	movs	r0, #106	; 0x6a
	xbee_frames[ xbee_n_frames ].len = len;

	xbee_n_frames++;

	event_trigger( &xbee_evt );
}
 800d3a8:	bcf0      	pop	{r4, r5, r6, r7}
		xbee_signal_error( __LINE__ );
 800d3aa:	4718      	bx	r3
	if ( len >= FRAME_LEN )
 800d3ac:	2963      	cmp	r1, #99	; 0x63
 800d3ae:	d903      	bls.n	800d3b8 <xbee_frames_push+0x20>
		xbee_signal_error( __LINE__ );
 800d3b0:	4b10      	ldr	r3, [pc, #64]	; (800d3f4 <xbee_frames_push+0x5c>)
 800d3b2:	2070      	movs	r0, #112	; 0x70
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	e7f7      	b.n	800d3a8 <xbee_frames_push+0x10>
	if ( len < 4 )
 800d3b8:	2903      	cmp	r1, #3
 800d3ba:	d911      	bls.n	800d3e0 <xbee_frames_push+0x48>
 800d3bc:	4d0e      	ldr	r5, [pc, #56]	; (800d3f8 <xbee_frames_push+0x60>)
 800d3be:	2666      	movs	r6, #102	; 0x66
 800d3c0:	fb03 5606 	mla	r6, r3, r6, r5
 800d3c4:	2200      	movs	r2, #0
	for ( i = 0 ; i < len ; i++ )
 800d3c6:	428a      	cmp	r2, r1
 800d3c8:	db0e      	blt.n	800d3e8 <xbee_frames_push+0x50>
	xbee_frames[ xbee_n_frames ].len = len;
 800d3ca:	2266      	movs	r2, #102	; 0x66
 800d3cc:	fb02 5503 	mla	r5, r2, r3, r5
	xbee_n_frames++;
 800d3d0:	3301      	adds	r3, #1
	xbee_frames[ xbee_n_frames ].len = len;
 800d3d2:	f8a5 1064 	strh.w	r1, [r5, #100]	; 0x64
	xbee_n_frames++;
 800d3d6:	7023      	strb	r3, [r4, #0]
	event_trigger( &xbee_evt );
 800d3d8:	4808      	ldr	r0, [pc, #32]	; (800d3fc <xbee_frames_push+0x64>)
}
 800d3da:	bcf0      	pop	{r4, r5, r6, r7}
	event_trigger( &xbee_evt );
 800d3dc:	f7fe be89 	b.w	800c0f2 <event_trigger>
		xbee_signal_error( __LINE__ );
 800d3e0:	4b04      	ldr	r3, [pc, #16]	; (800d3f4 <xbee_frames_push+0x5c>)
 800d3e2:	2077      	movs	r0, #119	; 0x77
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	e7df      	b.n	800d3a8 <xbee_frames_push+0x10>
		xbee_frames[ xbee_n_frames ].rx[ i ] = data[ i ];
 800d3e8:	5c87      	ldrb	r7, [r0, r2]
 800d3ea:	54b7      	strb	r7, [r6, r2]
	for ( i = 0 ; i < len ; i++ )
 800d3ec:	3201      	adds	r2, #1
 800d3ee:	e7ea      	b.n	800d3c6 <xbee_frames_push+0x2e>
 800d3f0:	200016cf 	.word	0x200016cf
 800d3f4:	20009198 	.word	0x20009198
 800d3f8:	20000ed6 	.word	0x20000ed6
 800d3fc:	2000919c 	.word	0x2000919c

0800d400 <xbee_frames_find>:

int xbee_frames_find( uint8_t *rank, uint8_t type )
{
 800d400:	b570      	push	{r4, r5, r6, lr}
	int k;
	for ( k = 0 ; k < xbee_n_frames ; k++ )
 800d402:	4b09      	ldr	r3, [pc, #36]	; (800d428 <xbee_frames_find+0x28>)
	{
		if ( xbee_frames[ k ].rx[ 3 ] == type )
 800d404:	4c09      	ldr	r4, [pc, #36]	; (800d42c <xbee_frames_find+0x2c>)
	for ( k = 0 ; k < xbee_n_frames ; k++ )
 800d406:	781a      	ldrb	r2, [r3, #0]
		if ( xbee_frames[ k ].rx[ 3 ] == type )
 800d408:	2566      	movs	r5, #102	; 0x66
	for ( k = 0 ; k < xbee_n_frames ; k++ )
 800d40a:	2300      	movs	r3, #0
 800d40c:	4293      	cmp	r3, r2
 800d40e:	db01      	blt.n	800d414 <xbee_frames_find+0x14>
			*rank = k;
			return 1;
		}
	}

  return 0;
 800d410:	2000      	movs	r0, #0
}
 800d412:	bd70      	pop	{r4, r5, r6, pc}
		if ( xbee_frames[ k ].rx[ 3 ] == type )
 800d414:	fb05 4603 	mla	r6, r5, r3, r4
 800d418:	78f6      	ldrb	r6, [r6, #3]
 800d41a:	428e      	cmp	r6, r1
 800d41c:	d102      	bne.n	800d424 <xbee_frames_find+0x24>
			*rank = k;
 800d41e:	7003      	strb	r3, [r0, #0]
			return 1;
 800d420:	2001      	movs	r0, #1
 800d422:	bd70      	pop	{r4, r5, r6, pc}
	for ( k = 0 ; k < xbee_n_frames ; k++ )
 800d424:	3301      	adds	r3, #1
 800d426:	e7f1      	b.n	800d40c <xbee_frames_find+0xc>
 800d428:	200016cf 	.word	0x200016cf
 800d42c:	20000ed6 	.word	0x20000ed6

0800d430 <xbee_get_recv_event>:
	xbee_frame_len = 0; \
}
// ...........................................................................

// ...........................................................................
event *xbee_get_recv_event() { return &xbee_evt; }
 800d430:	4800      	ldr	r0, [pc, #0]	; (800d434 <xbee_get_recv_event+0x4>)
 800d432:	4770      	bx	lr
 800d434:	2000919c 	.word	0x2000919c

0800d438 <xbee_recv_get_frame_type>:
// ...........................................................................

// ...........................................................................
uint8_t xbee_recv_get_frame_type()
{
  if ( xbee_n_frames ) return xbee_frames_head.rx[ 3 ];
 800d438:	4b02      	ldr	r3, [pc, #8]	; (800d444 <xbee_recv_get_frame_type+0xc>)
 800d43a:	7818      	ldrb	r0, [r3, #0]
 800d43c:	b108      	cbz	r0, 800d442 <xbee_recv_get_frame_type+0xa>
 800d43e:	4b02      	ldr	r3, [pc, #8]	; (800d448 <xbee_recv_get_frame_type+0x10>)
 800d440:	78d8      	ldrb	r0, [r3, #3]

  return 0;
}
 800d442:	4770      	bx	lr
 800d444:	200016cf 	.word	0x200016cf
 800d448:	20000ed6 	.word	0x20000ed6

0800d44c <xbee_checksum>:
// ...........................................................................

// ...........................................................................
uint8_t xbee_checksum( uint8_t *data, uint16_t len )
{
 800d44c:	b510      	push	{r4, lr}
  uint8_t crc = 0;
  for ( int i = 0 ; i < len ; i++ ) crc += data[ i ];
 800d44e:	4602      	mov	r2, r0
  uint8_t crc = 0;
 800d450:	2300      	movs	r3, #0
  for ( int i = 0 ; i < len ; i++ ) crc += data[ i ];
 800d452:	1a14      	subs	r4, r2, r0
 800d454:	42a1      	cmp	r1, r4
 800d456:	dc02      	bgt.n	800d45e <xbee_checksum+0x12>
  return 0xFF - crc;
 800d458:	43d8      	mvns	r0, r3
}
 800d45a:	b2c0      	uxtb	r0, r0
 800d45c:	bd10      	pop	{r4, pc}
  for ( int i = 0 ; i < len ; i++ ) crc += data[ i ];
 800d45e:	f812 4b01 	ldrb.w	r4, [r2], #1
 800d462:	4423      	add	r3, r4
 800d464:	b2db      	uxtb	r3, r3
 800d466:	e7f4      	b.n	800d452 <xbee_checksum+0x6>

0800d468 <xbee_pull_expected>:
// 0 1 2 3 4 5
// E E              xbee_frame_len = 2
// r r R R R        xbee_rx_len = 5
void xbee_pull_expected()
{
	if ( xbee_rx_len < xbee_frame_len )
 800d468:	4a0e      	ldr	r2, [pc, #56]	; (800d4a4 <xbee_pull_expected+0x3c>)
 800d46a:	480f      	ldr	r0, [pc, #60]	; (800d4a8 <xbee_pull_expected+0x40>)
{
 800d46c:	b4f0      	push	{r4, r5, r6, r7}
	if ( xbee_rx_len < xbee_frame_len )
 800d46e:	8803      	ldrh	r3, [r0, #0]
 800d470:	8814      	ldrh	r4, [r2, #0]
 800d472:	42a3      	cmp	r3, r4
 800d474:	4611      	mov	r1, r2
 800d476:	d205      	bcs.n	800d484 <xbee_pull_expected+0x1c>
	{
	  xbee_signal_error( __LINE__ );
 800d478:	4b0c      	ldr	r3, [pc, #48]	; (800d4ac <xbee_pull_expected+0x44>)
 800d47a:	f240 1001 	movw	r0, #257	; 0x101
 800d47e:	681b      	ldr	r3, [r3, #0]
	{
		xbee_rx[ k ] = xbee_rx[ i ];
	}
	xbee_rx_len -= xbee_frame_len;
	xbee_frame_len = 0;
}
 800d480:	bcf0      	pop	{r4, r5, r6, r7}
	  xbee_signal_error( __LINE__ );
 800d482:	4718      	bx	r3
		xbee_rx[ k ] = xbee_rx[ i ];
 800d484:	4d0a      	ldr	r5, [pc, #40]	; (800d4b0 <xbee_pull_expected+0x48>)
	for ( k = 0, i = xbee_frame_len ; i < xbee_rx_len ; i++, k++ )
 800d486:	4622      	mov	r2, r4
		xbee_rx[ k ] = xbee_rx[ i ];
 800d488:	1b2e      	subs	r6, r5, r4
	for ( k = 0, i = xbee_frame_len ; i < xbee_rx_len ; i++, k++ )
 800d48a:	429a      	cmp	r2, r3
 800d48c:	db05      	blt.n	800d49a <xbee_pull_expected+0x32>
	xbee_rx_len -= xbee_frame_len;
 800d48e:	1b1b      	subs	r3, r3, r4
 800d490:	8003      	strh	r3, [r0, #0]
	xbee_frame_len = 0;
 800d492:	2300      	movs	r3, #0
 800d494:	800b      	strh	r3, [r1, #0]
}
 800d496:	bcf0      	pop	{r4, r5, r6, r7}
 800d498:	4770      	bx	lr
		xbee_rx[ k ] = xbee_rx[ i ];
 800d49a:	5d57      	ldrb	r7, [r2, r5]
 800d49c:	54b7      	strb	r7, [r6, r2]
	for ( k = 0, i = xbee_frame_len ; i < xbee_rx_len ; i++, k++ )
 800d49e:	3201      	adds	r2, #1
 800d4a0:	e7f3      	b.n	800d48a <xbee_pull_expected+0x22>
 800d4a2:	bf00      	nop
 800d4a4:	20000ed4 	.word	0x20000ed4
 800d4a8:	20001ab8 	.word	0x20001ab8
 800d4ac:	20009198 	.word	0x20009198
 800d4b0:	200016d0 	.word	0x200016d0

0800d4b4 <xbee_analyse_resp>:
// ...........................................................................

// ...........................................................................
void xbee_analyse_resp()
{
 800d4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	do
	{
      go = 0;

      if ( xbee_frame_len == 0 )
 800d4b8:	4e25      	ldr	r6, [pc, #148]	; (800d550 <xbee_analyse_resp+0x9c>)
 800d4ba:	4d26      	ldr	r5, [pc, #152]	; (800d554 <xbee_analyse_resp+0xa0>)
 800d4bc:	4637      	mov	r7, r6
 800d4be:	8834      	ldrh	r4, [r6, #0]
 800d4c0:	bb0c      	cbnz	r4, 800d506 <xbee_analyse_resp+0x52>
      {
		  if ( xbee_rx_len >= 1 )
 800d4c2:	882b      	ldrh	r3, [r5, #0]
 800d4c4:	b153      	cbz	r3, 800d4dc <xbee_analyse_resp+0x28>
		  {
			  if ( xbee_rx[ 0 ] != 0x7E )
 800d4c6:	4b24      	ldr	r3, [pc, #144]	; (800d558 <xbee_analyse_resp+0xa4>)
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	2b7e      	cmp	r3, #126	; 0x7e
 800d4cc:	d006      	beq.n	800d4dc <xbee_analyse_resp+0x28>
			  {
				  xbee_recv_clear();
				  xbee_signal_error( __LINE__ );
 800d4ce:	4b23      	ldr	r3, [pc, #140]	; (800d55c <xbee_analyse_resp+0xa8>)
				  xbee_recv_clear();
 800d4d0:	802c      	strh	r4, [r5, #0]
				  xbee_signal_error( __LINE__ );
 800d4d2:	681b      	ldr	r3, [r3, #0]
				  xbee_recv_clear();
 800d4d4:	8034      	strh	r4, [r6, #0]
				  xbee_signal_error( __LINE__ );
 800d4d6:	f240 101f 	movw	r0, #287	; 0x11f
 800d4da:	4798      	blx	r3
			  }
		  }

		  if ( xbee_rx_len >= 3 )
 800d4dc:	882b      	ldrh	r3, [r5, #0]
 800d4de:	2b02      	cmp	r3, #2
 800d4e0:	d90f      	bls.n	800d502 <xbee_analyse_resp+0x4e>
		  {
			xbee_frame_len = xbee_rx[ 1 ];
 800d4e2:	4a1d      	ldr	r2, [pc, #116]	; (800d558 <xbee_analyse_resp+0xa4>)
 800d4e4:	7851      	ldrb	r1, [r2, #1]
			xbee_frame_len <<= 8;
			xbee_frame_len |= xbee_rx[ 2 ];
 800d4e6:	7893      	ldrb	r3, [r2, #2]
 800d4e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			xbee_frame_len += 4;
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	b29b      	uxth	r3, r3

			if ( xbee_frame_len > BUFFER_LEN )
 800d4f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
			xbee_frame_len += 4;
 800d4f4:	803b      	strh	r3, [r7, #0]
			if ( xbee_frame_len > BUFFER_LEN )
 800d4f6:	d904      	bls.n	800d502 <xbee_analyse_resp+0x4e>
			{
			  xbee_signal_error( __LINE__ );
 800d4f8:	4b18      	ldr	r3, [pc, #96]	; (800d55c <xbee_analyse_resp+0xa8>)
 800d4fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4798      	blx	r3
			}
		  }
      }

	  if ( xbee_frame_len && ( xbee_rx_len >= xbee_frame_len ) )
 800d502:	883c      	ldrh	r4, [r7, #0]
 800d504:	b30c      	cbz	r4, 800d54a <xbee_analyse_resp+0x96>
 800d506:	882b      	ldrh	r3, [r5, #0]
 800d508:	42a3      	cmp	r3, r4
 800d50a:	d31e      	bcc.n	800d54a <xbee_analyse_resp+0x96>
	  {
		uint8_t crc = xbee_checksum( xbee_rx + 3, xbee_frame_len - 4 );
 800d50c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800d558 <xbee_analyse_resp+0xa4>
 800d510:	1f21      	subs	r1, r4, #4
 800d512:	b289      	uxth	r1, r1
 800d514:	f108 0003 	add.w	r0, r8, #3
 800d518:	f7ff ff98 	bl	800d44c <xbee_checksum>

		if ( crc != xbee_rx[ xbee_frame_len - 1 ] )
 800d51c:	eb08 0304 	add.w	r3, r8, r4
 800d520:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d524:	4283      	cmp	r3, r0
 800d526:	d009      	beq.n	800d53c <xbee_analyse_resp+0x88>
		{
			xbee_recv_clear();
 800d528:	2300      	movs	r3, #0
 800d52a:	802b      	strh	r3, [r5, #0]
 800d52c:	803b      	strh	r3, [r7, #0]
			xbee_signal_error( __LINE__ );
 800d52e:	4b0b      	ldr	r3, [pc, #44]	; (800d55c <xbee_analyse_resp+0xa8>)
 800d530:	f44f 709c 	mov.w	r0, #312	; 0x138
 800d534:	681b      	ldr	r3, [r3, #0]
		  // Remove the frame
		  xbee_pull_expected();
		}
	  }
	} while ( go );
}
 800d536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			xbee_signal_error( __LINE__ );
 800d53a:	4718      	bx	r3
		  xbee_frames_push( xbee_rx, xbee_frame_len );
 800d53c:	4621      	mov	r1, r4
 800d53e:	4640      	mov	r0, r8
 800d540:	f7ff ff2a 	bl	800d398 <xbee_frames_push>
		  xbee_pull_expected();
 800d544:	f7ff ff90 	bl	800d468 <xbee_pull_expected>
 800d548:	e7b9      	b.n	800d4be <xbee_analyse_resp+0xa>
 800d54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d54e:	bf00      	nop
 800d550:	20000ed4 	.word	0x20000ed4
 800d554:	20001ab8 	.word	0x20001ab8
 800d558:	200016d0 	.word	0x200016d0
 800d55c:	20009198 	.word	0x20009198

0800d560 <xbee_recv_full_rank>:
// ...........................................................................


// ...........................................................................
int xbee_recv_full_rank( uint8_t *data, uint16_t *len, uint8_t rank )
{
 800d560:	b570      	push	{r4, r5, r6, lr}
  uint16_t recvlen = xbee_frames[ rank ].len - 4;
 800d562:	4e13      	ldr	r6, [pc, #76]	; (800d5b0 <xbee_recv_full_rank+0x50>)
 800d564:	2366      	movs	r3, #102	; 0x66
 800d566:	fb03 6502 	mla	r5, r3, r2, r6
 800d56a:	2400      	movs	r4, #0
 800d56c:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
 800d570:	3d04      	subs	r5, #4
 800d572:	b2ad      	uxth	r5, r5
	  *len = 0;
	  xbee_signal_error( __LINE__ );
	  return 0;
  }
#endif
  if ( recvlen >= FRAME_LEN )
 800d574:	2d63      	cmp	r5, #99	; 0x63
 800d576:	d907      	bls.n	800d588 <xbee_recv_full_rank+0x28>
  {
	  *len = 0;
	  xbee_signal_error( __LINE__ );
 800d578:	4b0e      	ldr	r3, [pc, #56]	; (800d5b4 <xbee_recv_full_rank+0x54>)
	  *len = 0;
 800d57a:	800c      	strh	r4, [r1, #0]
	  xbee_signal_error( __LINE__ );
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f240 1063 	movw	r0, #355	; 0x163
 800d582:	4798      	blx	r3
 800d584:	4620      	mov	r0, r4
 800d586:	bd70      	pop	{r4, r5, r6, pc}
	  return 0;
  }

  //sprintf( radio_log, "RECVFULL-- %d", xbee_rx_len );

  *len = recvlen;
 800d588:	800d      	strh	r5, [r1, #0]
 800d58a:	fb12 f103 	smulbb	r1, r2, r3

  for ( int i = 0 ; i < recvlen ; i++ ) data[ i ] = xbee_frames[ rank ].rx[ i + 3 ];
 800d58e:	4623      	mov	r3, r4
 800d590:	42ab      	cmp	r3, r5
 800d592:	db06      	blt.n	800d5a2 <xbee_recv_full_rank+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d594:	b672      	cpsid	i

  XBEE_UART_IT_DISABLE();
  xbee_frames_pop( rank );
 800d596:	4610      	mov	r0, r2
 800d598:	f7ff fedc 	bl	800d354 <xbee_frames_pop>
  __ASM volatile ("cpsie i" : : : "memory");
 800d59c:	b662      	cpsie	i
  XBEE_UART_IT_ENABLE();
  return 1;
 800d59e:	2001      	movs	r0, #1
}
 800d5a0:	bd70      	pop	{r4, r5, r6, pc}
  for ( int i = 0 ; i < recvlen ; i++ ) data[ i ] = xbee_frames[ rank ].rx[ i + 3 ];
 800d5a2:	18cc      	adds	r4, r1, r3
 800d5a4:	4434      	add	r4, r6
 800d5a6:	78e4      	ldrb	r4, [r4, #3]
 800d5a8:	54c4      	strb	r4, [r0, r3]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	e7f0      	b.n	800d590 <xbee_recv_full_rank+0x30>
 800d5ae:	bf00      	nop
 800d5b0:	20000ed6 	.word	0x20000ed6
 800d5b4:	20009198 	.word	0x20009198

0800d5b8 <xbee_recv_full>:

int xbee_recv_full( uint8_t *data, uint16_t *len )
{
    return xbee_recv_full_rank( data, len, 0 );
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	f7ff bfd1 	b.w	800d560 <xbee_recv_full_rank>

0800d5be <xbee_recv_discard_rank>:
}
// ...........................................................................

// ...........................................................................
int xbee_recv_discard_rank( uint8_t rank )
{
 800d5be:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 800d5c0:	b672      	cpsid	i
	  XBEE_UART_IT_DISABLE();
	  xbee_frames_pop( rank );
 800d5c2:	f7ff fec7 	bl	800d354 <xbee_frames_pop>
  __ASM volatile ("cpsie i" : : : "memory");
 800d5c6:	b662      	cpsie	i
	  XBEE_UART_IT_ENABLE();
	  return 1;
}
 800d5c8:	2001      	movs	r0, #1
 800d5ca:	bd08      	pop	{r3, pc}

0800d5cc <xbee_recv>:
}
// ...........................................................................

// ...........................................................................
int xbee_recv( uint64_t *from, uint8_t *data, uint16_t *len )
{
 800d5cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i;
  uint16_t recvlen = xbee_frames_head.len - 16;
 800d5d0:	4e1e      	ldr	r6, [pc, #120]	; (800d64c <xbee_recv+0x80>)

  //sprintf( radio_log, "RECV %d (%d - %d)", (int)xbee_rx_len, (int)(*len), (int)recvlen );

  // Check if data has enough space to hold the frame
  if ( *len < recvlen )
 800d5d2:	8814      	ldrh	r4, [r2, #0]
  uint16_t recvlen = xbee_frames_head.len - 16;
 800d5d4:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 800d5d8:	3b10      	subs	r3, #16
 800d5da:	b29b      	uxth	r3, r3
  if ( *len < recvlen )
 800d5dc:	429c      	cmp	r4, r3
 800d5de:	d209      	bcs.n	800d5f4 <xbee_recv+0x28>
  {
	  *len = 0;
	  xbee_signal_error( __LINE__ );
 800d5e0:	4b1b      	ldr	r3, [pc, #108]	; (800d650 <xbee_recv+0x84>)
	  *len = 0;
 800d5e2:	2400      	movs	r4, #0
 800d5e4:	8014      	strh	r4, [r2, #0]
	  xbee_signal_error( __LINE__ );
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d5ec:	4798      	blx	r3
	  return 0;
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

  //sprintf( radio_log, "RECV-- %d", xbee_rx_len );

  *len = recvlen;

  *from = 0;
 800d5f4:	2700      	movs	r7, #0
  *len = recvlen;
 800d5f6:	8013      	strh	r3, [r2, #0]
  *from = 0;
 800d5f8:	463c      	mov	r4, r7
 800d5fa:	463a      	mov	r2, r7
 800d5fc:	6007      	str	r7, [r0, #0]
 800d5fe:	6047      	str	r7, [r0, #4]
 800d600:	463d      	mov	r5, r7
  for ( i = 0 ; i < 8 ; i++ )
  {
	*from <<= 8;
	*from |= xbee_frames_head.rx[ i + 4 ];
 800d602:	18b7      	adds	r7, r6, r2
	*from <<= 8;
 800d604:	ea4f 2905 	mov.w	r9, r5, lsl #8
	*from |= xbee_frames_head.rx[ i + 4 ];
 800d608:	f897 a004 	ldrb.w	sl, [r7, #4]
  for ( i = 0 ; i < 8 ; i++ )
 800d60c:	3201      	adds	r2, #1
	*from <<= 8;
 800d60e:	ea49 6914 	orr.w	r9, r9, r4, lsr #24
	*from |= xbee_frames_head.rx[ i + 4 ];
 800d612:	f04f 0b00 	mov.w	fp, #0
	*from <<= 8;
 800d616:	ea4f 2804 	mov.w	r8, r4, lsl #8
  for ( i = 0 ; i < 8 ; i++ )
 800d61a:	2a08      	cmp	r2, #8
	*from |= xbee_frames_head.rx[ i + 4 ];
 800d61c:	ea4a 0408 	orr.w	r4, sl, r8
 800d620:	ea4b 0509 	orr.w	r5, fp, r9
  for ( i = 0 ; i < 8 ; i++ )
 800d624:	d1ed      	bne.n	800d602 <xbee_recv+0x36>
 800d626:	e9c0 4500 	strd	r4, r5, [r0]
 800d62a:	2200      	movs	r2, #0
  }

  for ( i = 0 ; i < recvlen ; i++ ) data[ i ] = xbee_frames_head.rx[ i + 15 ];
 800d62c:	429a      	cmp	r2, r3
 800d62e:	db07      	blt.n	800d640 <xbee_recv+0x74>
  __ASM volatile ("cpsid i" : : : "memory");
 800d630:	b672      	cpsid	i

  XBEE_UART_IT_DISABLE();
  xbee_frames_pop_head();
 800d632:	2000      	movs	r0, #0
 800d634:	f7ff fe8e 	bl	800d354 <xbee_frames_pop>
  __ASM volatile ("cpsie i" : : : "memory");
 800d638:	b662      	cpsie	i
  XBEE_UART_IT_ENABLE();
  return 1;
 800d63a:	2001      	movs	r0, #1
}
 800d63c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for ( i = 0 ; i < recvlen ; i++ ) data[ i ] = xbee_frames_head.rx[ i + 15 ];
 800d640:	18b0      	adds	r0, r6, r2
 800d642:	7bc0      	ldrb	r0, [r0, #15]
 800d644:	5488      	strb	r0, [r1, r2]
 800d646:	3201      	adds	r2, #1
 800d648:	e7f0      	b.n	800d62c <xbee_recv+0x60>
 800d64a:	bf00      	nop
 800d64c:	20000ed6 	.word	0x20000ed6
 800d650:	20009198 	.word	0x20009198

0800d654 <xbee_notify_recv>:
// ...........................................................................

// ...........................................................................
void xbee_notify_recv( uint8_t c )
{
  XBEE_RX_LED_START();
 800d654:	4b13      	ldr	r3, [pc, #76]	; (800d6a4 <xbee_notify_recv+0x50>)
 800d656:	2250      	movs	r2, #80	; 0x50
{
 800d658:	b510      	push	{r4, lr}
  XBEE_RX_LED_START();
 800d65a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d65e:	801a      	strh	r2, [r3, #0]
{
 800d660:	4604      	mov	r4, r0
  XBEE_RX_LED_START();
 800d662:	2201      	movs	r2, #1
 800d664:	4810      	ldr	r0, [pc, #64]	; (800d6a8 <xbee_notify_recv+0x54>)
 800d666:	f7f4 fb9b 	bl	8001da0 <HAL_GPIO_WritePin>

  if ( xbee_rx_len < BUFFER_LEN )
 800d66a:	4b10      	ldr	r3, [pc, #64]	; (800d6ac <xbee_notify_recv+0x58>)
 800d66c:	881a      	ldrh	r2, [r3, #0]
 800d66e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800d672:	d20a      	bcs.n	800d68a <xbee_notify_recv+0x36>
  {
    xbee_rx[ xbee_rx_len++ ] = c;
 800d674:	1c51      	adds	r1, r2, #1
 800d676:	8019      	strh	r1, [r3, #0]
 800d678:	4b0d      	ldr	r3, [pc, #52]	; (800d6b0 <xbee_notify_recv+0x5c>)
 800d67a:	549c      	strb	r4, [r3, r2]
  }

  //sprintf( radio_log, "%d", xbee_rx_len );


  if ( xbee_mode_AT ) return;
 800d67c:	4b0d      	ldr	r3, [pc, #52]	; (800d6b4 <xbee_notify_recv+0x60>)
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	b973      	cbnz	r3, 800d6a0 <xbee_notify_recv+0x4c>

  xbee_analyse_resp();
}
 800d682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  xbee_analyse_resp();
 800d686:	f7ff bf15 	b.w	800d4b4 <xbee_analyse_resp>
	  xbee_recv_clear();
 800d68a:	2200      	movs	r2, #0
 800d68c:	801a      	strh	r2, [r3, #0]
 800d68e:	4b0a      	ldr	r3, [pc, #40]	; (800d6b8 <xbee_notify_recv+0x64>)
 800d690:	801a      	strh	r2, [r3, #0]
	  xbee_signal_error( __LINE__ );
 800d692:	4b0a      	ldr	r3, [pc, #40]	; (800d6bc <xbee_notify_recv+0x68>)
 800d694:	f240 10bd 	movw	r0, #445	; 0x1bd
 800d698:	681b      	ldr	r3, [r3, #0]
}
 800d69a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  xbee_signal_error( __LINE__ );
 800d69e:	4718      	bx	r3
 800d6a0:	bd10      	pop	{r4, pc}
 800d6a2:	bf00      	nop
 800d6a4:	20000ed2 	.word	0x20000ed2
 800d6a8:	40020c00 	.word	0x40020c00
 800d6ac:	20001ab8 	.word	0x20001ab8
 800d6b0:	200016d0 	.word	0x200016d0
 800d6b4:	200016ce 	.word	0x200016ce
 800d6b8:	20000ed4 	.word	0x20000ed4
 800d6bc:	20009198 	.word	0x20009198

0800d6c0 <xbee_AT_check_OK>:

// ...........................................................................
int xbee_AT_check_OK()
{
 800d6c0:	b538      	push	{r3, r4, r5, lr}
  int r = 0;

  if ( xbee_rx_len == 3 )
 800d6c2:	4d09      	ldr	r5, [pc, #36]	; (800d6e8 <xbee_AT_check_OK+0x28>)
 800d6c4:	882b      	ldrh	r3, [r5, #0]
 800d6c6:	2b03      	cmp	r3, #3
 800d6c8:	f04f 0400 	mov.w	r4, #0
 800d6cc:	d109      	bne.n	800d6e2 <xbee_AT_check_OK+0x22>
  {
    xbee_rx[ 3 ] = 0;
 800d6ce:	4807      	ldr	r0, [pc, #28]	; (800d6ec <xbee_AT_check_OK+0x2c>)
    if ( strcmp( ( char * )xbee_rx, "OK\r" ) == 0 ) { r = 1; }
 800d6d0:	4907      	ldr	r1, [pc, #28]	; (800d6f0 <xbee_AT_check_OK+0x30>)
    xbee_rx[ 3 ] = 0;
 800d6d2:	70c4      	strb	r4, [r0, #3]
    if ( strcmp( ( char * )xbee_rx, "OK\r" ) == 0 ) { r = 1; }
 800d6d4:	f7f2 fd7c 	bl	80001d0 <strcmp>
 800d6d8:	fab0 f080 	clz	r0, r0
 800d6dc:	0940      	lsrs	r0, r0, #5
    xbee_rx_len = 0;
 800d6de:	802c      	strh	r4, [r5, #0]
 800d6e0:	bd38      	pop	{r3, r4, r5, pc}
  int r = 0;
 800d6e2:	4620      	mov	r0, r4
  }

  return r;
}
 800d6e4:	bd38      	pop	{r3, r4, r5, pc}
 800d6e6:	bf00      	nop
 800d6e8:	20001ab8 	.word	0x20001ab8
 800d6ec:	200016d0 	.word	0x200016d0
 800d6f0:	08012954 	.word	0x08012954

0800d6f4 <xbee_api_transmit>:
// ...........................................................................

// ...........................................................................
int xbee_api_transmit( uint8_t *data, uint16_t len, uint8_t ack_frame_type, uint8_t *resp_data, uint16_t *resp_len )
{
 800d6f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  static uint8_t buffer[ FRAME_LEN ];

  xbee_ack_frame_type = ack_frame_type;

  buffer[ 0 ] = 0x7E;
 800d6f8:	4d27      	ldr	r5, [pc, #156]	; (800d798 <xbee_api_transmit+0xa4>)
{
 800d6fa:	4617      	mov	r7, r2
  buffer[ 0 ] = 0x7E;
 800d6fc:	227e      	movs	r2, #126	; 0x7e
 800d6fe:	702a      	strb	r2, [r5, #0]
  buffer[ 1 ] = ( len >> 8 ) & 0xFF;
 800d700:	0a0a      	lsrs	r2, r1, #8
 800d702:	706a      	strb	r2, [r5, #1]
{
 800d704:	460c      	mov	r4, r1
 800d706:	461e      	mov	r6, r3
  buffer[ 2 ] = len & 0xFF;
 800d708:	70a9      	strb	r1, [r5, #2]
  for ( int i = 0 ; i < len ; i++ ) buffer[ 3 + i ] = data[ i ];
 800d70a:	2200      	movs	r2, #0
 800d70c:	42a2      	cmp	r2, r4
 800d70e:	db27      	blt.n	800d760 <xbee_api_transmit+0x6c>
  buffer[ len + 3 ] = xbee_checksum( data, len );
 800d710:	4621      	mov	r1, r4
 800d712:	f7ff fe9b 	bl	800d44c <xbee_checksum>
 800d716:	192b      	adds	r3, r5, r4

  HAL_StatusTypeDef r;
  while ( ( r = HAL_UART_Transmit_IT( &huart3, buffer, len + 4 ) ) == HAL_BUSY ) {}
 800d718:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800d798 <xbee_api_transmit+0xa4>
 800d71c:	4d1f      	ldr	r5, [pc, #124]	; (800d79c <xbee_api_transmit+0xa8>)
  buffer[ len + 3 ] = xbee_checksum( data, len );
 800d71e:	70d8      	strb	r0, [r3, #3]
  while ( ( r = HAL_UART_Transmit_IT( &huart3, buffer, len + 4 ) ) == HAL_BUSY ) {}
 800d720:	3404      	adds	r4, #4
 800d722:	b2a4      	uxth	r4, r4
 800d724:	4622      	mov	r2, r4
 800d726:	4641      	mov	r1, r8
 800d728:	4628      	mov	r0, r5
 800d72a:	f7f6 f83e 	bl	80037aa <HAL_UART_Transmit_IT>
 800d72e:	2802      	cmp	r0, #2
 800d730:	d0f8      	beq.n	800d724 <xbee_api_transmit+0x30>

  if ( r != HAL_OK ) return 0;
 800d732:	b998      	cbnz	r0, 800d75c <xbee_api_transmit+0x68>

  while ( !event_check( &xbee_evt_endtx ) ) {}
 800d734:	4c1a      	ldr	r4, [pc, #104]	; (800d7a0 <xbee_api_transmit+0xac>)
 800d736:	4620      	mov	r0, r4
 800d738:	f7fe fcde 	bl	800c0f8 <event_check>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d0fa      	beq.n	800d736 <xbee_api_transmit+0x42>
  //return 0;

  // Wait for ack from the XBee board
  uint8_t rank;

  uint32_t tickend = HAL_GetTick() + 5000;
 800d740:	f7f3 fc1a 	bl	8000f78 <HAL_GetTick>
 800d744:	f500 549c 	add.w	r4, r0, #4992	; 0x1380
 800d748:	3408      	adds	r4, #8

  while ( HAL_GetTick() < tickend )
 800d74a:	f7f3 fc15 	bl	8000f78 <HAL_GetTick>
 800d74e:	4284      	cmp	r4, r0
 800d750:	d80b      	bhi.n	800d76a <xbee_api_transmit+0x76>
		  }
		  return 1;
	  }
  }

  xbee_signal_error( __LINE__ );
 800d752:	4b14      	ldr	r3, [pc, #80]	; (800d7a4 <xbee_api_transmit+0xb0>)
 800d754:	f240 2005 	movw	r0, #517	; 0x205
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4798      	blx	r3
  if ( r != HAL_OK ) return 0;
 800d75c:	2000      	movs	r0, #0
 800d75e:	e013      	b.n	800d788 <xbee_api_transmit+0x94>
  for ( int i = 0 ; i < len ; i++ ) buffer[ 3 + i ] = data[ i ];
 800d760:	18ab      	adds	r3, r5, r2
 800d762:	5c81      	ldrb	r1, [r0, r2]
 800d764:	70d9      	strb	r1, [r3, #3]
 800d766:	3201      	adds	r2, #1
 800d768:	e7d0      	b.n	800d70c <xbee_api_transmit+0x18>
	  if ( xbee_frames_find( &rank, ack_frame_type ) )
 800d76a:	4639      	mov	r1, r7
 800d76c:	f10d 0007 	add.w	r0, sp, #7
 800d770:	f7ff fe46 	bl	800d400 <xbee_frames_find>
 800d774:	2800      	cmp	r0, #0
 800d776:	d0e8      	beq.n	800d74a <xbee_api_transmit+0x56>
 800d778:	f89d 2007 	ldrb.w	r2, [sp, #7]
		  if ( resp_data )
 800d77c:	b13e      	cbz	r6, 800d78e <xbee_api_transmit+0x9a>
		    xbee_recv_full_rank( resp_data, resp_len, rank );
 800d77e:	9908      	ldr	r1, [sp, #32]
 800d780:	4630      	mov	r0, r6
 800d782:	f7ff feed 	bl	800d560 <xbee_recv_full_rank>
		  return 1;
 800d786:	2001      	movs	r0, #1
  return 0;
}
 800d788:	b002      	add	sp, #8
 800d78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xbee_recv_discard_rank( rank );
 800d78e:	4610      	mov	r0, r2
 800d790:	f7ff ff15 	bl	800d5be <xbee_recv_discard_rank>
 800d794:	e7f7      	b.n	800d786 <xbee_api_transmit+0x92>
 800d796:	bf00      	nop
 800d798:	20000e6d 	.word	0x20000e6d
 800d79c:	200086c8 	.word	0x200086c8
 800d7a0:	20009194 	.word	0x20009194
 800d7a4:	20009198 	.word	0x20009198

0800d7a8 <xbee_api_send_to>:
#define INC_FRAME_ID() { frame_id++; if ( frame_id == 0 ) frame_id = 1; }

// ...........................................................................
// Note : len = 73 max
int xbee_api_send_to( uint64_t to, uint8_t *data, uint16_t len )
{
 800d7a8:	b570      	push	{r4, r5, r6, lr}
  
  // Type
  xreq[ 0 ] = 0x10;

  // Frame ID
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d7aa:	4d21      	ldr	r5, [pc, #132]	; (800d830 <xbee_api_send_to+0x88>)
{
 800d7ac:	b09c      	sub	sp, #112	; 0x70
  xreq[ 0 ] = 0x10;
 800d7ae:	2410      	movs	r4, #16
 800d7b0:	f88d 400c 	strb.w	r4, [sp, #12]
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d7b4:	782c      	ldrb	r4, [r5, #0]
 800d7b6:	f88d 400d 	strb.w	r4, [sp, #13]
 800d7ba:	3401      	adds	r4, #1
 800d7bc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800d7c0:	bf08      	it	eq
 800d7c2:	2401      	moveq	r4, #1
 800d7c4:	702c      	strb	r4, [r5, #0]
  //   - Point-multipoint (0x40)
  //   - Directed Broadcast (0x80)
  //   - DigiMesh (0xC0)
  // Note: done here before we destroy the value of 'to'
  //xreq[ 13 ] = 0x80;
  xreq[ 13 ] = ( to == XBEE_BROADCAST ? 0x80 : 0x40 );
 800d7c6:	2500      	movs	r5, #0
 800d7c8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800d7cc:	42a9      	cmp	r1, r5
 800d7ce:	bf06      	itte	eq
 800d7d0:	42a0      	cmpeq	r0, r4
 800d7d2:	2480      	moveq	r4, #128	; 0x80
 800d7d4:	2440      	movne	r4, #64	; 0x40
 800d7d6:	f88d 4019 	strb.w	r4, [sp, #25]
 800d7da:	2408      	movs	r4, #8

  // Dest address
  for ( i = 7 ; i >= 0 ; i-- )
  {
	xreq[ i + 2 ] = to & 0xFF;
 800d7dc:	ad03      	add	r5, sp, #12
 800d7de:	4425      	add	r5, r4
	to >>= 8;
 800d7e0:	0a0e      	lsrs	r6, r1, #8
	xreq[ i + 2 ] = to & 0xFF;
 800d7e2:	7068      	strb	r0, [r5, #1]
	to >>= 8;
 800d7e4:	0a05      	lsrs	r5, r0, #8
 800d7e6:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
  for ( i = 7 ; i >= 0 ; i-- )
 800d7ea:	3c01      	subs	r4, #1
	to >>= 8;
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	4631      	mov	r1, r6
  for ( i = 7 ; i >= 0 ; i-- )
 800d7f0:	d1f4      	bne.n	800d7dc <xbee_api_send_to+0x34>
  }
  
  // Reserved
  xreq[ 10 ] = 0xFF;
 800d7f2:	21ff      	movs	r1, #255	; 0xff
 800d7f4:	f88d 1016 	strb.w	r1, [sp, #22]
  xreq[ 11 ] = 0xFE;
 800d7f8:	21fe      	movs	r1, #254	; 0xfe
 800d7fa:	f88d 1017 	strb.w	r1, [sp, #23]

  // Radius
  xreq[ 12 ] = 0;
 800d7fe:	f88d 4018 	strb.w	r4, [sp, #24]

  for ( i = 0 ; i < len ; i++ ) xreq[ 14 + i ] = data[ i ];
 800d802:	429c      	cmp	r4, r3
 800d804:	db0d      	blt.n	800d822 <xbee_api_send_to+0x7a>

  if ( xbee_api_transmit( xreq, 14 + len, 0x8B, 0, 0 ) )
 800d806:	f103 010e 	add.w	r1, r3, #14
 800d80a:	2300      	movs	r3, #0
 800d80c:	9300      	str	r3, [sp, #0]
 800d80e:	228b      	movs	r2, #139	; 0x8b
 800d810:	b289      	uxth	r1, r1
 800d812:	a803      	add	r0, sp, #12
 800d814:	f7ff ff6e 	bl	800d6f4 <xbee_api_transmit>
  {
	  return 1;
  }

  return 0;
}
 800d818:	3000      	adds	r0, #0
 800d81a:	bf18      	it	ne
 800d81c:	2001      	movne	r0, #1
 800d81e:	b01c      	add	sp, #112	; 0x70
 800d820:	bd70      	pop	{r4, r5, r6, pc}
  for ( i = 0 ; i < len ; i++ ) xreq[ 14 + i ] = data[ i ];
 800d822:	a903      	add	r1, sp, #12
 800d824:	4421      	add	r1, r4
 800d826:	5d10      	ldrb	r0, [r2, r4]
 800d828:	7388      	strb	r0, [r1, #14]
 800d82a:	3401      	adds	r4, #1
 800d82c:	e7e9      	b.n	800d802 <xbee_api_send_to+0x5a>
 800d82e:	bf00      	nop
 800d830:	200005b8 	.word	0x200005b8

0800d834 <xbee_api_AT16>:
// ...........................................................................

// ...........................................................................
int xbee_api_AT16( uint8_t *cmd, uint16_t val )
{
 800d834:	b500      	push	{lr}

  // Frame ID
#if XBEE_AT_NO_RESPONSE_NEEDED
  xreq[ 1 ] = 0;
#else
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d836:	4a11      	ldr	r2, [pc, #68]	; (800d87c <xbee_api_AT16+0x48>)
{
 800d838:	b09d      	sub	sp, #116	; 0x74
  xreq[ 0 ] = 0x08;
 800d83a:	2308      	movs	r3, #8
 800d83c:	f88d 300c 	strb.w	r3, [sp, #12]
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d840:	7813      	ldrb	r3, [r2, #0]
 800d842:	f88d 300d 	strb.w	r3, [sp, #13]
 800d846:	3301      	adds	r3, #1
 800d848:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800d84c:	bf08      	it	eq
 800d84e:	2301      	moveq	r3, #1
 800d850:	7013      	strb	r3, [r2, #0]
#endif

  // Command and parameters
  for ( i = 0 ; i < 2 ; i++ ) xreq[ 2 + i ] = cmd[ i ]; // Works even with 1 char cmd (0 ended)
 800d852:	7803      	ldrb	r3, [r0, #0]
 800d854:	f88d 300e 	strb.w	r3, [sp, #14]
 800d858:	7843      	ldrb	r3, [r0, #1]
 800d85a:	f88d 300f 	strb.w	r3, [sp, #15]

  xreq[ 4 ] = (val>>8) & 0xFF;
 800d85e:	0a0b      	lsrs	r3, r1, #8
 800d860:	f88d 3010 	strb.w	r3, [sp, #16]
  xreq[ 5 ] = val & 0xFF;

  return xbee_api_transmit( xreq, 6, 0x88, 0, 0 );
 800d864:	2300      	movs	r3, #0
  xreq[ 5 ] = val & 0xFF;
 800d866:	f88d 1011 	strb.w	r1, [sp, #17]
  return xbee_api_transmit( xreq, 6, 0x88, 0, 0 );
 800d86a:	9300      	str	r3, [sp, #0]
 800d86c:	2288      	movs	r2, #136	; 0x88
 800d86e:	2106      	movs	r1, #6
 800d870:	a803      	add	r0, sp, #12
 800d872:	f7ff ff3f 	bl	800d6f4 <xbee_api_transmit>
}
 800d876:	b01d      	add	sp, #116	; 0x74
 800d878:	f85d fb04 	ldr.w	pc, [sp], #4
 800d87c:	200005b8 	.word	0x200005b8

0800d880 <xbee_api_AT8>:
// ...........................................................................

// ...........................................................................
int xbee_api_AT8( uint8_t *cmd, uint8_t val )
{
 800d880:	b500      	push	{lr}

  // Frame ID
#if XBEE_AT_NO_RESPONSE_NEEDED
  xreq[ 1 ] = 0;
#else
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d882:	4a10      	ldr	r2, [pc, #64]	; (800d8c4 <xbee_api_AT8+0x44>)
{
 800d884:	b09d      	sub	sp, #116	; 0x74
  xreq[ 0 ] = 0x08;
 800d886:	2308      	movs	r3, #8
 800d888:	f88d 300c 	strb.w	r3, [sp, #12]
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d88c:	7813      	ldrb	r3, [r2, #0]
 800d88e:	f88d 300d 	strb.w	r3, [sp, #13]
 800d892:	3301      	adds	r3, #1
 800d894:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800d898:	bf08      	it	eq
 800d89a:	2301      	moveq	r3, #1
 800d89c:	7013      	strb	r3, [r2, #0]
#endif

  // Command and parameters
  for ( i = 0 ; i < 2 ; i++ ) xreq[ 2 + i ] = cmd[ i ]; // Works even with 1 char cmd (0 ended)
 800d89e:	7803      	ldrb	r3, [r0, #0]
 800d8a0:	f88d 300e 	strb.w	r3, [sp, #14]
 800d8a4:	7843      	ldrb	r3, [r0, #1]
 800d8a6:	f88d 300f 	strb.w	r3, [sp, #15]

  xreq[ 4 ] = val;

  return xbee_api_transmit( xreq, 5, 0x88, 0, 0 );
 800d8aa:	2300      	movs	r3, #0
  xreq[ 4 ] = val;
 800d8ac:	f88d 1010 	strb.w	r1, [sp, #16]
  return xbee_api_transmit( xreq, 5, 0x88, 0, 0 );
 800d8b0:	9300      	str	r3, [sp, #0]
 800d8b2:	2288      	movs	r2, #136	; 0x88
 800d8b4:	2105      	movs	r1, #5
 800d8b6:	a803      	add	r0, sp, #12
 800d8b8:	f7ff ff1c 	bl	800d6f4 <xbee_api_transmit>
}
 800d8bc:	b01d      	add	sp, #116	; 0x74
 800d8be:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8c2:	bf00      	nop
 800d8c4:	200005b8 	.word	0x200005b8

0800d8c8 <xbee_init>:
	xbee_signal_error = f;
 800d8c8:	4b12      	ldr	r3, [pc, #72]	; (800d914 <xbee_init+0x4c>)
	event_init( &xbee_evt );
 800d8ca:	4813      	ldr	r0, [pc, #76]	; (800d918 <xbee_init+0x50>)
{
 800d8cc:	b510      	push	{r4, lr}
	xbee_signal_error = f;
 800d8ce:	6019      	str	r1, [r3, #0]
}
// ...........................................................................

void xbee_log_clear()
{
	xbee_log_buffer[ 0 ] = 0;
 800d8d0:	4b12      	ldr	r3, [pc, #72]	; (800d91c <xbee_init+0x54>)
 800d8d2:	2400      	movs	r4, #0
 800d8d4:	701c      	strb	r4, [r3, #0]
	event_init( &xbee_evt );
 800d8d6:	f7fe fc09 	bl	800c0ec <event_init>
	event_init( &xbee_evt_endtx );
 800d8da:	4811      	ldr	r0, [pc, #68]	; (800d920 <xbee_init+0x58>)
 800d8dc:	f7fe fc06 	bl	800c0ec <event_init>
	HAL_Delay( 1000 );
 800d8e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d8e4:	f7f3 fb4e 	bl	8000f84 <HAL_Delay>
	xbee_recv_clear();
 800d8e8:	4b0e      	ldr	r3, [pc, #56]	; (800d924 <xbee_init+0x5c>)
	xbee_api_AT16( ( uint8_t * )"ID", 0xAAAA );
 800d8ea:	480f      	ldr	r0, [pc, #60]	; (800d928 <xbee_init+0x60>)
	xbee_recv_clear();
 800d8ec:	801c      	strh	r4, [r3, #0]
 800d8ee:	4b0f      	ldr	r3, [pc, #60]	; (800d92c <xbee_init+0x64>)
 800d8f0:	801c      	strh	r4, [r3, #0]
	xbee_n_frames = 0;
 800d8f2:	4b0f      	ldr	r3, [pc, #60]	; (800d930 <xbee_init+0x68>)
	xbee_api_AT16( ( uint8_t * )"ID", 0xAAAA );
 800d8f4:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
	xbee_n_frames = 0;
 800d8f8:	701c      	strb	r4, [r3, #0]
	xbee_api_AT16( ( uint8_t * )"ID", 0xAAAA );
 800d8fa:	f7ff ff9b 	bl	800d834 <xbee_api_AT16>
	xbee_api_AT8( ( uint8_t * )"CH", 0x11 );
 800d8fe:	2111      	movs	r1, #17
 800d900:	480c      	ldr	r0, [pc, #48]	; (800d934 <xbee_init+0x6c>)
 800d902:	f7ff ffbd 	bl	800d880 <xbee_api_AT8>
	xbee_api_AT8( ( uint8_t * )"CE", 0 );
 800d906:	4621      	mov	r1, r4
 800d908:	480b      	ldr	r0, [pc, #44]	; (800d938 <xbee_init+0x70>)
}
 800d90a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	xbee_api_AT8( ( uint8_t * )"CE", 0 );
 800d90e:	f7ff bfb7 	b.w	800d880 <xbee_api_AT8>
 800d912:	bf00      	nop
 800d914:	20009198 	.word	0x20009198
 800d918:	2000919c 	.word	0x2000919c
 800d91c:	2000919d 	.word	0x2000919d
 800d920:	20009194 	.word	0x20009194
 800d924:	20001ab8 	.word	0x20001ab8
 800d928:	0801297c 	.word	0x0801297c
 800d92c:	20000ed4 	.word	0x20000ed4
 800d930:	200016cf 	.word	0x200016cf
 800d934:	0801297f 	.word	0x0801297f
 800d938:	08012982 	.word	0x08012982

0800d93c <xbee_process>:
	if ( led_ms )
 800d93c:	4907      	ldr	r1, [pc, #28]	; (800d95c <xbee_process+0x20>)
 800d93e:	880b      	ldrh	r3, [r1, #0]
 800d940:	b153      	cbz	r3, 800d958 <xbee_process+0x1c>
		if ( led_ms <= ms )
 800d942:	4283      	cmp	r3, r0
 800d944:	dc06      	bgt.n	800d954 <xbee_process+0x18>
			XBEE_RX_LED_STOP();
 800d946:	2200      	movs	r2, #0
 800d948:	800a      	strh	r2, [r1, #0]
 800d94a:	4805      	ldr	r0, [pc, #20]	; (800d960 <xbee_process+0x24>)
 800d94c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d950:	f7f4 ba26 	b.w	8001da0 <HAL_GPIO_WritePin>
			led_ms -= ms;
 800d954:	1a1b      	subs	r3, r3, r0
 800d956:	800b      	strh	r3, [r1, #0]
 800d958:	4770      	bx	lr
 800d95a:	bf00      	nop
 800d95c:	20000ed2 	.word	0x20000ed2
 800d960:	40020c00 	.word	0x40020c00

0800d964 <xbee_AT_configure_API1>:
{
 800d964:	b570      	push	{r4, r5, r6, lr}
	  xbee_mode_AT = 1;
 800d966:	4d32      	ldr	r5, [pc, #200]	; (800da30 <xbee_AT_configure_API1+0xcc>)
	  HAL_Delay( 1100 );
 800d968:	f240 404c 	movw	r0, #1100	; 0x44c
	  xbee_mode_AT = 1;
 800d96c:	2401      	movs	r4, #1
 800d96e:	702c      	strb	r4, [r5, #0]
	  HAL_Delay( 1100 );
 800d970:	f7f3 fb08 	bl	8000f84 <HAL_Delay>
	  HAL_UART_Transmit( &huart3, ( uint8_t * )"+++", 3, 1000 );
 800d974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d978:	2203      	movs	r2, #3
 800d97a:	492e      	ldr	r1, [pc, #184]	; (800da34 <xbee_AT_configure_API1+0xd0>)
 800d97c:	482e      	ldr	r0, [pc, #184]	; (800da38 <xbee_AT_configure_API1+0xd4>)
 800d97e:	f7f5 feb7 	bl	80036f0 <HAL_UART_Transmit>
	  HAL_Delay( 1100 );
 800d982:	f240 404c 	movw	r0, #1100	; 0x44c
 800d986:	f7f3 fafd 	bl	8000f84 <HAL_Delay>
	  if ( !xbee_AT_check_OK() ) { xbee_mode_AT = 0; return 1; }
 800d98a:	f7ff fe99 	bl	800d6c0 <xbee_AT_check_OK>
 800d98e:	462e      	mov	r6, r5
 800d990:	b910      	cbnz	r0, 800d998 <xbee_AT_configure_API1+0x34>
 800d992:	7028      	strb	r0, [r5, #0]
 800d994:	4620      	mov	r0, r4
 800d996:	bd70      	pop	{r4, r5, r6, pc}
	  HAL_UART_Transmit( &huart3, ( uint8_t * )"ATRE\r", 5, 1000 );
 800d998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d99c:	2205      	movs	r2, #5
 800d99e:	4927      	ldr	r1, [pc, #156]	; (800da3c <xbee_AT_configure_API1+0xd8>)
 800d9a0:	4825      	ldr	r0, [pc, #148]	; (800da38 <xbee_AT_configure_API1+0xd4>)
 800d9a2:	f7f5 fea5 	bl	80036f0 <HAL_UART_Transmit>
	  HAL_Delay( 100 );
 800d9a6:	2064      	movs	r0, #100	; 0x64
 800d9a8:	f7f3 faec 	bl	8000f84 <HAL_Delay>
	  if ( !xbee_AT_check_OK() ) { xbee_mode_AT = 0; return 2; }
 800d9ac:	f7ff fe88 	bl	800d6c0 <xbee_AT_check_OK>
 800d9b0:	b918      	cbnz	r0, 800d9ba <xbee_AT_configure_API1+0x56>
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	7033      	strb	r3, [r6, #0]
 800d9b6:	2002      	movs	r0, #2
 800d9b8:	bd70      	pop	{r4, r5, r6, pc}
	  HAL_UART_Transmit( &huart3, ( uint8_t * )"ATAP1\r", 6, 1000 );
 800d9ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d9be:	2206      	movs	r2, #6
 800d9c0:	491f      	ldr	r1, [pc, #124]	; (800da40 <xbee_AT_configure_API1+0xdc>)
 800d9c2:	481d      	ldr	r0, [pc, #116]	; (800da38 <xbee_AT_configure_API1+0xd4>)
 800d9c4:	f7f5 fe94 	bl	80036f0 <HAL_UART_Transmit>
	  HAL_Delay( 100 );
 800d9c8:	2064      	movs	r0, #100	; 0x64
 800d9ca:	f7f3 fadb 	bl	8000f84 <HAL_Delay>
	  if ( !xbee_AT_check_OK() ) { xbee_mode_AT = 0; return 2; }
 800d9ce:	f7ff fe77 	bl	800d6c0 <xbee_AT_check_OK>
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	d0ed      	beq.n	800d9b2 <xbee_AT_configure_API1+0x4e>
	  HAL_UART_Transmit( &huart3, ( uint8_t * )"ATBD7\r", 6, 1000 ); // 115200
 800d9d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d9da:	2206      	movs	r2, #6
 800d9dc:	4919      	ldr	r1, [pc, #100]	; (800da44 <xbee_AT_configure_API1+0xe0>)
 800d9de:	4816      	ldr	r0, [pc, #88]	; (800da38 <xbee_AT_configure_API1+0xd4>)
 800d9e0:	f7f5 fe86 	bl	80036f0 <HAL_UART_Transmit>
	  HAL_Delay( 100 );
 800d9e4:	2064      	movs	r0, #100	; 0x64
 800d9e6:	f7f3 facd 	bl	8000f84 <HAL_Delay>
	  if ( !xbee_AT_check_OK() ) { xbee_mode_AT = 0; return 3; }
 800d9ea:	f7ff fe69 	bl	800d6c0 <xbee_AT_check_OK>
 800d9ee:	b910      	cbnz	r0, 800d9f6 <xbee_AT_configure_API1+0x92>
 800d9f0:	7028      	strb	r0, [r5, #0]
 800d9f2:	2003      	movs	r0, #3
 800d9f4:	bd70      	pop	{r4, r5, r6, pc}
	  HAL_UART_Transmit( &huart3, ( uint8_t * )"ATWR\r", 5, 1000 );
 800d9f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d9fa:	2205      	movs	r2, #5
 800d9fc:	4912      	ldr	r1, [pc, #72]	; (800da48 <xbee_AT_configure_API1+0xe4>)
 800d9fe:	480e      	ldr	r0, [pc, #56]	; (800da38 <xbee_AT_configure_API1+0xd4>)
 800da00:	f7f5 fe76 	bl	80036f0 <HAL_UART_Transmit>
	  HAL_Delay( 100 );
 800da04:	2064      	movs	r0, #100	; 0x64
 800da06:	f7f3 fabd 	bl	8000f84 <HAL_Delay>
	  if ( !xbee_AT_check_OK() ) { xbee_mode_AT = 0; return 4; }
 800da0a:	f7ff fe59 	bl	800d6c0 <xbee_AT_check_OK>
 800da0e:	b910      	cbnz	r0, 800da16 <xbee_AT_configure_API1+0xb2>
 800da10:	7028      	strb	r0, [r5, #0]
 800da12:	2004      	movs	r0, #4
 800da14:	bd70      	pop	{r4, r5, r6, pc}
	  HAL_UART_Transmit( &huart3, ( uint8_t * )"ATCN\r", 5, 1000 );
 800da16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800da1a:	2205      	movs	r2, #5
 800da1c:	490b      	ldr	r1, [pc, #44]	; (800da4c <xbee_AT_configure_API1+0xe8>)
 800da1e:	4806      	ldr	r0, [pc, #24]	; (800da38 <xbee_AT_configure_API1+0xd4>)
 800da20:	f7f5 fe66 	bl	80036f0 <HAL_UART_Transmit>
	  HAL_Delay( 100 );
 800da24:	2064      	movs	r0, #100	; 0x64
 800da26:	f7f3 faad 	bl	8000f84 <HAL_Delay>
	  xbee_mode_AT = 0;
 800da2a:	2000      	movs	r0, #0
 800da2c:	7028      	strb	r0, [r5, #0]
}
 800da2e:	bd70      	pop	{r4, r5, r6, pc}
 800da30:	200016ce 	.word	0x200016ce
 800da34:	08012958 	.word	0x08012958
 800da38:	200086c8 	.word	0x200086c8
 800da3c:	0801295c 	.word	0x0801295c
 800da40:	08012962 	.word	0x08012962
 800da44:	08012969 	.word	0x08012969
 800da48:	08012970 	.word	0x08012970
 800da4c:	08012976 	.word	0x08012976

0800da50 <xbee_log>:
}


void xbee_log( const char *msg )
{
 800da50:	b538      	push	{r3, r4, r5, lr}
 800da52:	4604      	mov	r4, r0
	int len_rl = strlen( ( const char * )xbee_log_buffer );
 800da54:	480f      	ldr	r0, [pc, #60]	; (800da94 <xbee_log+0x44>)
 800da56:	f7f2 fbc5 	bl	80001e4 <strlen>
 800da5a:	4605      	mov	r5, r0
	int len_msg = strlen( msg );
 800da5c:	4620      	mov	r0, r4
 800da5e:	f7f2 fbc1 	bl	80001e4 <strlen>


	if ( len_rl + len_msg > XBEE_LOG_SIZE )
 800da62:	f241 3388 	movw	r3, #5000	; 0x1388
 800da66:	182a      	adds	r2, r5, r0
 800da68:	429a      	cmp	r2, r3
 800da6a:	dc05      	bgt.n	800da78 <xbee_log+0x28>
		int i, k;
		len_rl++;
		for ( k = 0, i = len_msg ; i < len_rl ; i++, k++ ) xbee_log_buffer[ k ] = xbee_log_buffer[ i ];
	}

	strcat( ( char * )xbee_log_buffer, msg );
 800da6c:	4621      	mov	r1, r4
 800da6e:	4809      	ldr	r0, [pc, #36]	; (800da94 <xbee_log+0x44>)
}
 800da70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	strcat( ( char * )xbee_log_buffer, msg );
 800da74:	f000 b996 	b.w	800dda4 <strcat>
		if ( len_msg < XBEE_LOG_SIZE / 3 ) len_msg = XBEE_LOG_SIZE / 3;
 800da78:	f240 6382 	movw	r3, #1666	; 0x682
 800da7c:	4298      	cmp	r0, r3
 800da7e:	bfb8      	it	lt
 800da80:	4618      	movlt	r0, r3
		for ( k = 0, i = len_msg ; i < len_rl ; i++, k++ ) xbee_log_buffer[ k ] = xbee_log_buffer[ i ];
 800da82:	4b04      	ldr	r3, [pc, #16]	; (800da94 <xbee_log+0x44>)
 800da84:	1a1a      	subs	r2, r3, r0
 800da86:	42a8      	cmp	r0, r5
 800da88:	dcf0      	bgt.n	800da6c <xbee_log+0x1c>
 800da8a:	5cc1      	ldrb	r1, [r0, r3]
 800da8c:	5411      	strb	r1, [r2, r0]
 800da8e:	3001      	adds	r0, #1
 800da90:	e7f9      	b.n	800da86 <xbee_log+0x36>
 800da92:	bf00      	nop
 800da94:	2000919d 	.word	0x2000919d

0800da98 <xbee_log_get>:

const char *xbee_log_get()
{
	return ( const char * )xbee_log_buffer;
}
 800da98:	4800      	ldr	r0, [pc, #0]	; (800da9c <xbee_log_get+0x4>)
 800da9a:	4770      	bx	lr
 800da9c:	2000919d 	.word	0x2000919d

0800daa0 <xbee_log_len>:

int xbee_log_len()
{
  return strlen( ( const char * )xbee_log_buffer );
 800daa0:	4801      	ldr	r0, [pc, #4]	; (800daa8 <xbee_log_len+0x8>)
 800daa2:	f7f2 bb9f 	b.w	80001e4 <strlen>
 800daa6:	bf00      	nop
 800daa8:	2000919d 	.word	0x2000919d

0800daac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800daac:	f8df d034 	ldr.w	sp, [pc, #52]	; 800dae4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800dab0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800dab2:	e003      	b.n	800dabc <LoopCopyDataInit>

0800dab4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800dab4:	4b0c      	ldr	r3, [pc, #48]	; (800dae8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800dab6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800dab8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800daba:	3104      	adds	r1, #4

0800dabc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800dabc:	480b      	ldr	r0, [pc, #44]	; (800daec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800dabe:	4b0c      	ldr	r3, [pc, #48]	; (800daf0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800dac0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800dac2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800dac4:	d3f6      	bcc.n	800dab4 <CopyDataInit>
  ldr  r2, =_sbss
 800dac6:	4a0b      	ldr	r2, [pc, #44]	; (800daf4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800dac8:	e002      	b.n	800dad0 <LoopFillZerobss>

0800daca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800daca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800dacc:	f842 3b04 	str.w	r3, [r2], #4

0800dad0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800dad0:	4b09      	ldr	r3, [pc, #36]	; (800daf8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800dad2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800dad4:	d3f9      	bcc.n	800daca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800dad6:	f7ff fa95 	bl	800d004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800dada:	f000 f815 	bl	800db08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800dade:	f7fe fd6d 	bl	800c5bc <main>
  bx  lr    
 800dae2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800dae4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800dae8:	08012b38 	.word	0x08012b38
  ldr  r0, =_sdata
 800daec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800daf0:	2000078c 	.word	0x2000078c
  ldr  r2, =_sbss
 800daf4:	20000790 	.word	0x20000790
  ldr  r3, = _ebss
 800daf8:	2000a52c 	.word	0x2000a52c

0800dafc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dafc:	e7fe      	b.n	800dafc <ADC_IRQHandler>

0800dafe <atoi>:
 800dafe:	220a      	movs	r2, #10
 800db00:	2100      	movs	r1, #0
 800db02:	f000 ba37 	b.w	800df74 <strtol>
	...

0800db08 <__libc_init_array>:
 800db08:	b570      	push	{r4, r5, r6, lr}
 800db0a:	4e0d      	ldr	r6, [pc, #52]	; (800db40 <__libc_init_array+0x38>)
 800db0c:	4c0d      	ldr	r4, [pc, #52]	; (800db44 <__libc_init_array+0x3c>)
 800db0e:	1ba4      	subs	r4, r4, r6
 800db10:	10a4      	asrs	r4, r4, #2
 800db12:	2500      	movs	r5, #0
 800db14:	42a5      	cmp	r5, r4
 800db16:	d109      	bne.n	800db2c <__libc_init_array+0x24>
 800db18:	4e0b      	ldr	r6, [pc, #44]	; (800db48 <__libc_init_array+0x40>)
 800db1a:	4c0c      	ldr	r4, [pc, #48]	; (800db4c <__libc_init_array+0x44>)
 800db1c:	f001 fa20 	bl	800ef60 <_init>
 800db20:	1ba4      	subs	r4, r4, r6
 800db22:	10a4      	asrs	r4, r4, #2
 800db24:	2500      	movs	r5, #0
 800db26:	42a5      	cmp	r5, r4
 800db28:	d105      	bne.n	800db36 <__libc_init_array+0x2e>
 800db2a:	bd70      	pop	{r4, r5, r6, pc}
 800db2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800db30:	4798      	blx	r3
 800db32:	3501      	adds	r5, #1
 800db34:	e7ee      	b.n	800db14 <__libc_init_array+0xc>
 800db36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800db3a:	4798      	blx	r3
 800db3c:	3501      	adds	r5, #1
 800db3e:	e7f2      	b.n	800db26 <__libc_init_array+0x1e>
 800db40:	08012b30 	.word	0x08012b30
 800db44:	08012b30 	.word	0x08012b30
 800db48:	08012b30 	.word	0x08012b30
 800db4c:	08012b34 	.word	0x08012b34

0800db50 <malloc>:
 800db50:	4b02      	ldr	r3, [pc, #8]	; (800db5c <malloc+0xc>)
 800db52:	4601      	mov	r1, r0
 800db54:	6818      	ldr	r0, [r3, #0]
 800db56:	f000 b87b 	b.w	800dc50 <_malloc_r>
 800db5a:	bf00      	nop
 800db5c:	200005bc 	.word	0x200005bc

0800db60 <free>:
 800db60:	4b02      	ldr	r3, [pc, #8]	; (800db6c <free+0xc>)
 800db62:	4601      	mov	r1, r0
 800db64:	6818      	ldr	r0, [r3, #0]
 800db66:	f000 b825 	b.w	800dbb4 <_free_r>
 800db6a:	bf00      	nop
 800db6c:	200005bc 	.word	0x200005bc

0800db70 <memcmp>:
 800db70:	b510      	push	{r4, lr}
 800db72:	3901      	subs	r1, #1
 800db74:	4402      	add	r2, r0
 800db76:	4290      	cmp	r0, r2
 800db78:	d101      	bne.n	800db7e <memcmp+0xe>
 800db7a:	2000      	movs	r0, #0
 800db7c:	bd10      	pop	{r4, pc}
 800db7e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800db82:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800db86:	42a3      	cmp	r3, r4
 800db88:	d0f5      	beq.n	800db76 <memcmp+0x6>
 800db8a:	1b18      	subs	r0, r3, r4
 800db8c:	bd10      	pop	{r4, pc}

0800db8e <memcpy>:
 800db8e:	b510      	push	{r4, lr}
 800db90:	1e43      	subs	r3, r0, #1
 800db92:	440a      	add	r2, r1
 800db94:	4291      	cmp	r1, r2
 800db96:	d100      	bne.n	800db9a <memcpy+0xc>
 800db98:	bd10      	pop	{r4, pc}
 800db9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dba2:	e7f7      	b.n	800db94 <memcpy+0x6>

0800dba4 <memset>:
 800dba4:	4402      	add	r2, r0
 800dba6:	4603      	mov	r3, r0
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d100      	bne.n	800dbae <memset+0xa>
 800dbac:	4770      	bx	lr
 800dbae:	f803 1b01 	strb.w	r1, [r3], #1
 800dbb2:	e7f9      	b.n	800dba8 <memset+0x4>

0800dbb4 <_free_r>:
 800dbb4:	b538      	push	{r3, r4, r5, lr}
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	2900      	cmp	r1, #0
 800dbba:	d045      	beq.n	800dc48 <_free_r+0x94>
 800dbbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbc0:	1f0c      	subs	r4, r1, #4
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	bfb8      	it	lt
 800dbc6:	18e4      	addlt	r4, r4, r3
 800dbc8:	f000 fac9 	bl	800e15e <__malloc_lock>
 800dbcc:	4a1f      	ldr	r2, [pc, #124]	; (800dc4c <_free_r+0x98>)
 800dbce:	6813      	ldr	r3, [r2, #0]
 800dbd0:	4610      	mov	r0, r2
 800dbd2:	b933      	cbnz	r3, 800dbe2 <_free_r+0x2e>
 800dbd4:	6063      	str	r3, [r4, #4]
 800dbd6:	6014      	str	r4, [r2, #0]
 800dbd8:	4628      	mov	r0, r5
 800dbda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbde:	f000 babf 	b.w	800e160 <__malloc_unlock>
 800dbe2:	42a3      	cmp	r3, r4
 800dbe4:	d90c      	bls.n	800dc00 <_free_r+0x4c>
 800dbe6:	6821      	ldr	r1, [r4, #0]
 800dbe8:	1862      	adds	r2, r4, r1
 800dbea:	4293      	cmp	r3, r2
 800dbec:	bf04      	itt	eq
 800dbee:	681a      	ldreq	r2, [r3, #0]
 800dbf0:	685b      	ldreq	r3, [r3, #4]
 800dbf2:	6063      	str	r3, [r4, #4]
 800dbf4:	bf04      	itt	eq
 800dbf6:	1852      	addeq	r2, r2, r1
 800dbf8:	6022      	streq	r2, [r4, #0]
 800dbfa:	6004      	str	r4, [r0, #0]
 800dbfc:	e7ec      	b.n	800dbd8 <_free_r+0x24>
 800dbfe:	4613      	mov	r3, r2
 800dc00:	685a      	ldr	r2, [r3, #4]
 800dc02:	b10a      	cbz	r2, 800dc08 <_free_r+0x54>
 800dc04:	42a2      	cmp	r2, r4
 800dc06:	d9fa      	bls.n	800dbfe <_free_r+0x4a>
 800dc08:	6819      	ldr	r1, [r3, #0]
 800dc0a:	1858      	adds	r0, r3, r1
 800dc0c:	42a0      	cmp	r0, r4
 800dc0e:	d10b      	bne.n	800dc28 <_free_r+0x74>
 800dc10:	6820      	ldr	r0, [r4, #0]
 800dc12:	4401      	add	r1, r0
 800dc14:	1858      	adds	r0, r3, r1
 800dc16:	4282      	cmp	r2, r0
 800dc18:	6019      	str	r1, [r3, #0]
 800dc1a:	d1dd      	bne.n	800dbd8 <_free_r+0x24>
 800dc1c:	6810      	ldr	r0, [r2, #0]
 800dc1e:	6852      	ldr	r2, [r2, #4]
 800dc20:	605a      	str	r2, [r3, #4]
 800dc22:	4401      	add	r1, r0
 800dc24:	6019      	str	r1, [r3, #0]
 800dc26:	e7d7      	b.n	800dbd8 <_free_r+0x24>
 800dc28:	d902      	bls.n	800dc30 <_free_r+0x7c>
 800dc2a:	230c      	movs	r3, #12
 800dc2c:	602b      	str	r3, [r5, #0]
 800dc2e:	e7d3      	b.n	800dbd8 <_free_r+0x24>
 800dc30:	6820      	ldr	r0, [r4, #0]
 800dc32:	1821      	adds	r1, r4, r0
 800dc34:	428a      	cmp	r2, r1
 800dc36:	bf04      	itt	eq
 800dc38:	6811      	ldreq	r1, [r2, #0]
 800dc3a:	6852      	ldreq	r2, [r2, #4]
 800dc3c:	6062      	str	r2, [r4, #4]
 800dc3e:	bf04      	itt	eq
 800dc40:	1809      	addeq	r1, r1, r0
 800dc42:	6021      	streq	r1, [r4, #0]
 800dc44:	605c      	str	r4, [r3, #4]
 800dc46:	e7c7      	b.n	800dbd8 <_free_r+0x24>
 800dc48:	bd38      	pop	{r3, r4, r5, pc}
 800dc4a:	bf00      	nop
 800dc4c:	20001abc 	.word	0x20001abc

0800dc50 <_malloc_r>:
 800dc50:	b570      	push	{r4, r5, r6, lr}
 800dc52:	1ccd      	adds	r5, r1, #3
 800dc54:	f025 0503 	bic.w	r5, r5, #3
 800dc58:	3508      	adds	r5, #8
 800dc5a:	2d0c      	cmp	r5, #12
 800dc5c:	bf38      	it	cc
 800dc5e:	250c      	movcc	r5, #12
 800dc60:	2d00      	cmp	r5, #0
 800dc62:	4606      	mov	r6, r0
 800dc64:	db01      	blt.n	800dc6a <_malloc_r+0x1a>
 800dc66:	42a9      	cmp	r1, r5
 800dc68:	d903      	bls.n	800dc72 <_malloc_r+0x22>
 800dc6a:	230c      	movs	r3, #12
 800dc6c:	6033      	str	r3, [r6, #0]
 800dc6e:	2000      	movs	r0, #0
 800dc70:	bd70      	pop	{r4, r5, r6, pc}
 800dc72:	f000 fa74 	bl	800e15e <__malloc_lock>
 800dc76:	4a23      	ldr	r2, [pc, #140]	; (800dd04 <_malloc_r+0xb4>)
 800dc78:	6814      	ldr	r4, [r2, #0]
 800dc7a:	4621      	mov	r1, r4
 800dc7c:	b991      	cbnz	r1, 800dca4 <_malloc_r+0x54>
 800dc7e:	4c22      	ldr	r4, [pc, #136]	; (800dd08 <_malloc_r+0xb8>)
 800dc80:	6823      	ldr	r3, [r4, #0]
 800dc82:	b91b      	cbnz	r3, 800dc8c <_malloc_r+0x3c>
 800dc84:	4630      	mov	r0, r6
 800dc86:	f000 f859 	bl	800dd3c <_sbrk_r>
 800dc8a:	6020      	str	r0, [r4, #0]
 800dc8c:	4629      	mov	r1, r5
 800dc8e:	4630      	mov	r0, r6
 800dc90:	f000 f854 	bl	800dd3c <_sbrk_r>
 800dc94:	1c43      	adds	r3, r0, #1
 800dc96:	d126      	bne.n	800dce6 <_malloc_r+0x96>
 800dc98:	230c      	movs	r3, #12
 800dc9a:	6033      	str	r3, [r6, #0]
 800dc9c:	4630      	mov	r0, r6
 800dc9e:	f000 fa5f 	bl	800e160 <__malloc_unlock>
 800dca2:	e7e4      	b.n	800dc6e <_malloc_r+0x1e>
 800dca4:	680b      	ldr	r3, [r1, #0]
 800dca6:	1b5b      	subs	r3, r3, r5
 800dca8:	d41a      	bmi.n	800dce0 <_malloc_r+0x90>
 800dcaa:	2b0b      	cmp	r3, #11
 800dcac:	d90f      	bls.n	800dcce <_malloc_r+0x7e>
 800dcae:	600b      	str	r3, [r1, #0]
 800dcb0:	50cd      	str	r5, [r1, r3]
 800dcb2:	18cc      	adds	r4, r1, r3
 800dcb4:	4630      	mov	r0, r6
 800dcb6:	f000 fa53 	bl	800e160 <__malloc_unlock>
 800dcba:	f104 000b 	add.w	r0, r4, #11
 800dcbe:	1d23      	adds	r3, r4, #4
 800dcc0:	f020 0007 	bic.w	r0, r0, #7
 800dcc4:	1ac3      	subs	r3, r0, r3
 800dcc6:	d01b      	beq.n	800dd00 <_malloc_r+0xb0>
 800dcc8:	425a      	negs	r2, r3
 800dcca:	50e2      	str	r2, [r4, r3]
 800dccc:	bd70      	pop	{r4, r5, r6, pc}
 800dcce:	428c      	cmp	r4, r1
 800dcd0:	bf0d      	iteet	eq
 800dcd2:	6863      	ldreq	r3, [r4, #4]
 800dcd4:	684b      	ldrne	r3, [r1, #4]
 800dcd6:	6063      	strne	r3, [r4, #4]
 800dcd8:	6013      	streq	r3, [r2, #0]
 800dcda:	bf18      	it	ne
 800dcdc:	460c      	movne	r4, r1
 800dcde:	e7e9      	b.n	800dcb4 <_malloc_r+0x64>
 800dce0:	460c      	mov	r4, r1
 800dce2:	6849      	ldr	r1, [r1, #4]
 800dce4:	e7ca      	b.n	800dc7c <_malloc_r+0x2c>
 800dce6:	1cc4      	adds	r4, r0, #3
 800dce8:	f024 0403 	bic.w	r4, r4, #3
 800dcec:	42a0      	cmp	r0, r4
 800dcee:	d005      	beq.n	800dcfc <_malloc_r+0xac>
 800dcf0:	1a21      	subs	r1, r4, r0
 800dcf2:	4630      	mov	r0, r6
 800dcf4:	f000 f822 	bl	800dd3c <_sbrk_r>
 800dcf8:	3001      	adds	r0, #1
 800dcfa:	d0cd      	beq.n	800dc98 <_malloc_r+0x48>
 800dcfc:	6025      	str	r5, [r4, #0]
 800dcfe:	e7d9      	b.n	800dcb4 <_malloc_r+0x64>
 800dd00:	bd70      	pop	{r4, r5, r6, pc}
 800dd02:	bf00      	nop
 800dd04:	20001abc 	.word	0x20001abc
 800dd08:	20001ac0 	.word	0x20001ac0

0800dd0c <iprintf>:
 800dd0c:	b40f      	push	{r0, r1, r2, r3}
 800dd0e:	4b0a      	ldr	r3, [pc, #40]	; (800dd38 <iprintf+0x2c>)
 800dd10:	b513      	push	{r0, r1, r4, lr}
 800dd12:	681c      	ldr	r4, [r3, #0]
 800dd14:	b124      	cbz	r4, 800dd20 <iprintf+0x14>
 800dd16:	69a3      	ldr	r3, [r4, #24]
 800dd18:	b913      	cbnz	r3, 800dd20 <iprintf+0x14>
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	f000 f980 	bl	800e020 <__sinit>
 800dd20:	ab05      	add	r3, sp, #20
 800dd22:	9a04      	ldr	r2, [sp, #16]
 800dd24:	68a1      	ldr	r1, [r4, #8]
 800dd26:	9301      	str	r3, [sp, #4]
 800dd28:	4620      	mov	r0, r4
 800dd2a:	f000 fb93 	bl	800e454 <_vfiprintf_r>
 800dd2e:	b002      	add	sp, #8
 800dd30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd34:	b004      	add	sp, #16
 800dd36:	4770      	bx	lr
 800dd38:	200005bc 	.word	0x200005bc

0800dd3c <_sbrk_r>:
 800dd3c:	b538      	push	{r3, r4, r5, lr}
 800dd3e:	4c06      	ldr	r4, [pc, #24]	; (800dd58 <_sbrk_r+0x1c>)
 800dd40:	2300      	movs	r3, #0
 800dd42:	4605      	mov	r5, r0
 800dd44:	4608      	mov	r0, r1
 800dd46:	6023      	str	r3, [r4, #0]
 800dd48:	f7ff f936 	bl	800cfb8 <_sbrk>
 800dd4c:	1c43      	adds	r3, r0, #1
 800dd4e:	d102      	bne.n	800dd56 <_sbrk_r+0x1a>
 800dd50:	6823      	ldr	r3, [r4, #0]
 800dd52:	b103      	cbz	r3, 800dd56 <_sbrk_r+0x1a>
 800dd54:	602b      	str	r3, [r5, #0]
 800dd56:	bd38      	pop	{r3, r4, r5, pc}
 800dd58:	2000a528 	.word	0x2000a528

0800dd5c <siprintf>:
 800dd5c:	b40e      	push	{r1, r2, r3}
 800dd5e:	b500      	push	{lr}
 800dd60:	b09c      	sub	sp, #112	; 0x70
 800dd62:	f44f 7102 	mov.w	r1, #520	; 0x208
 800dd66:	ab1d      	add	r3, sp, #116	; 0x74
 800dd68:	f8ad 1014 	strh.w	r1, [sp, #20]
 800dd6c:	9002      	str	r0, [sp, #8]
 800dd6e:	9006      	str	r0, [sp, #24]
 800dd70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dd74:	480a      	ldr	r0, [pc, #40]	; (800dda0 <siprintf+0x44>)
 800dd76:	9104      	str	r1, [sp, #16]
 800dd78:	9107      	str	r1, [sp, #28]
 800dd7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800dd7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd82:	f8ad 1016 	strh.w	r1, [sp, #22]
 800dd86:	6800      	ldr	r0, [r0, #0]
 800dd88:	9301      	str	r3, [sp, #4]
 800dd8a:	a902      	add	r1, sp, #8
 800dd8c:	f000 fa44 	bl	800e218 <_svfiprintf_r>
 800dd90:	9b02      	ldr	r3, [sp, #8]
 800dd92:	2200      	movs	r2, #0
 800dd94:	701a      	strb	r2, [r3, #0]
 800dd96:	b01c      	add	sp, #112	; 0x70
 800dd98:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd9c:	b003      	add	sp, #12
 800dd9e:	4770      	bx	lr
 800dda0:	200005bc 	.word	0x200005bc

0800dda4 <strcat>:
 800dda4:	b510      	push	{r4, lr}
 800dda6:	4602      	mov	r2, r0
 800dda8:	4613      	mov	r3, r2
 800ddaa:	3201      	adds	r2, #1
 800ddac:	781c      	ldrb	r4, [r3, #0]
 800ddae:	2c00      	cmp	r4, #0
 800ddb0:	d1fa      	bne.n	800dda8 <strcat+0x4>
 800ddb2:	3b01      	subs	r3, #1
 800ddb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ddb8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ddbc:	2a00      	cmp	r2, #0
 800ddbe:	d1f9      	bne.n	800ddb4 <strcat+0x10>
 800ddc0:	bd10      	pop	{r4, pc}

0800ddc2 <strchr>:
 800ddc2:	b2c9      	uxtb	r1, r1
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddca:	b11a      	cbz	r2, 800ddd4 <strchr+0x12>
 800ddcc:	4291      	cmp	r1, r2
 800ddce:	d1f9      	bne.n	800ddc4 <strchr+0x2>
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	4770      	bx	lr
 800ddd4:	2900      	cmp	r1, #0
 800ddd6:	bf0c      	ite	eq
 800ddd8:	4618      	moveq	r0, r3
 800ddda:	2000      	movne	r0, #0
 800dddc:	4770      	bx	lr

0800ddde <strcpy>:
 800ddde:	4603      	mov	r3, r0
 800dde0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dde4:	f803 2b01 	strb.w	r2, [r3], #1
 800dde8:	2a00      	cmp	r2, #0
 800ddea:	d1f9      	bne.n	800dde0 <strcpy+0x2>
 800ddec:	4770      	bx	lr

0800ddee <strncmp>:
 800ddee:	b510      	push	{r4, lr}
 800ddf0:	b16a      	cbz	r2, 800de0e <strncmp+0x20>
 800ddf2:	3901      	subs	r1, #1
 800ddf4:	1884      	adds	r4, r0, r2
 800ddf6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ddfa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d103      	bne.n	800de0a <strncmp+0x1c>
 800de02:	42a0      	cmp	r0, r4
 800de04:	d001      	beq.n	800de0a <strncmp+0x1c>
 800de06:	2b00      	cmp	r3, #0
 800de08:	d1f5      	bne.n	800ddf6 <strncmp+0x8>
 800de0a:	1a98      	subs	r0, r3, r2
 800de0c:	bd10      	pop	{r4, pc}
 800de0e:	4610      	mov	r0, r2
 800de10:	bd10      	pop	{r4, pc}

0800de12 <strncpy>:
 800de12:	b570      	push	{r4, r5, r6, lr}
 800de14:	4604      	mov	r4, r0
 800de16:	b902      	cbnz	r2, 800de1a <strncpy+0x8>
 800de18:	bd70      	pop	{r4, r5, r6, pc}
 800de1a:	4623      	mov	r3, r4
 800de1c:	f811 5b01 	ldrb.w	r5, [r1], #1
 800de20:	f803 5b01 	strb.w	r5, [r3], #1
 800de24:	1e56      	subs	r6, r2, #1
 800de26:	b91d      	cbnz	r5, 800de30 <strncpy+0x1e>
 800de28:	4414      	add	r4, r2
 800de2a:	42a3      	cmp	r3, r4
 800de2c:	d103      	bne.n	800de36 <strncpy+0x24>
 800de2e:	bd70      	pop	{r4, r5, r6, pc}
 800de30:	461c      	mov	r4, r3
 800de32:	4632      	mov	r2, r6
 800de34:	e7ef      	b.n	800de16 <strncpy+0x4>
 800de36:	f803 5b01 	strb.w	r5, [r3], #1
 800de3a:	e7f6      	b.n	800de2a <strncpy+0x18>

0800de3c <strstr>:
 800de3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de3e:	7803      	ldrb	r3, [r0, #0]
 800de40:	b133      	cbz	r3, 800de50 <strstr+0x14>
 800de42:	4603      	mov	r3, r0
 800de44:	4618      	mov	r0, r3
 800de46:	1c5e      	adds	r6, r3, #1
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	b933      	cbnz	r3, 800de5a <strstr+0x1e>
 800de4c:	4618      	mov	r0, r3
 800de4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de50:	780b      	ldrb	r3, [r1, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	bf18      	it	ne
 800de56:	2000      	movne	r0, #0
 800de58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de5a:	1e4d      	subs	r5, r1, #1
 800de5c:	1e44      	subs	r4, r0, #1
 800de5e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800de62:	2a00      	cmp	r2, #0
 800de64:	d0f3      	beq.n	800de4e <strstr+0x12>
 800de66:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800de6a:	4297      	cmp	r7, r2
 800de6c:	4633      	mov	r3, r6
 800de6e:	d0f6      	beq.n	800de5e <strstr+0x22>
 800de70:	e7e8      	b.n	800de44 <strstr+0x8>

0800de72 <_strtol_l.isra.0>:
 800de72:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de76:	4680      	mov	r8, r0
 800de78:	4689      	mov	r9, r1
 800de7a:	4692      	mov	sl, r2
 800de7c:	461f      	mov	r7, r3
 800de7e:	468b      	mov	fp, r1
 800de80:	465d      	mov	r5, fp
 800de82:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de84:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de88:	f000 f954 	bl	800e134 <__locale_ctype_ptr_l>
 800de8c:	4420      	add	r0, r4
 800de8e:	7846      	ldrb	r6, [r0, #1]
 800de90:	f016 0608 	ands.w	r6, r6, #8
 800de94:	d10b      	bne.n	800deae <_strtol_l.isra.0+0x3c>
 800de96:	2c2d      	cmp	r4, #45	; 0x2d
 800de98:	d10b      	bne.n	800deb2 <_strtol_l.isra.0+0x40>
 800de9a:	782c      	ldrb	r4, [r5, #0]
 800de9c:	2601      	movs	r6, #1
 800de9e:	f10b 0502 	add.w	r5, fp, #2
 800dea2:	b167      	cbz	r7, 800debe <_strtol_l.isra.0+0x4c>
 800dea4:	2f10      	cmp	r7, #16
 800dea6:	d114      	bne.n	800ded2 <_strtol_l.isra.0+0x60>
 800dea8:	2c30      	cmp	r4, #48	; 0x30
 800deaa:	d00a      	beq.n	800dec2 <_strtol_l.isra.0+0x50>
 800deac:	e011      	b.n	800ded2 <_strtol_l.isra.0+0x60>
 800deae:	46ab      	mov	fp, r5
 800deb0:	e7e6      	b.n	800de80 <_strtol_l.isra.0+0xe>
 800deb2:	2c2b      	cmp	r4, #43	; 0x2b
 800deb4:	bf04      	itt	eq
 800deb6:	782c      	ldrbeq	r4, [r5, #0]
 800deb8:	f10b 0502 	addeq.w	r5, fp, #2
 800debc:	e7f1      	b.n	800dea2 <_strtol_l.isra.0+0x30>
 800debe:	2c30      	cmp	r4, #48	; 0x30
 800dec0:	d127      	bne.n	800df12 <_strtol_l.isra.0+0xa0>
 800dec2:	782b      	ldrb	r3, [r5, #0]
 800dec4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dec8:	2b58      	cmp	r3, #88	; 0x58
 800deca:	d14b      	bne.n	800df64 <_strtol_l.isra.0+0xf2>
 800decc:	786c      	ldrb	r4, [r5, #1]
 800dece:	2710      	movs	r7, #16
 800ded0:	3502      	adds	r5, #2
 800ded2:	2e00      	cmp	r6, #0
 800ded4:	bf0c      	ite	eq
 800ded6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800deda:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800dede:	2200      	movs	r2, #0
 800dee0:	fbb1 fef7 	udiv	lr, r1, r7
 800dee4:	4610      	mov	r0, r2
 800dee6:	fb07 1c1e 	mls	ip, r7, lr, r1
 800deea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800deee:	2b09      	cmp	r3, #9
 800def0:	d811      	bhi.n	800df16 <_strtol_l.isra.0+0xa4>
 800def2:	461c      	mov	r4, r3
 800def4:	42a7      	cmp	r7, r4
 800def6:	dd1d      	ble.n	800df34 <_strtol_l.isra.0+0xc2>
 800def8:	1c53      	adds	r3, r2, #1
 800defa:	d007      	beq.n	800df0c <_strtol_l.isra.0+0x9a>
 800defc:	4586      	cmp	lr, r0
 800defe:	d316      	bcc.n	800df2e <_strtol_l.isra.0+0xbc>
 800df00:	d101      	bne.n	800df06 <_strtol_l.isra.0+0x94>
 800df02:	45a4      	cmp	ip, r4
 800df04:	db13      	blt.n	800df2e <_strtol_l.isra.0+0xbc>
 800df06:	fb00 4007 	mla	r0, r0, r7, r4
 800df0a:	2201      	movs	r2, #1
 800df0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df10:	e7eb      	b.n	800deea <_strtol_l.isra.0+0x78>
 800df12:	270a      	movs	r7, #10
 800df14:	e7dd      	b.n	800ded2 <_strtol_l.isra.0+0x60>
 800df16:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800df1a:	2b19      	cmp	r3, #25
 800df1c:	d801      	bhi.n	800df22 <_strtol_l.isra.0+0xb0>
 800df1e:	3c37      	subs	r4, #55	; 0x37
 800df20:	e7e8      	b.n	800def4 <_strtol_l.isra.0+0x82>
 800df22:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800df26:	2b19      	cmp	r3, #25
 800df28:	d804      	bhi.n	800df34 <_strtol_l.isra.0+0xc2>
 800df2a:	3c57      	subs	r4, #87	; 0x57
 800df2c:	e7e2      	b.n	800def4 <_strtol_l.isra.0+0x82>
 800df2e:	f04f 32ff 	mov.w	r2, #4294967295
 800df32:	e7eb      	b.n	800df0c <_strtol_l.isra.0+0x9a>
 800df34:	1c53      	adds	r3, r2, #1
 800df36:	d108      	bne.n	800df4a <_strtol_l.isra.0+0xd8>
 800df38:	2322      	movs	r3, #34	; 0x22
 800df3a:	f8c8 3000 	str.w	r3, [r8]
 800df3e:	4608      	mov	r0, r1
 800df40:	f1ba 0f00 	cmp.w	sl, #0
 800df44:	d107      	bne.n	800df56 <_strtol_l.isra.0+0xe4>
 800df46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df4a:	b106      	cbz	r6, 800df4e <_strtol_l.isra.0+0xdc>
 800df4c:	4240      	negs	r0, r0
 800df4e:	f1ba 0f00 	cmp.w	sl, #0
 800df52:	d00c      	beq.n	800df6e <_strtol_l.isra.0+0xfc>
 800df54:	b122      	cbz	r2, 800df60 <_strtol_l.isra.0+0xee>
 800df56:	3d01      	subs	r5, #1
 800df58:	f8ca 5000 	str.w	r5, [sl]
 800df5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df60:	464d      	mov	r5, r9
 800df62:	e7f9      	b.n	800df58 <_strtol_l.isra.0+0xe6>
 800df64:	2430      	movs	r4, #48	; 0x30
 800df66:	2f00      	cmp	r7, #0
 800df68:	d1b3      	bne.n	800ded2 <_strtol_l.isra.0+0x60>
 800df6a:	2708      	movs	r7, #8
 800df6c:	e7b1      	b.n	800ded2 <_strtol_l.isra.0+0x60>
 800df6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800df74 <strtol>:
 800df74:	4b08      	ldr	r3, [pc, #32]	; (800df98 <strtol+0x24>)
 800df76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df78:	681c      	ldr	r4, [r3, #0]
 800df7a:	4d08      	ldr	r5, [pc, #32]	; (800df9c <strtol+0x28>)
 800df7c:	6a23      	ldr	r3, [r4, #32]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	bf08      	it	eq
 800df82:	462b      	moveq	r3, r5
 800df84:	9300      	str	r3, [sp, #0]
 800df86:	4613      	mov	r3, r2
 800df88:	460a      	mov	r2, r1
 800df8a:	4601      	mov	r1, r0
 800df8c:	4620      	mov	r0, r4
 800df8e:	f7ff ff70 	bl	800de72 <_strtol_l.isra.0>
 800df92:	b003      	add	sp, #12
 800df94:	bd30      	pop	{r4, r5, pc}
 800df96:	bf00      	nop
 800df98:	200005bc 	.word	0x200005bc
 800df9c:	20000620 	.word	0x20000620

0800dfa0 <_cleanup_r>:
 800dfa0:	4901      	ldr	r1, [pc, #4]	; (800dfa8 <_cleanup_r+0x8>)
 800dfa2:	f000 b8a9 	b.w	800e0f8 <_fwalk_reent>
 800dfa6:	bf00      	nop
 800dfa8:	0800ed25 	.word	0x0800ed25

0800dfac <std.isra.0>:
 800dfac:	2300      	movs	r3, #0
 800dfae:	b510      	push	{r4, lr}
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	6003      	str	r3, [r0, #0]
 800dfb4:	6043      	str	r3, [r0, #4]
 800dfb6:	6083      	str	r3, [r0, #8]
 800dfb8:	8181      	strh	r1, [r0, #12]
 800dfba:	6643      	str	r3, [r0, #100]	; 0x64
 800dfbc:	81c2      	strh	r2, [r0, #14]
 800dfbe:	6103      	str	r3, [r0, #16]
 800dfc0:	6143      	str	r3, [r0, #20]
 800dfc2:	6183      	str	r3, [r0, #24]
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	2208      	movs	r2, #8
 800dfc8:	305c      	adds	r0, #92	; 0x5c
 800dfca:	f7ff fdeb 	bl	800dba4 <memset>
 800dfce:	4b05      	ldr	r3, [pc, #20]	; (800dfe4 <std.isra.0+0x38>)
 800dfd0:	6263      	str	r3, [r4, #36]	; 0x24
 800dfd2:	4b05      	ldr	r3, [pc, #20]	; (800dfe8 <std.isra.0+0x3c>)
 800dfd4:	62a3      	str	r3, [r4, #40]	; 0x28
 800dfd6:	4b05      	ldr	r3, [pc, #20]	; (800dfec <std.isra.0+0x40>)
 800dfd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dfda:	4b05      	ldr	r3, [pc, #20]	; (800dff0 <std.isra.0+0x44>)
 800dfdc:	6224      	str	r4, [r4, #32]
 800dfde:	6323      	str	r3, [r4, #48]	; 0x30
 800dfe0:	bd10      	pop	{r4, pc}
 800dfe2:	bf00      	nop
 800dfe4:	0800e9ad 	.word	0x0800e9ad
 800dfe8:	0800e9cf 	.word	0x0800e9cf
 800dfec:	0800ea07 	.word	0x0800ea07
 800dff0:	0800ea2b 	.word	0x0800ea2b

0800dff4 <__sfmoreglue>:
 800dff4:	b570      	push	{r4, r5, r6, lr}
 800dff6:	1e4a      	subs	r2, r1, #1
 800dff8:	2568      	movs	r5, #104	; 0x68
 800dffa:	4355      	muls	r5, r2
 800dffc:	460e      	mov	r6, r1
 800dffe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e002:	f7ff fe25 	bl	800dc50 <_malloc_r>
 800e006:	4604      	mov	r4, r0
 800e008:	b140      	cbz	r0, 800e01c <__sfmoreglue+0x28>
 800e00a:	2100      	movs	r1, #0
 800e00c:	e880 0042 	stmia.w	r0, {r1, r6}
 800e010:	300c      	adds	r0, #12
 800e012:	60a0      	str	r0, [r4, #8]
 800e014:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e018:	f7ff fdc4 	bl	800dba4 <memset>
 800e01c:	4620      	mov	r0, r4
 800e01e:	bd70      	pop	{r4, r5, r6, pc}

0800e020 <__sinit>:
 800e020:	6983      	ldr	r3, [r0, #24]
 800e022:	b510      	push	{r4, lr}
 800e024:	4604      	mov	r4, r0
 800e026:	bb33      	cbnz	r3, 800e076 <__sinit+0x56>
 800e028:	6483      	str	r3, [r0, #72]	; 0x48
 800e02a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800e02c:	6503      	str	r3, [r0, #80]	; 0x50
 800e02e:	4b12      	ldr	r3, [pc, #72]	; (800e078 <__sinit+0x58>)
 800e030:	4a12      	ldr	r2, [pc, #72]	; (800e07c <__sinit+0x5c>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	6282      	str	r2, [r0, #40]	; 0x28
 800e036:	4298      	cmp	r0, r3
 800e038:	bf04      	itt	eq
 800e03a:	2301      	moveq	r3, #1
 800e03c:	6183      	streq	r3, [r0, #24]
 800e03e:	f000 f81f 	bl	800e080 <__sfp>
 800e042:	6060      	str	r0, [r4, #4]
 800e044:	4620      	mov	r0, r4
 800e046:	f000 f81b 	bl	800e080 <__sfp>
 800e04a:	60a0      	str	r0, [r4, #8]
 800e04c:	4620      	mov	r0, r4
 800e04e:	f000 f817 	bl	800e080 <__sfp>
 800e052:	2200      	movs	r2, #0
 800e054:	60e0      	str	r0, [r4, #12]
 800e056:	2104      	movs	r1, #4
 800e058:	6860      	ldr	r0, [r4, #4]
 800e05a:	f7ff ffa7 	bl	800dfac <std.isra.0>
 800e05e:	2201      	movs	r2, #1
 800e060:	2109      	movs	r1, #9
 800e062:	68a0      	ldr	r0, [r4, #8]
 800e064:	f7ff ffa2 	bl	800dfac <std.isra.0>
 800e068:	2202      	movs	r2, #2
 800e06a:	2112      	movs	r1, #18
 800e06c:	68e0      	ldr	r0, [r4, #12]
 800e06e:	f7ff ff9d 	bl	800dfac <std.isra.0>
 800e072:	2301      	movs	r3, #1
 800e074:	61a3      	str	r3, [r4, #24]
 800e076:	bd10      	pop	{r4, pc}
 800e078:	080129e8 	.word	0x080129e8
 800e07c:	0800dfa1 	.word	0x0800dfa1

0800e080 <__sfp>:
 800e080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e082:	4b1c      	ldr	r3, [pc, #112]	; (800e0f4 <__sfp+0x74>)
 800e084:	681e      	ldr	r6, [r3, #0]
 800e086:	69b3      	ldr	r3, [r6, #24]
 800e088:	4607      	mov	r7, r0
 800e08a:	b913      	cbnz	r3, 800e092 <__sfp+0x12>
 800e08c:	4630      	mov	r0, r6
 800e08e:	f7ff ffc7 	bl	800e020 <__sinit>
 800e092:	3648      	adds	r6, #72	; 0x48
 800e094:	68b4      	ldr	r4, [r6, #8]
 800e096:	6873      	ldr	r3, [r6, #4]
 800e098:	3b01      	subs	r3, #1
 800e09a:	d503      	bpl.n	800e0a4 <__sfp+0x24>
 800e09c:	6833      	ldr	r3, [r6, #0]
 800e09e:	b133      	cbz	r3, 800e0ae <__sfp+0x2e>
 800e0a0:	6836      	ldr	r6, [r6, #0]
 800e0a2:	e7f7      	b.n	800e094 <__sfp+0x14>
 800e0a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e0a8:	b16d      	cbz	r5, 800e0c6 <__sfp+0x46>
 800e0aa:	3468      	adds	r4, #104	; 0x68
 800e0ac:	e7f4      	b.n	800e098 <__sfp+0x18>
 800e0ae:	2104      	movs	r1, #4
 800e0b0:	4638      	mov	r0, r7
 800e0b2:	f7ff ff9f 	bl	800dff4 <__sfmoreglue>
 800e0b6:	6030      	str	r0, [r6, #0]
 800e0b8:	2800      	cmp	r0, #0
 800e0ba:	d1f1      	bne.n	800e0a0 <__sfp+0x20>
 800e0bc:	230c      	movs	r3, #12
 800e0be:	603b      	str	r3, [r7, #0]
 800e0c0:	4604      	mov	r4, r0
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e0ca:	81e3      	strh	r3, [r4, #14]
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	81a3      	strh	r3, [r4, #12]
 800e0d0:	6665      	str	r5, [r4, #100]	; 0x64
 800e0d2:	6025      	str	r5, [r4, #0]
 800e0d4:	60a5      	str	r5, [r4, #8]
 800e0d6:	6065      	str	r5, [r4, #4]
 800e0d8:	6125      	str	r5, [r4, #16]
 800e0da:	6165      	str	r5, [r4, #20]
 800e0dc:	61a5      	str	r5, [r4, #24]
 800e0de:	2208      	movs	r2, #8
 800e0e0:	4629      	mov	r1, r5
 800e0e2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e0e6:	f7ff fd5d 	bl	800dba4 <memset>
 800e0ea:	6365      	str	r5, [r4, #52]	; 0x34
 800e0ec:	63a5      	str	r5, [r4, #56]	; 0x38
 800e0ee:	64a5      	str	r5, [r4, #72]	; 0x48
 800e0f0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800e0f2:	e7e6      	b.n	800e0c2 <__sfp+0x42>
 800e0f4:	080129e8 	.word	0x080129e8

0800e0f8 <_fwalk_reent>:
 800e0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0fc:	4680      	mov	r8, r0
 800e0fe:	4689      	mov	r9, r1
 800e100:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e104:	2600      	movs	r6, #0
 800e106:	b914      	cbnz	r4, 800e10e <_fwalk_reent+0x16>
 800e108:	4630      	mov	r0, r6
 800e10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e10e:	68a5      	ldr	r5, [r4, #8]
 800e110:	6867      	ldr	r7, [r4, #4]
 800e112:	3f01      	subs	r7, #1
 800e114:	d501      	bpl.n	800e11a <_fwalk_reent+0x22>
 800e116:	6824      	ldr	r4, [r4, #0]
 800e118:	e7f5      	b.n	800e106 <_fwalk_reent+0xe>
 800e11a:	89ab      	ldrh	r3, [r5, #12]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d907      	bls.n	800e130 <_fwalk_reent+0x38>
 800e120:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e124:	3301      	adds	r3, #1
 800e126:	d003      	beq.n	800e130 <_fwalk_reent+0x38>
 800e128:	4629      	mov	r1, r5
 800e12a:	4640      	mov	r0, r8
 800e12c:	47c8      	blx	r9
 800e12e:	4306      	orrs	r6, r0
 800e130:	3568      	adds	r5, #104	; 0x68
 800e132:	e7ee      	b.n	800e112 <_fwalk_reent+0x1a>

0800e134 <__locale_ctype_ptr_l>:
 800e134:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e138:	4770      	bx	lr

0800e13a <__ascii_mbtowc>:
 800e13a:	b082      	sub	sp, #8
 800e13c:	b901      	cbnz	r1, 800e140 <__ascii_mbtowc+0x6>
 800e13e:	a901      	add	r1, sp, #4
 800e140:	b142      	cbz	r2, 800e154 <__ascii_mbtowc+0x1a>
 800e142:	b14b      	cbz	r3, 800e158 <__ascii_mbtowc+0x1e>
 800e144:	7813      	ldrb	r3, [r2, #0]
 800e146:	600b      	str	r3, [r1, #0]
 800e148:	7812      	ldrb	r2, [r2, #0]
 800e14a:	1c10      	adds	r0, r2, #0
 800e14c:	bf18      	it	ne
 800e14e:	2001      	movne	r0, #1
 800e150:	b002      	add	sp, #8
 800e152:	4770      	bx	lr
 800e154:	4610      	mov	r0, r2
 800e156:	e7fb      	b.n	800e150 <__ascii_mbtowc+0x16>
 800e158:	f06f 0001 	mvn.w	r0, #1
 800e15c:	e7f8      	b.n	800e150 <__ascii_mbtowc+0x16>

0800e15e <__malloc_lock>:
 800e15e:	4770      	bx	lr

0800e160 <__malloc_unlock>:
 800e160:	4770      	bx	lr

0800e162 <__ssputs_r>:
 800e162:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e166:	688e      	ldr	r6, [r1, #8]
 800e168:	429e      	cmp	r6, r3
 800e16a:	4682      	mov	sl, r0
 800e16c:	460c      	mov	r4, r1
 800e16e:	4691      	mov	r9, r2
 800e170:	4698      	mov	r8, r3
 800e172:	d835      	bhi.n	800e1e0 <__ssputs_r+0x7e>
 800e174:	898a      	ldrh	r2, [r1, #12]
 800e176:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e17a:	d031      	beq.n	800e1e0 <__ssputs_r+0x7e>
 800e17c:	6825      	ldr	r5, [r4, #0]
 800e17e:	6909      	ldr	r1, [r1, #16]
 800e180:	1a6f      	subs	r7, r5, r1
 800e182:	6965      	ldr	r5, [r4, #20]
 800e184:	2302      	movs	r3, #2
 800e186:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e18a:	fb95 f5f3 	sdiv	r5, r5, r3
 800e18e:	f108 0301 	add.w	r3, r8, #1
 800e192:	443b      	add	r3, r7
 800e194:	429d      	cmp	r5, r3
 800e196:	bf38      	it	cc
 800e198:	461d      	movcc	r5, r3
 800e19a:	0553      	lsls	r3, r2, #21
 800e19c:	d531      	bpl.n	800e202 <__ssputs_r+0xa0>
 800e19e:	4629      	mov	r1, r5
 800e1a0:	f7ff fd56 	bl	800dc50 <_malloc_r>
 800e1a4:	4606      	mov	r6, r0
 800e1a6:	b950      	cbnz	r0, 800e1be <__ssputs_r+0x5c>
 800e1a8:	230c      	movs	r3, #12
 800e1aa:	f8ca 3000 	str.w	r3, [sl]
 800e1ae:	89a3      	ldrh	r3, [r4, #12]
 800e1b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1b4:	81a3      	strh	r3, [r4, #12]
 800e1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1be:	463a      	mov	r2, r7
 800e1c0:	6921      	ldr	r1, [r4, #16]
 800e1c2:	f7ff fce4 	bl	800db8e <memcpy>
 800e1c6:	89a3      	ldrh	r3, [r4, #12]
 800e1c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e1cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1d0:	81a3      	strh	r3, [r4, #12]
 800e1d2:	6126      	str	r6, [r4, #16]
 800e1d4:	6165      	str	r5, [r4, #20]
 800e1d6:	443e      	add	r6, r7
 800e1d8:	1bed      	subs	r5, r5, r7
 800e1da:	6026      	str	r6, [r4, #0]
 800e1dc:	60a5      	str	r5, [r4, #8]
 800e1de:	4646      	mov	r6, r8
 800e1e0:	4546      	cmp	r6, r8
 800e1e2:	bf28      	it	cs
 800e1e4:	4646      	movcs	r6, r8
 800e1e6:	4632      	mov	r2, r6
 800e1e8:	4649      	mov	r1, r9
 800e1ea:	6820      	ldr	r0, [r4, #0]
 800e1ec:	f000 fe3a 	bl	800ee64 <memmove>
 800e1f0:	68a3      	ldr	r3, [r4, #8]
 800e1f2:	1b9b      	subs	r3, r3, r6
 800e1f4:	60a3      	str	r3, [r4, #8]
 800e1f6:	6823      	ldr	r3, [r4, #0]
 800e1f8:	441e      	add	r6, r3
 800e1fa:	6026      	str	r6, [r4, #0]
 800e1fc:	2000      	movs	r0, #0
 800e1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e202:	462a      	mov	r2, r5
 800e204:	f000 fe48 	bl	800ee98 <_realloc_r>
 800e208:	4606      	mov	r6, r0
 800e20a:	2800      	cmp	r0, #0
 800e20c:	d1e1      	bne.n	800e1d2 <__ssputs_r+0x70>
 800e20e:	6921      	ldr	r1, [r4, #16]
 800e210:	4650      	mov	r0, sl
 800e212:	f7ff fccf 	bl	800dbb4 <_free_r>
 800e216:	e7c7      	b.n	800e1a8 <__ssputs_r+0x46>

0800e218 <_svfiprintf_r>:
 800e218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e21c:	b09d      	sub	sp, #116	; 0x74
 800e21e:	4680      	mov	r8, r0
 800e220:	9303      	str	r3, [sp, #12]
 800e222:	898b      	ldrh	r3, [r1, #12]
 800e224:	061c      	lsls	r4, r3, #24
 800e226:	460d      	mov	r5, r1
 800e228:	4616      	mov	r6, r2
 800e22a:	d50f      	bpl.n	800e24c <_svfiprintf_r+0x34>
 800e22c:	690b      	ldr	r3, [r1, #16]
 800e22e:	b96b      	cbnz	r3, 800e24c <_svfiprintf_r+0x34>
 800e230:	2140      	movs	r1, #64	; 0x40
 800e232:	f7ff fd0d 	bl	800dc50 <_malloc_r>
 800e236:	6028      	str	r0, [r5, #0]
 800e238:	6128      	str	r0, [r5, #16]
 800e23a:	b928      	cbnz	r0, 800e248 <_svfiprintf_r+0x30>
 800e23c:	230c      	movs	r3, #12
 800e23e:	f8c8 3000 	str.w	r3, [r8]
 800e242:	f04f 30ff 	mov.w	r0, #4294967295
 800e246:	e0c5      	b.n	800e3d4 <_svfiprintf_r+0x1bc>
 800e248:	2340      	movs	r3, #64	; 0x40
 800e24a:	616b      	str	r3, [r5, #20]
 800e24c:	2300      	movs	r3, #0
 800e24e:	9309      	str	r3, [sp, #36]	; 0x24
 800e250:	2320      	movs	r3, #32
 800e252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e256:	2330      	movs	r3, #48	; 0x30
 800e258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e25c:	f04f 0b01 	mov.w	fp, #1
 800e260:	4637      	mov	r7, r6
 800e262:	463c      	mov	r4, r7
 800e264:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d13c      	bne.n	800e2e6 <_svfiprintf_r+0xce>
 800e26c:	ebb7 0a06 	subs.w	sl, r7, r6
 800e270:	d00b      	beq.n	800e28a <_svfiprintf_r+0x72>
 800e272:	4653      	mov	r3, sl
 800e274:	4632      	mov	r2, r6
 800e276:	4629      	mov	r1, r5
 800e278:	4640      	mov	r0, r8
 800e27a:	f7ff ff72 	bl	800e162 <__ssputs_r>
 800e27e:	3001      	adds	r0, #1
 800e280:	f000 80a3 	beq.w	800e3ca <_svfiprintf_r+0x1b2>
 800e284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e286:	4453      	add	r3, sl
 800e288:	9309      	str	r3, [sp, #36]	; 0x24
 800e28a:	783b      	ldrb	r3, [r7, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f000 809c 	beq.w	800e3ca <_svfiprintf_r+0x1b2>
 800e292:	2300      	movs	r3, #0
 800e294:	f04f 32ff 	mov.w	r2, #4294967295
 800e298:	9304      	str	r3, [sp, #16]
 800e29a:	9307      	str	r3, [sp, #28]
 800e29c:	9205      	str	r2, [sp, #20]
 800e29e:	9306      	str	r3, [sp, #24]
 800e2a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2a4:	931a      	str	r3, [sp, #104]	; 0x68
 800e2a6:	2205      	movs	r2, #5
 800e2a8:	7821      	ldrb	r1, [r4, #0]
 800e2aa:	4850      	ldr	r0, [pc, #320]	; (800e3ec <_svfiprintf_r+0x1d4>)
 800e2ac:	f7f1 ffa8 	bl	8000200 <memchr>
 800e2b0:	1c67      	adds	r7, r4, #1
 800e2b2:	9b04      	ldr	r3, [sp, #16]
 800e2b4:	b9d8      	cbnz	r0, 800e2ee <_svfiprintf_r+0xd6>
 800e2b6:	06d9      	lsls	r1, r3, #27
 800e2b8:	bf44      	itt	mi
 800e2ba:	2220      	movmi	r2, #32
 800e2bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e2c0:	071a      	lsls	r2, r3, #28
 800e2c2:	bf44      	itt	mi
 800e2c4:	222b      	movmi	r2, #43	; 0x2b
 800e2c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e2ca:	7822      	ldrb	r2, [r4, #0]
 800e2cc:	2a2a      	cmp	r2, #42	; 0x2a
 800e2ce:	d016      	beq.n	800e2fe <_svfiprintf_r+0xe6>
 800e2d0:	9a07      	ldr	r2, [sp, #28]
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	200a      	movs	r0, #10
 800e2d6:	4627      	mov	r7, r4
 800e2d8:	3401      	adds	r4, #1
 800e2da:	783b      	ldrb	r3, [r7, #0]
 800e2dc:	3b30      	subs	r3, #48	; 0x30
 800e2de:	2b09      	cmp	r3, #9
 800e2e0:	d951      	bls.n	800e386 <_svfiprintf_r+0x16e>
 800e2e2:	b1c9      	cbz	r1, 800e318 <_svfiprintf_r+0x100>
 800e2e4:	e011      	b.n	800e30a <_svfiprintf_r+0xf2>
 800e2e6:	2b25      	cmp	r3, #37	; 0x25
 800e2e8:	d0c0      	beq.n	800e26c <_svfiprintf_r+0x54>
 800e2ea:	4627      	mov	r7, r4
 800e2ec:	e7b9      	b.n	800e262 <_svfiprintf_r+0x4a>
 800e2ee:	4a3f      	ldr	r2, [pc, #252]	; (800e3ec <_svfiprintf_r+0x1d4>)
 800e2f0:	1a80      	subs	r0, r0, r2
 800e2f2:	fa0b f000 	lsl.w	r0, fp, r0
 800e2f6:	4318      	orrs	r0, r3
 800e2f8:	9004      	str	r0, [sp, #16]
 800e2fa:	463c      	mov	r4, r7
 800e2fc:	e7d3      	b.n	800e2a6 <_svfiprintf_r+0x8e>
 800e2fe:	9a03      	ldr	r2, [sp, #12]
 800e300:	1d11      	adds	r1, r2, #4
 800e302:	6812      	ldr	r2, [r2, #0]
 800e304:	9103      	str	r1, [sp, #12]
 800e306:	2a00      	cmp	r2, #0
 800e308:	db01      	blt.n	800e30e <_svfiprintf_r+0xf6>
 800e30a:	9207      	str	r2, [sp, #28]
 800e30c:	e004      	b.n	800e318 <_svfiprintf_r+0x100>
 800e30e:	4252      	negs	r2, r2
 800e310:	f043 0302 	orr.w	r3, r3, #2
 800e314:	9207      	str	r2, [sp, #28]
 800e316:	9304      	str	r3, [sp, #16]
 800e318:	783b      	ldrb	r3, [r7, #0]
 800e31a:	2b2e      	cmp	r3, #46	; 0x2e
 800e31c:	d10e      	bne.n	800e33c <_svfiprintf_r+0x124>
 800e31e:	787b      	ldrb	r3, [r7, #1]
 800e320:	2b2a      	cmp	r3, #42	; 0x2a
 800e322:	f107 0101 	add.w	r1, r7, #1
 800e326:	d132      	bne.n	800e38e <_svfiprintf_r+0x176>
 800e328:	9b03      	ldr	r3, [sp, #12]
 800e32a:	1d1a      	adds	r2, r3, #4
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	9203      	str	r2, [sp, #12]
 800e330:	2b00      	cmp	r3, #0
 800e332:	bfb8      	it	lt
 800e334:	f04f 33ff 	movlt.w	r3, #4294967295
 800e338:	3702      	adds	r7, #2
 800e33a:	9305      	str	r3, [sp, #20]
 800e33c:	4c2c      	ldr	r4, [pc, #176]	; (800e3f0 <_svfiprintf_r+0x1d8>)
 800e33e:	7839      	ldrb	r1, [r7, #0]
 800e340:	2203      	movs	r2, #3
 800e342:	4620      	mov	r0, r4
 800e344:	f7f1 ff5c 	bl	8000200 <memchr>
 800e348:	b138      	cbz	r0, 800e35a <_svfiprintf_r+0x142>
 800e34a:	2340      	movs	r3, #64	; 0x40
 800e34c:	1b00      	subs	r0, r0, r4
 800e34e:	fa03 f000 	lsl.w	r0, r3, r0
 800e352:	9b04      	ldr	r3, [sp, #16]
 800e354:	4303      	orrs	r3, r0
 800e356:	9304      	str	r3, [sp, #16]
 800e358:	3701      	adds	r7, #1
 800e35a:	7839      	ldrb	r1, [r7, #0]
 800e35c:	4825      	ldr	r0, [pc, #148]	; (800e3f4 <_svfiprintf_r+0x1dc>)
 800e35e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e362:	2206      	movs	r2, #6
 800e364:	1c7e      	adds	r6, r7, #1
 800e366:	f7f1 ff4b 	bl	8000200 <memchr>
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d035      	beq.n	800e3da <_svfiprintf_r+0x1c2>
 800e36e:	4b22      	ldr	r3, [pc, #136]	; (800e3f8 <_svfiprintf_r+0x1e0>)
 800e370:	b9fb      	cbnz	r3, 800e3b2 <_svfiprintf_r+0x19a>
 800e372:	9b03      	ldr	r3, [sp, #12]
 800e374:	3307      	adds	r3, #7
 800e376:	f023 0307 	bic.w	r3, r3, #7
 800e37a:	3308      	adds	r3, #8
 800e37c:	9303      	str	r3, [sp, #12]
 800e37e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e380:	444b      	add	r3, r9
 800e382:	9309      	str	r3, [sp, #36]	; 0x24
 800e384:	e76c      	b.n	800e260 <_svfiprintf_r+0x48>
 800e386:	fb00 3202 	mla	r2, r0, r2, r3
 800e38a:	2101      	movs	r1, #1
 800e38c:	e7a3      	b.n	800e2d6 <_svfiprintf_r+0xbe>
 800e38e:	2300      	movs	r3, #0
 800e390:	9305      	str	r3, [sp, #20]
 800e392:	4618      	mov	r0, r3
 800e394:	240a      	movs	r4, #10
 800e396:	460f      	mov	r7, r1
 800e398:	3101      	adds	r1, #1
 800e39a:	783a      	ldrb	r2, [r7, #0]
 800e39c:	3a30      	subs	r2, #48	; 0x30
 800e39e:	2a09      	cmp	r2, #9
 800e3a0:	d903      	bls.n	800e3aa <_svfiprintf_r+0x192>
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d0ca      	beq.n	800e33c <_svfiprintf_r+0x124>
 800e3a6:	9005      	str	r0, [sp, #20]
 800e3a8:	e7c8      	b.n	800e33c <_svfiprintf_r+0x124>
 800e3aa:	fb04 2000 	mla	r0, r4, r0, r2
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	e7f1      	b.n	800e396 <_svfiprintf_r+0x17e>
 800e3b2:	ab03      	add	r3, sp, #12
 800e3b4:	9300      	str	r3, [sp, #0]
 800e3b6:	462a      	mov	r2, r5
 800e3b8:	4b10      	ldr	r3, [pc, #64]	; (800e3fc <_svfiprintf_r+0x1e4>)
 800e3ba:	a904      	add	r1, sp, #16
 800e3bc:	4640      	mov	r0, r8
 800e3be:	f3af 8000 	nop.w
 800e3c2:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e3c6:	4681      	mov	r9, r0
 800e3c8:	d1d9      	bne.n	800e37e <_svfiprintf_r+0x166>
 800e3ca:	89ab      	ldrh	r3, [r5, #12]
 800e3cc:	065b      	lsls	r3, r3, #25
 800e3ce:	f53f af38 	bmi.w	800e242 <_svfiprintf_r+0x2a>
 800e3d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3d4:	b01d      	add	sp, #116	; 0x74
 800e3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3da:	ab03      	add	r3, sp, #12
 800e3dc:	9300      	str	r3, [sp, #0]
 800e3de:	462a      	mov	r2, r5
 800e3e0:	4b06      	ldr	r3, [pc, #24]	; (800e3fc <_svfiprintf_r+0x1e4>)
 800e3e2:	a904      	add	r1, sp, #16
 800e3e4:	4640      	mov	r0, r8
 800e3e6:	f000 f9c1 	bl	800e76c <_printf_i>
 800e3ea:	e7ea      	b.n	800e3c2 <_svfiprintf_r+0x1aa>
 800e3ec:	080129f2 	.word	0x080129f2
 800e3f0:	080129f8 	.word	0x080129f8
 800e3f4:	080129fc 	.word	0x080129fc
 800e3f8:	00000000 	.word	0x00000000
 800e3fc:	0800e163 	.word	0x0800e163

0800e400 <__sfputc_r>:
 800e400:	6893      	ldr	r3, [r2, #8]
 800e402:	3b01      	subs	r3, #1
 800e404:	2b00      	cmp	r3, #0
 800e406:	b410      	push	{r4}
 800e408:	6093      	str	r3, [r2, #8]
 800e40a:	da09      	bge.n	800e420 <__sfputc_r+0x20>
 800e40c:	6994      	ldr	r4, [r2, #24]
 800e40e:	42a3      	cmp	r3, r4
 800e410:	db02      	blt.n	800e418 <__sfputc_r+0x18>
 800e412:	b2cb      	uxtb	r3, r1
 800e414:	2b0a      	cmp	r3, #10
 800e416:	d103      	bne.n	800e420 <__sfputc_r+0x20>
 800e418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e41c:	f000 bb0a 	b.w	800ea34 <__swbuf_r>
 800e420:	6813      	ldr	r3, [r2, #0]
 800e422:	1c58      	adds	r0, r3, #1
 800e424:	6010      	str	r0, [r2, #0]
 800e426:	7019      	strb	r1, [r3, #0]
 800e428:	b2c8      	uxtb	r0, r1
 800e42a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e42e:	4770      	bx	lr

0800e430 <__sfputs_r>:
 800e430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e432:	4606      	mov	r6, r0
 800e434:	460f      	mov	r7, r1
 800e436:	4614      	mov	r4, r2
 800e438:	18d5      	adds	r5, r2, r3
 800e43a:	42ac      	cmp	r4, r5
 800e43c:	d101      	bne.n	800e442 <__sfputs_r+0x12>
 800e43e:	2000      	movs	r0, #0
 800e440:	e007      	b.n	800e452 <__sfputs_r+0x22>
 800e442:	463a      	mov	r2, r7
 800e444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e448:	4630      	mov	r0, r6
 800e44a:	f7ff ffd9 	bl	800e400 <__sfputc_r>
 800e44e:	1c43      	adds	r3, r0, #1
 800e450:	d1f3      	bne.n	800e43a <__sfputs_r+0xa>
 800e452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e454 <_vfiprintf_r>:
 800e454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e458:	b09d      	sub	sp, #116	; 0x74
 800e45a:	460c      	mov	r4, r1
 800e45c:	4617      	mov	r7, r2
 800e45e:	9303      	str	r3, [sp, #12]
 800e460:	4606      	mov	r6, r0
 800e462:	b118      	cbz	r0, 800e46c <_vfiprintf_r+0x18>
 800e464:	6983      	ldr	r3, [r0, #24]
 800e466:	b90b      	cbnz	r3, 800e46c <_vfiprintf_r+0x18>
 800e468:	f7ff fdda 	bl	800e020 <__sinit>
 800e46c:	4b7c      	ldr	r3, [pc, #496]	; (800e660 <_vfiprintf_r+0x20c>)
 800e46e:	429c      	cmp	r4, r3
 800e470:	d157      	bne.n	800e522 <_vfiprintf_r+0xce>
 800e472:	6874      	ldr	r4, [r6, #4]
 800e474:	89a3      	ldrh	r3, [r4, #12]
 800e476:	0718      	lsls	r0, r3, #28
 800e478:	d55d      	bpl.n	800e536 <_vfiprintf_r+0xe2>
 800e47a:	6923      	ldr	r3, [r4, #16]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d05a      	beq.n	800e536 <_vfiprintf_r+0xe2>
 800e480:	2300      	movs	r3, #0
 800e482:	9309      	str	r3, [sp, #36]	; 0x24
 800e484:	2320      	movs	r3, #32
 800e486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e48a:	2330      	movs	r3, #48	; 0x30
 800e48c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e490:	f04f 0b01 	mov.w	fp, #1
 800e494:	46b8      	mov	r8, r7
 800e496:	4645      	mov	r5, r8
 800e498:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d155      	bne.n	800e54c <_vfiprintf_r+0xf8>
 800e4a0:	ebb8 0a07 	subs.w	sl, r8, r7
 800e4a4:	d00b      	beq.n	800e4be <_vfiprintf_r+0x6a>
 800e4a6:	4653      	mov	r3, sl
 800e4a8:	463a      	mov	r2, r7
 800e4aa:	4621      	mov	r1, r4
 800e4ac:	4630      	mov	r0, r6
 800e4ae:	f7ff ffbf 	bl	800e430 <__sfputs_r>
 800e4b2:	3001      	adds	r0, #1
 800e4b4:	f000 80c4 	beq.w	800e640 <_vfiprintf_r+0x1ec>
 800e4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4ba:	4453      	add	r3, sl
 800e4bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e4be:	f898 3000 	ldrb.w	r3, [r8]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	f000 80bc 	beq.w	800e640 <_vfiprintf_r+0x1ec>
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ce:	9304      	str	r3, [sp, #16]
 800e4d0:	9307      	str	r3, [sp, #28]
 800e4d2:	9205      	str	r2, [sp, #20]
 800e4d4:	9306      	str	r3, [sp, #24]
 800e4d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4da:	931a      	str	r3, [sp, #104]	; 0x68
 800e4dc:	2205      	movs	r2, #5
 800e4de:	7829      	ldrb	r1, [r5, #0]
 800e4e0:	4860      	ldr	r0, [pc, #384]	; (800e664 <_vfiprintf_r+0x210>)
 800e4e2:	f7f1 fe8d 	bl	8000200 <memchr>
 800e4e6:	f105 0801 	add.w	r8, r5, #1
 800e4ea:	9b04      	ldr	r3, [sp, #16]
 800e4ec:	2800      	cmp	r0, #0
 800e4ee:	d131      	bne.n	800e554 <_vfiprintf_r+0x100>
 800e4f0:	06d9      	lsls	r1, r3, #27
 800e4f2:	bf44      	itt	mi
 800e4f4:	2220      	movmi	r2, #32
 800e4f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e4fa:	071a      	lsls	r2, r3, #28
 800e4fc:	bf44      	itt	mi
 800e4fe:	222b      	movmi	r2, #43	; 0x2b
 800e500:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e504:	782a      	ldrb	r2, [r5, #0]
 800e506:	2a2a      	cmp	r2, #42	; 0x2a
 800e508:	d02c      	beq.n	800e564 <_vfiprintf_r+0x110>
 800e50a:	9a07      	ldr	r2, [sp, #28]
 800e50c:	2100      	movs	r1, #0
 800e50e:	200a      	movs	r0, #10
 800e510:	46a8      	mov	r8, r5
 800e512:	3501      	adds	r5, #1
 800e514:	f898 3000 	ldrb.w	r3, [r8]
 800e518:	3b30      	subs	r3, #48	; 0x30
 800e51a:	2b09      	cmp	r3, #9
 800e51c:	d96d      	bls.n	800e5fa <_vfiprintf_r+0x1a6>
 800e51e:	b371      	cbz	r1, 800e57e <_vfiprintf_r+0x12a>
 800e520:	e026      	b.n	800e570 <_vfiprintf_r+0x11c>
 800e522:	4b51      	ldr	r3, [pc, #324]	; (800e668 <_vfiprintf_r+0x214>)
 800e524:	429c      	cmp	r4, r3
 800e526:	d101      	bne.n	800e52c <_vfiprintf_r+0xd8>
 800e528:	68b4      	ldr	r4, [r6, #8]
 800e52a:	e7a3      	b.n	800e474 <_vfiprintf_r+0x20>
 800e52c:	4b4f      	ldr	r3, [pc, #316]	; (800e66c <_vfiprintf_r+0x218>)
 800e52e:	429c      	cmp	r4, r3
 800e530:	bf08      	it	eq
 800e532:	68f4      	ldreq	r4, [r6, #12]
 800e534:	e79e      	b.n	800e474 <_vfiprintf_r+0x20>
 800e536:	4621      	mov	r1, r4
 800e538:	4630      	mov	r0, r6
 800e53a:	f000 faed 	bl	800eb18 <__swsetup_r>
 800e53e:	2800      	cmp	r0, #0
 800e540:	d09e      	beq.n	800e480 <_vfiprintf_r+0x2c>
 800e542:	f04f 30ff 	mov.w	r0, #4294967295
 800e546:	b01d      	add	sp, #116	; 0x74
 800e548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e54c:	2b25      	cmp	r3, #37	; 0x25
 800e54e:	d0a7      	beq.n	800e4a0 <_vfiprintf_r+0x4c>
 800e550:	46a8      	mov	r8, r5
 800e552:	e7a0      	b.n	800e496 <_vfiprintf_r+0x42>
 800e554:	4a43      	ldr	r2, [pc, #268]	; (800e664 <_vfiprintf_r+0x210>)
 800e556:	1a80      	subs	r0, r0, r2
 800e558:	fa0b f000 	lsl.w	r0, fp, r0
 800e55c:	4318      	orrs	r0, r3
 800e55e:	9004      	str	r0, [sp, #16]
 800e560:	4645      	mov	r5, r8
 800e562:	e7bb      	b.n	800e4dc <_vfiprintf_r+0x88>
 800e564:	9a03      	ldr	r2, [sp, #12]
 800e566:	1d11      	adds	r1, r2, #4
 800e568:	6812      	ldr	r2, [r2, #0]
 800e56a:	9103      	str	r1, [sp, #12]
 800e56c:	2a00      	cmp	r2, #0
 800e56e:	db01      	blt.n	800e574 <_vfiprintf_r+0x120>
 800e570:	9207      	str	r2, [sp, #28]
 800e572:	e004      	b.n	800e57e <_vfiprintf_r+0x12a>
 800e574:	4252      	negs	r2, r2
 800e576:	f043 0302 	orr.w	r3, r3, #2
 800e57a:	9207      	str	r2, [sp, #28]
 800e57c:	9304      	str	r3, [sp, #16]
 800e57e:	f898 3000 	ldrb.w	r3, [r8]
 800e582:	2b2e      	cmp	r3, #46	; 0x2e
 800e584:	d110      	bne.n	800e5a8 <_vfiprintf_r+0x154>
 800e586:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e58a:	2b2a      	cmp	r3, #42	; 0x2a
 800e58c:	f108 0101 	add.w	r1, r8, #1
 800e590:	d137      	bne.n	800e602 <_vfiprintf_r+0x1ae>
 800e592:	9b03      	ldr	r3, [sp, #12]
 800e594:	1d1a      	adds	r2, r3, #4
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	9203      	str	r2, [sp, #12]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	bfb8      	it	lt
 800e59e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e5a2:	f108 0802 	add.w	r8, r8, #2
 800e5a6:	9305      	str	r3, [sp, #20]
 800e5a8:	4d31      	ldr	r5, [pc, #196]	; (800e670 <_vfiprintf_r+0x21c>)
 800e5aa:	f898 1000 	ldrb.w	r1, [r8]
 800e5ae:	2203      	movs	r2, #3
 800e5b0:	4628      	mov	r0, r5
 800e5b2:	f7f1 fe25 	bl	8000200 <memchr>
 800e5b6:	b140      	cbz	r0, 800e5ca <_vfiprintf_r+0x176>
 800e5b8:	2340      	movs	r3, #64	; 0x40
 800e5ba:	1b40      	subs	r0, r0, r5
 800e5bc:	fa03 f000 	lsl.w	r0, r3, r0
 800e5c0:	9b04      	ldr	r3, [sp, #16]
 800e5c2:	4303      	orrs	r3, r0
 800e5c4:	9304      	str	r3, [sp, #16]
 800e5c6:	f108 0801 	add.w	r8, r8, #1
 800e5ca:	f898 1000 	ldrb.w	r1, [r8]
 800e5ce:	4829      	ldr	r0, [pc, #164]	; (800e674 <_vfiprintf_r+0x220>)
 800e5d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5d4:	2206      	movs	r2, #6
 800e5d6:	f108 0701 	add.w	r7, r8, #1
 800e5da:	f7f1 fe11 	bl	8000200 <memchr>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d034      	beq.n	800e64c <_vfiprintf_r+0x1f8>
 800e5e2:	4b25      	ldr	r3, [pc, #148]	; (800e678 <_vfiprintf_r+0x224>)
 800e5e4:	bb03      	cbnz	r3, 800e628 <_vfiprintf_r+0x1d4>
 800e5e6:	9b03      	ldr	r3, [sp, #12]
 800e5e8:	3307      	adds	r3, #7
 800e5ea:	f023 0307 	bic.w	r3, r3, #7
 800e5ee:	3308      	adds	r3, #8
 800e5f0:	9303      	str	r3, [sp, #12]
 800e5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5f4:	444b      	add	r3, r9
 800e5f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e5f8:	e74c      	b.n	800e494 <_vfiprintf_r+0x40>
 800e5fa:	fb00 3202 	mla	r2, r0, r2, r3
 800e5fe:	2101      	movs	r1, #1
 800e600:	e786      	b.n	800e510 <_vfiprintf_r+0xbc>
 800e602:	2300      	movs	r3, #0
 800e604:	9305      	str	r3, [sp, #20]
 800e606:	4618      	mov	r0, r3
 800e608:	250a      	movs	r5, #10
 800e60a:	4688      	mov	r8, r1
 800e60c:	3101      	adds	r1, #1
 800e60e:	f898 2000 	ldrb.w	r2, [r8]
 800e612:	3a30      	subs	r2, #48	; 0x30
 800e614:	2a09      	cmp	r2, #9
 800e616:	d903      	bls.n	800e620 <_vfiprintf_r+0x1cc>
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d0c5      	beq.n	800e5a8 <_vfiprintf_r+0x154>
 800e61c:	9005      	str	r0, [sp, #20]
 800e61e:	e7c3      	b.n	800e5a8 <_vfiprintf_r+0x154>
 800e620:	fb05 2000 	mla	r0, r5, r0, r2
 800e624:	2301      	movs	r3, #1
 800e626:	e7f0      	b.n	800e60a <_vfiprintf_r+0x1b6>
 800e628:	ab03      	add	r3, sp, #12
 800e62a:	9300      	str	r3, [sp, #0]
 800e62c:	4622      	mov	r2, r4
 800e62e:	4b13      	ldr	r3, [pc, #76]	; (800e67c <_vfiprintf_r+0x228>)
 800e630:	a904      	add	r1, sp, #16
 800e632:	4630      	mov	r0, r6
 800e634:	f3af 8000 	nop.w
 800e638:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e63c:	4681      	mov	r9, r0
 800e63e:	d1d8      	bne.n	800e5f2 <_vfiprintf_r+0x19e>
 800e640:	89a3      	ldrh	r3, [r4, #12]
 800e642:	065b      	lsls	r3, r3, #25
 800e644:	f53f af7d 	bmi.w	800e542 <_vfiprintf_r+0xee>
 800e648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e64a:	e77c      	b.n	800e546 <_vfiprintf_r+0xf2>
 800e64c:	ab03      	add	r3, sp, #12
 800e64e:	9300      	str	r3, [sp, #0]
 800e650:	4622      	mov	r2, r4
 800e652:	4b0a      	ldr	r3, [pc, #40]	; (800e67c <_vfiprintf_r+0x228>)
 800e654:	a904      	add	r1, sp, #16
 800e656:	4630      	mov	r0, r6
 800e658:	f000 f888 	bl	800e76c <_printf_i>
 800e65c:	e7ec      	b.n	800e638 <_vfiprintf_r+0x1e4>
 800e65e:	bf00      	nop
 800e660:	080129a8 	.word	0x080129a8
 800e664:	080129f2 	.word	0x080129f2
 800e668:	080129c8 	.word	0x080129c8
 800e66c:	08012988 	.word	0x08012988
 800e670:	080129f8 	.word	0x080129f8
 800e674:	080129fc 	.word	0x080129fc
 800e678:	00000000 	.word	0x00000000
 800e67c:	0800e431 	.word	0x0800e431

0800e680 <_printf_common>:
 800e680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e684:	4691      	mov	r9, r2
 800e686:	461f      	mov	r7, r3
 800e688:	688a      	ldr	r2, [r1, #8]
 800e68a:	690b      	ldr	r3, [r1, #16]
 800e68c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e690:	4293      	cmp	r3, r2
 800e692:	bfb8      	it	lt
 800e694:	4613      	movlt	r3, r2
 800e696:	f8c9 3000 	str.w	r3, [r9]
 800e69a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e69e:	4606      	mov	r6, r0
 800e6a0:	460c      	mov	r4, r1
 800e6a2:	b112      	cbz	r2, 800e6aa <_printf_common+0x2a>
 800e6a4:	3301      	adds	r3, #1
 800e6a6:	f8c9 3000 	str.w	r3, [r9]
 800e6aa:	6823      	ldr	r3, [r4, #0]
 800e6ac:	0699      	lsls	r1, r3, #26
 800e6ae:	bf42      	ittt	mi
 800e6b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e6b4:	3302      	addmi	r3, #2
 800e6b6:	f8c9 3000 	strmi.w	r3, [r9]
 800e6ba:	6825      	ldr	r5, [r4, #0]
 800e6bc:	f015 0506 	ands.w	r5, r5, #6
 800e6c0:	d107      	bne.n	800e6d2 <_printf_common+0x52>
 800e6c2:	f104 0a19 	add.w	sl, r4, #25
 800e6c6:	68e3      	ldr	r3, [r4, #12]
 800e6c8:	f8d9 2000 	ldr.w	r2, [r9]
 800e6cc:	1a9b      	subs	r3, r3, r2
 800e6ce:	429d      	cmp	r5, r3
 800e6d0:	db29      	blt.n	800e726 <_printf_common+0xa6>
 800e6d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e6d6:	6822      	ldr	r2, [r4, #0]
 800e6d8:	3300      	adds	r3, #0
 800e6da:	bf18      	it	ne
 800e6dc:	2301      	movne	r3, #1
 800e6de:	0692      	lsls	r2, r2, #26
 800e6e0:	d42e      	bmi.n	800e740 <_printf_common+0xc0>
 800e6e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e6e6:	4639      	mov	r1, r7
 800e6e8:	4630      	mov	r0, r6
 800e6ea:	47c0      	blx	r8
 800e6ec:	3001      	adds	r0, #1
 800e6ee:	d021      	beq.n	800e734 <_printf_common+0xb4>
 800e6f0:	6823      	ldr	r3, [r4, #0]
 800e6f2:	68e5      	ldr	r5, [r4, #12]
 800e6f4:	f8d9 2000 	ldr.w	r2, [r9]
 800e6f8:	f003 0306 	and.w	r3, r3, #6
 800e6fc:	2b04      	cmp	r3, #4
 800e6fe:	bf08      	it	eq
 800e700:	1aad      	subeq	r5, r5, r2
 800e702:	68a3      	ldr	r3, [r4, #8]
 800e704:	6922      	ldr	r2, [r4, #16]
 800e706:	bf0c      	ite	eq
 800e708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e70c:	2500      	movne	r5, #0
 800e70e:	4293      	cmp	r3, r2
 800e710:	bfc4      	itt	gt
 800e712:	1a9b      	subgt	r3, r3, r2
 800e714:	18ed      	addgt	r5, r5, r3
 800e716:	f04f 0900 	mov.w	r9, #0
 800e71a:	341a      	adds	r4, #26
 800e71c:	454d      	cmp	r5, r9
 800e71e:	d11b      	bne.n	800e758 <_printf_common+0xd8>
 800e720:	2000      	movs	r0, #0
 800e722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e726:	2301      	movs	r3, #1
 800e728:	4652      	mov	r2, sl
 800e72a:	4639      	mov	r1, r7
 800e72c:	4630      	mov	r0, r6
 800e72e:	47c0      	blx	r8
 800e730:	3001      	adds	r0, #1
 800e732:	d103      	bne.n	800e73c <_printf_common+0xbc>
 800e734:	f04f 30ff 	mov.w	r0, #4294967295
 800e738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e73c:	3501      	adds	r5, #1
 800e73e:	e7c2      	b.n	800e6c6 <_printf_common+0x46>
 800e740:	18e1      	adds	r1, r4, r3
 800e742:	1c5a      	adds	r2, r3, #1
 800e744:	2030      	movs	r0, #48	; 0x30
 800e746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e74a:	4422      	add	r2, r4
 800e74c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e754:	3302      	adds	r3, #2
 800e756:	e7c4      	b.n	800e6e2 <_printf_common+0x62>
 800e758:	2301      	movs	r3, #1
 800e75a:	4622      	mov	r2, r4
 800e75c:	4639      	mov	r1, r7
 800e75e:	4630      	mov	r0, r6
 800e760:	47c0      	blx	r8
 800e762:	3001      	adds	r0, #1
 800e764:	d0e6      	beq.n	800e734 <_printf_common+0xb4>
 800e766:	f109 0901 	add.w	r9, r9, #1
 800e76a:	e7d7      	b.n	800e71c <_printf_common+0x9c>

0800e76c <_printf_i>:
 800e76c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e770:	4617      	mov	r7, r2
 800e772:	7e0a      	ldrb	r2, [r1, #24]
 800e774:	b085      	sub	sp, #20
 800e776:	2a6e      	cmp	r2, #110	; 0x6e
 800e778:	4698      	mov	r8, r3
 800e77a:	4606      	mov	r6, r0
 800e77c:	460c      	mov	r4, r1
 800e77e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e780:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800e784:	f000 80bc 	beq.w	800e900 <_printf_i+0x194>
 800e788:	d81a      	bhi.n	800e7c0 <_printf_i+0x54>
 800e78a:	2a63      	cmp	r2, #99	; 0x63
 800e78c:	d02e      	beq.n	800e7ec <_printf_i+0x80>
 800e78e:	d80a      	bhi.n	800e7a6 <_printf_i+0x3a>
 800e790:	2a00      	cmp	r2, #0
 800e792:	f000 80c8 	beq.w	800e926 <_printf_i+0x1ba>
 800e796:	2a58      	cmp	r2, #88	; 0x58
 800e798:	f000 808a 	beq.w	800e8b0 <_printf_i+0x144>
 800e79c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7a0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800e7a4:	e02a      	b.n	800e7fc <_printf_i+0x90>
 800e7a6:	2a64      	cmp	r2, #100	; 0x64
 800e7a8:	d001      	beq.n	800e7ae <_printf_i+0x42>
 800e7aa:	2a69      	cmp	r2, #105	; 0x69
 800e7ac:	d1f6      	bne.n	800e79c <_printf_i+0x30>
 800e7ae:	6821      	ldr	r1, [r4, #0]
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	f011 0f80 	tst.w	r1, #128	; 0x80
 800e7b6:	d023      	beq.n	800e800 <_printf_i+0x94>
 800e7b8:	1d11      	adds	r1, r2, #4
 800e7ba:	6019      	str	r1, [r3, #0]
 800e7bc:	6813      	ldr	r3, [r2, #0]
 800e7be:	e027      	b.n	800e810 <_printf_i+0xa4>
 800e7c0:	2a73      	cmp	r2, #115	; 0x73
 800e7c2:	f000 80b4 	beq.w	800e92e <_printf_i+0x1c2>
 800e7c6:	d808      	bhi.n	800e7da <_printf_i+0x6e>
 800e7c8:	2a6f      	cmp	r2, #111	; 0x6f
 800e7ca:	d02a      	beq.n	800e822 <_printf_i+0xb6>
 800e7cc:	2a70      	cmp	r2, #112	; 0x70
 800e7ce:	d1e5      	bne.n	800e79c <_printf_i+0x30>
 800e7d0:	680a      	ldr	r2, [r1, #0]
 800e7d2:	f042 0220 	orr.w	r2, r2, #32
 800e7d6:	600a      	str	r2, [r1, #0]
 800e7d8:	e003      	b.n	800e7e2 <_printf_i+0x76>
 800e7da:	2a75      	cmp	r2, #117	; 0x75
 800e7dc:	d021      	beq.n	800e822 <_printf_i+0xb6>
 800e7de:	2a78      	cmp	r2, #120	; 0x78
 800e7e0:	d1dc      	bne.n	800e79c <_printf_i+0x30>
 800e7e2:	2278      	movs	r2, #120	; 0x78
 800e7e4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800e7e8:	496e      	ldr	r1, [pc, #440]	; (800e9a4 <_printf_i+0x238>)
 800e7ea:	e064      	b.n	800e8b6 <_printf_i+0x14a>
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800e7f2:	1d11      	adds	r1, r2, #4
 800e7f4:	6019      	str	r1, [r3, #0]
 800e7f6:	6813      	ldr	r3, [r2, #0]
 800e7f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	e0a3      	b.n	800e948 <_printf_i+0x1dc>
 800e800:	f011 0f40 	tst.w	r1, #64	; 0x40
 800e804:	f102 0104 	add.w	r1, r2, #4
 800e808:	6019      	str	r1, [r3, #0]
 800e80a:	d0d7      	beq.n	800e7bc <_printf_i+0x50>
 800e80c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800e810:	2b00      	cmp	r3, #0
 800e812:	da03      	bge.n	800e81c <_printf_i+0xb0>
 800e814:	222d      	movs	r2, #45	; 0x2d
 800e816:	425b      	negs	r3, r3
 800e818:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e81c:	4962      	ldr	r1, [pc, #392]	; (800e9a8 <_printf_i+0x23c>)
 800e81e:	220a      	movs	r2, #10
 800e820:	e017      	b.n	800e852 <_printf_i+0xe6>
 800e822:	6820      	ldr	r0, [r4, #0]
 800e824:	6819      	ldr	r1, [r3, #0]
 800e826:	f010 0f80 	tst.w	r0, #128	; 0x80
 800e82a:	d003      	beq.n	800e834 <_printf_i+0xc8>
 800e82c:	1d08      	adds	r0, r1, #4
 800e82e:	6018      	str	r0, [r3, #0]
 800e830:	680b      	ldr	r3, [r1, #0]
 800e832:	e006      	b.n	800e842 <_printf_i+0xd6>
 800e834:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e838:	f101 0004 	add.w	r0, r1, #4
 800e83c:	6018      	str	r0, [r3, #0]
 800e83e:	d0f7      	beq.n	800e830 <_printf_i+0xc4>
 800e840:	880b      	ldrh	r3, [r1, #0]
 800e842:	4959      	ldr	r1, [pc, #356]	; (800e9a8 <_printf_i+0x23c>)
 800e844:	2a6f      	cmp	r2, #111	; 0x6f
 800e846:	bf14      	ite	ne
 800e848:	220a      	movne	r2, #10
 800e84a:	2208      	moveq	r2, #8
 800e84c:	2000      	movs	r0, #0
 800e84e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800e852:	6865      	ldr	r5, [r4, #4]
 800e854:	60a5      	str	r5, [r4, #8]
 800e856:	2d00      	cmp	r5, #0
 800e858:	f2c0 809c 	blt.w	800e994 <_printf_i+0x228>
 800e85c:	6820      	ldr	r0, [r4, #0]
 800e85e:	f020 0004 	bic.w	r0, r0, #4
 800e862:	6020      	str	r0, [r4, #0]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d13f      	bne.n	800e8e8 <_printf_i+0x17c>
 800e868:	2d00      	cmp	r5, #0
 800e86a:	f040 8095 	bne.w	800e998 <_printf_i+0x22c>
 800e86e:	4675      	mov	r5, lr
 800e870:	2a08      	cmp	r2, #8
 800e872:	d10b      	bne.n	800e88c <_printf_i+0x120>
 800e874:	6823      	ldr	r3, [r4, #0]
 800e876:	07da      	lsls	r2, r3, #31
 800e878:	d508      	bpl.n	800e88c <_printf_i+0x120>
 800e87a:	6923      	ldr	r3, [r4, #16]
 800e87c:	6862      	ldr	r2, [r4, #4]
 800e87e:	429a      	cmp	r2, r3
 800e880:	bfde      	ittt	le
 800e882:	2330      	movle	r3, #48	; 0x30
 800e884:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e888:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e88c:	ebae 0305 	sub.w	r3, lr, r5
 800e890:	6123      	str	r3, [r4, #16]
 800e892:	f8cd 8000 	str.w	r8, [sp]
 800e896:	463b      	mov	r3, r7
 800e898:	aa03      	add	r2, sp, #12
 800e89a:	4621      	mov	r1, r4
 800e89c:	4630      	mov	r0, r6
 800e89e:	f7ff feef 	bl	800e680 <_printf_common>
 800e8a2:	3001      	adds	r0, #1
 800e8a4:	d155      	bne.n	800e952 <_printf_i+0x1e6>
 800e8a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8aa:	b005      	add	sp, #20
 800e8ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8b0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800e8b4:	493c      	ldr	r1, [pc, #240]	; (800e9a8 <_printf_i+0x23c>)
 800e8b6:	6822      	ldr	r2, [r4, #0]
 800e8b8:	6818      	ldr	r0, [r3, #0]
 800e8ba:	f012 0f80 	tst.w	r2, #128	; 0x80
 800e8be:	f100 0504 	add.w	r5, r0, #4
 800e8c2:	601d      	str	r5, [r3, #0]
 800e8c4:	d001      	beq.n	800e8ca <_printf_i+0x15e>
 800e8c6:	6803      	ldr	r3, [r0, #0]
 800e8c8:	e002      	b.n	800e8d0 <_printf_i+0x164>
 800e8ca:	0655      	lsls	r5, r2, #25
 800e8cc:	d5fb      	bpl.n	800e8c6 <_printf_i+0x15a>
 800e8ce:	8803      	ldrh	r3, [r0, #0]
 800e8d0:	07d0      	lsls	r0, r2, #31
 800e8d2:	bf44      	itt	mi
 800e8d4:	f042 0220 	orrmi.w	r2, r2, #32
 800e8d8:	6022      	strmi	r2, [r4, #0]
 800e8da:	b91b      	cbnz	r3, 800e8e4 <_printf_i+0x178>
 800e8dc:	6822      	ldr	r2, [r4, #0]
 800e8de:	f022 0220 	bic.w	r2, r2, #32
 800e8e2:	6022      	str	r2, [r4, #0]
 800e8e4:	2210      	movs	r2, #16
 800e8e6:	e7b1      	b.n	800e84c <_printf_i+0xe0>
 800e8e8:	4675      	mov	r5, lr
 800e8ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800e8ee:	fb02 3310 	mls	r3, r2, r0, r3
 800e8f2:	5ccb      	ldrb	r3, [r1, r3]
 800e8f4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2800      	cmp	r0, #0
 800e8fc:	d1f5      	bne.n	800e8ea <_printf_i+0x17e>
 800e8fe:	e7b7      	b.n	800e870 <_printf_i+0x104>
 800e900:	6808      	ldr	r0, [r1, #0]
 800e902:	681a      	ldr	r2, [r3, #0]
 800e904:	6949      	ldr	r1, [r1, #20]
 800e906:	f010 0f80 	tst.w	r0, #128	; 0x80
 800e90a:	d004      	beq.n	800e916 <_printf_i+0x1aa>
 800e90c:	1d10      	adds	r0, r2, #4
 800e90e:	6018      	str	r0, [r3, #0]
 800e910:	6813      	ldr	r3, [r2, #0]
 800e912:	6019      	str	r1, [r3, #0]
 800e914:	e007      	b.n	800e926 <_printf_i+0x1ba>
 800e916:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e91a:	f102 0004 	add.w	r0, r2, #4
 800e91e:	6018      	str	r0, [r3, #0]
 800e920:	6813      	ldr	r3, [r2, #0]
 800e922:	d0f6      	beq.n	800e912 <_printf_i+0x1a6>
 800e924:	8019      	strh	r1, [r3, #0]
 800e926:	2300      	movs	r3, #0
 800e928:	6123      	str	r3, [r4, #16]
 800e92a:	4675      	mov	r5, lr
 800e92c:	e7b1      	b.n	800e892 <_printf_i+0x126>
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	1d11      	adds	r1, r2, #4
 800e932:	6019      	str	r1, [r3, #0]
 800e934:	6815      	ldr	r5, [r2, #0]
 800e936:	6862      	ldr	r2, [r4, #4]
 800e938:	2100      	movs	r1, #0
 800e93a:	4628      	mov	r0, r5
 800e93c:	f7f1 fc60 	bl	8000200 <memchr>
 800e940:	b108      	cbz	r0, 800e946 <_printf_i+0x1da>
 800e942:	1b40      	subs	r0, r0, r5
 800e944:	6060      	str	r0, [r4, #4]
 800e946:	6863      	ldr	r3, [r4, #4]
 800e948:	6123      	str	r3, [r4, #16]
 800e94a:	2300      	movs	r3, #0
 800e94c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e950:	e79f      	b.n	800e892 <_printf_i+0x126>
 800e952:	6923      	ldr	r3, [r4, #16]
 800e954:	462a      	mov	r2, r5
 800e956:	4639      	mov	r1, r7
 800e958:	4630      	mov	r0, r6
 800e95a:	47c0      	blx	r8
 800e95c:	3001      	adds	r0, #1
 800e95e:	d0a2      	beq.n	800e8a6 <_printf_i+0x13a>
 800e960:	6823      	ldr	r3, [r4, #0]
 800e962:	079b      	lsls	r3, r3, #30
 800e964:	d507      	bpl.n	800e976 <_printf_i+0x20a>
 800e966:	2500      	movs	r5, #0
 800e968:	f104 0919 	add.w	r9, r4, #25
 800e96c:	68e3      	ldr	r3, [r4, #12]
 800e96e:	9a03      	ldr	r2, [sp, #12]
 800e970:	1a9b      	subs	r3, r3, r2
 800e972:	429d      	cmp	r5, r3
 800e974:	db05      	blt.n	800e982 <_printf_i+0x216>
 800e976:	68e0      	ldr	r0, [r4, #12]
 800e978:	9b03      	ldr	r3, [sp, #12]
 800e97a:	4298      	cmp	r0, r3
 800e97c:	bfb8      	it	lt
 800e97e:	4618      	movlt	r0, r3
 800e980:	e793      	b.n	800e8aa <_printf_i+0x13e>
 800e982:	2301      	movs	r3, #1
 800e984:	464a      	mov	r2, r9
 800e986:	4639      	mov	r1, r7
 800e988:	4630      	mov	r0, r6
 800e98a:	47c0      	blx	r8
 800e98c:	3001      	adds	r0, #1
 800e98e:	d08a      	beq.n	800e8a6 <_printf_i+0x13a>
 800e990:	3501      	adds	r5, #1
 800e992:	e7eb      	b.n	800e96c <_printf_i+0x200>
 800e994:	2b00      	cmp	r3, #0
 800e996:	d1a7      	bne.n	800e8e8 <_printf_i+0x17c>
 800e998:	780b      	ldrb	r3, [r1, #0]
 800e99a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e99e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e9a2:	e765      	b.n	800e870 <_printf_i+0x104>
 800e9a4:	08012a14 	.word	0x08012a14
 800e9a8:	08012a03 	.word	0x08012a03

0800e9ac <__sread>:
 800e9ac:	b510      	push	{r4, lr}
 800e9ae:	460c      	mov	r4, r1
 800e9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9b4:	f000 fa96 	bl	800eee4 <_read_r>
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	bfab      	itete	ge
 800e9bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e9be:	89a3      	ldrhlt	r3, [r4, #12]
 800e9c0:	181b      	addge	r3, r3, r0
 800e9c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e9c6:	bfac      	ite	ge
 800e9c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e9ca:	81a3      	strhlt	r3, [r4, #12]
 800e9cc:	bd10      	pop	{r4, pc}

0800e9ce <__swrite>:
 800e9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d2:	461f      	mov	r7, r3
 800e9d4:	898b      	ldrh	r3, [r1, #12]
 800e9d6:	05db      	lsls	r3, r3, #23
 800e9d8:	4605      	mov	r5, r0
 800e9da:	460c      	mov	r4, r1
 800e9dc:	4616      	mov	r6, r2
 800e9de:	d505      	bpl.n	800e9ec <__swrite+0x1e>
 800e9e0:	2302      	movs	r3, #2
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9e8:	f000 f9c6 	bl	800ed78 <_lseek_r>
 800e9ec:	89a3      	ldrh	r3, [r4, #12]
 800e9ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e9f6:	81a3      	strh	r3, [r4, #12]
 800e9f8:	4632      	mov	r2, r6
 800e9fa:	463b      	mov	r3, r7
 800e9fc:	4628      	mov	r0, r5
 800e9fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea02:	f000 b877 	b.w	800eaf4 <_write_r>

0800ea06 <__sseek>:
 800ea06:	b510      	push	{r4, lr}
 800ea08:	460c      	mov	r4, r1
 800ea0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea0e:	f000 f9b3 	bl	800ed78 <_lseek_r>
 800ea12:	1c43      	adds	r3, r0, #1
 800ea14:	89a3      	ldrh	r3, [r4, #12]
 800ea16:	bf15      	itete	ne
 800ea18:	6560      	strne	r0, [r4, #84]	; 0x54
 800ea1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ea1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ea22:	81a3      	strheq	r3, [r4, #12]
 800ea24:	bf18      	it	ne
 800ea26:	81a3      	strhne	r3, [r4, #12]
 800ea28:	bd10      	pop	{r4, pc}

0800ea2a <__sclose>:
 800ea2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea2e:	f000 b8e1 	b.w	800ebf4 <_close_r>
	...

0800ea34 <__swbuf_r>:
 800ea34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea36:	460e      	mov	r6, r1
 800ea38:	4614      	mov	r4, r2
 800ea3a:	4605      	mov	r5, r0
 800ea3c:	b118      	cbz	r0, 800ea46 <__swbuf_r+0x12>
 800ea3e:	6983      	ldr	r3, [r0, #24]
 800ea40:	b90b      	cbnz	r3, 800ea46 <__swbuf_r+0x12>
 800ea42:	f7ff faed 	bl	800e020 <__sinit>
 800ea46:	4b21      	ldr	r3, [pc, #132]	; (800eacc <__swbuf_r+0x98>)
 800ea48:	429c      	cmp	r4, r3
 800ea4a:	d12a      	bne.n	800eaa2 <__swbuf_r+0x6e>
 800ea4c:	686c      	ldr	r4, [r5, #4]
 800ea4e:	69a3      	ldr	r3, [r4, #24]
 800ea50:	60a3      	str	r3, [r4, #8]
 800ea52:	89a3      	ldrh	r3, [r4, #12]
 800ea54:	071a      	lsls	r2, r3, #28
 800ea56:	d52e      	bpl.n	800eab6 <__swbuf_r+0x82>
 800ea58:	6923      	ldr	r3, [r4, #16]
 800ea5a:	b363      	cbz	r3, 800eab6 <__swbuf_r+0x82>
 800ea5c:	6923      	ldr	r3, [r4, #16]
 800ea5e:	6820      	ldr	r0, [r4, #0]
 800ea60:	1ac0      	subs	r0, r0, r3
 800ea62:	6963      	ldr	r3, [r4, #20]
 800ea64:	b2f6      	uxtb	r6, r6
 800ea66:	4298      	cmp	r0, r3
 800ea68:	4637      	mov	r7, r6
 800ea6a:	db04      	blt.n	800ea76 <__swbuf_r+0x42>
 800ea6c:	4621      	mov	r1, r4
 800ea6e:	4628      	mov	r0, r5
 800ea70:	f000 f958 	bl	800ed24 <_fflush_r>
 800ea74:	bb28      	cbnz	r0, 800eac2 <__swbuf_r+0x8e>
 800ea76:	68a3      	ldr	r3, [r4, #8]
 800ea78:	3b01      	subs	r3, #1
 800ea7a:	60a3      	str	r3, [r4, #8]
 800ea7c:	6823      	ldr	r3, [r4, #0]
 800ea7e:	1c5a      	adds	r2, r3, #1
 800ea80:	6022      	str	r2, [r4, #0]
 800ea82:	701e      	strb	r6, [r3, #0]
 800ea84:	6963      	ldr	r3, [r4, #20]
 800ea86:	3001      	adds	r0, #1
 800ea88:	4298      	cmp	r0, r3
 800ea8a:	d004      	beq.n	800ea96 <__swbuf_r+0x62>
 800ea8c:	89a3      	ldrh	r3, [r4, #12]
 800ea8e:	07db      	lsls	r3, r3, #31
 800ea90:	d519      	bpl.n	800eac6 <__swbuf_r+0x92>
 800ea92:	2e0a      	cmp	r6, #10
 800ea94:	d117      	bne.n	800eac6 <__swbuf_r+0x92>
 800ea96:	4621      	mov	r1, r4
 800ea98:	4628      	mov	r0, r5
 800ea9a:	f000 f943 	bl	800ed24 <_fflush_r>
 800ea9e:	b190      	cbz	r0, 800eac6 <__swbuf_r+0x92>
 800eaa0:	e00f      	b.n	800eac2 <__swbuf_r+0x8e>
 800eaa2:	4b0b      	ldr	r3, [pc, #44]	; (800ead0 <__swbuf_r+0x9c>)
 800eaa4:	429c      	cmp	r4, r3
 800eaa6:	d101      	bne.n	800eaac <__swbuf_r+0x78>
 800eaa8:	68ac      	ldr	r4, [r5, #8]
 800eaaa:	e7d0      	b.n	800ea4e <__swbuf_r+0x1a>
 800eaac:	4b09      	ldr	r3, [pc, #36]	; (800ead4 <__swbuf_r+0xa0>)
 800eaae:	429c      	cmp	r4, r3
 800eab0:	bf08      	it	eq
 800eab2:	68ec      	ldreq	r4, [r5, #12]
 800eab4:	e7cb      	b.n	800ea4e <__swbuf_r+0x1a>
 800eab6:	4621      	mov	r1, r4
 800eab8:	4628      	mov	r0, r5
 800eaba:	f000 f82d 	bl	800eb18 <__swsetup_r>
 800eabe:	2800      	cmp	r0, #0
 800eac0:	d0cc      	beq.n	800ea5c <__swbuf_r+0x28>
 800eac2:	f04f 37ff 	mov.w	r7, #4294967295
 800eac6:	4638      	mov	r0, r7
 800eac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaca:	bf00      	nop
 800eacc:	080129a8 	.word	0x080129a8
 800ead0:	080129c8 	.word	0x080129c8
 800ead4:	08012988 	.word	0x08012988

0800ead8 <__ascii_wctomb>:
 800ead8:	b149      	cbz	r1, 800eaee <__ascii_wctomb+0x16>
 800eada:	2aff      	cmp	r2, #255	; 0xff
 800eadc:	bf85      	ittet	hi
 800eade:	238a      	movhi	r3, #138	; 0x8a
 800eae0:	6003      	strhi	r3, [r0, #0]
 800eae2:	700a      	strbls	r2, [r1, #0]
 800eae4:	f04f 30ff 	movhi.w	r0, #4294967295
 800eae8:	bf98      	it	ls
 800eaea:	2001      	movls	r0, #1
 800eaec:	4770      	bx	lr
 800eaee:	4608      	mov	r0, r1
 800eaf0:	4770      	bx	lr
	...

0800eaf4 <_write_r>:
 800eaf4:	b538      	push	{r3, r4, r5, lr}
 800eaf6:	4c07      	ldr	r4, [pc, #28]	; (800eb14 <_write_r+0x20>)
 800eaf8:	4605      	mov	r5, r0
 800eafa:	4608      	mov	r0, r1
 800eafc:	4611      	mov	r1, r2
 800eafe:	2200      	movs	r2, #0
 800eb00:	6022      	str	r2, [r4, #0]
 800eb02:	461a      	mov	r2, r3
 800eb04:	f7fd fc94 	bl	800c430 <_write>
 800eb08:	1c43      	adds	r3, r0, #1
 800eb0a:	d102      	bne.n	800eb12 <_write_r+0x1e>
 800eb0c:	6823      	ldr	r3, [r4, #0]
 800eb0e:	b103      	cbz	r3, 800eb12 <_write_r+0x1e>
 800eb10:	602b      	str	r3, [r5, #0]
 800eb12:	bd38      	pop	{r3, r4, r5, pc}
 800eb14:	2000a528 	.word	0x2000a528

0800eb18 <__swsetup_r>:
 800eb18:	4b32      	ldr	r3, [pc, #200]	; (800ebe4 <__swsetup_r+0xcc>)
 800eb1a:	b570      	push	{r4, r5, r6, lr}
 800eb1c:	681d      	ldr	r5, [r3, #0]
 800eb1e:	4606      	mov	r6, r0
 800eb20:	460c      	mov	r4, r1
 800eb22:	b125      	cbz	r5, 800eb2e <__swsetup_r+0x16>
 800eb24:	69ab      	ldr	r3, [r5, #24]
 800eb26:	b913      	cbnz	r3, 800eb2e <__swsetup_r+0x16>
 800eb28:	4628      	mov	r0, r5
 800eb2a:	f7ff fa79 	bl	800e020 <__sinit>
 800eb2e:	4b2e      	ldr	r3, [pc, #184]	; (800ebe8 <__swsetup_r+0xd0>)
 800eb30:	429c      	cmp	r4, r3
 800eb32:	d10f      	bne.n	800eb54 <__swsetup_r+0x3c>
 800eb34:	686c      	ldr	r4, [r5, #4]
 800eb36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb3a:	b29a      	uxth	r2, r3
 800eb3c:	0715      	lsls	r5, r2, #28
 800eb3e:	d42c      	bmi.n	800eb9a <__swsetup_r+0x82>
 800eb40:	06d0      	lsls	r0, r2, #27
 800eb42:	d411      	bmi.n	800eb68 <__swsetup_r+0x50>
 800eb44:	2209      	movs	r2, #9
 800eb46:	6032      	str	r2, [r6, #0]
 800eb48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb4c:	81a3      	strh	r3, [r4, #12]
 800eb4e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb52:	bd70      	pop	{r4, r5, r6, pc}
 800eb54:	4b25      	ldr	r3, [pc, #148]	; (800ebec <__swsetup_r+0xd4>)
 800eb56:	429c      	cmp	r4, r3
 800eb58:	d101      	bne.n	800eb5e <__swsetup_r+0x46>
 800eb5a:	68ac      	ldr	r4, [r5, #8]
 800eb5c:	e7eb      	b.n	800eb36 <__swsetup_r+0x1e>
 800eb5e:	4b24      	ldr	r3, [pc, #144]	; (800ebf0 <__swsetup_r+0xd8>)
 800eb60:	429c      	cmp	r4, r3
 800eb62:	bf08      	it	eq
 800eb64:	68ec      	ldreq	r4, [r5, #12]
 800eb66:	e7e6      	b.n	800eb36 <__swsetup_r+0x1e>
 800eb68:	0751      	lsls	r1, r2, #29
 800eb6a:	d512      	bpl.n	800eb92 <__swsetup_r+0x7a>
 800eb6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb6e:	b141      	cbz	r1, 800eb82 <__swsetup_r+0x6a>
 800eb70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb74:	4299      	cmp	r1, r3
 800eb76:	d002      	beq.n	800eb7e <__swsetup_r+0x66>
 800eb78:	4630      	mov	r0, r6
 800eb7a:	f7ff f81b 	bl	800dbb4 <_free_r>
 800eb7e:	2300      	movs	r3, #0
 800eb80:	6363      	str	r3, [r4, #52]	; 0x34
 800eb82:	89a3      	ldrh	r3, [r4, #12]
 800eb84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eb88:	81a3      	strh	r3, [r4, #12]
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	6063      	str	r3, [r4, #4]
 800eb8e:	6923      	ldr	r3, [r4, #16]
 800eb90:	6023      	str	r3, [r4, #0]
 800eb92:	89a3      	ldrh	r3, [r4, #12]
 800eb94:	f043 0308 	orr.w	r3, r3, #8
 800eb98:	81a3      	strh	r3, [r4, #12]
 800eb9a:	6923      	ldr	r3, [r4, #16]
 800eb9c:	b94b      	cbnz	r3, 800ebb2 <__swsetup_r+0x9a>
 800eb9e:	89a3      	ldrh	r3, [r4, #12]
 800eba0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eba8:	d003      	beq.n	800ebb2 <__swsetup_r+0x9a>
 800ebaa:	4621      	mov	r1, r4
 800ebac:	4630      	mov	r0, r6
 800ebae:	f000 f919 	bl	800ede4 <__smakebuf_r>
 800ebb2:	89a2      	ldrh	r2, [r4, #12]
 800ebb4:	f012 0301 	ands.w	r3, r2, #1
 800ebb8:	d00c      	beq.n	800ebd4 <__swsetup_r+0xbc>
 800ebba:	2300      	movs	r3, #0
 800ebbc:	60a3      	str	r3, [r4, #8]
 800ebbe:	6963      	ldr	r3, [r4, #20]
 800ebc0:	425b      	negs	r3, r3
 800ebc2:	61a3      	str	r3, [r4, #24]
 800ebc4:	6923      	ldr	r3, [r4, #16]
 800ebc6:	b953      	cbnz	r3, 800ebde <__swsetup_r+0xc6>
 800ebc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebcc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ebd0:	d1ba      	bne.n	800eb48 <__swsetup_r+0x30>
 800ebd2:	bd70      	pop	{r4, r5, r6, pc}
 800ebd4:	0792      	lsls	r2, r2, #30
 800ebd6:	bf58      	it	pl
 800ebd8:	6963      	ldrpl	r3, [r4, #20]
 800ebda:	60a3      	str	r3, [r4, #8]
 800ebdc:	e7f2      	b.n	800ebc4 <__swsetup_r+0xac>
 800ebde:	2000      	movs	r0, #0
 800ebe0:	e7f7      	b.n	800ebd2 <__swsetup_r+0xba>
 800ebe2:	bf00      	nop
 800ebe4:	200005bc 	.word	0x200005bc
 800ebe8:	080129a8 	.word	0x080129a8
 800ebec:	080129c8 	.word	0x080129c8
 800ebf0:	08012988 	.word	0x08012988

0800ebf4 <_close_r>:
 800ebf4:	b538      	push	{r3, r4, r5, lr}
 800ebf6:	4c06      	ldr	r4, [pc, #24]	; (800ec10 <_close_r+0x1c>)
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	4605      	mov	r5, r0
 800ebfc:	4608      	mov	r0, r1
 800ebfe:	6023      	str	r3, [r4, #0]
 800ec00:	f7fe f9f4 	bl	800cfec <_close>
 800ec04:	1c43      	adds	r3, r0, #1
 800ec06:	d102      	bne.n	800ec0e <_close_r+0x1a>
 800ec08:	6823      	ldr	r3, [r4, #0]
 800ec0a:	b103      	cbz	r3, 800ec0e <_close_r+0x1a>
 800ec0c:	602b      	str	r3, [r5, #0]
 800ec0e:	bd38      	pop	{r3, r4, r5, pc}
 800ec10:	2000a528 	.word	0x2000a528

0800ec14 <__sflush_r>:
 800ec14:	898a      	ldrh	r2, [r1, #12]
 800ec16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec1a:	4605      	mov	r5, r0
 800ec1c:	0710      	lsls	r0, r2, #28
 800ec1e:	460c      	mov	r4, r1
 800ec20:	d45a      	bmi.n	800ecd8 <__sflush_r+0xc4>
 800ec22:	684b      	ldr	r3, [r1, #4]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	dc05      	bgt.n	800ec34 <__sflush_r+0x20>
 800ec28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	dc02      	bgt.n	800ec34 <__sflush_r+0x20>
 800ec2e:	2000      	movs	r0, #0
 800ec30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec36:	2e00      	cmp	r6, #0
 800ec38:	d0f9      	beq.n	800ec2e <__sflush_r+0x1a>
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ec40:	682f      	ldr	r7, [r5, #0]
 800ec42:	602b      	str	r3, [r5, #0]
 800ec44:	d033      	beq.n	800ecae <__sflush_r+0x9a>
 800ec46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ec48:	89a3      	ldrh	r3, [r4, #12]
 800ec4a:	075a      	lsls	r2, r3, #29
 800ec4c:	d505      	bpl.n	800ec5a <__sflush_r+0x46>
 800ec4e:	6863      	ldr	r3, [r4, #4]
 800ec50:	1ac0      	subs	r0, r0, r3
 800ec52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec54:	b10b      	cbz	r3, 800ec5a <__sflush_r+0x46>
 800ec56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec58:	1ac0      	subs	r0, r0, r3
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec60:	6a21      	ldr	r1, [r4, #32]
 800ec62:	4628      	mov	r0, r5
 800ec64:	47b0      	blx	r6
 800ec66:	1c43      	adds	r3, r0, #1
 800ec68:	89a3      	ldrh	r3, [r4, #12]
 800ec6a:	d106      	bne.n	800ec7a <__sflush_r+0x66>
 800ec6c:	6829      	ldr	r1, [r5, #0]
 800ec6e:	291d      	cmp	r1, #29
 800ec70:	d84b      	bhi.n	800ed0a <__sflush_r+0xf6>
 800ec72:	4a2b      	ldr	r2, [pc, #172]	; (800ed20 <__sflush_r+0x10c>)
 800ec74:	40ca      	lsrs	r2, r1
 800ec76:	07d6      	lsls	r6, r2, #31
 800ec78:	d547      	bpl.n	800ed0a <__sflush_r+0xf6>
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	6062      	str	r2, [r4, #4]
 800ec7e:	04d9      	lsls	r1, r3, #19
 800ec80:	6922      	ldr	r2, [r4, #16]
 800ec82:	6022      	str	r2, [r4, #0]
 800ec84:	d504      	bpl.n	800ec90 <__sflush_r+0x7c>
 800ec86:	1c42      	adds	r2, r0, #1
 800ec88:	d101      	bne.n	800ec8e <__sflush_r+0x7a>
 800ec8a:	682b      	ldr	r3, [r5, #0]
 800ec8c:	b903      	cbnz	r3, 800ec90 <__sflush_r+0x7c>
 800ec8e:	6560      	str	r0, [r4, #84]	; 0x54
 800ec90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec92:	602f      	str	r7, [r5, #0]
 800ec94:	2900      	cmp	r1, #0
 800ec96:	d0ca      	beq.n	800ec2e <__sflush_r+0x1a>
 800ec98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec9c:	4299      	cmp	r1, r3
 800ec9e:	d002      	beq.n	800eca6 <__sflush_r+0x92>
 800eca0:	4628      	mov	r0, r5
 800eca2:	f7fe ff87 	bl	800dbb4 <_free_r>
 800eca6:	2000      	movs	r0, #0
 800eca8:	6360      	str	r0, [r4, #52]	; 0x34
 800ecaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecae:	6a21      	ldr	r1, [r4, #32]
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	47b0      	blx	r6
 800ecb6:	1c41      	adds	r1, r0, #1
 800ecb8:	d1c6      	bne.n	800ec48 <__sflush_r+0x34>
 800ecba:	682b      	ldr	r3, [r5, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d0c3      	beq.n	800ec48 <__sflush_r+0x34>
 800ecc0:	2b1d      	cmp	r3, #29
 800ecc2:	d001      	beq.n	800ecc8 <__sflush_r+0xb4>
 800ecc4:	2b16      	cmp	r3, #22
 800ecc6:	d101      	bne.n	800eccc <__sflush_r+0xb8>
 800ecc8:	602f      	str	r7, [r5, #0]
 800ecca:	e7b0      	b.n	800ec2e <__sflush_r+0x1a>
 800eccc:	89a3      	ldrh	r3, [r4, #12]
 800ecce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecd2:	81a3      	strh	r3, [r4, #12]
 800ecd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecd8:	690f      	ldr	r7, [r1, #16]
 800ecda:	2f00      	cmp	r7, #0
 800ecdc:	d0a7      	beq.n	800ec2e <__sflush_r+0x1a>
 800ecde:	0793      	lsls	r3, r2, #30
 800ece0:	680e      	ldr	r6, [r1, #0]
 800ece2:	bf08      	it	eq
 800ece4:	694b      	ldreq	r3, [r1, #20]
 800ece6:	600f      	str	r7, [r1, #0]
 800ece8:	bf18      	it	ne
 800ecea:	2300      	movne	r3, #0
 800ecec:	eba6 0807 	sub.w	r8, r6, r7
 800ecf0:	608b      	str	r3, [r1, #8]
 800ecf2:	f1b8 0f00 	cmp.w	r8, #0
 800ecf6:	dd9a      	ble.n	800ec2e <__sflush_r+0x1a>
 800ecf8:	4643      	mov	r3, r8
 800ecfa:	463a      	mov	r2, r7
 800ecfc:	6a21      	ldr	r1, [r4, #32]
 800ecfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ed00:	4628      	mov	r0, r5
 800ed02:	47b0      	blx	r6
 800ed04:	2800      	cmp	r0, #0
 800ed06:	dc07      	bgt.n	800ed18 <__sflush_r+0x104>
 800ed08:	89a3      	ldrh	r3, [r4, #12]
 800ed0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed0e:	81a3      	strh	r3, [r4, #12]
 800ed10:	f04f 30ff 	mov.w	r0, #4294967295
 800ed14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed18:	4407      	add	r7, r0
 800ed1a:	eba8 0800 	sub.w	r8, r8, r0
 800ed1e:	e7e8      	b.n	800ecf2 <__sflush_r+0xde>
 800ed20:	20400001 	.word	0x20400001

0800ed24 <_fflush_r>:
 800ed24:	b538      	push	{r3, r4, r5, lr}
 800ed26:	690b      	ldr	r3, [r1, #16]
 800ed28:	4605      	mov	r5, r0
 800ed2a:	460c      	mov	r4, r1
 800ed2c:	b1db      	cbz	r3, 800ed66 <_fflush_r+0x42>
 800ed2e:	b118      	cbz	r0, 800ed38 <_fflush_r+0x14>
 800ed30:	6983      	ldr	r3, [r0, #24]
 800ed32:	b90b      	cbnz	r3, 800ed38 <_fflush_r+0x14>
 800ed34:	f7ff f974 	bl	800e020 <__sinit>
 800ed38:	4b0c      	ldr	r3, [pc, #48]	; (800ed6c <_fflush_r+0x48>)
 800ed3a:	429c      	cmp	r4, r3
 800ed3c:	d109      	bne.n	800ed52 <_fflush_r+0x2e>
 800ed3e:	686c      	ldr	r4, [r5, #4]
 800ed40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed44:	b17b      	cbz	r3, 800ed66 <_fflush_r+0x42>
 800ed46:	4621      	mov	r1, r4
 800ed48:	4628      	mov	r0, r5
 800ed4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed4e:	f7ff bf61 	b.w	800ec14 <__sflush_r>
 800ed52:	4b07      	ldr	r3, [pc, #28]	; (800ed70 <_fflush_r+0x4c>)
 800ed54:	429c      	cmp	r4, r3
 800ed56:	d101      	bne.n	800ed5c <_fflush_r+0x38>
 800ed58:	68ac      	ldr	r4, [r5, #8]
 800ed5a:	e7f1      	b.n	800ed40 <_fflush_r+0x1c>
 800ed5c:	4b05      	ldr	r3, [pc, #20]	; (800ed74 <_fflush_r+0x50>)
 800ed5e:	429c      	cmp	r4, r3
 800ed60:	bf08      	it	eq
 800ed62:	68ec      	ldreq	r4, [r5, #12]
 800ed64:	e7ec      	b.n	800ed40 <_fflush_r+0x1c>
 800ed66:	2000      	movs	r0, #0
 800ed68:	bd38      	pop	{r3, r4, r5, pc}
 800ed6a:	bf00      	nop
 800ed6c:	080129a8 	.word	0x080129a8
 800ed70:	080129c8 	.word	0x080129c8
 800ed74:	08012988 	.word	0x08012988

0800ed78 <_lseek_r>:
 800ed78:	b538      	push	{r3, r4, r5, lr}
 800ed7a:	4c07      	ldr	r4, [pc, #28]	; (800ed98 <_lseek_r+0x20>)
 800ed7c:	4605      	mov	r5, r0
 800ed7e:	4608      	mov	r0, r1
 800ed80:	4611      	mov	r1, r2
 800ed82:	2200      	movs	r2, #0
 800ed84:	6022      	str	r2, [r4, #0]
 800ed86:	461a      	mov	r2, r3
 800ed88:	f7fe f93a 	bl	800d000 <_lseek>
 800ed8c:	1c43      	adds	r3, r0, #1
 800ed8e:	d102      	bne.n	800ed96 <_lseek_r+0x1e>
 800ed90:	6823      	ldr	r3, [r4, #0]
 800ed92:	b103      	cbz	r3, 800ed96 <_lseek_r+0x1e>
 800ed94:	602b      	str	r3, [r5, #0]
 800ed96:	bd38      	pop	{r3, r4, r5, pc}
 800ed98:	2000a528 	.word	0x2000a528

0800ed9c <__swhatbuf_r>:
 800ed9c:	b570      	push	{r4, r5, r6, lr}
 800ed9e:	460e      	mov	r6, r1
 800eda0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eda4:	2900      	cmp	r1, #0
 800eda6:	b090      	sub	sp, #64	; 0x40
 800eda8:	4614      	mov	r4, r2
 800edaa:	461d      	mov	r5, r3
 800edac:	da07      	bge.n	800edbe <__swhatbuf_r+0x22>
 800edae:	2300      	movs	r3, #0
 800edb0:	602b      	str	r3, [r5, #0]
 800edb2:	89b3      	ldrh	r3, [r6, #12]
 800edb4:	061a      	lsls	r2, r3, #24
 800edb6:	d410      	bmi.n	800edda <__swhatbuf_r+0x3e>
 800edb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800edbc:	e00e      	b.n	800eddc <__swhatbuf_r+0x40>
 800edbe:	aa01      	add	r2, sp, #4
 800edc0:	f000 f8a2 	bl	800ef08 <_fstat_r>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	dbf2      	blt.n	800edae <__swhatbuf_r+0x12>
 800edc8:	9a02      	ldr	r2, [sp, #8]
 800edca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800edce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800edd2:	425a      	negs	r2, r3
 800edd4:	415a      	adcs	r2, r3
 800edd6:	602a      	str	r2, [r5, #0]
 800edd8:	e7ee      	b.n	800edb8 <__swhatbuf_r+0x1c>
 800edda:	2340      	movs	r3, #64	; 0x40
 800eddc:	2000      	movs	r0, #0
 800edde:	6023      	str	r3, [r4, #0]
 800ede0:	b010      	add	sp, #64	; 0x40
 800ede2:	bd70      	pop	{r4, r5, r6, pc}

0800ede4 <__smakebuf_r>:
 800ede4:	898b      	ldrh	r3, [r1, #12]
 800ede6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ede8:	079d      	lsls	r5, r3, #30
 800edea:	4606      	mov	r6, r0
 800edec:	460c      	mov	r4, r1
 800edee:	d507      	bpl.n	800ee00 <__smakebuf_r+0x1c>
 800edf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800edf4:	6023      	str	r3, [r4, #0]
 800edf6:	6123      	str	r3, [r4, #16]
 800edf8:	2301      	movs	r3, #1
 800edfa:	6163      	str	r3, [r4, #20]
 800edfc:	b002      	add	sp, #8
 800edfe:	bd70      	pop	{r4, r5, r6, pc}
 800ee00:	ab01      	add	r3, sp, #4
 800ee02:	466a      	mov	r2, sp
 800ee04:	f7ff ffca 	bl	800ed9c <__swhatbuf_r>
 800ee08:	9900      	ldr	r1, [sp, #0]
 800ee0a:	4605      	mov	r5, r0
 800ee0c:	4630      	mov	r0, r6
 800ee0e:	f7fe ff1f 	bl	800dc50 <_malloc_r>
 800ee12:	b948      	cbnz	r0, 800ee28 <__smakebuf_r+0x44>
 800ee14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee18:	059a      	lsls	r2, r3, #22
 800ee1a:	d4ef      	bmi.n	800edfc <__smakebuf_r+0x18>
 800ee1c:	f023 0303 	bic.w	r3, r3, #3
 800ee20:	f043 0302 	orr.w	r3, r3, #2
 800ee24:	81a3      	strh	r3, [r4, #12]
 800ee26:	e7e3      	b.n	800edf0 <__smakebuf_r+0xc>
 800ee28:	4b0d      	ldr	r3, [pc, #52]	; (800ee60 <__smakebuf_r+0x7c>)
 800ee2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ee2c:	89a3      	ldrh	r3, [r4, #12]
 800ee2e:	6020      	str	r0, [r4, #0]
 800ee30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee34:	81a3      	strh	r3, [r4, #12]
 800ee36:	9b00      	ldr	r3, [sp, #0]
 800ee38:	6163      	str	r3, [r4, #20]
 800ee3a:	9b01      	ldr	r3, [sp, #4]
 800ee3c:	6120      	str	r0, [r4, #16]
 800ee3e:	b15b      	cbz	r3, 800ee58 <__smakebuf_r+0x74>
 800ee40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee44:	4630      	mov	r0, r6
 800ee46:	f000 f871 	bl	800ef2c <_isatty_r>
 800ee4a:	b128      	cbz	r0, 800ee58 <__smakebuf_r+0x74>
 800ee4c:	89a3      	ldrh	r3, [r4, #12]
 800ee4e:	f023 0303 	bic.w	r3, r3, #3
 800ee52:	f043 0301 	orr.w	r3, r3, #1
 800ee56:	81a3      	strh	r3, [r4, #12]
 800ee58:	89a3      	ldrh	r3, [r4, #12]
 800ee5a:	431d      	orrs	r5, r3
 800ee5c:	81a5      	strh	r5, [r4, #12]
 800ee5e:	e7cd      	b.n	800edfc <__smakebuf_r+0x18>
 800ee60:	0800dfa1 	.word	0x0800dfa1

0800ee64 <memmove>:
 800ee64:	4288      	cmp	r0, r1
 800ee66:	b510      	push	{r4, lr}
 800ee68:	eb01 0302 	add.w	r3, r1, r2
 800ee6c:	d803      	bhi.n	800ee76 <memmove+0x12>
 800ee6e:	1e42      	subs	r2, r0, #1
 800ee70:	4299      	cmp	r1, r3
 800ee72:	d10c      	bne.n	800ee8e <memmove+0x2a>
 800ee74:	bd10      	pop	{r4, pc}
 800ee76:	4298      	cmp	r0, r3
 800ee78:	d2f9      	bcs.n	800ee6e <memmove+0xa>
 800ee7a:	1881      	adds	r1, r0, r2
 800ee7c:	1ad2      	subs	r2, r2, r3
 800ee7e:	42d3      	cmn	r3, r2
 800ee80:	d100      	bne.n	800ee84 <memmove+0x20>
 800ee82:	bd10      	pop	{r4, pc}
 800ee84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee88:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ee8c:	e7f7      	b.n	800ee7e <memmove+0x1a>
 800ee8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee92:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ee96:	e7eb      	b.n	800ee70 <memmove+0xc>

0800ee98 <_realloc_r>:
 800ee98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee9a:	4607      	mov	r7, r0
 800ee9c:	4614      	mov	r4, r2
 800ee9e:	460e      	mov	r6, r1
 800eea0:	b921      	cbnz	r1, 800eeac <_realloc_r+0x14>
 800eea2:	4611      	mov	r1, r2
 800eea4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eea8:	f7fe bed2 	b.w	800dc50 <_malloc_r>
 800eeac:	b922      	cbnz	r2, 800eeb8 <_realloc_r+0x20>
 800eeae:	f7fe fe81 	bl	800dbb4 <_free_r>
 800eeb2:	4625      	mov	r5, r4
 800eeb4:	4628      	mov	r0, r5
 800eeb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eeb8:	f000 f848 	bl	800ef4c <_malloc_usable_size_r>
 800eebc:	4284      	cmp	r4, r0
 800eebe:	d90f      	bls.n	800eee0 <_realloc_r+0x48>
 800eec0:	4621      	mov	r1, r4
 800eec2:	4638      	mov	r0, r7
 800eec4:	f7fe fec4 	bl	800dc50 <_malloc_r>
 800eec8:	4605      	mov	r5, r0
 800eeca:	2800      	cmp	r0, #0
 800eecc:	d0f2      	beq.n	800eeb4 <_realloc_r+0x1c>
 800eece:	4631      	mov	r1, r6
 800eed0:	4622      	mov	r2, r4
 800eed2:	f7fe fe5c 	bl	800db8e <memcpy>
 800eed6:	4631      	mov	r1, r6
 800eed8:	4638      	mov	r0, r7
 800eeda:	f7fe fe6b 	bl	800dbb4 <_free_r>
 800eede:	e7e9      	b.n	800eeb4 <_realloc_r+0x1c>
 800eee0:	4635      	mov	r5, r6
 800eee2:	e7e7      	b.n	800eeb4 <_realloc_r+0x1c>

0800eee4 <_read_r>:
 800eee4:	b538      	push	{r3, r4, r5, lr}
 800eee6:	4c07      	ldr	r4, [pc, #28]	; (800ef04 <_read_r+0x20>)
 800eee8:	4605      	mov	r5, r0
 800eeea:	4608      	mov	r0, r1
 800eeec:	4611      	mov	r1, r2
 800eeee:	2200      	movs	r2, #0
 800eef0:	6022      	str	r2, [r4, #0]
 800eef2:	461a      	mov	r2, r3
 800eef4:	f7fe f852 	bl	800cf9c <_read>
 800eef8:	1c43      	adds	r3, r0, #1
 800eefa:	d102      	bne.n	800ef02 <_read_r+0x1e>
 800eefc:	6823      	ldr	r3, [r4, #0]
 800eefe:	b103      	cbz	r3, 800ef02 <_read_r+0x1e>
 800ef00:	602b      	str	r3, [r5, #0]
 800ef02:	bd38      	pop	{r3, r4, r5, pc}
 800ef04:	2000a528 	.word	0x2000a528

0800ef08 <_fstat_r>:
 800ef08:	b538      	push	{r3, r4, r5, lr}
 800ef0a:	4c07      	ldr	r4, [pc, #28]	; (800ef28 <_fstat_r+0x20>)
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	4605      	mov	r5, r0
 800ef10:	4608      	mov	r0, r1
 800ef12:	4611      	mov	r1, r2
 800ef14:	6023      	str	r3, [r4, #0]
 800ef16:	f7fe f86c 	bl	800cff2 <_fstat>
 800ef1a:	1c43      	adds	r3, r0, #1
 800ef1c:	d102      	bne.n	800ef24 <_fstat_r+0x1c>
 800ef1e:	6823      	ldr	r3, [r4, #0]
 800ef20:	b103      	cbz	r3, 800ef24 <_fstat_r+0x1c>
 800ef22:	602b      	str	r3, [r5, #0]
 800ef24:	bd38      	pop	{r3, r4, r5, pc}
 800ef26:	bf00      	nop
 800ef28:	2000a528 	.word	0x2000a528

0800ef2c <_isatty_r>:
 800ef2c:	b538      	push	{r3, r4, r5, lr}
 800ef2e:	4c06      	ldr	r4, [pc, #24]	; (800ef48 <_isatty_r+0x1c>)
 800ef30:	2300      	movs	r3, #0
 800ef32:	4605      	mov	r5, r0
 800ef34:	4608      	mov	r0, r1
 800ef36:	6023      	str	r3, [r4, #0]
 800ef38:	f7fe f860 	bl	800cffc <_isatty>
 800ef3c:	1c43      	adds	r3, r0, #1
 800ef3e:	d102      	bne.n	800ef46 <_isatty_r+0x1a>
 800ef40:	6823      	ldr	r3, [r4, #0]
 800ef42:	b103      	cbz	r3, 800ef46 <_isatty_r+0x1a>
 800ef44:	602b      	str	r3, [r5, #0]
 800ef46:	bd38      	pop	{r3, r4, r5, pc}
 800ef48:	2000a528 	.word	0x2000a528

0800ef4c <_malloc_usable_size_r>:
 800ef4c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800ef50:	2800      	cmp	r0, #0
 800ef52:	f1a0 0004 	sub.w	r0, r0, #4
 800ef56:	bfbc      	itt	lt
 800ef58:	580b      	ldrlt	r3, [r1, r0]
 800ef5a:	18c0      	addlt	r0, r0, r3
 800ef5c:	4770      	bx	lr
	...

0800ef60 <_init>:
 800ef60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef62:	bf00      	nop
 800ef64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef66:	bc08      	pop	{r3}
 800ef68:	469e      	mov	lr, r3
 800ef6a:	4770      	bx	lr

0800ef6c <_fini>:
 800ef6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef6e:	bf00      	nop
 800ef70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef72:	bc08      	pop	{r3}
 800ef74:	469e      	mov	lr, r3
 800ef76:	4770      	bx	lr
