
sources_expliques.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b60  0800eddc  0800eddc  0001eddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801293c  0801293c  0002293c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012944  08012944  00022944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012948  08012948  00022948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000078c  20000000  0801294c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0003078c  2**0
                  CONTENTS
  8 .bss          00009d7c  20000790  20000790  00030790  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  2000a50c  2000a50c  00030790  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003078c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00050bbb  00000000  00000000  000307bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000aa53  00000000  00000000  00081377  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001cede  00000000  00000000  0008bdca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f20  00000000  00000000  000a8ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002ec0  00000000  00000000  000aabc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001526a  00000000  00000000  000ada88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000b34b  00000000  00000000  000c2cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000ce03d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000069f4  00000000  00000000  000ce0bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000790 	.word	0x20000790
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800edc4 	.word	0x0800edc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000794 	.word	0x20000794
 80001cc:	0800edc4 	.word	0x0800edc4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_d2iz>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b4c:	d215      	bcs.n	8000b7a <__aeabi_d2iz+0x36>
 8000b4e:	d511      	bpl.n	8000b74 <__aeabi_d2iz+0x30>
 8000b50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b58:	d912      	bls.n	8000b80 <__aeabi_d2iz+0x3c>
 8000b5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d105      	bne.n	8000b8c <__aeabi_d2iz+0x48>
 8000b80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	bf08      	it	eq
 8000b86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <__aeabi_d2uiz>:
 8000b94:	004a      	lsls	r2, r1, #1
 8000b96:	d211      	bcs.n	8000bbc <__aeabi_d2uiz+0x28>
 8000b98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b9c:	d211      	bcs.n	8000bc2 <__aeabi_d2uiz+0x2e>
 8000b9e:	d50d      	bpl.n	8000bbc <__aeabi_d2uiz+0x28>
 8000ba0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba8:	d40e      	bmi.n	8000bc8 <__aeabi_d2uiz+0x34>
 8000baa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d102      	bne.n	8000bce <__aeabi_d2uiz+0x3a>
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	4770      	bx	lr
 8000bce:	f04f 0000 	mov.w	r0, #0
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_uldivmod>:
 8000bd4:	b953      	cbnz	r3, 8000bec <__aeabi_uldivmod+0x18>
 8000bd6:	b94a      	cbnz	r2, 8000bec <__aeabi_uldivmod+0x18>
 8000bd8:	2900      	cmp	r1, #0
 8000bda:	bf08      	it	eq
 8000bdc:	2800      	cmpeq	r0, #0
 8000bde:	bf1c      	itt	ne
 8000be0:	f04f 31ff 	movne.w	r1, #4294967295
 8000be4:	f04f 30ff 	movne.w	r0, #4294967295
 8000be8:	f000 b97a 	b.w	8000ee0 <__aeabi_idiv0>
 8000bec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf4:	f000 f806 	bl	8000c04 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4770      	bx	lr

08000c04 <__udivmoddi4>:
 8000c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c08:	468c      	mov	ip, r1
 8000c0a:	460d      	mov	r5, r1
 8000c0c:	4604      	mov	r4, r0
 8000c0e:	9e08      	ldr	r6, [sp, #32]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d151      	bne.n	8000cb8 <__udivmoddi4+0xb4>
 8000c14:	428a      	cmp	r2, r1
 8000c16:	4617      	mov	r7, r2
 8000c18:	d96d      	bls.n	8000cf6 <__udivmoddi4+0xf2>
 8000c1a:	fab2 fe82 	clz	lr, r2
 8000c1e:	f1be 0f00 	cmp.w	lr, #0
 8000c22:	d00b      	beq.n	8000c3c <__udivmoddi4+0x38>
 8000c24:	f1ce 0c20 	rsb	ip, lr, #32
 8000c28:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c2c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c30:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c34:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c38:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c3c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c40:	0c25      	lsrs	r5, r4, #16
 8000c42:	fbbc f8fa 	udiv	r8, ip, sl
 8000c46:	fa1f f987 	uxth.w	r9, r7
 8000c4a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c4e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c52:	fb08 f309 	mul.w	r3, r8, r9
 8000c56:	42ab      	cmp	r3, r5
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x6c>
 8000c5a:	19ed      	adds	r5, r5, r7
 8000c5c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c60:	f080 8123 	bcs.w	8000eaa <__udivmoddi4+0x2a6>
 8000c64:	42ab      	cmp	r3, r5
 8000c66:	f240 8120 	bls.w	8000eaa <__udivmoddi4+0x2a6>
 8000c6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6e:	443d      	add	r5, r7
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c78:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c80:	fb00 f909 	mul.w	r9, r0, r9
 8000c84:	45a1      	cmp	r9, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x98>
 8000c88:	19e4      	adds	r4, r4, r7
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	f080 810a 	bcs.w	8000ea6 <__udivmoddi4+0x2a2>
 8000c92:	45a1      	cmp	r9, r4
 8000c94:	f240 8107 	bls.w	8000ea6 <__udivmoddi4+0x2a2>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	443c      	add	r4, r7
 8000c9c:	eba4 0409 	sub.w	r4, r4, r9
 8000ca0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d061      	beq.n	8000d6e <__udivmoddi4+0x16a>
 8000caa:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cae:	2300      	movs	r3, #0
 8000cb0:	6034      	str	r4, [r6, #0]
 8000cb2:	6073      	str	r3, [r6, #4]
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xc8>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d054      	beq.n	8000d6a <__udivmoddi4+0x166>
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ccc:	fab3 f183 	clz	r1, r3
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	f040 808e 	bne.w	8000df2 <__udivmoddi4+0x1ee>
 8000cd6:	42ab      	cmp	r3, r5
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xdc>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2d0>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb65 0503 	sbc.w	r5, r5, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	46ac      	mov	ip, r5
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d03f      	beq.n	8000d6e <__udivmoddi4+0x16a>
 8000cee:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	b912      	cbnz	r2, 8000cfe <__udivmoddi4+0xfa>
 8000cf8:	2701      	movs	r7, #1
 8000cfa:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cfe:	fab7 fe87 	clz	lr, r7
 8000d02:	f1be 0f00 	cmp.w	lr, #0
 8000d06:	d134      	bne.n	8000d72 <__udivmoddi4+0x16e>
 8000d08:	1beb      	subs	r3, r5, r7
 8000d0a:	0c3a      	lsrs	r2, r7, #16
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d16:	0c25      	lsrs	r5, r4, #16
 8000d18:	fb02 3318 	mls	r3, r2, r8, r3
 8000d1c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d20:	fb0c f308 	mul.w	r3, ip, r8
 8000d24:	42ab      	cmp	r3, r5
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x134>
 8000d28:	19ed      	adds	r5, r5, r7
 8000d2a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x132>
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	f200 80d1 	bhi.w	8000ed8 <__udivmoddi4+0x2d4>
 8000d36:	4680      	mov	r8, r0
 8000d38:	1aed      	subs	r5, r5, r3
 8000d3a:	b2a3      	uxth	r3, r4
 8000d3c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d40:	fb02 5510 	mls	r5, r2, r0, r5
 8000d44:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d48:	fb0c fc00 	mul.w	ip, ip, r0
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x15c>
 8000d50:	19e4      	adds	r4, r4, r7
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x15a>
 8000d58:	45a4      	cmp	ip, r4
 8000d5a:	f200 80b8 	bhi.w	8000ece <__udivmoddi4+0x2ca>
 8000d5e:	4618      	mov	r0, r3
 8000d60:	eba4 040c 	sub.w	r4, r4, ip
 8000d64:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d68:	e79d      	b.n	8000ca6 <__udivmoddi4+0xa2>
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	f1ce 0420 	rsb	r4, lr, #32
 8000d76:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d7a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d7e:	fa20 f804 	lsr.w	r8, r0, r4
 8000d82:	0c3a      	lsrs	r2, r7, #16
 8000d84:	fa25 f404 	lsr.w	r4, r5, r4
 8000d88:	ea48 0803 	orr.w	r8, r8, r3
 8000d8c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d90:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d94:	fb02 4411 	mls	r4, r2, r1, r4
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000da0:	fb01 f30c 	mul.w	r3, r1, ip
 8000da4:	42ab      	cmp	r3, r5
 8000da6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x1bc>
 8000dac:	19ed      	adds	r5, r5, r7
 8000dae:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db2:	f080 808a 	bcs.w	8000eca <__udivmoddi4+0x2c6>
 8000db6:	42ab      	cmp	r3, r5
 8000db8:	f240 8087 	bls.w	8000eca <__udivmoddi4+0x2c6>
 8000dbc:	3902      	subs	r1, #2
 8000dbe:	443d      	add	r5, r7
 8000dc0:	1aeb      	subs	r3, r5, r3
 8000dc2:	fa1f f588 	uxth.w	r5, r8
 8000dc6:	fbb3 f0f2 	udiv	r0, r3, r2
 8000dca:	fb02 3310 	mls	r3, r2, r0, r3
 8000dce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dd2:	fb00 f30c 	mul.w	r3, r0, ip
 8000dd6:	42ab      	cmp	r3, r5
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1e6>
 8000dda:	19ed      	adds	r5, r5, r7
 8000ddc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de0:	d26f      	bcs.n	8000ec2 <__udivmoddi4+0x2be>
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	d96d      	bls.n	8000ec2 <__udivmoddi4+0x2be>
 8000de6:	3802      	subs	r0, #2
 8000de8:	443d      	add	r5, r7
 8000dea:	1aeb      	subs	r3, r5, r3
 8000dec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df0:	e78f      	b.n	8000d12 <__udivmoddi4+0x10e>
 8000df2:	f1c1 0720 	rsb	r7, r1, #32
 8000df6:	fa22 f807 	lsr.w	r8, r2, r7
 8000dfa:	408b      	lsls	r3, r1
 8000dfc:	fa05 f401 	lsl.w	r4, r5, r1
 8000e00:	ea48 0303 	orr.w	r3, r8, r3
 8000e04:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e08:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e0c:	40fd      	lsrs	r5, r7
 8000e0e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e12:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e16:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e1a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e1e:	fa1f f883 	uxth.w	r8, r3
 8000e22:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e26:	fb09 f408 	mul.w	r4, r9, r8
 8000e2a:	42ac      	cmp	r4, r5
 8000e2c:	fa02 f201 	lsl.w	r2, r2, r1
 8000e30:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x244>
 8000e36:	18ed      	adds	r5, r5, r3
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d243      	bcs.n	8000ec6 <__udivmoddi4+0x2c2>
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	d941      	bls.n	8000ec6 <__udivmoddi4+0x2c2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	441d      	add	r5, r3
 8000e48:	1b2d      	subs	r5, r5, r4
 8000e4a:	fa1f fe8e 	uxth.w	lr, lr
 8000e4e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e52:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e56:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45a0      	cmp	r8, r4
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x26e>
 8000e62:	18e4      	adds	r4, r4, r3
 8000e64:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e68:	d229      	bcs.n	8000ebe <__udivmoddi4+0x2ba>
 8000e6a:	45a0      	cmp	r8, r4
 8000e6c:	d927      	bls.n	8000ebe <__udivmoddi4+0x2ba>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	441c      	add	r4, r3
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba4 0408 	sub.w	r4, r4, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	464d      	mov	r5, r9
 8000e84:	d315      	bcc.n	8000eb2 <__udivmoddi4+0x2ae>
 8000e86:	d012      	beq.n	8000eae <__udivmoddi4+0x2aa>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x29c>
 8000e8a:	ebba 030e 	subs.w	r3, sl, lr
 8000e8e:	eb64 0405 	sbc.w	r4, r4, r5
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40cb      	lsrs	r3, r1
 8000e98:	431f      	orrs	r7, r3
 8000e9a:	40cc      	lsrs	r4, r1
 8000e9c:	6037      	str	r7, [r6, #0]
 8000e9e:	6074      	str	r4, [r6, #4]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	e6f8      	b.n	8000c9c <__udivmoddi4+0x98>
 8000eaa:	4690      	mov	r8, r2
 8000eac:	e6e0      	b.n	8000c70 <__udivmoddi4+0x6c>
 8000eae:	45c2      	cmp	sl, r8
 8000eb0:	d2ea      	bcs.n	8000e88 <__udivmoddi4+0x284>
 8000eb2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb6:	eb69 0503 	sbc.w	r5, r9, r3
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7e4      	b.n	8000e88 <__udivmoddi4+0x284>
 8000ebe:	4628      	mov	r0, r5
 8000ec0:	e7d7      	b.n	8000e72 <__udivmoddi4+0x26e>
 8000ec2:	4640      	mov	r0, r8
 8000ec4:	e791      	b.n	8000dea <__udivmoddi4+0x1e6>
 8000ec6:	4681      	mov	r9, r0
 8000ec8:	e7be      	b.n	8000e48 <__udivmoddi4+0x244>
 8000eca:	4601      	mov	r1, r0
 8000ecc:	e778      	b.n	8000dc0 <__udivmoddi4+0x1bc>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	443c      	add	r4, r7
 8000ed2:	e745      	b.n	8000d60 <__udivmoddi4+0x15c>
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xe6>
 8000ed8:	f1a8 0802 	sub.w	r8, r8, #2
 8000edc:	443d      	add	r5, r7
 8000ede:	e72b      	b.n	8000d38 <__udivmoddi4+0x134>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <HAL_InitTick+0x3c>)
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_InitTick+0x40>)
{
 8000eea:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eec:	7818      	ldrb	r0, [r3, #0]
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ef6:	6810      	ldr	r0, [r2, #0]
 8000ef8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000efc:	f000 fa6e 	bl	80013dc <HAL_SYSTICK_Config>
 8000f00:	4604      	mov	r4, r0
 8000f02:	b958      	cbnz	r0, 8000f1c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f04:	2d0f      	cmp	r5, #15
 8000f06:	d809      	bhi.n	8000f1c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f08:	4602      	mov	r2, r0
 8000f0a:	4629      	mov	r1, r5
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f000 fa22 	bl	8001358 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_InitTick+0x44>)
 8000f16:	4620      	mov	r0, r4
 8000f18:	601d      	str	r5, [r3, #0]
 8000f1a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f1c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f1e:	bd38      	pop	{r3, r4, r5, pc}
 8000f20:	200005b4 	.word	0x200005b4
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000004 	.word	0x20000004

08000f2c <HAL_Init>:
{
 8000f2c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_Init+0x30>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f36:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f3e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f46:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f000 f9f3 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ffc8 	bl	8000ee4 <HAL_InitTick>
  HAL_MspInit();
 8000f54:	f00b fcf2 	bl	800c93c <HAL_MspInit>
}
 8000f58:	2000      	movs	r0, #0
 8000f5a:	bd08      	pop	{r3, pc}
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f60:	4a03      	ldr	r2, [pc, #12]	; (8000f70 <HAL_IncTick+0x10>)
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <HAL_IncTick+0x14>)
 8000f64:	6811      	ldr	r1, [r2, #0]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	440b      	add	r3, r1
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20001ac4 	.word	0x20001ac4
 8000f74:	20000000 	.word	0x20000000

08000f78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f78:	4b01      	ldr	r3, [pc, #4]	; (8000f80 <HAL_GetTick+0x8>)
 8000f7a:	6818      	ldr	r0, [r3, #0]
}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20001ac4 	.word	0x20001ac4

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b538      	push	{r3, r4, r5, lr}
 8000f86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff fff6 	bl	8000f78 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	bf1c      	itt	ne
 8000f90:	4b05      	ldrne	r3, [pc, #20]	; (8000fa8 <HAL_Delay+0x24>)
 8000f92:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000f96:	bf18      	it	ne
 8000f98:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9a:	f7ff ffed 	bl	8000f78 <HAL_GetTick>
 8000f9e:	1b40      	subs	r0, r0, r5
 8000fa0:	4284      	cmp	r4, r0
 8000fa2:	d8fa      	bhi.n	8000f9a <HAL_Delay+0x16>
  {
  }
}
 8000fa4:	bd38      	pop	{r3, r4, r5, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000000 	.word	0x20000000

08000fac <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8000fac:	4b01      	ldr	r3, [pc, #4]	; (8000fb4 <HAL_GetUIDw0+0x8>)
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	1fff7a10 	.word	0x1fff7a10

08000fb8 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8000fb8:	4b01      	ldr	r3, [pc, #4]	; (8000fc0 <HAL_GetUIDw1+0x8>)
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	1fff7a14 	.word	0x1fff7a14

08000fc4 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8000fc4:	4b01      	ldr	r3, [pc, #4]	; (8000fcc <HAL_GetUIDw2+0x8>)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	1fff7a18 	.word	0x1fff7a18

08000fd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fd0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	f000 809b 	beq.w	8001110 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fda:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000fdc:	b925      	cbnz	r5, 8000fe8 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fde:	f00b fcc9 	bl	800c974 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe2:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fe4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fea:	06db      	lsls	r3, r3, #27
 8000fec:	f100 808e 	bmi.w	800110c <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ff2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ff6:	f023 0302 	bic.w	r3, r3, #2
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001000:	4b44      	ldr	r3, [pc, #272]	; (8001114 <HAL_ADC_Init+0x144>)
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001008:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	6861      	ldr	r1, [r4, #4]
 800100e:	430a      	orrs	r2, r1
 8001010:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001012:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001014:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800101c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001024:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001026:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001028:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800102a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800102e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	430a      	orrs	r2, r1
 8001034:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001036:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001038:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800103a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800103e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	430a      	orrs	r2, r1
 8001044:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001046:	4934      	ldr	r1, [pc, #208]	; (8001118 <HAL_ADC_Init+0x148>)
 8001048:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800104a:	428a      	cmp	r2, r1
 800104c:	d052      	beq.n	80010f4 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800104e:	6899      	ldr	r1, [r3, #8]
 8001050:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001054:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001056:	6899      	ldr	r1, [r3, #8]
 8001058:	430a      	orrs	r2, r1
 800105a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800105c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800105e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001060:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001064:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800106a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800106c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800106e:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001070:	f022 0202 	bic.w	r2, r2, #2
 8001074:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800107c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800107e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001082:	2a00      	cmp	r2, #0
 8001084:	d03e      	beq.n	8001104 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001086:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001088:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800108a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800108e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001096:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	3901      	subs	r1, #1
 800109c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010a0:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010a4:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ae:	3901      	subs	r1, #1
 80010b0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80010b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010b6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010b8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80010c8:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010ca:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010cc:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010d4:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010d6:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010d8:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80010dc:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010de:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80010e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010e2:	f023 0303 	bic.w	r3, r3, #3
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80010ec:	2300      	movs	r3, #0
 80010ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80010f2:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001102:	e7b2      	b.n	800106a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800110a:	e7c9      	b.n	80010a0 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800110c:	2001      	movs	r0, #1
 800110e:	e7ed      	b.n	80010ec <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001110:	2001      	movs	r0, #1
}
 8001112:	bd38      	pop	{r3, r4, r5, pc}
 8001114:	40012300 	.word	0x40012300
 8001118:	0f000001 	.word	0x0f000001

0800111c <HAL_ADC_Start>:
{
 800111c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800111e:	2300      	movs	r3, #0
 8001120:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001122:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001126:	2b01      	cmp	r3, #1
 8001128:	d061      	beq.n	80011ee <HAL_ADC_Start+0xd2>
 800112a:	2301      	movs	r3, #1
 800112c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001130:	6803      	ldr	r3, [r0, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	07d1      	lsls	r1, r2, #31
 8001136:	d505      	bpl.n	8001144 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	07d2      	lsls	r2, r2, #31
 800113c:	d414      	bmi.n	8001168 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 800113e:	2000      	movs	r0, #0
}
 8001140:	b002      	add	sp, #8
 8001142:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8001144:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001146:	492b      	ldr	r1, [pc, #172]	; (80011f4 <HAL_ADC_Start+0xd8>)
    __HAL_ADC_ENABLE(hadc);
 8001148:	f042 0201 	orr.w	r2, r2, #1
 800114c:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800114e:	4a2a      	ldr	r2, [pc, #168]	; (80011f8 <HAL_ADC_Start+0xdc>)
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	fbb2 f2f1 	udiv	r2, r2, r1
 8001156:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 800115a:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 800115c:	9a01      	ldr	r2, [sp, #4]
 800115e:	2a00      	cmp	r2, #0
 8001160:	d0ea      	beq.n	8001138 <HAL_ADC_Start+0x1c>
      counter--;
 8001162:	9a01      	ldr	r2, [sp, #4]
 8001164:	3a01      	subs	r2, #1
 8001166:	e7f8      	b.n	800115a <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8001168:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800116a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001176:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117c:	bf41      	itttt	mi
 800117e:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8001180:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001184:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001188:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800118c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001190:	bf1c      	itt	ne
 8001192:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8001194:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001198:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800119a:	2200      	movs	r2, #0
 800119c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011a4:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011a6:	4a15      	ldr	r2, [pc, #84]	; (80011fc <HAL_ADC_Start+0xe0>)
 80011a8:	6851      	ldr	r1, [r2, #4]
 80011aa:	f011 0f1f 	tst.w	r1, #31
 80011ae:	4914      	ldr	r1, [pc, #80]	; (8001200 <HAL_ADC_Start+0xe4>)
 80011b0:	d11a      	bne.n	80011e8 <HAL_ADC_Start+0xcc>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011b2:	428b      	cmp	r3, r1
 80011b4:	d006      	beq.n	80011c4 <HAL_ADC_Start+0xa8>
 80011b6:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80011ba:	428b      	cmp	r3, r1
 80011bc:	d10b      	bne.n	80011d6 <HAL_ADC_Start+0xba>
 80011be:	6852      	ldr	r2, [r2, #4]
 80011c0:	06d2      	lsls	r2, r2, #27
 80011c2:	d1bc      	bne.n	800113e <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011c4:	6898      	ldr	r0, [r3, #8]
 80011c6:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80011ca:	d1b8      	bne.n	800113e <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	e7b4      	b.n	8001140 <HAL_ADC_Start+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011d6:	490b      	ldr	r1, [pc, #44]	; (8001204 <HAL_ADC_Start+0xe8>)
 80011d8:	428b      	cmp	r3, r1
 80011da:	d1b0      	bne.n	800113e <HAL_ADC_Start+0x22>
 80011dc:	6852      	ldr	r2, [r2, #4]
 80011de:	f002 021f 	and.w	r2, r2, #31
 80011e2:	2a0f      	cmp	r2, #15
 80011e4:	d9ee      	bls.n	80011c4 <HAL_ADC_Start+0xa8>
 80011e6:	e7aa      	b.n	800113e <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011e8:	428b      	cmp	r3, r1
 80011ea:	d1a8      	bne.n	800113e <HAL_ADC_Start+0x22>
 80011ec:	e7ea      	b.n	80011c4 <HAL_ADC_Start+0xa8>
  __HAL_LOCK(hadc);
 80011ee:	2002      	movs	r0, #2
 80011f0:	e7a6      	b.n	8001140 <HAL_ADC_Start+0x24>
 80011f2:	bf00      	nop
 80011f4:	000f4240 	.word	0x000f4240
 80011f8:	200005b4 	.word	0x200005b4
 80011fc:	40012300 	.word	0x40012300
 8001200:	40012000 	.word	0x40012000
 8001204:	40012200 	.word	0x40012200

08001208 <HAL_ADC_ConfigChannel>:
{
 8001208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800120e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001212:	2b01      	cmp	r3, #1
 8001214:	f000 8083 	beq.w	800131e <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001218:	680d      	ldr	r5, [r1, #0]
 800121a:	6804      	ldr	r4, [r0, #0]
 800121c:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800121e:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001220:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001222:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8001226:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001228:	d92a      	bls.n	8001280 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800122a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800122e:	68e7      	ldr	r7, [r4, #12]
 8001230:	3b1e      	subs	r3, #30
 8001232:	f04f 0e07 	mov.w	lr, #7
 8001236:	fa0e fe03 	lsl.w	lr, lr, r3
 800123a:	ea27 070e 	bic.w	r7, r7, lr
 800123e:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001240:	68e7      	ldr	r7, [r4, #12]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	433b      	orrs	r3, r7
 8001248:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800124a:	684a      	ldr	r2, [r1, #4]
 800124c:	2a06      	cmp	r2, #6
 800124e:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8001252:	d825      	bhi.n	80012a0 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001254:	4413      	add	r3, r2
 8001256:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001258:	1f59      	subs	r1, r3, #5
 800125a:	231f      	movs	r3, #31
 800125c:	408b      	lsls	r3, r1
 800125e:	ea27 0303 	bic.w	r3, r7, r3
 8001262:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001264:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001266:	fa06 f101 	lsl.w	r1, r6, r1
 800126a:	4311      	orrs	r1, r2
 800126c:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800126e:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <HAL_ADC_ConfigChannel+0x11c>)
 8001270:	429c      	cmp	r4, r3
 8001272:	d034      	beq.n	80012de <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8001274:	2300      	movs	r3, #0
 8001276:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800127a:	4618      	mov	r0, r3
}
 800127c:	b003      	add	sp, #12
 800127e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001280:	6927      	ldr	r7, [r4, #16]
 8001282:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001286:	f04f 0e07 	mov.w	lr, #7
 800128a:	fa0e fe03 	lsl.w	lr, lr, r3
 800128e:	ea27 070e 	bic.w	r7, r7, lr
 8001292:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001294:	6927      	ldr	r7, [r4, #16]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	433b      	orrs	r3, r7
 800129c:	6123      	str	r3, [r4, #16]
 800129e:	e7d4      	b.n	800124a <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80012a0:	2a0c      	cmp	r2, #12
 80012a2:	d80e      	bhi.n	80012c2 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012a4:	4413      	add	r3, r2
 80012a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80012a8:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80012ac:	231f      	movs	r3, #31
 80012ae:	4093      	lsls	r3, r2
 80012b0:	ea21 0303 	bic.w	r3, r1, r3
 80012b4:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012b8:	fa06 f202 	lsl.w	r2, r6, r2
 80012bc:	431a      	orrs	r2, r3
 80012be:	6322      	str	r2, [r4, #48]	; 0x30
 80012c0:	e7d5      	b.n	800126e <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012c2:	4413      	add	r3, r2
 80012c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80012c6:	3b41      	subs	r3, #65	; 0x41
 80012c8:	221f      	movs	r2, #31
 80012ca:	409a      	lsls	r2, r3
 80012cc:	ea21 0202 	bic.w	r2, r1, r2
 80012d0:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012d4:	fa06 f103 	lsl.w	r1, r6, r3
 80012d8:	4311      	orrs	r1, r2
 80012da:	62e1      	str	r1, [r4, #44]	; 0x2c
 80012dc:	e7c7      	b.n	800126e <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012de:	2d12      	cmp	r5, #18
 80012e0:	d104      	bne.n	80012ec <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <HAL_ADC_ConfigChannel+0x120>)
 80012e4:	6853      	ldr	r3, [r2, #4]
 80012e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012ea:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012ec:	f1a5 0310 	sub.w	r3, r5, #16
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d8bf      	bhi.n	8001274 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012f4:	4a0c      	ldr	r2, [pc, #48]	; (8001328 <HAL_ADC_ConfigChannel+0x120>)
 80012f6:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012f8:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012fe:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001300:	d1b8      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_ADC_ConfigChannel+0x124>)
 8001304:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <HAL_ADC_ConfigChannel+0x128>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	fbb3 f2f2 	udiv	r2, r3, r2
 800130c:	230a      	movs	r3, #10
 800130e:	4353      	muls	r3, r2
        counter--;
 8001310:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001312:	9b01      	ldr	r3, [sp, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0ad      	beq.n	8001274 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8001318:	9b01      	ldr	r3, [sp, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	e7f8      	b.n	8001310 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 800131e:	2002      	movs	r0, #2
 8001320:	e7ac      	b.n	800127c <HAL_ADC_ConfigChannel+0x74>
 8001322:	bf00      	nop
 8001324:	40012000 	.word	0x40012000
 8001328:	40012300 	.word	0x40012300
 800132c:	200005b4 	.word	0x200005b4
 8001330:	000f4240 	.word	0x000f4240

08001334 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001336:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001338:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800133c:	041b      	lsls	r3, r3, #16
 800133e:	0c1b      	lsrs	r3, r3, #16
 8001340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001344:	0200      	lsls	r0, r0, #8
 8001346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800134e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001350:	60d3      	str	r3, [r2, #12]
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135a:	b530      	push	{r4, r5, lr}
 800135c:	68dc      	ldr	r4, [r3, #12]
 800135e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001362:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	2b04      	cmp	r3, #4
 800136a:	bf28      	it	cs
 800136c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 0501 	mov.w	r5, #1
 8001374:	fa05 f303 	lsl.w	r3, r5, r3
 8001378:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137c:	bf8c      	ite	hi
 800137e:	3c03      	subhi	r4, #3
 8001380:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001382:	4019      	ands	r1, r3
 8001384:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001386:	fa05 f404 	lsl.w	r4, r5, r4
 800138a:	3c01      	subs	r4, #1
 800138c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800138e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	ea42 0201 	orr.w	r2, r2, r1
 8001394:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	bfad      	iteet	ge
 800139a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	f000 000f 	andlt.w	r0, r0, #15
 80013a2:	4b06      	ldrlt	r3, [pc, #24]	; (80013bc <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	bfb5      	itete	lt
 80013aa:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80013b4:	bd30      	pop	{r4, r5, pc}
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00
 80013bc:	e000ed14 	.word	0xe000ed14

080013c0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80013c0:	2800      	cmp	r0, #0
 80013c2:	db08      	blt.n	80013d6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c4:	0942      	lsrs	r2, r0, #5
 80013c6:	2301      	movs	r3, #1
 80013c8:	f000 001f 	and.w	r0, r0, #31
 80013cc:	fa03 f000 	lsl.w	r0, r3, r0
 80013d0:	4b01      	ldr	r3, [pc, #4]	; (80013d8 <HAL_NVIC_EnableIRQ+0x18>)
 80013d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100

080013dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	3801      	subs	r0, #1
 80013de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013e2:	d20a      	bcs.n	80013fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	21f0      	movs	r1, #240	; 0xf0
 80013ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001408:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 800140a:	4604      	mov	r4, r0
 800140c:	b168      	cbz	r0, 800142a <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800140e:	7903      	ldrb	r3, [r0, #4]
 8001410:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001414:	b913      	cbnz	r3, 800141c <HAL_DAC_Init+0x14>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001416:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001418:	f00b fade 	bl	800c9d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800141c:	2302      	movs	r3, #2
 800141e:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001420:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001422:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001424:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001426:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8001428:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800142a:	2001      	movs	r0, #1
}
 800142c:	bd10      	pop	{r4, pc}

0800142e <HAL_DAC_Start>:
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800142e:	7943      	ldrb	r3, [r0, #5]
 8001430:	2b01      	cmp	r3, #1
{
 8001432:	b510      	push	{r4, lr}
 8001434:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8001438:	d018      	beq.n	800146c <HAL_DAC_Start+0x3e>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800143a:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800143c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 800143e:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 8001440:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 8001442:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8001444:	408a      	lsls	r2, r1
 8001446:	4322      	orrs	r2, r4
 8001448:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 800144a:	b989      	cbnz	r1, 8001470 <HAL_DAC_Start+0x42>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800144c:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 800144e:	681a      	ldr	r2, [r3, #0]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001450:	074c      	lsls	r4, r1, #29
 8001452:	d507      	bpl.n	8001464 <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001454:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001458:	2a38      	cmp	r2, #56	; 0x38
 800145a:	d103      	bne.n	8001464 <HAL_DAC_Start+0x36>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	f042 0201 	orr.w	r2, r2, #1
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001462:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001464:	2301      	movs	r3, #1
 8001466:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001468:	2300      	movs	r3, #0
 800146a:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 800146c:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 800146e:	bd10      	pop	{r4, pc}
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8001470:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001472:	681a      	ldr	r2, [r3, #0]
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001474:	0349      	lsls	r1, r1, #13
 8001476:	d5f5      	bpl.n	8001464 <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001478:	f402 1260 	and.w	r2, r2, #3670016	; 0x380000
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 800147c:	f5b2 1f60 	cmp.w	r2, #3670016	; 0x380000
 8001480:	d1f0      	bne.n	8001464 <HAL_DAC_Start+0x36>
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	f042 0202 	orr.w	r2, r2, #2
 8001488:	e7eb      	b.n	8001462 <HAL_DAC_Start+0x34>

0800148a <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800148a:	7943      	ldrb	r3, [r0, #5]
 800148c:	2b01      	cmp	r3, #1
{
 800148e:	b530      	push	{r4, r5, lr}
 8001490:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8001494:	d017      	beq.n	80014c6 <HAL_DAC_ConfigChannel+0x3c>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001496:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001498:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 800149a:	6823      	ldr	r3, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800149c:	f640 75fe 	movw	r5, #4094	; 0xffe
 80014a0:	4095      	lsls	r5, r2
 80014a2:	ea23 0505 	bic.w	r5, r3, r5
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80014a6:	c90a      	ldmia	r1, {r1, r3}
 80014a8:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80014aa:	4093      	lsls	r3, r2
 80014ac:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80014ae:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	21c0      	movs	r1, #192	; 0xc0
 80014b4:	fa01 f202 	lsl.w	r2, r1, r2
 80014b8:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80014bc:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80014be:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80014c0:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80014c2:	2300      	movs	r3, #0
 80014c4:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 80014c6:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 80014c8:	bd30      	pop	{r4, r5, pc}

080014ca <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ca:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d003      	beq.n	80014da <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80014d6:	2001      	movs	r0, #1
 80014d8:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014da:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80014dc:	2305      	movs	r3, #5
 80014de:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80014e2:	6813      	ldr	r3, [r2, #0]
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80014ea:	2000      	movs	r0, #0
}
 80014ec:	4770      	bx	lr
	...

080014f0 <ETH_Delay.constprop.4>:
/**
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
 80014f0:	b082      	sub	sp, #8
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <ETH_Delay.constprop.4+0x20>)
 80014f4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80014fe:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 8001500:	bf00      	nop
  } 
  while (Delay --);
 8001502:	9b01      	ldr	r3, [sp, #4]
 8001504:	1e5a      	subs	r2, r3, #1
 8001506:	9201      	str	r2, [sp, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f9      	bne.n	8001500 <ETH_Delay.constprop.4+0x10>
}
 800150c:	b002      	add	sp, #8
 800150e:	4770      	bx	lr
 8001510:	200005b4 	.word	0x200005b4

08001514 <ETH_FlushTransmitFIFO>:
{
 8001514:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t tmpreg1 = 0U;
 8001516:	2300      	movs	r3, #0
 8001518:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800151a:	f241 0118 	movw	r1, #4120	; 0x1018
 800151e:	6803      	ldr	r3, [r0, #0]
 8001520:	585a      	ldr	r2, [r3, r1]
 8001522:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001526:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001528:	585b      	ldr	r3, [r3, r1]
 800152a:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800152c:	f7ff ffe0 	bl	80014f0 <ETH_Delay.constprop.4>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001530:	9a01      	ldr	r2, [sp, #4]
 8001532:	6803      	ldr	r3, [r0, #0]
 8001534:	505a      	str	r2, [r3, r1]
}
 8001536:	b003      	add	sp, #12
 8001538:	f85d fb04 	ldr.w	pc, [sp], #4

0800153c <ETH_MACDMAConfig>:
{
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001540:	b129      	cbz	r1, 800154e <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001542:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001546:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8001548:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800154c:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800154e:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8001550:	6822      	ldr	r2, [r4, #0]
                       macinit.LoopbackMode |
 8001552:	68e0      	ldr	r0, [r4, #12]
  tmpreg1 = (heth->Instance)->MACCR;
 8001554:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001556:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8001558:	68a3      	ldr	r3, [r4, #8]
 800155a:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800155e:	4830      	ldr	r0, [pc, #192]	; (8001620 <ETH_MACDMAConfig+0xe4>)
 8001560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001564:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001568:	bf0c      	ite	eq
 800156a:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 800156e:	2100      	movne	r1, #0
 8001570:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001572:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001574:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001576:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 8001578:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800157a:	f7ff fd03 	bl	8000f84 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800157e:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001580:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 8001582:	601d      	str	r5, [r3, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001584:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001586:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8001588:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800158a:	f7ff fcfb 	bl	8000f84 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001592:	2500      	movs	r5, #0
 8001594:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001596:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8001598:	699a      	ldr	r2, [r3, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800159a:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 800159e:	0412      	lsls	r2, r2, #16
 80015a0:	0c12      	lsrs	r2, r2, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80015a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015a6:	619a      	str	r2, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80015a8:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 80015aa:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ac:	f7ff fcea 	bl	8000f84 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80015b0:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015b2:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 80015b4:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80015b6:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80015b8:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ba:	f7ff fce3 	bl	8000f84 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80015be:	6822      	ldr	r2, [r4, #0]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015c0:	4b18      	ldr	r3, [pc, #96]	; (8001624 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 80015c2:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80015c4:	f241 0518 	movw	r5, #4120	; 0x1018
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015c8:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 80015ca:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015cc:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80015ce:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80015d2:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015d6:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80015d8:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015da:	f7ff fcd3 	bl	8000f84 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80015de:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015e0:	4a11      	ldr	r2, [pc, #68]	; (8001628 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 80015e2:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80015e8:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015ea:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 80015ec:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ee:	f7ff fcc9 	bl	8000f84 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80015f2:	6822      	ldr	r2, [r4, #0]
 80015f4:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80015f8:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80015fa:	69a3      	ldr	r3, [r4, #24]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d107      	bne.n	8001610 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001600:	f241 011c 	movw	r1, #4124	; 0x101c
 8001604:	5853      	ldr	r3, [r2, r1]
 8001606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800160e:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001610:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001612:	4a06      	ldr	r2, [pc, #24]	; (800162c <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001614:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001616:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001618:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <ETH_MACDMAConfig+0xf4>)
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	bd70      	pop	{r4, r5, r6, pc}
 8001620:	ff20810f 	.word	0xff20810f
 8001624:	f8de3f23 	.word	0xf8de3f23
 8001628:	02c12080 	.word	0x02c12080
 800162c:	40028040 	.word	0x40028040
 8001630:	40028044 	.word	0x40028044

08001634 <HAL_ETH_DMATxDescListInit>:
{
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8001636:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800163a:	2c01      	cmp	r4, #1
 800163c:	f04f 0402 	mov.w	r4, #2
 8001640:	d033      	beq.n	80016aa <HAL_ETH_DMATxDescListInit+0x76>
 8001642:	2501      	movs	r5, #1
 8001644:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8001648:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 800164c:	62c1      	str	r1, [r0, #44]	; 0x2c
 800164e:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < TxBuffCount; i++)
 8001652:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001654:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001658:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (TxBuffCount-1U))
 800165c:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < TxBuffCount; i++)
 8001660:	429d      	cmp	r5, r3
 8001662:	d10b      	bne.n	800167c <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001664:	6802      	ldr	r2, [r0, #0]
 8001666:	f241 0310 	movw	r3, #4112	; 0x1010
 800166a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800166c:	2301      	movs	r3, #1
 800166e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001672:	2300      	movs	r3, #0
 8001674:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8001678:	4618      	mov	r0, r3
 800167a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800167c:	fb0e 2605 	mla	r6, lr, r5, r2
 8001680:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001684:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001686:	f844 7c20 	str.w	r7, [r4, #-32]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800168a:	b92e      	cbnz	r6, 8001698 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800168c:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8001690:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8001694:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001698:	4565      	cmp	r5, ip
 800169a:	bf2c      	ite	cs
 800169c:	460e      	movcs	r6, r1
 800169e:	4626      	movcc	r6, r4
 80016a0:	f844 6c14 	str.w	r6, [r4, #-20]
  for(i=0U; i < TxBuffCount; i++)
 80016a4:	3501      	adds	r5, #1
 80016a6:	3420      	adds	r4, #32
 80016a8:	e7da      	b.n	8001660 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 80016aa:	4620      	mov	r0, r4
}
 80016ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016ae <HAL_ETH_DMARxDescListInit>:
{
 80016ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 80016b2:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80016b6:	2c01      	cmp	r4, #1
 80016b8:	f04f 0402 	mov.w	r4, #2
 80016bc:	d030      	beq.n	8001720 <HAL_ETH_DMARxDescListInit+0x72>
 80016be:	2501      	movs	r5, #1
 80016c0:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80016c4:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 80016c8:	6281      	str	r1, [r0, #40]	; 0x28
 80016ca:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < RxBuffCount; i++)
 80016ce:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80016d0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80016d4:	f244 57f4 	movw	r7, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80016d8:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1U))
 80016dc:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < RxBuffCount; i++)
 80016e0:	429d      	cmp	r5, r3
 80016e2:	d10c      	bne.n	80016fe <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80016e4:	6802      	ldr	r2, [r0, #0]
 80016e6:	f241 030c 	movw	r3, #4108	; 0x100c
 80016ea:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80016f2:	2300      	movs	r3, #0
 80016f4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80016f8:	4618      	mov	r0, r3
 80016fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80016fe:	fb0e 2805 	mla	r8, lr, r5, r2
 8001702:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001706:	4565      	cmp	r5, ip
 8001708:	bf2c      	ite	cs
 800170a:	4688      	movcs	r8, r1
 800170c:	46a0      	movcc	r8, r4
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800170e:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001712:	f844 7c1c 	str.w	r7, [r4, #-28]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001716:	f844 8c14 	str.w	r8, [r4, #-20]
  for(i=0U; i < RxBuffCount; i++)
 800171a:	3501      	adds	r5, #1
 800171c:	3420      	adds	r4, #32
 800171e:	e7df      	b.n	80016e0 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 8001720:	4620      	mov	r0, r4
}
 8001722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001728 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8001728:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800172c:	2b01      	cmp	r3, #1
{
 800172e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001730:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8001734:	d068      	beq.n	8001808 <HAL_ETH_TransmitFrame+0xe0>
 8001736:	2201      	movs	r2, #1
 8001738:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800173c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8001740:	b929      	cbnz	r1, 800174e <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8001742:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001746:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 800174a:	4610      	mov	r0, r2
 800174c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800174e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001750:	681c      	ldr	r4, [r3, #0]
 8001752:	2c00      	cmp	r4, #0
 8001754:	da06      	bge.n	8001764 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001756:	2312      	movs	r3, #18
 8001758:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800175c:	2300      	movs	r3, #0
 800175e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8001762:	e7f2      	b.n	800174a <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001764:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8001768:	42a1      	cmp	r1, r4
 800176a:	d92e      	bls.n	80017ca <HAL_ETH_TransmitFrame+0xa2>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800176c:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001770:	fb04 1412 	mls	r4, r4, r2, r1
 8001774:	b33c      	cbz	r4, 80017c6 <HAL_ETH_TransmitFrame+0x9e>
      bufcount++;
 8001776:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001778:	4c24      	ldr	r4, [pc, #144]	; (800180c <HAL_ETH_TransmitFrame+0xe4>)
 800177a:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 800177e:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001782:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8001786:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001788:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1U))
 800178c:	1e57      	subs	r7, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800178e:	681d      	ldr	r5, [r3, #0]
 8001790:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8001794:	601d      	str	r5, [r3, #0]
      if (i == 0U) 
 8001796:	b91c      	cbnz	r4, 80017a0 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001798:	681d      	ldr	r5, [r3, #0]
 800179a:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 800179e:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1U))
 80017a0:	42a7      	cmp	r7, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80017a2:	bf08      	it	eq
 80017a4:	681d      	ldreq	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80017a6:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80017a8:	bf04      	itt	eq
 80017aa:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 80017ae:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017b0:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80017b2:	bf08      	it	eq
 80017b4:	6059      	streq	r1, [r3, #4]
    for (i=0U; i< bufcount; i++)
 80017b6:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017b8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 80017bc:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017be:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017c0:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 80017c2:	d1e4      	bne.n	800178e <HAL_ETH_TransmitFrame+0x66>
 80017c4:	e00d      	b.n	80017e2 <HAL_ETH_TransmitFrame+0xba>
  if (bufcount == 1U)
 80017c6:	2a01      	cmp	r2, #1
 80017c8:	d1d6      	bne.n	8001778 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80017d0:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017d2:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80017d4:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80017dc:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017de:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80017e4:	f241 0214 	movw	r2, #4116	; 0x1014
 80017e8:	6803      	ldr	r3, [r0, #0]
 80017ea:	5899      	ldr	r1, [r3, r2]
 80017ec:	0749      	lsls	r1, r1, #29
 80017ee:	d505      	bpl.n	80017fc <HAL_ETH_TransmitFrame+0xd4>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80017f0:	2104      	movs	r1, #4
 80017f2:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 80017f4:	f241 0204 	movw	r2, #4100	; 0x1004
 80017f8:	2100      	movs	r1, #0
 80017fa:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 80017fc:	2301      	movs	r3, #1
 80017fe:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001802:	2300      	movs	r3, #0
 8001804:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8001808:	4618      	mov	r0, r3
}
 800180a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800180c:	fffffa0c 	.word	0xfffffa0c

08001810 <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 8001810:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001814:	2b01      	cmp	r3, #1
{
 8001816:	b530      	push	{r4, r5, lr}
 8001818:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 800181c:	d023      	beq.n	8001866 <HAL_ETH_GetReceivedFrame+0x56>
  heth->State = HAL_ETH_STATE_BUSY;
 800181e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001822:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001824:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8001826:	2401      	movs	r4, #1
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001828:	2a00      	cmp	r2, #0
  __HAL_LOCK(heth);
 800182a:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800182e:	db27      	blt.n	8001880 <HAL_ETH_GetReceivedFrame+0x70>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68d9      	ldr	r1, [r3, #12]
 8001834:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001838:	d017      	beq.n	800186a <HAL_ETH_GetReceivedFrame+0x5a>
      (heth->RxFrameInfos).SegCount++;
 800183a:	6b82      	ldr	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800183c:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount++;
 800183e:	4422      	add	r2, r4
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001840:	42a2      	cmp	r2, r4
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001842:	bf08      	it	eq
 8001844:	6303      	streq	r3, [r0, #48]	; 0x30
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001846:	681b      	ldr	r3, [r3, #0]
      (heth->RxFrameInfos).SegCount++;
 8001848:	6382      	str	r2, [r0, #56]	; 0x38
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800184a:	f3c3 430d 	ubfx	r3, r3, #16, #14
 800184e:	3b04      	subs	r3, #4
      heth->RxFrameInfos.length = framelength;
 8001850:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001852:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8001858:	2301      	movs	r3, #1
 800185a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800185e:	2300      	movs	r3, #0
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001860:	6281      	str	r1, [r0, #40]	; 0x28
      __HAL_UNLOCK(heth);
 8001862:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8001866:	4618      	mov	r0, r3
 8001868:	bd30      	pop	{r4, r5, pc}
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800186a:	681d      	ldr	r5, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800186c:	6281      	str	r1, [r0, #40]	; 0x28
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800186e:	05ad      	lsls	r5, r5, #22
      (heth->RxFrameInfos).SegCount++;
 8001870:	bf55      	itete	pl
 8001872:	6b83      	ldrpl	r3, [r0, #56]	; 0x38
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001874:	6303      	strmi	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).SegCount++;
 8001876:	3301      	addpl	r3, #1
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001878:	6342      	strmi	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 800187a:	bf4c      	ite	mi
 800187c:	6384      	strmi	r4, [r0, #56]	; 0x38
      (heth->RxFrameInfos).SegCount++;
 800187e:	6383      	strpl	r3, [r0, #56]	; 0x38
  heth->State = HAL_ETH_STATE_READY;
 8001880:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8001882:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8001884:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001888:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 800188c:	e7eb      	b.n	8001866 <HAL_ETH_GetReceivedFrame+0x56>

0800188e <HAL_ETH_ReadPHYRegister>:
{
 800188e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001890:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8001894:	2b82      	cmp	r3, #130	; 0x82
{
 8001896:	4605      	mov	r5, r0
 8001898:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800189a:	d030      	beq.n	80018fe <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg1 = heth->Instance->MACMIIAR;
 800189c:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800189e:	2382      	movs	r3, #130	; 0x82
 80018a0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 80018a4:	6913      	ldr	r3, [r2, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80018a6:	0189      	lsls	r1, r1, #6
 80018a8:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018ac:	f003 011c 	and.w	r1, r3, #28
 80018b0:	4321      	orrs	r1, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80018b2:	8a04      	ldrh	r4, [r0, #16]
 80018b4:	02e4      	lsls	r4, r4, #11
 80018b6:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80018b8:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80018ba:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 80018be:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 80018c0:	f7ff fb5a 	bl	8000f78 <HAL_GetTick>
 80018c4:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018c6:	f014 0001 	ands.w	r0, r4, #1
 80018ca:	d107      	bne.n	80018dc <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80018cc:	682b      	ldr	r3, [r5, #0]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 80018d4:	2301      	movs	r3, #1
 80018d6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80018da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80018dc:	f7ff fb4c 	bl	8000f78 <HAL_GetTick>
 80018e0:	1bc0      	subs	r0, r0, r7
 80018e2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80018e6:	d307      	bcc.n	80018f8 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 80018e8:	2301      	movs	r3, #1
 80018ea:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80018ee:	2300      	movs	r3, #0
 80018f0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80018f4:	2003      	movs	r0, #3
 80018f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 80018f8:	682b      	ldr	r3, [r5, #0]
 80018fa:	691c      	ldr	r4, [r3, #16]
 80018fc:	e7e3      	b.n	80018c6 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 80018fe:	2002      	movs	r0, #2
}
 8001900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001902 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001902:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8001906:	2b42      	cmp	r3, #66	; 0x42
{
 8001908:	b570      	push	{r4, r5, r6, lr}
 800190a:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800190c:	d02e      	beq.n	800196c <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800190e:	2342      	movs	r3, #66	; 0x42
 8001910:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8001914:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001916:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8001918:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800191a:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 800191e:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001922:	f000 001c 	and.w	r0, r0, #28
 8001926:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001928:	8a2c      	ldrh	r4, [r5, #16]
 800192a:	02e4      	lsls	r4, r4, #11
 800192c:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800192e:	4304      	orrs	r4, r0
 8001930:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001932:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8001934:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8001936:	f7ff fb1f 	bl	8000f78 <HAL_GetTick>
 800193a:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800193c:	f014 0001 	ands.w	r0, r4, #1
 8001940:	d103      	bne.n	800194a <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8001942:	2301      	movs	r3, #1
 8001944:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8001948:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800194a:	f7ff fb15 	bl	8000f78 <HAL_GetTick>
 800194e:	1b80      	subs	r0, r0, r6
 8001950:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001954:	d307      	bcc.n	8001966 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8001956:	2301      	movs	r3, #1
 8001958:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800195c:	2300      	movs	r3, #0
 800195e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8001962:	2003      	movs	r0, #3
 8001964:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8001966:	682b      	ldr	r3, [r5, #0]
 8001968:	691c      	ldr	r4, [r3, #16]
 800196a:	e7e7      	b.n	800193c <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 800196c:	2002      	movs	r0, #2
}
 800196e:	bd70      	pop	{r4, r5, r6, pc}

08001970 <HAL_ETH_Init>:
{
 8001970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8001976:	4604      	mov	r4, r0
 8001978:	2800      	cmp	r0, #0
 800197a:	f000 80de 	beq.w	8001b3a <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 800197e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8001982:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001986:	b91b      	cbnz	r3, 8001990 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8001988:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800198c:	f00a f9a4 	bl	800bcd8 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001990:	2300      	movs	r3, #0
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	4b6a      	ldr	r3, [pc, #424]	; (8001b40 <HAL_ETH_Init+0x1d0>)
 8001996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001998:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800199c:	645a      	str	r2, [r3, #68]	; 0x44
 800199e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019a8:	4b66      	ldr	r3, [pc, #408]	; (8001b44 <HAL_ETH_Init+0x1d4>)
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80019b0:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	6a21      	ldr	r1, [r4, #32]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	f042 0201 	orr.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80019c8:	f7ff fad6 	bl	8000f78 <HAL_GetTick>
 80019cc:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	07d0      	lsls	r0, r2, #31
 80019d8:	d41d      	bmi.n	8001a16 <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80019da:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80019dc:	f001 f928 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80019e0:	4b59      	ldr	r3, [pc, #356]	; (8001b48 <HAL_ETH_Init+0x1d8>)
 80019e2:	4a5a      	ldr	r2, [pc, #360]	; (8001b4c <HAL_ETH_Init+0x1dc>)
 80019e4:	4403      	add	r3, r0
 80019e6:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80019e8:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80019ec:	d822      	bhi.n	8001a34 <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80019ee:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80019f2:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80019f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80019f8:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80019fa:	2100      	movs	r1, #0
 80019fc:	4620      	mov	r0, r4
 80019fe:	f7ff ff80 	bl	8001902 <HAL_ETH_WritePHYRegister>
 8001a02:	4605      	mov	r5, r0
 8001a04:	b368      	cbz	r0, 8001a62 <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 8001a06:	2101      	movs	r1, #1
 8001a08:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 8001a0a:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8001a0c:	f7ff fd96 	bl	800153c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8001a10:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001a14:	e00b      	b.n	8001a2e <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001a16:	f7ff faaf 	bl	8000f78 <HAL_GetTick>
 8001a1a:	1b40      	subs	r0, r0, r5
 8001a1c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001a20:	d9d5      	bls.n	80019ce <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001a22:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8001a24:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001a26:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001a2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8001a2e:	4628      	mov	r0, r5
 8001a30:	b003      	add	sp, #12
 8001a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001a34:	4b46      	ldr	r3, [pc, #280]	; (8001b50 <HAL_ETH_Init+0x1e0>)
 8001a36:	4a47      	ldr	r2, [pc, #284]	; (8001b54 <HAL_ETH_Init+0x1e4>)
 8001a38:	4403      	add	r3, r0
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d802      	bhi.n	8001a44 <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001a3e:	f045 050c 	orr.w	r5, r5, #12
 8001a42:	e7d6      	b.n	80019f2 <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001a44:	4b44      	ldr	r3, [pc, #272]	; (8001b58 <HAL_ETH_Init+0x1e8>)
 8001a46:	4a45      	ldr	r2, [pc, #276]	; (8001b5c <HAL_ETH_Init+0x1ec>)
 8001a48:	4403      	add	r3, r0
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d9d1      	bls.n	80019f2 <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001a4e:	4b44      	ldr	r3, [pc, #272]	; (8001b60 <HAL_ETH_Init+0x1f0>)
 8001a50:	4a44      	ldr	r2, [pc, #272]	; (8001b64 <HAL_ETH_Init+0x1f4>)
 8001a52:	4403      	add	r3, r0
 8001a54:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001a56:	bf94      	ite	ls
 8001a58:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001a5c:	f045 0510 	orrhi.w	r5, r5, #16
 8001a60:	e7c7      	b.n	80019f2 <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 8001a62:	20ff      	movs	r0, #255	; 0xff
 8001a64:	f7ff fa8e 	bl	8000f84 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001a68:	6863      	ldr	r3, [r4, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d053      	beq.n	8001b16 <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8001a6e:	f7ff fa83 	bl	8000f78 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001a72:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001a76:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001a78:	466a      	mov	r2, sp
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f7ff ff06 	bl	800188e <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001a82:	f7ff fa79 	bl	8000f78 <HAL_GetTick>
 8001a86:	1b80      	subs	r0, r0, r6
 8001a88:	42b8      	cmp	r0, r7
 8001a8a:	d90b      	bls.n	8001aa4 <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f7ff fd54 	bl	800153c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8001a94:	2301      	movs	r3, #1
 8001a96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8001aa0:	2503      	movs	r5, #3
 8001aa2:	e7c4      	b.n	8001a2e <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001aa4:	9b00      	ldr	r3, [sp, #0]
 8001aa6:	0759      	lsls	r1, r3, #29
 8001aa8:	d5e6      	bpl.n	8001a78 <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001aaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f7ff ff26 	bl	8001902 <HAL_ETH_WritePHYRegister>
 8001ab6:	2800      	cmp	r0, #0
 8001ab8:	d1a5      	bne.n	8001a06 <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 8001aba:	f7ff fa5d 	bl	8000f78 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001abe:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001ac2:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ac4:	466a      	mov	r2, sp
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f7ff fee0 	bl	800188e <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001ace:	f7ff fa53 	bl	8000f78 <HAL_GetTick>
 8001ad2:	1b80      	subs	r0, r0, r6
 8001ad4:	42b8      	cmp	r0, r7
 8001ad6:	d8d9      	bhi.n	8001a8c <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001ad8:	9b00      	ldr	r3, [sp, #0]
 8001ada:	069a      	lsls	r2, r3, #26
 8001adc:	d5f2      	bpl.n	8001ac4 <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001ade:	466a      	mov	r2, sp
 8001ae0:	211f      	movs	r1, #31
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f7ff fed3 	bl	800188e <HAL_ETH_ReadPHYRegister>
 8001ae8:	2800      	cmp	r0, #0
 8001aea:	d18c      	bne.n	8001a06 <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001aec:	9b00      	ldr	r3, [sp, #0]
 8001aee:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001af2:	bf18      	it	ne
 8001af4:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001af8:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001afa:	bf4c      	ite	mi
 8001afc:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8001afe:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001b02:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8001b04:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8001b06:	2100      	movs	r1, #0
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f7ff fd17 	bl	800153c <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8001b14:	e78b      	b.n	8001a2e <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001b16:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001b18:	68e2      	ldr	r2, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001b1a:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001b1c:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8001b20:	b292      	uxth	r2, r2
 8001b22:	4629      	mov	r1, r5
 8001b24:	4620      	mov	r0, r4
 8001b26:	f7ff feec 	bl	8001902 <HAL_ETH_WritePHYRegister>
 8001b2a:	2800      	cmp	r0, #0
 8001b2c:	f47f af6b 	bne.w	8001a06 <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8001b30:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001b34:	f7ff fa26 	bl	8000f84 <HAL_Delay>
 8001b38:	e7e5      	b.n	8001b06 <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 8001b3a:	2501      	movs	r5, #1
 8001b3c:	e777      	b.n	8001a2e <HAL_ETH_Init+0xbe>
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40013800 	.word	0x40013800
 8001b48:	feced300 	.word	0xfeced300
 8001b4c:	00e4e1bf 	.word	0x00e4e1bf
 8001b50:	fde9f140 	.word	0xfde9f140
 8001b54:	017d783f 	.word	0x017d783f
 8001b58:	fc6c7900 	.word	0xfc6c7900
 8001b5c:	026259ff 	.word	0x026259ff
 8001b60:	fa0a1f00 	.word	0xfa0a1f00
 8001b64:	02faf07f 	.word	0x02faf07f

08001b68 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8001b68:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001b6c:	2b01      	cmp	r3, #1
{  
 8001b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b70:	4605      	mov	r5, r0
 8001b72:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8001b76:	d031      	beq.n	8001bdc <HAL_ETH_Start+0x74>
  __IO uint32_t tmpreg1 = 0U;
 8001b78:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001b7a:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8001b7c:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8001b80:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001b82:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8001b84:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001b86:	f042 0208 	orr.w	r2, r2, #8
  __HAL_LOCK(heth);
 8001b8a:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001b8e:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001b94:	f7ff fcac 	bl	80014f0 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8001b98:	682b      	ldr	r3, [r5, #0]
 8001b9a:	9a01      	ldr	r2, [sp, #4]
 8001b9c:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8001b9e:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	f042 0204 	orr.w	r2, r2, #4
 8001ba6:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001bac:	f7ff fca0 	bl	80014f0 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8001bb0:	682b      	ldr	r3, [r5, #0]
 8001bb2:	9a00      	ldr	r2, [sp, #0]
 8001bb4:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	f7ff fcac 	bl	8001514 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001bbc:	682a      	ldr	r2, [r5, #0]
 8001bbe:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8001bc2:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001bc4:	58d1      	ldr	r1, [r2, r3]
 8001bc6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8001bca:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001bcc:	58d1      	ldr	r1, [r2, r3]
 8001bce:	f041 0102 	orr.w	r1, r1, #2
 8001bd2:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8001bd4:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001bd8:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8001bdc:	b002      	add	sp, #8
 8001bde:	bd70      	pop	{r4, r5, r6, pc}

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001be4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001d98 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bec:	4a68      	ldr	r2, [pc, #416]	; (8001d90 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bee:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001d9c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bf2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001bf6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfa:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001bfc:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c00:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001c04:	45b6      	cmp	lr, r6
 8001c06:	f040 80ae 	bne.w	8001d66 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c0a:	684c      	ldr	r4, [r1, #4]
 8001c0c:	f024 0710 	bic.w	r7, r4, #16
 8001c10:	2f02      	cmp	r7, #2
 8001c12:	d116      	bne.n	8001c42 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001c14:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001c18:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c1c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001c20:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c24:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001c28:	f04f 0c0f 	mov.w	ip, #15
 8001c2c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001c30:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c34:	690d      	ldr	r5, [r1, #16]
 8001c36:	fa05 f50b 	lsl.w	r5, r5, fp
 8001c3a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001c3e:	f8ca 5020 	str.w	r5, [sl, #32]
 8001c42:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c46:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001c48:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c4c:	fa05 f50a 	lsl.w	r5, r5, sl
 8001c50:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c52:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c56:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c5a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c5e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c60:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c64:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001c66:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c6a:	d811      	bhi.n	8001c90 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001c6c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c6e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c72:	68cf      	ldr	r7, [r1, #12]
 8001c74:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001c78:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001c7c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c7e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c80:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c84:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001c88:	409f      	lsls	r7, r3
 8001c8a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001c8e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001c90:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c92:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c94:	688f      	ldr	r7, [r1, #8]
 8001c96:	fa07 f70a 	lsl.w	r7, r7, sl
 8001c9a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001c9c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c9e:	00e5      	lsls	r5, r4, #3
 8001ca0:	d561      	bpl.n	8001d66 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca2:	f04f 0b00 	mov.w	fp, #0
 8001ca6:	f8cd b00c 	str.w	fp, [sp, #12]
 8001caa:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cae:	4d39      	ldr	r5, [pc, #228]	; (8001d94 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001cb4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001cb8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001cbc:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001cc0:	9703      	str	r7, [sp, #12]
 8001cc2:	9f03      	ldr	r7, [sp, #12]
 8001cc4:	f023 0703 	bic.w	r7, r3, #3
 8001cc8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001ccc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd0:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001cdc:	f04f 0e0f 	mov.w	lr, #15
 8001ce0:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ce4:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce6:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cea:	d043      	beq.n	8001d74 <HAL_GPIO_Init+0x194>
 8001cec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cf0:	42a8      	cmp	r0, r5
 8001cf2:	d041      	beq.n	8001d78 <HAL_GPIO_Init+0x198>
 8001cf4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cf8:	42a8      	cmp	r0, r5
 8001cfa:	d03f      	beq.n	8001d7c <HAL_GPIO_Init+0x19c>
 8001cfc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d00:	42a8      	cmp	r0, r5
 8001d02:	d03d      	beq.n	8001d80 <HAL_GPIO_Init+0x1a0>
 8001d04:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d08:	42a8      	cmp	r0, r5
 8001d0a:	d03b      	beq.n	8001d84 <HAL_GPIO_Init+0x1a4>
 8001d0c:	4548      	cmp	r0, r9
 8001d0e:	d03b      	beq.n	8001d88 <HAL_GPIO_Init+0x1a8>
 8001d10:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001d14:	42a8      	cmp	r0, r5
 8001d16:	d039      	beq.n	8001d8c <HAL_GPIO_Init+0x1ac>
 8001d18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d1c:	42a8      	cmp	r0, r5
 8001d1e:	bf14      	ite	ne
 8001d20:	2508      	movne	r5, #8
 8001d22:	2507      	moveq	r5, #7
 8001d24:	fa05 f50c 	lsl.w	r5, r5, ip
 8001d28:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d2c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001d2e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d32:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001d36:	bf0c      	ite	eq
 8001d38:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001d3a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001d3c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001d3e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d40:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001d44:	bf0c      	ite	eq
 8001d46:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001d48:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001d4a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d4e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001d52:	bf0c      	ite	eq
 8001d54:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001d56:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001d58:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001d5a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d5c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001d5e:	bf54      	ite	pl
 8001d60:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001d62:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001d64:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d66:	3301      	adds	r3, #1
 8001d68:	2b10      	cmp	r3, #16
 8001d6a:	f47f af44 	bne.w	8001bf6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001d6e:	b005      	add	sp, #20
 8001d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d74:	465d      	mov	r5, fp
 8001d76:	e7d5      	b.n	8001d24 <HAL_GPIO_Init+0x144>
 8001d78:	2501      	movs	r5, #1
 8001d7a:	e7d3      	b.n	8001d24 <HAL_GPIO_Init+0x144>
 8001d7c:	2502      	movs	r5, #2
 8001d7e:	e7d1      	b.n	8001d24 <HAL_GPIO_Init+0x144>
 8001d80:	2503      	movs	r5, #3
 8001d82:	e7cf      	b.n	8001d24 <HAL_GPIO_Init+0x144>
 8001d84:	2504      	movs	r5, #4
 8001d86:	e7cd      	b.n	8001d24 <HAL_GPIO_Init+0x144>
 8001d88:	2505      	movs	r5, #5
 8001d8a:	e7cb      	b.n	8001d24 <HAL_GPIO_Init+0x144>
 8001d8c:	2506      	movs	r5, #6
 8001d8e:	e7c9      	b.n	8001d24 <HAL_GPIO_Init+0x144>
 8001d90:	40013c00 	.word	0x40013c00
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40021400 	.word	0x40021400

08001da0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da0:	b10a      	cbz	r2, 8001da6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001da2:	6181      	str	r1, [r0, #24]
 8001da4:	4770      	bx	lr
 8001da6:	0409      	lsls	r1, r1, #16
 8001da8:	e7fb      	b.n	8001da2 <HAL_GPIO_WritePin+0x2>

08001daa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001daa:	6943      	ldr	r3, [r0, #20]
 8001dac:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001db0:	bf08      	it	eq
 8001db2:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db4:	6181      	str	r1, [r0, #24]
 8001db6:	4770      	bx	lr

08001db8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001dbc:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001dbe:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 8001dc2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8001dc6:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8001dca:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8001dce:	2801      	cmp	r0, #1
 8001dd0:	d028      	beq.n	8001e24 <HAL_HCD_HC_Init+0x6c>
  hhcd->hc[ch_num].do_ping = 0U;
 8001dd2:	2028      	movs	r0, #40	; 0x28
 8001dd4:	fb00 4001 	mla	r0, r0, r1, r4
  __HAL_LOCK(hhcd);
 8001dd8:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8001dda:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ddc:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 8001de0:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001de4:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001de8:	bf08      	it	eq
 8001dea:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 8001dec:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001df0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8001df4:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8001df8:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001dfc:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001e00:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8001e04:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8001e08:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 8001e0c:	f8cd c008 	str.w	ip, [sp, #8]
 8001e10:	e88d 4080 	stmia.w	sp, {r7, lr}
 8001e14:	6820      	ldr	r0, [r4, #0]
 8001e16:	f001 ff79 	bl	8003d0c <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001e1a:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8001e1e:	b004      	add	sp, #16
 8001e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8001e24:	2002      	movs	r0, #2
 8001e26:	e7fa      	b.n	8001e1e <HAL_HCD_HC_Init+0x66>

08001e28 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8001e28:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001e2c:	2b01      	cmp	r3, #1
{
 8001e2e:	b510      	push	{r4, lr}
 8001e30:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001e32:	d009      	beq.n	8001e48 <HAL_HCD_HC_Halt+0x20>
 8001e34:	2301      	movs	r3, #1
 8001e36:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e3a:	6800      	ldr	r0, [r0, #0]
 8001e3c:	f001 fff0 	bl	8003e20 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e40:	2000      	movs	r0, #0
 8001e42:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 8001e46:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001e48:	2002      	movs	r0, #2
}
 8001e4a:	bd10      	pop	{r4, pc}

08001e4c <HAL_HCD_Init>:
{
 8001e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8001e50:	4607      	mov	r7, r0
{
 8001e52:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d041      	beq.n	8001edc <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e58:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 8001e5c:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e62:	b91b      	cbnz	r3, 8001e6c <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 8001e64:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8001e68:	f00b f812 	bl	800ce90 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 8001e74:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e76:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8001e7a:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8001e7e:	bf08      	it	eq
 8001e80:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8001e82:	f001 fdff 	bl	8003a84 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e88:	466d      	mov	r5, sp
 8001e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e94:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e98:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e9c:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e9e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001ea2:	6838      	ldr	r0, [r7, #0]
 8001ea4:	f001 fda8 	bl	80039f8 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ea8:	f856 0b10 	ldr.w	r0, [r6], #16
 8001eac:	2101      	movs	r1, #1
 8001eae:	f001 fdef 	bl	8003a90 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001eb2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001eb4:	466d      	mov	r5, sp
 8001eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ec4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001ec8:	6838      	ldr	r0, [r7, #0]
 8001eca:	f001 fe9f 	bl	8003c0c <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  return HAL_OK;
 8001ed4:	2000      	movs	r0, #0
}
 8001ed6:	b00a      	add	sp, #40	; 0x28
 8001ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001edc:	2001      	movs	r0, #1
 8001ede:	e7fa      	b.n	8001ed6 <HAL_HCD_Init+0x8a>

08001ee0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001ee2:	2428      	movs	r4, #40	; 0x28
 8001ee4:	fb04 0401 	mla	r4, r4, r1, r0
{
 8001ee8:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8001eec:	9e06      	ldr	r6, [sp, #24]
 8001eee:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ef2:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ef6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8001efa:	b96f      	cbnz	r7, 8001f18 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001efc:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001efe:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8001f04:	d02b      	beq.n	8001f5e <HAL_HCD_HC_SubmitRequest+0x7e>
 8001f06:	42bb      	cmp	r3, r7
 8001f08:	d029      	beq.n	8001f5e <HAL_HCD_HC_SubmitRequest+0x7e>
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d131      	bne.n	8001f72 <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f0e:	2328      	movs	r3, #40	; 0x28
 8001f10:	fb03 0301 	mla	r3, r3, r1, r0
 8001f14:	2200      	movs	r2, #0
 8001f16:	e02a      	b.n	8001f6e <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f18:	f04f 0e02 	mov.w	lr, #2
 8001f1c:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d826      	bhi.n	8001f72 <HAL_HCD_HC_SubmitRequest+0x92>
 8001f24:	a401      	add	r4, pc, #4	; (adr r4, 8001f2c <HAL_HCD_HC_SubmitRequest+0x4c>)
 8001f26:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8001f2a:	bf00      	nop
 8001f2c:	08001f3d 	.word	0x08001f3d
 8001f30:	08001f0f 	.word	0x08001f0f
 8001f34:	08001f5f 	.word	0x08001f5f
 8001f38:	08001f5f 	.word	0x08001f5f
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001f3c:	2f01      	cmp	r7, #1
 8001f3e:	d118      	bne.n	8001f72 <HAL_HCD_HC_SubmitRequest+0x92>
 8001f40:	b9ba      	cbnz	r2, 8001f72 <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 8001f42:	b925      	cbnz	r5, 8001f4e <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 8001f44:	2328      	movs	r3, #40	; 0x28
 8001f46:	fb03 0301 	mla	r3, r3, r1, r0
 8001f4a:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f4e:	2328      	movs	r3, #40	; 0x28
 8001f50:	fb03 0301 	mla	r3, r3, r1, r0
 8001f54:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f58:	b14a      	cbz	r2, 8001f6e <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	e007      	b.n	8001f6e <HAL_HCD_HC_SubmitRequest+0x8e>
 8001f5e:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f60:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8001f64:	b9d2      	cbnz	r2, 8001f9c <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f66:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 8001f6a:	2c00      	cmp	r4, #0
 8001f6c:	d1f5      	bne.n	8001f5a <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f72:	2428      	movs	r4, #40	; 0x28
 8001f74:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f78:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f7a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f7e:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f80:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8001f82:	649d      	str	r5, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8001f88:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8001f8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f8e:	3138      	adds	r1, #56	; 0x38
 8001f90:	7c02      	ldrb	r2, [r0, #16]
 8001f92:	6800      	ldr	r0, [r0, #0]
}
 8001f94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f98:	f001 bfa6 	b.w	8003ee8 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f9c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001fa0:	e7da      	b.n	8001f58 <HAL_HCD_HC_SubmitRequest+0x78>
 8001fa2:	bf00      	nop

08001fa4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fa8:	6806      	ldr	r6, [r0, #0]
{
 8001faa:	b087      	sub	sp, #28
 8001fac:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001fae:	4630      	mov	r0, r6
 8001fb0:	f001 fdce 	bl	8003b50 <USB_GetMode>
 8001fb4:	2801      	cmp	r0, #1
 8001fb6:	f040 80b4 	bne.w	8002122 <HAL_HCD_IRQHandler+0x17e>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001fba:	6820      	ldr	r0, [r4, #0]
 8001fbc:	f001 fdc4 	bl	8003b48 <USB_ReadInterrupts>
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	f000 80ae 	beq.w	8002122 <HAL_HCD_IRQHandler+0x17e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fc6:	6820      	ldr	r0, [r4, #0]
 8001fc8:	f001 fdbe 	bl	8003b48 <USB_ReadInterrupts>
 8001fcc:	0287      	lsls	r7, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fce:	bf48      	it	mi
 8001fd0:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fd2:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fd4:	bf44      	itt	mi
 8001fd6:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8001fda:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fdc:	f001 fdb4 	bl	8003b48 <USB_ReadInterrupts>
 8001fe0:	02c5      	lsls	r5, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fe2:	bf48      	it	mi
 8001fe4:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001fe6:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fe8:	bf44      	itt	mi
 8001fea:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8001fee:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ff0:	f001 fdaa 	bl	8003b48 <USB_ReadInterrupts>
 8001ff4:	0140      	lsls	r0, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ff6:	bf48      	it	mi
 8001ff8:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ffa:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ffc:	bf44      	itt	mi
 8001ffe:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8002002:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002004:	f001 fda0 	bl	8003b48 <USB_ReadInterrupts>
 8002008:	0781      	lsls	r1, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800200a:	bf48      	it	mi
 800200c:	6823      	ldrmi	r3, [r4, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800200e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002010:	bf44      	itt	mi
 8002012:	2202      	movmi	r2, #2
 8002014:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002016:	f001 fd97 	bl	8003b48 <USB_ReadInterrupts>
 800201a:	0082      	lsls	r2, r0, #2
 800201c:	d510      	bpl.n	8002040 <HAL_HCD_IRQHandler+0x9c>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800201e:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8002022:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002026:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800202a:	4620      	mov	r0, r4
 800202c:	f00a ff80 	bl	800cf30 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002030:	2101      	movs	r1, #1
 8002032:	6820      	ldr	r0, [r4, #0]
 8002034:	f001 fd90 	bl	8003b58 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800203e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002040:	6820      	ldr	r0, [r4, #0]
 8002042:	f001 fd81 	bl	8003b48 <USB_ReadInterrupts>
 8002046:	01c3      	lsls	r3, r0, #7
 8002048:	d542      	bpl.n	80020d0 <HAL_HCD_IRQHandler+0x12c>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800204a:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800204c:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002050:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8002052:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002056:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002058:	9b05      	ldr	r3, [sp, #20]
 800205a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800205e:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002060:	9b04      	ldr	r3, [sp, #16]
 8002062:	079f      	lsls	r7, r3, #30
 8002064:	d50d      	bpl.n	8002082 <HAL_HCD_IRQHandler+0xde>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002066:	9b04      	ldr	r3, [sp, #16]
 8002068:	07d8      	lsls	r0, r3, #31
 800206a:	d506      	bpl.n	800207a <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800206c:	69ab      	ldr	r3, [r5, #24]
 800206e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002072:	61ab      	str	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002074:	4620      	mov	r0, r4
 8002076:	f00a ff57 	bl	800cf28 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800207a:	9b05      	ldr	r3, [sp, #20]
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002082:	9b04      	ldr	r3, [sp, #16]
 8002084:	0719      	lsls	r1, r3, #28
 8002086:	d519      	bpl.n	80020bc <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002088:	9b05      	ldr	r3, [sp, #20]
 800208a:	f043 0308 	orr.w	r3, r3, #8
 800208e:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002090:	9b04      	ldr	r3, [sp, #16]
 8002092:	075a      	lsls	r2, r3, #29
 8002094:	d550      	bpl.n	8002138 <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002096:	69a1      	ldr	r1, [r4, #24]
 8002098:	2902      	cmp	r1, #2
 800209a:	d145      	bne.n	8002128 <HAL_HCD_IRQHandler+0x184>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800209c:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800209e:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80020a0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80020a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020a8:	bf18      	it	ne
 80020aa:	2101      	movne	r1, #1
 80020ac:	f001 fd54 	bl	8003b58 <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80020b0:	4620      	mov	r0, r4
 80020b2:	f00a ff42 	bl	800cf3a <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80020b6:	4620      	mov	r0, r4
 80020b8:	f00a ff36 	bl	800cf28 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80020bc:	9b04      	ldr	r3, [sp, #16]
 80020be:	069b      	lsls	r3, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80020c0:	bf42      	ittt	mi
 80020c2:	9b05      	ldrmi	r3, [sp, #20]
 80020c4:	f043 0320 	orrmi.w	r3, r3, #32
 80020c8:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80020ca:	9b05      	ldr	r3, [sp, #20]
 80020cc:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80020d0:	6820      	ldr	r0, [r4, #0]
 80020d2:	f001 fd39 	bl	8003b48 <USB_ReadInterrupts>
 80020d6:	0707      	lsls	r7, r0, #28
 80020d8:	d505      	bpl.n	80020e6 <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 80020da:	4620      	mov	r0, r4
 80020dc:	f00a ff20 	bl	800cf20 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	2208      	movs	r2, #8
 80020e4:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80020e6:	6820      	ldr	r0, [r4, #0]
 80020e8:	f001 fd2e 	bl	8003b48 <USB_ReadInterrupts>
 80020ec:	0185      	lsls	r5, r0, #6
 80020ee:	d512      	bpl.n	8002116 <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80020f0:	6820      	ldr	r0, [r4, #0]
 80020f2:	f001 fe90 	bl	8003e16 <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020f6:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80020fa:	9001      	str	r0, [sp, #4]
 80020fc:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002100:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002102:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002106:	46d3      	mov	fp, sl
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002108:	68a3      	ldr	r3, [r4, #8]
 800210a:	459a      	cmp	sl, r3
 800210c:	d323      	bcc.n	8002156 <HAL_HCD_IRQHandler+0x1b2>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002114:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002116:	6820      	ldr	r0, [r4, #0]
 8002118:	f001 fd16 	bl	8003b48 <USB_ReadInterrupts>
 800211c:	06c3      	lsls	r3, r0, #27
 800211e:	f100 8220 	bmi.w	8002562 <HAL_HCD_IRQHandler+0x5be>
}
 8002122:	b007      	add	sp, #28
 8002124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002128:	68e3      	ldr	r3, [r4, #12]
 800212a:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 800212c:	bf04      	itt	eq
 800212e:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8002132:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8002136:	e7bb      	b.n	80020b0 <HAL_HCD_IRQHandler+0x10c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002138:	4620      	mov	r0, r4
 800213a:	f00a ff02 	bl	800cf42 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800213e:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002142:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002144:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002148:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800214c:	6993      	ldr	r3, [r2, #24]
 800214e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002152:	6193      	str	r3, [r2, #24]
 8002154:	e7b2      	b.n	80020bc <HAL_HCD_IRQHandler+0x118>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002156:	9a01      	ldr	r2, [sp, #4]
 8002158:	f00a 030f 	and.w	r3, sl, #15
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
 8002160:	07d8      	lsls	r0, r3, #31
 8002162:	f140 808a 	bpl.w	800227a <HAL_HCD_IRQHandler+0x2d6>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002166:	f8d8 3000 	ldr.w	r3, [r8]
 800216a:	6820      	ldr	r0, [r4, #0]
 800216c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002170:	fa5f f58a 	uxtb.w	r5, sl
 8002174:	f000 8104 	beq.w	8002380 <HAL_HCD_IRQHandler+0x3dc>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002178:	016a      	lsls	r2, r5, #5
 800217a:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 800217e:	18d6      	adds	r6, r2, r3
 8002180:	68b1      	ldr	r1, [r6, #8]
 8002182:	0749      	lsls	r1, r1, #29
 8002184:	d513      	bpl.n	80021ae <HAL_HCD_IRQHandler+0x20a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002186:	2104      	movs	r1, #4
 8002188:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800218a:	68f1      	ldr	r1, [r6, #12]
 800218c:	f041 0102 	orr.w	r1, r1, #2
 8002190:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002192:	68b1      	ldr	r1, [r6, #8]
 8002194:	0589      	lsls	r1, r1, #22
 8002196:	d542      	bpl.n	800221e <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002198:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800219a:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a2:	4629      	mov	r1, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a4:	f001 fe3c 	bl	8003e20 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ac:	e0c7      	b.n	800233e <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021ae:	68b1      	ldr	r1, [r6, #8]
 80021b0:	0689      	lsls	r1, r1, #26
 80021b2:	d502      	bpl.n	80021ba <HAL_HCD_IRQHandler+0x216>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021b4:	2120      	movs	r1, #32
 80021b6:	60b1      	str	r1, [r6, #8]
 80021b8:	e7eb      	b.n	8002192 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021ba:	68b1      	ldr	r1, [r6, #8]
 80021bc:	0709      	lsls	r1, r1, #28
 80021be:	d515      	bpl.n	80021ec <HAL_HCD_IRQHandler+0x248>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021c0:	68f1      	ldr	r1, [r6, #12]
 80021c2:	9303      	str	r3, [sp, #12]
 80021c4:	f041 0102 	orr.w	r1, r1, #2
 80021c8:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80021ca:	fb07 4105 	mla	r1, r7, r5, r4
 80021ce:	f04f 0e05 	mov.w	lr, #5
 80021d2:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021d6:	2110      	movs	r1, #16
 80021d8:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021da:	2108      	movs	r1, #8
 80021dc:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021de:	4629      	mov	r1, r5
 80021e0:	9202      	str	r2, [sp, #8]
 80021e2:	f001 fe1d 	bl	8003e20 <USB_HC_Halt>
 80021e6:	9a02      	ldr	r2, [sp, #8]
 80021e8:	9b03      	ldr	r3, [sp, #12]
 80021ea:	e7d2      	b.n	8002192 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021ec:	68b1      	ldr	r1, [r6, #8]
 80021ee:	0549      	lsls	r1, r1, #21
 80021f0:	d5cf      	bpl.n	8002192 <HAL_HCD_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021f2:	68f1      	ldr	r1, [r6, #12]
 80021f4:	9303      	str	r3, [sp, #12]
 80021f6:	f041 0102 	orr.w	r1, r1, #2
 80021fa:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021fc:	4629      	mov	r1, r5
 80021fe:	9202      	str	r2, [sp, #8]
 8002200:	f001 fe0e 	bl	8003e20 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002204:	2110      	movs	r1, #16
 8002206:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002208:	fb07 4105 	mla	r1, r7, r5, r4
 800220c:	2008      	movs	r0, #8
 800220e:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002212:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002216:	60b1      	str	r1, [r6, #8]
 8002218:	9b03      	ldr	r3, [sp, #12]
 800221a:	9a02      	ldr	r2, [sp, #8]
 800221c:	e7b9      	b.n	8002192 <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800221e:	68b1      	ldr	r1, [r6, #8]
 8002220:	07c8      	lsls	r0, r1, #31
 8002222:	d53d      	bpl.n	80022a0 <HAL_HCD_IRQHandler+0x2fc>
    if (hhcd->Init.dma_enable != 0U)
 8002224:	6921      	ldr	r1, [r4, #16]
 8002226:	b149      	cbz	r1, 800223c <HAL_HCD_IRQHandler+0x298>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002228:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800222c:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800222e:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002232:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002236:	1a09      	subs	r1, r1, r0
 8002238:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 800223c:	fb07 4e05 	mla	lr, r7, r5, r4
 8002240:	2001      	movs	r0, #1
 8002242:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002246:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800224a:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800224c:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 8002250:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8002254:	d116      	bne.n	8002284 <HAL_HCD_IRQHandler+0x2e0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002256:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002258:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002260:	4629      	mov	r1, r5
 8002262:	f001 fddd 	bl	8003e20 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002266:	2310      	movs	r3, #16
 8002268:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800226a:	fb07 4505 	mla	r5, r7, r5, r4
 800226e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8002272:	f083 0301 	eor.w	r3, r3, #1
 8002276:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800227a:	f10a 0a01 	add.w	sl, sl, #1
 800227e:	f108 0820 	add.w	r8, r8, #32
 8002282:	e741      	b.n	8002108 <HAL_HCD_IRQHandler+0x164>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002284:	2903      	cmp	r1, #3
 8002286:	d1f0      	bne.n	800226a <HAL_HCD_IRQHandler+0x2c6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002288:	58d1      	ldr	r1, [r2, r3]
 800228a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800228e:	50d1      	str	r1, [r2, r3]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002290:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002294:	4602      	mov	r2, r0
 8002296:	4629      	mov	r1, r5
 8002298:	4620      	mov	r0, r4
 800229a:	f00a fe4d 	bl	800cf38 <HAL_HCD_HC_NotifyURBChange_Callback>
 800229e:	e7e4      	b.n	800226a <HAL_HCD_IRQHandler+0x2c6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80022a0:	68b1      	ldr	r1, [r6, #8]
 80022a2:	0789      	lsls	r1, r1, #30
 80022a4:	d536      	bpl.n	8002314 <HAL_HCD_IRQHandler+0x370>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80022a6:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022a8:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80022ac:	f021 0102 	bic.w	r1, r1, #2
 80022b0:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022b2:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 80022b6:	2901      	cmp	r1, #1
 80022b8:	d10c      	bne.n	80022d4 <HAL_HCD_IRQHandler+0x330>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80022ba:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022be:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022c2:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022c6:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80022ca:	4629      	mov	r1, r5
 80022cc:	4620      	mov	r0, r4
 80022ce:	f00a fe33 	bl	800cf38 <HAL_HCD_HC_NotifyURBChange_Callback>
 80022d2:	e7d2      	b.n	800227a <HAL_HCD_IRQHandler+0x2d6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022d4:	2905      	cmp	r1, #5
 80022d6:	d0f0      	beq.n	80022ba <HAL_HCD_IRQHandler+0x316>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022d8:	2906      	cmp	r1, #6
 80022da:	d001      	beq.n	80022e0 <HAL_HCD_IRQHandler+0x33c>
 80022dc:	2908      	cmp	r1, #8
 80022de:	d114      	bne.n	800230a <HAL_HCD_IRQHandler+0x366>
      hhcd->hc[ch_num].ErrCnt++;
 80022e0:	fb07 4105 	mla	r1, r7, r5, r4
 80022e4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80022e6:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80022e8:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 80022ea:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022ec:	bf83      	ittte	hi
 80022ee:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022f0:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022f4:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022f8:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022fc:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022fe:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002302:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002306:	50d1      	str	r1, [r2, r3]
 8002308:	e7d9      	b.n	80022be <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800230a:	2903      	cmp	r1, #3
 800230c:	d1d7      	bne.n	80022be <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800230e:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8002312:	e7f3      	b.n	80022fc <HAL_HCD_IRQHandler+0x358>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002314:	68b1      	ldr	r1, [r6, #8]
 8002316:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 800231a:	d012      	beq.n	8002342 <HAL_HCD_IRQHandler+0x39e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800231c:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800231e:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002326:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800232a:	4629      	mov	r1, r5
    hhcd->hc[ch_num].ErrCnt++;
 800232c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800232e:	3201      	adds	r2, #1
 8002330:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002332:	2206      	movs	r2, #6
 8002334:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002338:	f001 fd72 	bl	8003e20 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	60b3      	str	r3, [r6, #8]
 8002340:	e79b      	b.n	800227a <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002342:	68b3      	ldr	r3, [r6, #8]
 8002344:	06da      	lsls	r2, r3, #27
 8002346:	d598      	bpl.n	800227a <HAL_HCD_IRQHandler+0x2d6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002348:	fb07 4205 	mla	r2, r7, r5, r4
 800234c:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8002350:	2b03      	cmp	r3, #3
 8002352:	d10a      	bne.n	800236a <HAL_HCD_IRQHandler+0x3c6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002354:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002356:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002358:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800235a:	f043 0302 	orr.w	r3, r3, #2
 800235e:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002360:	4629      	mov	r1, r5
 8002362:	f001 fd5d 	bl	8003e20 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002366:	2310      	movs	r3, #16
 8002368:	e7e9      	b.n	800233e <HAL_HCD_IRQHandler+0x39a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800236a:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 800236e:	d1fa      	bne.n	8002366 <HAL_HCD_IRQHandler+0x3c2>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002370:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8002372:	6923      	ldr	r3, [r4, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f6      	bne.n	8002366 <HAL_HCD_IRQHandler+0x3c2>
        hhcd->hc[ch_num].state = HC_NAK;
 8002378:	2303      	movs	r3, #3
 800237a:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 800237e:	e7ea      	b.n	8002356 <HAL_HCD_IRQHandler+0x3b2>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002380:	0169      	lsls	r1, r5, #5
 8002382:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8002386:	188e      	adds	r6, r1, r2
 8002388:	68b3      	ldr	r3, [r6, #8]
 800238a:	f013 0e04 	ands.w	lr, r3, #4
 800238e:	d006      	beq.n	800239e <HAL_HCD_IRQHandler+0x3fa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002390:	2304      	movs	r3, #4
 8002392:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002394:	68f3      	ldr	r3, [r6, #12]
 8002396:	f043 0302 	orr.w	r3, r3, #2
 800239a:	60f3      	str	r3, [r6, #12]
 800239c:	e76d      	b.n	800227a <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800239e:	68b3      	ldr	r3, [r6, #8]
 80023a0:	f013 0320 	ands.w	r3, r3, #32
 80023a4:	d014      	beq.n	80023d0 <HAL_HCD_IRQHandler+0x42c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023a6:	2320      	movs	r3, #32
 80023a8:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80023aa:	fb07 4305 	mla	r3, r7, r5, r4
 80023ae:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80023b2:	2a01      	cmp	r2, #1
 80023b4:	f47f af61 	bne.w	800227a <HAL_HCD_IRQHandler+0x2d6>
      hhcd->hc[ch_num].do_ping = 0U;
 80023b8:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023bc:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023c0:	68f3      	ldr	r3, [r6, #12]
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c8:	4629      	mov	r1, r5
 80023ca:	f001 fd29 	bl	8003e20 <USB_HC_Halt>
 80023ce:	e754      	b.n	800227a <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023d0:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80023d4:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80023d8:	d011      	beq.n	80023fe <HAL_HCD_IRQHandler+0x45a>
    hhcd->hc[ch_num].state = HC_NYET;
 80023da:	fb07 4205 	mla	r2, r7, r5, r4
 80023de:	2104      	movs	r1, #4
 80023e0:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 80023e4:	2101      	movs	r1, #1
 80023e6:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023ea:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ec:	68f3      	ldr	r3, [r6, #12]
 80023ee:	f043 0302 	orr.w	r3, r3, #2
 80023f2:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023f4:	4629      	mov	r1, r5
 80023f6:	f001 fd13 	bl	8003e20 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80023fa:	2340      	movs	r3, #64	; 0x40
 80023fc:	e79f      	b.n	800233e <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023fe:	68b3      	ldr	r3, [r6, #8]
 8002400:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 8002404:	d005      	beq.n	8002412 <HAL_HCD_IRQHandler+0x46e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002406:	68f3      	ldr	r3, [r6, #12]
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800240e:	4629      	mov	r1, r5
 8002410:	e6c8      	b.n	80021a4 <HAL_HCD_IRQHandler+0x200>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002412:	68b3      	ldr	r3, [r6, #8]
 8002414:	07db      	lsls	r3, r3, #31
 8002416:	d511      	bpl.n	800243c <HAL_HCD_IRQHandler+0x498>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002418:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800241a:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800241e:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002422:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002426:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002428:	60f2      	str	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800242a:	9302      	str	r3, [sp, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800242c:	f001 fcf8 	bl	8003e20 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002430:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002432:	2201      	movs	r2, #1
 8002434:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002436:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800243a:	e71e      	b.n	800227a <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800243c:	68b3      	ldr	r3, [r6, #8]
 800243e:	071b      	lsls	r3, r3, #28
 8002440:	d50e      	bpl.n	8002460 <HAL_HCD_IRQHandler+0x4bc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002442:	2308      	movs	r3, #8
 8002444:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002446:	68f3      	ldr	r3, [r6, #12]
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800244e:	4629      	mov	r1, r5
 8002450:	f001 fce6 	bl	8003e20 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002454:	fb07 4505 	mla	r5, r7, r5, r4
 8002458:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800245a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 800245e:	e70c      	b.n	800227a <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002460:	68b3      	ldr	r3, [r6, #8]
 8002462:	06db      	lsls	r3, r3, #27
 8002464:	d515      	bpl.n	8002492 <HAL_HCD_IRQHandler+0x4ee>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002466:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 800246a:	2203      	movs	r2, #3
 800246c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002470:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002474:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002478:	b92a      	cbnz	r2, 8002486 <HAL_HCD_IRQHandler+0x4e2>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800247a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800247e:	b912      	cbnz	r2, 8002486 <HAL_HCD_IRQHandler+0x4e2>
        hhcd->hc[ch_num].do_ping = 1U;
 8002480:	2201      	movs	r2, #1
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002486:	68f3      	ldr	r3, [r6, #12]
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800248e:	4629      	mov	r1, r5
 8002490:	e767      	b.n	8002362 <HAL_HCD_IRQHandler+0x3be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002492:	68b3      	ldr	r3, [r6, #8]
 8002494:	061b      	lsls	r3, r3, #24
 8002496:	d50c      	bpl.n	80024b2 <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002498:	68f3      	ldr	r3, [r6, #12]
 800249a:	f043 0302 	orr.w	r3, r3, #2
 800249e:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a0:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024a2:	fb07 4505 	mla	r5, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a6:	f001 fcbb 	bl	8003e20 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024aa:	2306      	movs	r3, #6
 80024ac:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 80024b0:	e744      	b.n	800233c <HAL_HCD_IRQHandler+0x398>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024b2:	68b3      	ldr	r3, [r6, #8]
 80024b4:	055b      	lsls	r3, r3, #21
 80024b6:	d50f      	bpl.n	80024d8 <HAL_HCD_IRQHandler+0x534>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024b8:	68f3      	ldr	r3, [r6, #12]
 80024ba:	f043 0302 	orr.w	r3, r3, #2
 80024be:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c0:	4629      	mov	r1, r5
 80024c2:	f001 fcad 	bl	8003e20 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024c6:	2310      	movs	r3, #16
 80024c8:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ce:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80024d0:	fb07 4505 	mla	r5, r7, r5, r4
 80024d4:	2308      	movs	r3, #8
 80024d6:	e7c0      	b.n	800245a <HAL_HCD_IRQHandler+0x4b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024d8:	68b3      	ldr	r3, [r6, #8]
 80024da:	0798      	lsls	r0, r3, #30
 80024dc:	f57f aecd 	bpl.w	800227a <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80024e0:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024e2:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80024e6:	f023 0302 	bic.w	r3, r3, #2
 80024ea:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024ec:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d10e      	bne.n	8002512 <HAL_HCD_IRQHandler+0x56e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80024f4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80024f8:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80024fc:	3b02      	subs	r3, #2
 80024fe:	2b01      	cmp	r3, #1
 8002500:	f63f aedd 	bhi.w	80022be <HAL_HCD_IRQHandler+0x31a>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002504:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002508:	f083 0301 	eor.w	r3, r3, #1
 800250c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8002510:	e6d5      	b.n	80022be <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002512:	2b03      	cmp	r3, #3
 8002514:	d102      	bne.n	800251c <HAL_HCD_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002516:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 800251a:	e6d0      	b.n	80022be <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800251c:	2b04      	cmp	r3, #4
 800251e:	d0fa      	beq.n	8002516 <HAL_HCD_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002520:	2b05      	cmp	r3, #5
 8002522:	d102      	bne.n	800252a <HAL_HCD_IRQHandler+0x586>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002524:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8002528:	e6c9      	b.n	80022be <HAL_HCD_IRQHandler+0x31a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800252a:	2b06      	cmp	r3, #6
 800252c:	d002      	beq.n	8002534 <HAL_HCD_IRQHandler+0x590>
 800252e:	2b08      	cmp	r3, #8
 8002530:	f47f aec5 	bne.w	80022be <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].ErrCnt++;
 8002534:	fb07 4005 	mla	r0, r7, r5, r4
 8002538:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800253a:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800253c:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 800253e:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002540:	bf84      	itt	hi
 8002542:	2304      	movhi	r3, #4
 8002544:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002548:	588b      	ldr	r3, [r1, r2]
        hhcd->hc[ch_num].ErrCnt = 0U;
 800254a:	bf88      	it	hi
 800254c:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002550:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002558:	bf98      	it	ls
 800255a:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800255e:	508b      	str	r3, [r1, r2]
 8002560:	e6ad      	b.n	80022be <HAL_HCD_IRQHandler+0x31a>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002562:	6826      	ldr	r6, [r4, #0]
 8002564:	69b3      	ldr	r3, [r6, #24]
 8002566:	f023 0310 	bic.w	r3, r3, #16
 800256a:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 800256c:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800256e:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 8002572:	2a02      	cmp	r2, #2
 8002574:	d129      	bne.n	80025ca <HAL_HCD_IRQHandler+0x626>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002576:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800257a:	f1b8 0f00 	cmp.w	r8, #0
 800257e:	d024      	beq.n	80025ca <HAL_HCD_IRQHandler+0x626>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002580:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002584:	2728      	movs	r7, #40	; 0x28
 8002586:	fb07 4705 	mla	r7, r7, r5, r4
 800258a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800258c:	b1e9      	cbz	r1, 80025ca <HAL_HCD_IRQHandler+0x626>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800258e:	4642      	mov	r2, r8
 8002590:	4630      	mov	r0, r6
 8002592:	f001 facb 	bl	8003b2c <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002598:	4443      	add	r3, r8
 800259a:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800259c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800259e:	4443      	add	r3, r8
 80025a0:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80025a2:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 80025a6:	016b      	lsls	r3, r5, #5
 80025a8:	199a      	adds	r2, r3, r6
 80025aa:	6911      	ldr	r1, [r2, #16]
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_HCD_IRQHandler+0x634>)
 80025ae:	400a      	ands	r2, r1
 80025b0:	b15a      	cbz	r2, 80025ca <HAL_HCD_IRQHandler+0x626>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025b2:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025b4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025bc:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80025be:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80025c2:	f083 0301 	eor.w	r3, r3, #1
 80025c6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025ca:	6822      	ldr	r2, [r4, #0]
 80025cc:	6993      	ldr	r3, [r2, #24]
 80025ce:	f043 0310 	orr.w	r3, r3, #16
 80025d2:	6193      	str	r3, [r2, #24]
 80025d4:	e5a5      	b.n	8002122 <HAL_HCD_IRQHandler+0x17e>
 80025d6:	bf00      	nop
 80025d8:	1ff80000 	.word	0x1ff80000

080025dc <HAL_HCD_Start>:
{
 80025dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 80025de:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80025e2:	2b01      	cmp	r3, #1
{
 80025e4:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80025e6:	d00d      	beq.n	8002604 <HAL_HCD_Start+0x28>
 80025e8:	2501      	movs	r5, #1
 80025ea:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80025ee:	6800      	ldr	r0, [r0, #0]
 80025f0:	f001 fa42 	bl	8003a78 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80025f4:	4629      	mov	r1, r5
 80025f6:	6820      	ldr	r0, [r4, #0]
 80025f8:	f001 fae8 	bl	8003bcc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80025fc:	2000      	movs	r0, #0
 80025fe:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8002602:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8002604:	2002      	movs	r0, #2
}
 8002606:	bd38      	pop	{r3, r4, r5, pc}

08002608 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8002608:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800260c:	2b01      	cmp	r3, #1
{
 800260e:	b510      	push	{r4, lr}
 8002610:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002612:	d009      	beq.n	8002628 <HAL_HCD_Stop+0x20>
 8002614:	2301      	movs	r3, #1
 8002616:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800261a:	6800      	ldr	r0, [r0, #0]
 800261c:	f001 fd16 	bl	800404c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002620:	2000      	movs	r0, #0
 8002622:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8002626:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002628:	2002      	movs	r0, #2
}
 800262a:	bd10      	pop	{r4, pc}

0800262c <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 800262c:	6800      	ldr	r0, [r0, #0]
 800262e:	f001 baaf 	b.w	8003b90 <USB_ResetPort>

08002632 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8002632:	2328      	movs	r3, #40	; 0x28
 8002634:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002638:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 800263c:	4770      	bx	lr

0800263e <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 800263e:	2328      	movs	r3, #40	; 0x28
 8002640:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002644:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8002646:	4770      	bx	lr

08002648 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002648:	6800      	ldr	r0, [r0, #0]
 800264a:	f001 bb5a 	b.w	8003d02 <USB_GetCurrentFrame>

0800264e <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 800264e:	6800      	ldr	r0, [r0, #0]
 8002650:	f001 bb4c 	b.w	8003cec <USB_GetHostSpeed>

08002654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002654:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002656:	4604      	mov	r4, r0
 8002658:	b908      	cbnz	r0, 800265e <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 800265a:	2001      	movs	r0, #1
 800265c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800265e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002662:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002666:	b91b      	cbnz	r3, 8002670 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002668:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800266c:	f00a f9e6 	bl	800ca3c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002670:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002672:	2324      	movs	r3, #36	; 0x24
 8002674:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002678:	6813      	ldr	r3, [r2, #0]
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002680:	f000 fadc 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002684:	6865      	ldr	r5, [r4, #4]
 8002686:	4b41      	ldr	r3, [pc, #260]	; (800278c <HAL_I2C_Init+0x138>)
 8002688:	429d      	cmp	r5, r3
 800268a:	d84d      	bhi.n	8002728 <HAL_I2C_Init+0xd4>
 800268c:	4b40      	ldr	r3, [pc, #256]	; (8002790 <HAL_I2C_Init+0x13c>)
 800268e:	4298      	cmp	r0, r3
 8002690:	d9e3      	bls.n	800265a <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002692:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002694:	493f      	ldr	r1, [pc, #252]	; (8002794 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002696:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002698:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800269c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026a0:	430b      	orrs	r3, r1
 80026a2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026a4:	6a13      	ldr	r3, [r2, #32]
 80026a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026aa:	3101      	adds	r1, #1
 80026ac:	4319      	orrs	r1, r3
 80026ae:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026b0:	69d1      	ldr	r1, [r2, #28]
 80026b2:	4b36      	ldr	r3, [pc, #216]	; (800278c <HAL_I2C_Init+0x138>)
 80026b4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80026b8:	429d      	cmp	r5, r3
 80026ba:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80026be:	f100 30ff 	add.w	r0, r0, #4294967295
 80026c2:	d848      	bhi.n	8002756 <HAL_I2C_Init+0x102>
 80026c4:	006d      	lsls	r5, r5, #1
 80026c6:	fbb0 f0f5 	udiv	r0, r0, r5
 80026ca:	3001      	adds	r0, #1
 80026cc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	bf38      	it	cc
 80026d4:	2304      	movcc	r3, #4
 80026d6:	430b      	orrs	r3, r1
 80026d8:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026da:	6811      	ldr	r1, [r2, #0]
 80026dc:	6a20      	ldr	r0, [r4, #32]
 80026de:	69e3      	ldr	r3, [r4, #28]
 80026e0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80026e4:	4303      	orrs	r3, r0
 80026e6:	430b      	orrs	r3, r1
 80026e8:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026ea:	6891      	ldr	r1, [r2, #8]
 80026ec:	68e0      	ldr	r0, [r4, #12]
 80026ee:	6923      	ldr	r3, [r4, #16]
 80026f0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80026f4:	4303      	orrs	r3, r0
 80026f6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80026fa:	430b      	orrs	r3, r1
 80026fc:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026fe:	68d1      	ldr	r1, [r2, #12]
 8002700:	69a0      	ldr	r0, [r4, #24]
 8002702:	6963      	ldr	r3, [r4, #20]
 8002704:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002708:	4303      	orrs	r3, r0
 800270a:	430b      	orrs	r3, r1
 800270c:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800270e:	6813      	ldr	r3, [r2, #0]
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002716:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002718:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800271a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800271c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002720:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002722:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8002726:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_I2C_Init+0x144>)
 800272a:	4298      	cmp	r0, r3
 800272c:	d995      	bls.n	800265a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800272e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002730:	4e18      	ldr	r6, [pc, #96]	; (8002794 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002732:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002734:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800273c:	4333      	orrs	r3, r6
 800273e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002740:	6a13      	ldr	r3, [r2, #32]
 8002742:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002746:	4371      	muls	r1, r6
 8002748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800274c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002750:	fbb1 f1f6 	udiv	r1, r1, r6
 8002754:	e7a9      	b.n	80026aa <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002756:	68a3      	ldr	r3, [r4, #8]
 8002758:	b953      	cbnz	r3, 8002770 <HAL_I2C_Init+0x11c>
 800275a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800275e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002762:	1c43      	adds	r3, r0, #1
 8002764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002768:	b16b      	cbz	r3, 8002786 <HAL_I2C_Init+0x132>
 800276a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800276e:	e7b2      	b.n	80026d6 <HAL_I2C_Init+0x82>
 8002770:	2319      	movs	r3, #25
 8002772:	436b      	muls	r3, r5
 8002774:	fbb0 f0f3 	udiv	r0, r0, r3
 8002778:	1c43      	adds	r3, r0, #1
 800277a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277e:	b113      	cbz	r3, 8002786 <HAL_I2C_Init+0x132>
 8002780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002784:	e7a7      	b.n	80026d6 <HAL_I2C_Init+0x82>
 8002786:	2301      	movs	r3, #1
 8002788:	e7a5      	b.n	80026d6 <HAL_I2C_Init+0x82>
 800278a:	bf00      	nop
 800278c:	000186a0 	.word	0x000186a0
 8002790:	001e847f 	.word	0x001e847f
 8002794:	000f4240 	.word	0x000f4240
 8002798:	003d08ff 	.word	0x003d08ff

0800279c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800279c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a0:	4604      	mov	r4, r0
 80027a2:	b918      	cbnz	r0, 80027ac <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80027a4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80027a6:	b002      	add	sp, #8
 80027a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ac:	6803      	ldr	r3, [r0, #0]
 80027ae:	07dd      	lsls	r5, r3, #31
 80027b0:	d410      	bmi.n	80027d4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	0798      	lsls	r0, r3, #30
 80027b6:	d458      	bmi.n	800286a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	071a      	lsls	r2, r3, #28
 80027bc:	f100 809a 	bmi.w	80028f4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c0:	6823      	ldr	r3, [r4, #0]
 80027c2:	075b      	lsls	r3, r3, #29
 80027c4:	f100 80b8 	bmi.w	8002938 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c8:	69a2      	ldr	r2, [r4, #24]
 80027ca:	2a00      	cmp	r2, #0
 80027cc:	f040 8119 	bne.w	8002a02 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80027d0:	2000      	movs	r0, #0
 80027d2:	e7e8      	b.n	80027a6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027d4:	4ba6      	ldr	r3, [pc, #664]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	f002 020c 	and.w	r2, r2, #12
 80027dc:	2a04      	cmp	r2, #4
 80027de:	d007      	beq.n	80027f0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027e6:	2a08      	cmp	r2, #8
 80027e8:	d10a      	bne.n	8002800 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	0259      	lsls	r1, r3, #9
 80027ee:	d507      	bpl.n	8002800 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f0:	4b9f      	ldr	r3, [pc, #636]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	039a      	lsls	r2, r3, #14
 80027f6:	d5dc      	bpl.n	80027b2 <HAL_RCC_OscConfig+0x16>
 80027f8:	6863      	ldr	r3, [r4, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1d9      	bne.n	80027b2 <HAL_RCC_OscConfig+0x16>
 80027fe:	e7d1      	b.n	80027a4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002800:	6863      	ldr	r3, [r4, #4]
 8002802:	4d9b      	ldr	r5, [pc, #620]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 8002804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002808:	d111      	bne.n	800282e <HAL_RCC_OscConfig+0x92>
 800280a:	682b      	ldr	r3, [r5, #0]
 800280c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002810:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002812:	f7fe fbb1 	bl	8000f78 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	4d96      	ldr	r5, [pc, #600]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002818:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	682b      	ldr	r3, [r5, #0]
 800281c:	039b      	lsls	r3, r3, #14
 800281e:	d4c8      	bmi.n	80027b2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002820:	f7fe fbaa 	bl	8000f78 <HAL_GetTick>
 8002824:	1b80      	subs	r0, r0, r6
 8002826:	2864      	cmp	r0, #100	; 0x64
 8002828:	d9f7      	bls.n	800281a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800282a:	2003      	movs	r0, #3
 800282c:	e7bb      	b.n	80027a6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002832:	d104      	bne.n	800283e <HAL_RCC_OscConfig+0xa2>
 8002834:	682b      	ldr	r3, [r5, #0]
 8002836:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800283a:	602b      	str	r3, [r5, #0]
 800283c:	e7e5      	b.n	800280a <HAL_RCC_OscConfig+0x6e>
 800283e:	682a      	ldr	r2, [r5, #0]
 8002840:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002844:	602a      	str	r2, [r5, #0]
 8002846:	682a      	ldr	r2, [r5, #0]
 8002848:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800284c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1df      	bne.n	8002812 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002852:	f7fe fb91 	bl	8000f78 <HAL_GetTick>
 8002856:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002858:	682b      	ldr	r3, [r5, #0]
 800285a:	039f      	lsls	r7, r3, #14
 800285c:	d5a9      	bpl.n	80027b2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800285e:	f7fe fb8b 	bl	8000f78 <HAL_GetTick>
 8002862:	1b80      	subs	r0, r0, r6
 8002864:	2864      	cmp	r0, #100	; 0x64
 8002866:	d9f7      	bls.n	8002858 <HAL_RCC_OscConfig+0xbc>
 8002868:	e7df      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800286a:	4b81      	ldr	r3, [pc, #516]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	f012 0f0c 	tst.w	r2, #12
 8002872:	d007      	beq.n	8002884 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800287a:	2a08      	cmp	r2, #8
 800287c:	d111      	bne.n	80028a2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	025e      	lsls	r6, r3, #9
 8002882:	d40e      	bmi.n	80028a2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002884:	4b7a      	ldr	r3, [pc, #488]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	0795      	lsls	r5, r2, #30
 800288a:	d502      	bpl.n	8002892 <HAL_RCC_OscConfig+0xf6>
 800288c:	68e2      	ldr	r2, [r4, #12]
 800288e:	2a01      	cmp	r2, #1
 8002890:	d188      	bne.n	80027a4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	6921      	ldr	r1, [r4, #16]
 8002896:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800289a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800289e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a0:	e78a      	b.n	80027b8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028a2:	68e2      	ldr	r2, [r4, #12]
 80028a4:	4b73      	ldr	r3, [pc, #460]	; (8002a74 <HAL_RCC_OscConfig+0x2d8>)
 80028a6:	b1b2      	cbz	r2, 80028d6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80028a8:	2201      	movs	r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028ac:	f7fe fb64 	bl	8000f78 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	4d6f      	ldr	r5, [pc, #444]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80028b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b4:	682b      	ldr	r3, [r5, #0]
 80028b6:	0798      	lsls	r0, r3, #30
 80028b8:	d507      	bpl.n	80028ca <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ba:	682b      	ldr	r3, [r5, #0]
 80028bc:	6922      	ldr	r2, [r4, #16]
 80028be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80028c2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80028c6:	602b      	str	r3, [r5, #0]
 80028c8:	e776      	b.n	80027b8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ca:	f7fe fb55 	bl	8000f78 <HAL_GetTick>
 80028ce:	1b80      	subs	r0, r0, r6
 80028d0:	2802      	cmp	r0, #2
 80028d2:	d9ef      	bls.n	80028b4 <HAL_RCC_OscConfig+0x118>
 80028d4:	e7a9      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80028d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028d8:	f7fe fb4e 	bl	8000f78 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028dc:	4d64      	ldr	r5, [pc, #400]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80028de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e0:	682b      	ldr	r3, [r5, #0]
 80028e2:	0799      	lsls	r1, r3, #30
 80028e4:	f57f af68 	bpl.w	80027b8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e8:	f7fe fb46 	bl	8000f78 <HAL_GetTick>
 80028ec:	1b80      	subs	r0, r0, r6
 80028ee:	2802      	cmp	r0, #2
 80028f0:	d9f6      	bls.n	80028e0 <HAL_RCC_OscConfig+0x144>
 80028f2:	e79a      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028f4:	6962      	ldr	r2, [r4, #20]
 80028f6:	4b60      	ldr	r3, [pc, #384]	; (8002a78 <HAL_RCC_OscConfig+0x2dc>)
 80028f8:	b17a      	cbz	r2, 800291a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80028fe:	f7fe fb3b 	bl	8000f78 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002902:	4d5b      	ldr	r5, [pc, #364]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002904:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002906:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002908:	079f      	lsls	r7, r3, #30
 800290a:	f53f af59 	bmi.w	80027c0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290e:	f7fe fb33 	bl	8000f78 <HAL_GetTick>
 8002912:	1b80      	subs	r0, r0, r6
 8002914:	2802      	cmp	r0, #2
 8002916:	d9f6      	bls.n	8002906 <HAL_RCC_OscConfig+0x16a>
 8002918:	e787      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800291a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800291c:	f7fe fb2c 	bl	8000f78 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002920:	4d53      	ldr	r5, [pc, #332]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002922:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002924:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002926:	0798      	lsls	r0, r3, #30
 8002928:	f57f af4a 	bpl.w	80027c0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800292c:	f7fe fb24 	bl	8000f78 <HAL_GetTick>
 8002930:	1b80      	subs	r0, r0, r6
 8002932:	2802      	cmp	r0, #2
 8002934:	d9f6      	bls.n	8002924 <HAL_RCC_OscConfig+0x188>
 8002936:	e778      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002938:	4b4d      	ldr	r3, [pc, #308]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 800293a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002940:	d128      	bne.n	8002994 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	9201      	str	r2, [sp, #4]
 8002944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002946:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002956:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	4d48      	ldr	r5, [pc, #288]	; (8002a7c <HAL_RCC_OscConfig+0x2e0>)
 800295a:	682b      	ldr	r3, [r5, #0]
 800295c:	05d9      	lsls	r1, r3, #23
 800295e:	d51b      	bpl.n	8002998 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002960:	68a3      	ldr	r3, [r4, #8]
 8002962:	4d43      	ldr	r5, [pc, #268]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 8002964:	2b01      	cmp	r3, #1
 8002966:	d127      	bne.n	80029b8 <HAL_RCC_OscConfig+0x21c>
 8002968:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002970:	f7fe fb02 	bl	8000f78 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002974:	4d3e      	ldr	r5, [pc, #248]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002976:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800297e:	079b      	lsls	r3, r3, #30
 8002980:	d539      	bpl.n	80029f6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002982:	2e00      	cmp	r6, #0
 8002984:	f43f af20 	beq.w	80027c8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002988:	4a39      	ldr	r2, [pc, #228]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 800298a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800298c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002990:	6413      	str	r3, [r2, #64]	; 0x40
 8002992:	e719      	b.n	80027c8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002994:	2600      	movs	r6, #0
 8002996:	e7df      	b.n	8002958 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002998:	682b      	ldr	r3, [r5, #0]
 800299a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80029a0:	f7fe faea 	bl	8000f78 <HAL_GetTick>
 80029a4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a6:	682b      	ldr	r3, [r5, #0]
 80029a8:	05da      	lsls	r2, r3, #23
 80029aa:	d4d9      	bmi.n	8002960 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ac:	f7fe fae4 	bl	8000f78 <HAL_GetTick>
 80029b0:	1bc0      	subs	r0, r0, r7
 80029b2:	2802      	cmp	r0, #2
 80029b4:	d9f7      	bls.n	80029a6 <HAL_RCC_OscConfig+0x20a>
 80029b6:	e738      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	d104      	bne.n	80029c6 <HAL_RCC_OscConfig+0x22a>
 80029bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	672b      	str	r3, [r5, #112]	; 0x70
 80029c4:	e7d0      	b.n	8002968 <HAL_RCC_OscConfig+0x1cc>
 80029c6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80029c8:	f022 0201 	bic.w	r2, r2, #1
 80029cc:	672a      	str	r2, [r5, #112]	; 0x70
 80029ce:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80029d0:	f022 0204 	bic.w	r2, r2, #4
 80029d4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1ca      	bne.n	8002970 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80029da:	f7fe facd 	bl	8000f78 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80029e2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80029e6:	0798      	lsls	r0, r3, #30
 80029e8:	d5cb      	bpl.n	8002982 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7fe fac5 	bl	8000f78 <HAL_GetTick>
 80029ee:	1bc0      	subs	r0, r0, r7
 80029f0:	4540      	cmp	r0, r8
 80029f2:	d9f7      	bls.n	80029e4 <HAL_RCC_OscConfig+0x248>
 80029f4:	e719      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7fe fabf 	bl	8000f78 <HAL_GetTick>
 80029fa:	1bc0      	subs	r0, r0, r7
 80029fc:	4540      	cmp	r0, r8
 80029fe:	d9bd      	bls.n	800297c <HAL_RCC_OscConfig+0x1e0>
 8002a00:	e713      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a02:	4d1b      	ldr	r5, [pc, #108]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
 8002a04:	68ab      	ldr	r3, [r5, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	f43f aeca 	beq.w	80027a4 <HAL_RCC_OscConfig+0x8>
 8002a10:	4e1b      	ldr	r6, [pc, #108]	; (8002a80 <HAL_RCC_OscConfig+0x2e4>)
 8002a12:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a14:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002a16:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a18:	d134      	bne.n	8002a84 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002a1a:	f7fe faad 	bl	8000f78 <HAL_GetTick>
 8002a1e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	0199      	lsls	r1, r3, #6
 8002a24:	d41e      	bmi.n	8002a64 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a26:	6a22      	ldr	r2, [r4, #32]
 8002a28:	69e3      	ldr	r3, [r4, #28]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a2e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002a32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002a38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3a:	4c0d      	ldr	r4, [pc, #52]	; (8002a70 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a3c:	0852      	lsrs	r2, r2, #1
 8002a3e:	3a01      	subs	r2, #1
 8002a40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a44:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002a46:	2301      	movs	r3, #1
 8002a48:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fa95 	bl	8000f78 <HAL_GetTick>
 8002a4e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	019a      	lsls	r2, r3, #6
 8002a54:	f53f aebc 	bmi.w	80027d0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a58:	f7fe fa8e 	bl	8000f78 <HAL_GetTick>
 8002a5c:	1b40      	subs	r0, r0, r5
 8002a5e:	2802      	cmp	r0, #2
 8002a60:	d9f6      	bls.n	8002a50 <HAL_RCC_OscConfig+0x2b4>
 8002a62:	e6e2      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fe fa88 	bl	8000f78 <HAL_GetTick>
 8002a68:	1bc0      	subs	r0, r0, r7
 8002a6a:	2802      	cmp	r0, #2
 8002a6c:	d9d8      	bls.n	8002a20 <HAL_RCC_OscConfig+0x284>
 8002a6e:	e6dc      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
 8002a70:	40023800 	.word	0x40023800
 8002a74:	42470000 	.word	0x42470000
 8002a78:	42470e80 	.word	0x42470e80
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002a84:	f7fe fa78 	bl	8000f78 <HAL_GetTick>
 8002a88:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	682b      	ldr	r3, [r5, #0]
 8002a8c:	019b      	lsls	r3, r3, #6
 8002a8e:	f57f ae9f 	bpl.w	80027d0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a92:	f7fe fa71 	bl	8000f78 <HAL_GetTick>
 8002a96:	1b00      	subs	r0, r0, r4
 8002a98:	2802      	cmp	r0, #2
 8002a9a:	d9f6      	bls.n	8002a8a <HAL_RCC_OscConfig+0x2ee>
 8002a9c:	e6c5      	b.n	800282a <HAL_RCC_OscConfig+0x8e>
 8002a9e:	bf00      	nop

08002aa0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa0:	4913      	ldr	r1, [pc, #76]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002aa2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa4:	688b      	ldr	r3, [r1, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x16>
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d003      	beq.n	8002aba <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ab2:	4810      	ldr	r0, [pc, #64]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002ab4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002ab6:	4810      	ldr	r0, [pc, #64]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x58>)
 8002ab8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002abc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002abe:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ac0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac4:	bf14      	ite	ne
 8002ac6:	480c      	ldrne	r0, [pc, #48]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac8:	480a      	ldreq	r0, [pc, #40]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002ace:	bf18      	it	ne
 8002ad0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad6:	fba1 0100 	umull	r0, r1, r1, r0
 8002ada:	f7fe f87b 	bl	8000bd4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x50>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002aea:	fbb0 f0f3 	udiv	r0, r0, r3
 8002aee:	bd08      	pop	{r3, pc}
 8002af0:	40023800 	.word	0x40023800
 8002af4:	00f42400 	.word	0x00f42400
 8002af8:	007a1200 	.word	0x007a1200

08002afc <HAL_RCC_ClockConfig>:
{
 8002afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b00:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002b02:	4604      	mov	r4, r0
 8002b04:	b910      	cbnz	r0, 8002b0c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002b06:	2001      	movs	r0, #1
 8002b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b44      	ldr	r3, [pc, #272]	; (8002c20 <HAL_RCC_ClockConfig+0x124>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	f002 020f 	and.w	r2, r2, #15
 8002b14:	428a      	cmp	r2, r1
 8002b16:	d328      	bcc.n	8002b6a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b18:	6821      	ldr	r1, [r4, #0]
 8002b1a:	078f      	lsls	r7, r1, #30
 8002b1c:	d42d      	bmi.n	8002b7a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1e:	07c8      	lsls	r0, r1, #31
 8002b20:	d440      	bmi.n	8002ba4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b22:	4b3f      	ldr	r3, [pc, #252]	; (8002c20 <HAL_RCC_ClockConfig+0x124>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	f002 020f 	and.w	r2, r2, #15
 8002b2a:	4295      	cmp	r5, r2
 8002b2c:	d366      	bcc.n	8002bfc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2e:	6822      	ldr	r2, [r4, #0]
 8002b30:	0751      	lsls	r1, r2, #29
 8002b32:	d46c      	bmi.n	8002c0e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b34:	0713      	lsls	r3, r2, #28
 8002b36:	d507      	bpl.n	8002b48 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b38:	4a3a      	ldr	r2, [pc, #232]	; (8002c24 <HAL_RCC_ClockConfig+0x128>)
 8002b3a:	6921      	ldr	r1, [r4, #16]
 8002b3c:	6893      	ldr	r3, [r2, #8]
 8002b3e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b42:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002b46:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b48:	f7ff ffaa 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002b4c:	4b35      	ldr	r3, [pc, #212]	; (8002c24 <HAL_RCC_ClockConfig+0x128>)
 8002b4e:	4a36      	ldr	r2, [pc, #216]	; (8002c28 <HAL_RCC_ClockConfig+0x12c>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b56:	5cd3      	ldrb	r3, [r2, r3]
 8002b58:	40d8      	lsrs	r0, r3
 8002b5a:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <HAL_RCC_ClockConfig+0x130>)
 8002b5c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f7fe f9c0 	bl	8000ee4 <HAL_InitTick>
  return HAL_OK;
 8002b64:	2000      	movs	r0, #0
 8002b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	b2ca      	uxtb	r2, r1
 8002b6c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	4299      	cmp	r1, r3
 8002b76:	d1c6      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xa>
 8002b78:	e7ce      	b.n	8002b18 <HAL_RCC_ClockConfig+0x1c>
 8002b7a:	4b2a      	ldr	r3, [pc, #168]	; (8002c24 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b80:	bf1e      	ittt	ne
 8002b82:	689a      	ldrne	r2, [r3, #8]
 8002b84:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002b88:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b8c:	bf42      	ittt	mi
 8002b8e:	689a      	ldrmi	r2, [r3, #8]
 8002b90:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002b94:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	68a0      	ldr	r0, [r4, #8]
 8002b9a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b9e:	4302      	orrs	r2, r0
 8002ba0:	609a      	str	r2, [r3, #8]
 8002ba2:	e7bc      	b.n	8002b1e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba4:	6862      	ldr	r2, [r4, #4]
 8002ba6:	4b1f      	ldr	r3, [pc, #124]	; (8002c24 <HAL_RCC_ClockConfig+0x128>)
 8002ba8:	2a01      	cmp	r2, #1
 8002baa:	d11d      	bne.n	8002be8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	d0a8      	beq.n	8002b06 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb4:	4e1b      	ldr	r6, [pc, #108]	; (8002c24 <HAL_RCC_ClockConfig+0x128>)
 8002bb6:	68b3      	ldr	r3, [r6, #8]
 8002bb8:	f023 0303 	bic.w	r3, r3, #3
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002bc0:	f7fe f9da 	bl	8000f78 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002bc8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bca:	68b3      	ldr	r3, [r6, #8]
 8002bcc:	6862      	ldr	r2, [r4, #4]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002bd6:	d0a4      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7fe f9ce 	bl	8000f78 <HAL_GetTick>
 8002bdc:	1bc0      	subs	r0, r0, r7
 8002bde:	4540      	cmp	r0, r8
 8002be0:	d9f3      	bls.n	8002bca <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002be2:	2003      	movs	r0, #3
}
 8002be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002be8:	1e91      	subs	r1, r2, #2
 8002bea:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bec:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bee:	d802      	bhi.n	8002bf6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bf4:	e7dd      	b.n	8002bb2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf6:	f013 0f02 	tst.w	r3, #2
 8002bfa:	e7da      	b.n	8002bb2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfc:	b2ea      	uxtb	r2, r5
 8002bfe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	429d      	cmp	r5, r3
 8002c08:	f47f af7d 	bne.w	8002b06 <HAL_RCC_ClockConfig+0xa>
 8002c0c:	e78f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c0e:	4905      	ldr	r1, [pc, #20]	; (8002c24 <HAL_RCC_ClockConfig+0x128>)
 8002c10:	68e0      	ldr	r0, [r4, #12]
 8002c12:	688b      	ldr	r3, [r1, #8]
 8002c14:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002c18:	4303      	orrs	r3, r0
 8002c1a:	608b      	str	r3, [r1, #8]
 8002c1c:	e78a      	b.n	8002b34 <HAL_RCC_ClockConfig+0x38>
 8002c1e:	bf00      	nop
 8002c20:	40023c00 	.word	0x40023c00
 8002c24:	40023800 	.word	0x40023800
 8002c28:	0801274b 	.word	0x0801274b
 8002c2c:	200005b4 	.word	0x200005b4

08002c30 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002c30:	4b01      	ldr	r3, [pc, #4]	; (8002c38 <HAL_RCC_GetHCLKFreq+0x8>)
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	200005b4 	.word	0x200005b4

08002c3c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002c3e:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002c46:	5cd3      	ldrb	r3, [r2, r3]
 8002c48:	4a03      	ldr	r2, [pc, #12]	; (8002c58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002c4a:	6810      	ldr	r0, [r2, #0]
}
 8002c4c:	40d8      	lsrs	r0, r3
 8002c4e:	4770      	bx	lr
 8002c50:	40023800 	.word	0x40023800
 8002c54:	0801275b 	.word	0x0801275b
 8002c58:	200005b4 	.word	0x200005b4

08002c5c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c5c:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002c5e:	4a05      	ldr	r2, [pc, #20]	; (8002c74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002c66:	5cd3      	ldrb	r3, [r2, r3]
 8002c68:	4a03      	ldr	r2, [pc, #12]	; (8002c78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002c6a:	6810      	ldr	r0, [r2, #0]
}
 8002c6c:	40d8      	lsrs	r0, r3
 8002c6e:	4770      	bx	lr
 8002c70:	40023800 	.word	0x40023800
 8002c74:	0801275b 	.word	0x0801275b
 8002c78:	200005b4 	.word	0x200005b4

08002c7c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002c7c:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002c7e:	4604      	mov	r4, r0
 8002c80:	b190      	cbz	r0, 8002ca8 <HAL_RNG_Init+0x2c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002c82:	7943      	ldrb	r3, [r0, #5]
 8002c84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c88:	b913      	cbnz	r3, 8002c90 <HAL_RNG_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002c8a:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002c8c:	f009 ff0e 	bl	800caac <HAL_RNG_MspInit>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002c90:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8002c92:	2302      	movs	r3, #2
 8002c94:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 8002c96:	6813      	ldr	r3, [r2, #0]
 8002c98:	f043 0304 	orr.w	r3, r3, #4
 8002c9c:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002c9e:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	7163      	strb	r3, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002ca4:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
 8002ca6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ca8:	2001      	movs	r0, #1
}
 8002caa:	bd10      	pop	{r4, pc}

08002cac <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002cae:	7903      	ldrb	r3, [r0, #4]
 8002cb0:	2b01      	cmp	r3, #1
{
 8002cb2:	4604      	mov	r4, r0
 8002cb4:	460e      	mov	r6, r1
  __HAL_LOCK(hrng);
 8002cb6:	d025      	beq.n	8002d04 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002cb8:	7963      	ldrb	r3, [r4, #5]
  __HAL_LOCK(hrng);
 8002cba:	2001      	movs	r0, #1
  if (hrng->State == HAL_RNG_STATE_READY)
 8002cbc:	4283      	cmp	r3, r0
  __HAL_LOCK(hrng);
 8002cbe:	7120      	strb	r0, [r4, #4]
  if (hrng->State == HAL_RNG_STATE_READY)
 8002cc0:	d11d      	bne.n	8002cfe <HAL_RNG_GenerateRandomNumber+0x52>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	7163      	strb	r3, [r4, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cc6:	f7fe f957 	bl	8000f78 <HAL_GetTick>
 8002cca:	4607      	mov	r7, r0

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002ccc:	6822      	ldr	r2, [r4, #0]
 8002cce:	6855      	ldr	r5, [r2, #4]
 8002cd0:	f015 0501 	ands.w	r5, r5, #1
 8002cd4:	d008      	beq.n	8002ce8 <HAL_RNG_GenerateRandomNumber+0x3c>
        return HAL_ERROR;
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002cd6:	6893      	ldr	r3, [r2, #8]
 8002cd8:	60e3      	str	r3, [r4, #12]
    *random32bit = hrng->RandomNumber;
 8002cda:	6033      	str	r3, [r6, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	7163      	strb	r3, [r4, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce0:	2000      	movs	r0, #0
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	7123      	strb	r3, [r4, #4]
 8002ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002ce8:	f7fe f946 	bl	8000f78 <HAL_GetTick>
 8002cec:	1bc0      	subs	r0, r0, r7
 8002cee:	2802      	cmp	r0, #2
 8002cf0:	d9ec      	bls.n	8002ccc <HAL_RNG_GenerateRandomNumber+0x20>
        hrng->State = HAL_RNG_STATE_READY;
 8002cf2:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002cf4:	2302      	movs	r3, #2
        hrng->State = HAL_RNG_STATE_READY;
 8002cf6:	7160      	strb	r0, [r4, #5]
        __HAL_UNLOCK(hrng);
 8002cf8:	7125      	strb	r5, [r4, #4]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002cfa:	60a3      	str	r3, [r4, #8]
 8002cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002cfe:	2304      	movs	r3, #4
 8002d00:	60a3      	str	r3, [r4, #8]
 8002d02:	e7ee      	b.n	8002ce2 <HAL_RNG_GenerateRandomNumber+0x36>
  __HAL_LOCK(hrng);
 8002d04:	2002      	movs	r0, #2

  return status;
}
 8002d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d08 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d08:	6a03      	ldr	r3, [r0, #32]
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d10:	6a03      	ldr	r3, [r0, #32]
{
 8002d12:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d14:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d16:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d18:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d1a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002d1e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d20:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002d22:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002d26:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d28:	4d0e      	ldr	r5, [pc, #56]	; (8002d64 <TIM_OC1_SetConfig+0x5c>)
 8002d2a:	42a8      	cmp	r0, r5
 8002d2c:	d002      	beq.n	8002d34 <TIM_OC1_SetConfig+0x2c>
 8002d2e:	4e0e      	ldr	r6, [pc, #56]	; (8002d68 <TIM_OC1_SetConfig+0x60>)
 8002d30:	42b0      	cmp	r0, r6
 8002d32:	d110      	bne.n	8002d56 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d34:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d36:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002d3a:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d3e:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d42:	d002      	beq.n	8002d4a <TIM_OC1_SetConfig+0x42>
 8002d44:	4d08      	ldr	r5, [pc, #32]	; (8002d68 <TIM_OC1_SetConfig+0x60>)
 8002d46:	42a8      	cmp	r0, r5
 8002d48:	d105      	bne.n	8002d56 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d4a:	694d      	ldr	r5, [r1, #20]
 8002d4c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d4e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d52:	4335      	orrs	r5, r6
 8002d54:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d56:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d58:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d5a:	684a      	ldr	r2, [r1, #4]
 8002d5c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d5e:	6203      	str	r3, [r0, #32]
 8002d60:	bd70      	pop	{r4, r5, r6, pc}
 8002d62:	bf00      	nop
 8002d64:	40010000 	.word	0x40010000
 8002d68:	40010400 	.word	0x40010400

08002d6c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d6c:	6a03      	ldr	r3, [r0, #32]
 8002d6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d72:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d74:	6a03      	ldr	r3, [r0, #32]
{
 8002d76:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d78:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d7a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d7c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d7e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002d82:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d84:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002d86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d8a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d8e:	4d11      	ldr	r5, [pc, #68]	; (8002dd4 <TIM_OC3_SetConfig+0x68>)
 8002d90:	42a8      	cmp	r0, r5
 8002d92:	d003      	beq.n	8002d9c <TIM_OC3_SetConfig+0x30>
 8002d94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d98:	42a8      	cmp	r0, r5
 8002d9a:	d114      	bne.n	8002dc6 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d9c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002da2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da6:	4d0b      	ldr	r5, [pc, #44]	; (8002dd4 <TIM_OC3_SetConfig+0x68>)
 8002da8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dae:	d003      	beq.n	8002db8 <TIM_OC3_SetConfig+0x4c>
 8002db0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002db4:	42a8      	cmp	r0, r5
 8002db6:	d106      	bne.n	8002dc6 <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002db8:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dba:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dbc:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dc0:	4335      	orrs	r5, r6
 8002dc2:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dc6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dc8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dca:	684a      	ldr	r2, [r1, #4]
 8002dcc:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dce:	6203      	str	r3, [r0, #32]
 8002dd0:	bd70      	pop	{r4, r5, r6, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40010000 	.word	0x40010000

08002dd8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dd8:	6a03      	ldr	r3, [r0, #32]
 8002dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dde:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002de0:	6a03      	ldr	r3, [r0, #32]
{
 8002de2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002de6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002de8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dea:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002df2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002df4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002df8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dfc:	4d08      	ldr	r5, [pc, #32]	; (8002e20 <TIM_OC4_SetConfig+0x48>)
 8002dfe:	42a8      	cmp	r0, r5
 8002e00:	d003      	beq.n	8002e0a <TIM_OC4_SetConfig+0x32>
 8002e02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e06:	42a8      	cmp	r0, r5
 8002e08:	d104      	bne.n	8002e14 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e0a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e0c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e10:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e14:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e16:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e18:	684a      	ldr	r2, [r1, #4]
 8002e1a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1c:	6203      	str	r3, [r0, #32]
 8002e1e:	bd30      	pop	{r4, r5, pc}
 8002e20:	40010000 	.word	0x40010000

08002e24 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8002e24:	2302      	movs	r3, #2
 8002e26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e2a:	6803      	ldr	r3, [r0, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e32:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002e34:	bf1e      	ittt	ne
 8002e36:	681a      	ldrne	r2, [r3, #0]
 8002e38:	f042 0201 	orrne.w	r2, r2, #1
 8002e3c:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8002e44:	2000      	movs	r0, #0
 8002e46:	4770      	bx	lr

08002e48 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e48:	6803      	ldr	r3, [r0, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	f042 0201 	orr.w	r2, r2, #1
 8002e50:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e58:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002e5a:	bf1e      	ittt	ne
 8002e5c:	681a      	ldrne	r2, [r3, #0]
 8002e5e:	f042 0201 	orrne.w	r2, r2, #1
 8002e62:	601a      	strne	r2, [r3, #0]
}
 8002e64:	2000      	movs	r0, #0
 8002e66:	4770      	bx	lr

08002e68 <HAL_TIM_PWM_MspInit>:
 8002e68:	4770      	bx	lr

08002e6a <HAL_TIM_PeriodElapsedCallback>:
 8002e6a:	4770      	bx	lr

08002e6c <HAL_TIM_OC_DelayElapsedCallback>:
 8002e6c:	4770      	bx	lr

08002e6e <HAL_TIM_IC_CaptureCallback>:
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002e70:	4770      	bx	lr

08002e72 <HAL_TIM_TriggerCallback>:
 8002e72:	4770      	bx	lr

08002e74 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e74:	6803      	ldr	r3, [r0, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	0791      	lsls	r1, r2, #30
{
 8002e7a:	b510      	push	{r4, lr}
 8002e7c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e7e:	d50e      	bpl.n	8002e9e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	0792      	lsls	r2, r2, #30
 8002e84:	d50b      	bpl.n	8002e9e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e86:	f06f 0202 	mvn.w	r2, #2
 8002e8a:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e8c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e8e:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e90:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e92:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e94:	d077      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	f7ff ffea 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	0750      	lsls	r0, r2, #29
 8002ea4:	d510      	bpl.n	8002ec8 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	0751      	lsls	r1, r2, #29
 8002eaa:	d50d      	bpl.n	8002ec8 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eac:	f06f 0204 	mvn.w	r2, #4
 8002eb0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eb2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eb4:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eb6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eba:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002ebc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ebe:	d068      	beq.n	8002f92 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec0:	f7ff ffd5 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	0712      	lsls	r2, r2, #28
 8002ece:	d50f      	bpl.n	8002ef0 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	0710      	lsls	r0, r2, #28
 8002ed4:	d50c      	bpl.n	8002ef0 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ed6:	f06f 0208 	mvn.w	r2, #8
 8002eda:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002edc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ede:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee0:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ee2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee6:	d05a      	beq.n	8002f9e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee8:	f7ff ffc1 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eec:	2300      	movs	r3, #0
 8002eee:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	06d2      	lsls	r2, r2, #27
 8002ef6:	d510      	bpl.n	8002f1a <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	06d0      	lsls	r0, r2, #27
 8002efc:	d50d      	bpl.n	8002f1a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002efe:	f06f 0210 	mvn.w	r2, #16
 8002f02:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f04:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f06:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f08:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f0c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f10:	d04b      	beq.n	8002faa <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f12:	f7ff ffac 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	2300      	movs	r3, #0
 8002f18:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	07d1      	lsls	r1, r2, #31
 8002f20:	d508      	bpl.n	8002f34 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	07d2      	lsls	r2, r2, #31
 8002f26:	d505      	bpl.n	8002f34 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f28:	f06f 0201 	mvn.w	r2, #1
 8002f2c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f7ff ff9b 	bl	8002e6a <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	0610      	lsls	r0, r2, #24
 8002f3a:	d508      	bpl.n	8002f4e <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	0611      	lsls	r1, r2, #24
 8002f40:	d505      	bpl.n	8002f4e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f46:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002f48:	4620      	mov	r0, r4
 8002f4a:	f000 fa52 	bl	80033f2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	0652      	lsls	r2, r2, #25
 8002f54:	d508      	bpl.n	8002f68 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	0650      	lsls	r0, r2, #25
 8002f5a:	d505      	bpl.n	8002f68 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f60:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002f62:	4620      	mov	r0, r4
 8002f64:	f7ff ff85 	bl	8002e72 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	0691      	lsls	r1, r2, #26
 8002f6e:	d522      	bpl.n	8002fb6 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	0692      	lsls	r2, r2, #26
 8002f74:	d51f      	bpl.n	8002fb6 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f76:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002f7a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f7c:	611a      	str	r2, [r3, #16]
}
 8002f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002f82:	f000 ba35 	b.w	80033f0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f86:	f7ff ff71 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f7ff ff70 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f90:	e783      	b.n	8002e9a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f92:	f7ff ff6b 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f96:	4620      	mov	r0, r4
 8002f98:	f7ff ff6a 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f9c:	e792      	b.n	8002ec4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9e:	f7ff ff65 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f7ff ff64 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
 8002fa8:	e7a0      	b.n	8002eec <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	f7ff ff5f 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f7ff ff5e 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
 8002fb4:	e7af      	b.n	8002f16 <HAL_TIM_IRQHandler+0xa2>
 8002fb6:	bd10      	pop	{r4, pc}

08002fb8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb8:	4a30      	ldr	r2, [pc, #192]	; (800307c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002fba:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fbc:	4290      	cmp	r0, r2
 8002fbe:	d012      	beq.n	8002fe6 <TIM_Base_SetConfig+0x2e>
 8002fc0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002fc4:	d00f      	beq.n	8002fe6 <TIM_Base_SetConfig+0x2e>
 8002fc6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002fca:	4290      	cmp	r0, r2
 8002fcc:	d00b      	beq.n	8002fe6 <TIM_Base_SetConfig+0x2e>
 8002fce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fd2:	4290      	cmp	r0, r2
 8002fd4:	d007      	beq.n	8002fe6 <TIM_Base_SetConfig+0x2e>
 8002fd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fda:	4290      	cmp	r0, r2
 8002fdc:	d003      	beq.n	8002fe6 <TIM_Base_SetConfig+0x2e>
 8002fde:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002fe2:	4290      	cmp	r0, r2
 8002fe4:	d119      	bne.n	800301a <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8002fe6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002fec:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fee:	4a23      	ldr	r2, [pc, #140]	; (800307c <TIM_Base_SetConfig+0xc4>)
 8002ff0:	4290      	cmp	r0, r2
 8002ff2:	d029      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8002ff4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002ff8:	d026      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8002ffa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002ffe:	4290      	cmp	r0, r2
 8003000:	d022      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8003002:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003006:	4290      	cmp	r0, r2
 8003008:	d01e      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 800300a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800300e:	4290      	cmp	r0, r2
 8003010:	d01a      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8003012:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003016:	4290      	cmp	r0, r2
 8003018:	d016      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 800301a:	4a19      	ldr	r2, [pc, #100]	; (8003080 <TIM_Base_SetConfig+0xc8>)
 800301c:	4290      	cmp	r0, r2
 800301e:	d013      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8003020:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003024:	4290      	cmp	r0, r2
 8003026:	d00f      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8003028:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800302c:	4290      	cmp	r0, r2
 800302e:	d00b      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8003030:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003034:	4290      	cmp	r0, r2
 8003036:	d007      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8003038:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800303c:	4290      	cmp	r0, r2
 800303e:	d003      	beq.n	8003048 <TIM_Base_SetConfig+0x90>
 8003040:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003044:	4290      	cmp	r0, r2
 8003046:	d103      	bne.n	8003050 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003048:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800304a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800304e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003050:	694a      	ldr	r2, [r1, #20]
 8003052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003056:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003058:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800305a:	688b      	ldr	r3, [r1, #8]
 800305c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800305e:	680b      	ldr	r3, [r1, #0]
 8003060:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <TIM_Base_SetConfig+0xc4>)
 8003064:	4298      	cmp	r0, r3
 8003066:	d003      	beq.n	8003070 <TIM_Base_SetConfig+0xb8>
 8003068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800306c:	4298      	cmp	r0, r3
 800306e:	d101      	bne.n	8003074 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8003070:	690b      	ldr	r3, [r1, #16]
 8003072:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003074:	2301      	movs	r3, #1
 8003076:	6143      	str	r3, [r0, #20]
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40010000 	.word	0x40010000
 8003080:	40014000 	.word	0x40014000

08003084 <HAL_TIM_Base_Init>:
{
 8003084:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003086:	4604      	mov	r4, r0
 8003088:	b1a0      	cbz	r0, 80030b4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800308a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800308e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003092:	b91b      	cbnz	r3, 800309c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003094:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003098:	f009 fd20 	bl	800cadc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	2302      	movs	r3, #2
 800309e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a2:	6820      	ldr	r0, [r4, #0]
 80030a4:	1d21      	adds	r1, r4, #4
 80030a6:	f7ff ff87 	bl	8002fb8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80030aa:	2301      	movs	r3, #1
 80030ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80030b0:	2000      	movs	r0, #0
 80030b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80030b4:	2001      	movs	r0, #1
}
 80030b6:	bd10      	pop	{r4, pc}

080030b8 <HAL_TIM_PWM_Init>:
{
 80030b8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80030ba:	4604      	mov	r4, r0
 80030bc:	b1a0      	cbz	r0, 80030e8 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80030be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80030c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030c6:	b91b      	cbnz	r3, 80030d0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80030c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80030cc:	f7ff fecc 	bl	8002e68 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	2302      	movs	r3, #2
 80030d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d6:	6820      	ldr	r0, [r4, #0]
 80030d8:	1d21      	adds	r1, r4, #4
 80030da:	f7ff ff6d 	bl	8002fb8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80030de:	2301      	movs	r3, #1
 80030e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80030e4:	2000      	movs	r0, #0
 80030e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80030e8:	2001      	movs	r0, #1
}
 80030ea:	bd10      	pop	{r4, pc}

080030ec <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ec:	6a03      	ldr	r3, [r0, #32]
 80030ee:	f023 0310 	bic.w	r3, r3, #16
 80030f2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80030f4:	6a03      	ldr	r3, [r0, #32]
{
 80030f6:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 80030f8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80030fa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030fe:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003102:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003106:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003108:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800310c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003110:	4d10      	ldr	r5, [pc, #64]	; (8003154 <TIM_OC2_SetConfig+0x68>)
 8003112:	42a8      	cmp	r0, r5
 8003114:	d003      	beq.n	800311e <TIM_OC2_SetConfig+0x32>
 8003116:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800311a:	42a8      	cmp	r0, r5
 800311c:	d114      	bne.n	8003148 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800311e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003124:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003128:	4d0a      	ldr	r5, [pc, #40]	; (8003154 <TIM_OC2_SetConfig+0x68>)
 800312a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800312c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003130:	d003      	beq.n	800313a <TIM_OC2_SetConfig+0x4e>
 8003132:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003136:	42a8      	cmp	r0, r5
 8003138:	d106      	bne.n	8003148 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800313a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800313c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800313e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003142:	4335      	orrs	r5, r6
 8003144:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003148:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800314a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800314c:	684a      	ldr	r2, [r1, #4]
 800314e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003150:	6203      	str	r3, [r0, #32]
 8003152:	bd70      	pop	{r4, r5, r6, pc}
 8003154:	40010000 	.word	0x40010000

08003158 <HAL_TIM_PWM_ConfigChannel>:
{
 8003158:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800315a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800315e:	2b01      	cmp	r3, #1
{
 8003160:	4604      	mov	r4, r0
 8003162:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003166:	d025      	beq.n	80031b4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8003168:	2301      	movs	r3, #1
 800316a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800316e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8003172:	2a0c      	cmp	r2, #12
 8003174:	d818      	bhi.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x50>
 8003176:	e8df f002 	tbb	[pc, r2]
 800317a:	1707      	.short	0x1707
 800317c:	171e1717 	.word	0x171e1717
 8003180:	172f1717 	.word	0x172f1717
 8003184:	1717      	.short	0x1717
 8003186:	40          	.byte	0x40
 8003187:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003188:	6820      	ldr	r0, [r4, #0]
 800318a:	f7ff fdbd 	bl	8002d08 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800318e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003190:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003192:	699a      	ldr	r2, [r3, #24]
 8003194:	f042 0208 	orr.w	r2, r2, #8
 8003198:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	f022 0204 	bic.w	r2, r2, #4
 80031a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031a2:	699a      	ldr	r2, [r3, #24]
 80031a4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031a6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80031a8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80031aa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80031ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80031b0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80031b4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031b6:	6820      	ldr	r0, [r4, #0]
 80031b8:	f7ff ff98 	bl	80030ec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031bc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031be:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031c8:	699a      	ldr	r2, [r3, #24]
 80031ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031d6:	e7e6      	b.n	80031a6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031d8:	6820      	ldr	r0, [r4, #0]
 80031da:	f7ff fdc7 	bl	8002d6c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031de:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031e0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031e2:	69da      	ldr	r2, [r3, #28]
 80031e4:	f042 0208 	orr.w	r2, r2, #8
 80031e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ea:	69da      	ldr	r2, [r3, #28]
 80031ec:	f022 0204 	bic.w	r2, r2, #4
 80031f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031f6:	61da      	str	r2, [r3, #28]
      break;
 80031f8:	e7d6      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031fa:	6820      	ldr	r0, [r4, #0]
 80031fc:	f7ff fdec 	bl	8002dd8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003200:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003202:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800320a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800320c:	69da      	ldr	r2, [r3, #28]
 800320e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003212:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800321a:	e7ec      	b.n	80031f6 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800321c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800321c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800321e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003220:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003222:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003226:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800322a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800322c:	6083      	str	r3, [r0, #8]
 800322e:	bd10      	pop	{r4, pc}

08003230 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003230:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003234:	2b01      	cmp	r3, #1
{
 8003236:	b570      	push	{r4, r5, r6, lr}
 8003238:	4604      	mov	r4, r0
 800323a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800323e:	d019      	beq.n	8003274 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8003240:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003244:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003246:	2301      	movs	r3, #1
 8003248:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800324c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800324e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003252:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003256:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003258:	680b      	ldr	r3, [r1, #0]
 800325a:	2b40      	cmp	r3, #64	; 0x40
 800325c:	d065      	beq.n	800332a <HAL_TIM_ConfigClockSource+0xfa>
 800325e:	d815      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x5c>
 8003260:	2b10      	cmp	r3, #16
 8003262:	d00c      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x4e>
 8003264:	d807      	bhi.n	8003276 <HAL_TIM_ConfigClockSource+0x46>
 8003266:	b153      	cbz	r3, 800327e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8003268:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800326a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800326c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003270:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003274:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003276:	2b20      	cmp	r3, #32
 8003278:	d001      	beq.n	800327e <HAL_TIM_ConfigClockSource+0x4e>
 800327a:	2b30      	cmp	r3, #48	; 0x30
 800327c:	d1f4      	bne.n	8003268 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800327e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003280:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8003284:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003288:	4313      	orrs	r3, r2
 800328a:	e01a      	b.n	80032c2 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800328c:	2b60      	cmp	r3, #96	; 0x60
 800328e:	d034      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0xca>
 8003290:	d819      	bhi.n	80032c6 <HAL_TIM_ConfigClockSource+0x96>
 8003292:	2b50      	cmp	r3, #80	; 0x50
 8003294:	d1e8      	bne.n	8003268 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003296:	684a      	ldr	r2, [r1, #4]
 8003298:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800329a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800329c:	6a05      	ldr	r5, [r0, #32]
 800329e:	f025 0501 	bic.w	r5, r5, #1
 80032a2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032a6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032ae:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80032b2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80032b4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80032b6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80032b8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032be:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80032c2:	6083      	str	r3, [r0, #8]
 80032c4:	e7d0      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80032c6:	2b70      	cmp	r3, #112	; 0x70
 80032c8:	d00c      	beq.n	80032e4 <HAL_TIM_ConfigClockSource+0xb4>
 80032ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ce:	d1cb      	bne.n	8003268 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80032d0:	68cb      	ldr	r3, [r1, #12]
 80032d2:	684a      	ldr	r2, [r1, #4]
 80032d4:	6889      	ldr	r1, [r1, #8]
 80032d6:	f7ff ffa1 	bl	800321c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032da:	6822      	ldr	r2, [r4, #0]
 80032dc:	6893      	ldr	r3, [r2, #8]
 80032de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032e2:	e008      	b.n	80032f6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80032e4:	68cb      	ldr	r3, [r1, #12]
 80032e6:	684a      	ldr	r2, [r1, #4]
 80032e8:	6889      	ldr	r1, [r1, #8]
 80032ea:	f7ff ff97 	bl	800321c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032ee:	6822      	ldr	r2, [r4, #0]
 80032f0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032f6:	6093      	str	r3, [r2, #8]
      break;
 80032f8:	e7b6      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032fa:	684d      	ldr	r5, [r1, #4]
 80032fc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032fe:	6a01      	ldr	r1, [r0, #32]
 8003300:	f021 0110 	bic.w	r1, r1, #16
 8003304:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003306:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003308:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800330a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800330e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003312:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003316:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800331a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800331c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800331e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003324:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003328:	e7cb      	b.n	80032c2 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800332a:	684a      	ldr	r2, [r1, #4]
 800332c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800332e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003330:	6a05      	ldr	r5, [r0, #32]
 8003332:	f025 0501 	bic.w	r5, r5, #1
 8003336:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003338:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800333a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800333e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003342:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003346:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003348:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800334a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800334c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800334e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003352:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8003356:	e7b4      	b.n	80032c2 <HAL_TIM_ConfigClockSource+0x92>

08003358 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003358:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800335a:	f001 011f 	and.w	r1, r1, #31
{
 800335e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003360:	2401      	movs	r4, #1
 8003362:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003364:	ea23 0304 	bic.w	r3, r3, r4
 8003368:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800336a:	6a03      	ldr	r3, [r0, #32]
 800336c:	408a      	lsls	r2, r1
 800336e:	431a      	orrs	r2, r3
 8003370:	6202      	str	r2, [r0, #32]
 8003372:	bd10      	pop	{r4, pc}

08003374 <HAL_TIM_PWM_Start>:
{
 8003374:	b510      	push	{r4, lr}
 8003376:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003378:	2201      	movs	r2, #1
 800337a:	6800      	ldr	r0, [r0, #0]
 800337c:	f7ff ffec 	bl	8003358 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	4a0b      	ldr	r2, [pc, #44]	; (80033b0 <HAL_TIM_PWM_Start+0x3c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00e      	beq.n	80033a6 <HAL_TIM_PWM_Start+0x32>
 8003388:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800338c:	4293      	cmp	r3, r2
 800338e:	d00a      	beq.n	80033a6 <HAL_TIM_PWM_Start+0x32>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003396:	2a06      	cmp	r2, #6
 8003398:	d003      	beq.n	80033a2 <HAL_TIM_PWM_Start+0x2e>
    __HAL_TIM_ENABLE(htim);
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	f042 0201 	orr.w	r2, r2, #1
 80033a0:	601a      	str	r2, [r3, #0]
}
 80033a2:	2000      	movs	r0, #0
 80033a4:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80033a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
 80033ae:	e7ef      	b.n	8003390 <HAL_TIM_PWM_Start+0x1c>
 80033b0:	40010000 	.word	0x40010000

080033b4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80033b8:	2b01      	cmp	r3, #1
{
 80033ba:	b530      	push	{r4, r5, lr}
 80033bc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80033c0:	d014      	beq.n	80033ec <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033c2:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80033c8:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033ca:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033cc:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ce:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80033d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80033d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033d8:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033da:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033dc:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033de:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e6:	2300      	movs	r3, #0
 80033e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80033ec:	4618      	mov	r0, r3

  return HAL_OK;
}
 80033ee:	bd30      	pop	{r4, r5, pc}

080033f0 <HAL_TIMEx_CommutCallback>:
 80033f0:	4770      	bx	lr

080033f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033f2:	4770      	bx	lr

080033f4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f4:	6803      	ldr	r3, [r0, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033fc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fe:	695a      	ldr	r2, [r3, #20]
 8003400:	f022 0201 	bic.w	r2, r2, #1
 8003404:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003406:	2320      	movs	r3, #32
 8003408:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800340c:	4770      	bx	lr
	...

08003410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003414:	6806      	ldr	r6, [r0, #0]
 8003416:	68c2      	ldr	r2, [r0, #12]
 8003418:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800341a:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800341c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003420:	4313      	orrs	r3, r2
 8003422:	6133      	str	r3, [r6, #16]
{
 8003424:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003426:	6883      	ldr	r3, [r0, #8]
 8003428:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800342a:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800342c:	4303      	orrs	r3, r0
 800342e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003430:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003434:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003436:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800343a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 800343c:	4313      	orrs	r3, r2
 800343e:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003440:	6973      	ldr	r3, [r6, #20]
 8003442:	69a2      	ldr	r2, [r4, #24]
 8003444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003448:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800344a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800344e:	6173      	str	r3, [r6, #20]
 8003450:	4b7a      	ldr	r3, [pc, #488]	; (800363c <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003452:	d17c      	bne.n	800354e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003454:	429e      	cmp	r6, r3
 8003456:	d003      	beq.n	8003460 <UART_SetConfig+0x50>
 8003458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800345c:	429e      	cmp	r6, r3
 800345e:	d144      	bne.n	80034ea <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003460:	f7ff fbfc 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 8003464:	2519      	movs	r5, #25
 8003466:	fb05 f300 	mul.w	r3, r5, r0
 800346a:	6860      	ldr	r0, [r4, #4]
 800346c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003470:	0040      	lsls	r0, r0, #1
 8003472:	fbb3 f3f0 	udiv	r3, r3, r0
 8003476:	fbb3 f3f9 	udiv	r3, r3, r9
 800347a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800347e:	f7ff fbed 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 8003482:	6863      	ldr	r3, [r4, #4]
 8003484:	4368      	muls	r0, r5
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	fbb0 f7f3 	udiv	r7, r0, r3
 800348c:	f7ff fbe6 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 8003490:	6863      	ldr	r3, [r4, #4]
 8003492:	4368      	muls	r0, r5
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	fbb0 f3f3 	udiv	r3, r0, r3
 800349a:	fbb3 f3f9 	udiv	r3, r3, r9
 800349e:	fb09 7313 	mls	r3, r9, r3, r7
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	3332      	adds	r3, #50	; 0x32
 80034a6:	fbb3 f3f9 	udiv	r3, r3, r9
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80034b0:	f7ff fbd4 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 80034b4:	6862      	ldr	r2, [r4, #4]
 80034b6:	4368      	muls	r0, r5
 80034b8:	0052      	lsls	r2, r2, #1
 80034ba:	fbb0 faf2 	udiv	sl, r0, r2
 80034be:	f7ff fbcd 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80034c2:	6863      	ldr	r3, [r4, #4]
 80034c4:	4368      	muls	r0, r5
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80034cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80034d0:	fb09 a313 	mls	r3, r9, r3, sl
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	3332      	adds	r3, #50	; 0x32
 80034d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80034e2:	443b      	add	r3, r7
 80034e4:	60b3      	str	r3, [r6, #8]
 80034e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80034ea:	f7ff fba7 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 80034ee:	2519      	movs	r5, #25
 80034f0:	fb05 f300 	mul.w	r3, r5, r0
 80034f4:	6860      	ldr	r0, [r4, #4]
 80034f6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80034fa:	0040      	lsls	r0, r0, #1
 80034fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8003500:	fbb3 f3f9 	udiv	r3, r3, r9
 8003504:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003508:	f7ff fb98 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 800350c:	6863      	ldr	r3, [r4, #4]
 800350e:	4368      	muls	r0, r5
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	fbb0 f7f3 	udiv	r7, r0, r3
 8003516:	f7ff fb91 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 800351a:	6863      	ldr	r3, [r4, #4]
 800351c:	4368      	muls	r0, r5
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	fbb0 f3f3 	udiv	r3, r0, r3
 8003524:	fbb3 f3f9 	udiv	r3, r3, r9
 8003528:	fb09 7313 	mls	r3, r9, r3, r7
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	3332      	adds	r3, #50	; 0x32
 8003530:	fbb3 f3f9 	udiv	r3, r3, r9
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800353a:	f7ff fb7f 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 800353e:	6862      	ldr	r2, [r4, #4]
 8003540:	4368      	muls	r0, r5
 8003542:	0052      	lsls	r2, r2, #1
 8003544:	fbb0 faf2 	udiv	sl, r0, r2
 8003548:	f7ff fb78 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 800354c:	e7b9      	b.n	80034c2 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800354e:	429e      	cmp	r6, r3
 8003550:	d002      	beq.n	8003558 <UART_SetConfig+0x148>
 8003552:	4b3b      	ldr	r3, [pc, #236]	; (8003640 <UART_SetConfig+0x230>)
 8003554:	429e      	cmp	r6, r3
 8003556:	d140      	bne.n	80035da <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003558:	f7ff fb80 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 800355c:	6867      	ldr	r7, [r4, #4]
 800355e:	2519      	movs	r5, #25
 8003560:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003564:	fb05 f300 	mul.w	r3, r5, r0
 8003568:	00bf      	lsls	r7, r7, #2
 800356a:	fbb3 f3f7 	udiv	r3, r3, r7
 800356e:	fbb3 f3f9 	udiv	r3, r3, r9
 8003572:	011f      	lsls	r7, r3, #4
 8003574:	f7ff fb72 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 8003578:	6863      	ldr	r3, [r4, #4]
 800357a:	4368      	muls	r0, r5
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	fbb0 f8f3 	udiv	r8, r0, r3
 8003582:	f7ff fb6b 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 8003586:	6863      	ldr	r3, [r4, #4]
 8003588:	4368      	muls	r0, r5
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003590:	fbb3 f3f9 	udiv	r3, r3, r9
 8003594:	fb09 8313 	mls	r3, r9, r3, r8
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	3332      	adds	r3, #50	; 0x32
 800359c:	fbb3 f3f9 	udiv	r3, r3, r9
 80035a0:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80035a4:	f7ff fb5a 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 80035a8:	6862      	ldr	r2, [r4, #4]
 80035aa:	4368      	muls	r0, r5
 80035ac:	0092      	lsls	r2, r2, #2
 80035ae:	fbb0 faf2 	udiv	sl, r0, r2
 80035b2:	f7ff fb53 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80035b6:	6863      	ldr	r3, [r4, #4]
 80035b8:	4368      	muls	r0, r5
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80035c4:	fb09 a313 	mls	r3, r9, r3, sl
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	3332      	adds	r3, #50	; 0x32
 80035cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	ea43 0308 	orr.w	r3, r3, r8
 80035d8:	e783      	b.n	80034e2 <UART_SetConfig+0xd2>
 80035da:	f7ff fb2f 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 80035de:	6867      	ldr	r7, [r4, #4]
 80035e0:	2519      	movs	r5, #25
 80035e2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80035e6:	fb05 f300 	mul.w	r3, r5, r0
 80035ea:	00bf      	lsls	r7, r7, #2
 80035ec:	fbb3 f3f7 	udiv	r3, r3, r7
 80035f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80035f4:	011f      	lsls	r7, r3, #4
 80035f6:	f7ff fb21 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 80035fa:	6863      	ldr	r3, [r4, #4]
 80035fc:	4368      	muls	r0, r5
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	fbb0 f8f3 	udiv	r8, r0, r3
 8003604:	f7ff fb1a 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8003608:	6863      	ldr	r3, [r4, #4]
 800360a:	4368      	muls	r0, r5
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003612:	fbb3 f3f9 	udiv	r3, r3, r9
 8003616:	fb09 8313 	mls	r3, r9, r3, r8
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	3332      	adds	r3, #50	; 0x32
 800361e:	fbb3 f3f9 	udiv	r3, r3, r9
 8003622:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003626:	f7ff fb09 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 800362a:	6862      	ldr	r2, [r4, #4]
 800362c:	4368      	muls	r0, r5
 800362e:	0092      	lsls	r2, r2, #2
 8003630:	fbb0 faf2 	udiv	sl, r0, r2
 8003634:	f7ff fb02 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8003638:	e7bd      	b.n	80035b6 <UART_SetConfig+0x1a6>
 800363a:	bf00      	nop
 800363c:	40011000 	.word	0x40011000
 8003640:	40011400 	.word	0x40011400

08003644 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003646:	4604      	mov	r4, r0
 8003648:	460e      	mov	r6, r1
 800364a:	4617      	mov	r7, r2
 800364c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364e:	6821      	ldr	r1, [r4, #0]
 8003650:	680b      	ldr	r3, [r1, #0]
 8003652:	ea36 0303 	bics.w	r3, r6, r3
 8003656:	d101      	bne.n	800365c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003658:	2000      	movs	r0, #0
}
 800365a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800365c:	1c6b      	adds	r3, r5, #1
 800365e:	d0f7      	beq.n	8003650 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003660:	b995      	cbnz	r5, 8003688 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800366a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003674:	2320      	movs	r3, #32
 8003676:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800367a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800367e:	2300      	movs	r3, #0
 8003680:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8003684:	2003      	movs	r0, #3
 8003686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003688:	f7fd fc76 	bl	8000f78 <HAL_GetTick>
 800368c:	1bc0      	subs	r0, r0, r7
 800368e:	4285      	cmp	r5, r0
 8003690:	d2dd      	bcs.n	800364e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8003692:	e7e6      	b.n	8003662 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08003694 <HAL_UART_Init>:
{
 8003694:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003696:	4604      	mov	r4, r0
 8003698:	b340      	cbz	r0, 80036ec <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800369a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800369e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036a2:	b91b      	cbnz	r3, 80036ac <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80036a4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80036a8:	f009 fa72 	bl	800cb90 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80036ac:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80036ae:	2324      	movs	r3, #36	; 0x24
 80036b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80036b4:	68d3      	ldr	r3, [r2, #12]
 80036b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ba:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80036bc:	4620      	mov	r0, r4
 80036be:	f7ff fea7 	bl	8003410 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036d2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036da:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036dc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80036de:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80036e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80036e6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80036ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80036ec:	2001      	movs	r0, #1
}
 80036ee:	bd10      	pop	{r4, pc}

080036f0 <HAL_UART_Transmit>:
{
 80036f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036f4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80036f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80036fa:	2b20      	cmp	r3, #32
{
 80036fc:	4604      	mov	r4, r0
 80036fe:	460d      	mov	r5, r1
 8003700:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003702:	d14f      	bne.n	80037a4 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8003704:	2900      	cmp	r1, #0
 8003706:	d04a      	beq.n	800379e <HAL_UART_Transmit+0xae>
 8003708:	2a00      	cmp	r2, #0
 800370a:	d048      	beq.n	800379e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800370c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003710:	2b01      	cmp	r3, #1
 8003712:	d047      	beq.n	80037a4 <HAL_UART_Transmit+0xb4>
 8003714:	2301      	movs	r3, #1
 8003716:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371a:	2300      	movs	r3, #0
 800371c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800371e:	2321      	movs	r3, #33	; 0x21
 8003720:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003724:	f7fd fc28 	bl	8000f78 <HAL_GetTick>
    huart->TxXferSize = Size;
 8003728:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800372c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800372e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003732:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003734:	b29b      	uxth	r3, r3
 8003736:	b96b      	cbnz	r3, 8003754 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003738:	463b      	mov	r3, r7
 800373a:	4632      	mov	r2, r6
 800373c:	2140      	movs	r1, #64	; 0x40
 800373e:	4620      	mov	r0, r4
 8003740:	f7ff ff80 	bl	8003644 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003744:	b9b0      	cbnz	r0, 8003774 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8003746:	2320      	movs	r3, #32
 8003748:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800374c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8003750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8003754:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003756:	3b01      	subs	r3, #1
 8003758:	b29b      	uxth	r3, r3
 800375a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800375c:	68a3      	ldr	r3, [r4, #8]
 800375e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003762:	4632      	mov	r2, r6
 8003764:	463b      	mov	r3, r7
 8003766:	f04f 0180 	mov.w	r1, #128	; 0x80
 800376a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800376c:	d10e      	bne.n	800378c <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800376e:	f7ff ff69 	bl	8003644 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003772:	b110      	cbz	r0, 800377a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8003774:	2003      	movs	r0, #3
 8003776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800377a:	882b      	ldrh	r3, [r5, #0]
 800377c:	6822      	ldr	r2, [r4, #0]
 800377e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003782:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003784:	6923      	ldr	r3, [r4, #16]
 8003786:	b943      	cbnz	r3, 800379a <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8003788:	3502      	adds	r5, #2
 800378a:	e7d2      	b.n	8003732 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800378c:	f7ff ff5a 	bl	8003644 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003790:	2800      	cmp	r0, #0
 8003792:	d1ef      	bne.n	8003774 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	782a      	ldrb	r2, [r5, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	3501      	adds	r5, #1
 800379c:	e7c9      	b.n	8003732 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800379e:	2001      	movs	r0, #1
 80037a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80037a4:	2002      	movs	r0, #2
}
 80037a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080037aa <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80037aa:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d120      	bne.n	80037f4 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80037b2:	b1e9      	cbz	r1, 80037f0 <HAL_UART_Receive_IT+0x46>
 80037b4:	b1e2      	cbz	r2, 80037f0 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80037b6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d01a      	beq.n	80037f4 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80037be:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80037c0:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c2:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037c4:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c6:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037c8:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037cc:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80037ce:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037d0:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80037d2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037d6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80037da:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037dc:	6951      	ldr	r1, [r2, #20]
 80037de:	f041 0101 	orr.w	r1, r1, #1
 80037e2:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037e4:	68d1      	ldr	r1, [r2, #12]
 80037e6:	f041 0120 	orr.w	r1, r1, #32
 80037ea:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80037ec:	4618      	mov	r0, r3
 80037ee:	4770      	bx	lr
      return HAL_ERROR;
 80037f0:	2001      	movs	r0, #1
 80037f2:	4770      	bx	lr
    return HAL_BUSY;
 80037f4:	2002      	movs	r0, #2
}
 80037f6:	4770      	bx	lr

080037f8 <HAL_UART_TxCpltCallback>:
 80037f8:	4770      	bx	lr

080037fa <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037fa:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80037fe:	2b22      	cmp	r3, #34	; 0x22
{
 8003800:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003802:	d136      	bne.n	8003872 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003804:	6883      	ldr	r3, [r0, #8]
 8003806:	6901      	ldr	r1, [r0, #16]
 8003808:	6802      	ldr	r2, [r0, #0]
 800380a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003810:	d123      	bne.n	800385a <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003812:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003814:	b9e9      	cbnz	r1, 8003852 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003816:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800381a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800381e:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003820:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8003822:	3c01      	subs	r4, #1
 8003824:	b2a4      	uxth	r4, r4
 8003826:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8003828:	b98c      	cbnz	r4, 800384e <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800382a:	6803      	ldr	r3, [r0, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	f022 0220 	bic.w	r2, r2, #32
 8003832:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800383a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003844:	2320      	movs	r3, #32
 8003846:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800384a:	f008 fd27 	bl	800c29c <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800384e:	2000      	movs	r0, #0
}
 8003850:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	f823 2b01 	strh.w	r2, [r3], #1
 8003858:	e7e1      	b.n	800381e <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800385a:	b921      	cbnz	r1, 8003866 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800385c:	1c59      	adds	r1, r3, #1
 800385e:	6852      	ldr	r2, [r2, #4]
 8003860:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	e7dc      	b.n	8003820 <UART_Receive_IT+0x26>
 8003866:	6852      	ldr	r2, [r2, #4]
 8003868:	1c59      	adds	r1, r3, #1
 800386a:	6281      	str	r1, [r0, #40]	; 0x28
 800386c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003870:	e7f7      	b.n	8003862 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8003872:	2002      	movs	r0, #2
 8003874:	bd10      	pop	{r4, pc}

08003876 <HAL_UART_ErrorCallback>:
 8003876:	4770      	bx	lr

08003878 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003878:	6803      	ldr	r3, [r0, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800387c:	68d9      	ldr	r1, [r3, #12]
{
 800387e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8003880:	0716      	lsls	r6, r2, #28
{
 8003882:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003884:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003886:	d107      	bne.n	8003898 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003888:	0696      	lsls	r6, r2, #26
 800388a:	d55a      	bpl.n	8003942 <HAL_UART_IRQHandler+0xca>
 800388c:	068d      	lsls	r5, r1, #26
 800388e:	d558      	bpl.n	8003942 <HAL_UART_IRQHandler+0xca>
}
 8003890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003894:	f7ff bfb1 	b.w	80037fa <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003898:	f015 0501 	ands.w	r5, r5, #1
 800389c:	d102      	bne.n	80038a4 <HAL_UART_IRQHandler+0x2c>
 800389e:	f411 7f90 	tst.w	r1, #288	; 0x120
 80038a2:	d04e      	beq.n	8003942 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038a4:	07d3      	lsls	r3, r2, #31
 80038a6:	d505      	bpl.n	80038b4 <HAL_UART_IRQHandler+0x3c>
 80038a8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038aa:	bf42      	ittt	mi
 80038ac:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80038ae:	f043 0301 	orrmi.w	r3, r3, #1
 80038b2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038b4:	0750      	lsls	r0, r2, #29
 80038b6:	d504      	bpl.n	80038c2 <HAL_UART_IRQHandler+0x4a>
 80038b8:	b11d      	cbz	r5, 80038c2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038bc:	f043 0302 	orr.w	r3, r3, #2
 80038c0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038c2:	0793      	lsls	r3, r2, #30
 80038c4:	d504      	bpl.n	80038d0 <HAL_UART_IRQHandler+0x58>
 80038c6:	b11d      	cbz	r5, 80038d0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038ca:	f043 0304 	orr.w	r3, r3, #4
 80038ce:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038d0:	0716      	lsls	r6, r2, #28
 80038d2:	d504      	bpl.n	80038de <HAL_UART_IRQHandler+0x66>
 80038d4:	b11d      	cbz	r5, 80038de <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038d8:	f043 0308 	orr.w	r3, r3, #8
 80038dc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d066      	beq.n	80039b2 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038e4:	0695      	lsls	r5, r2, #26
 80038e6:	d504      	bpl.n	80038f2 <HAL_UART_IRQHandler+0x7a>
 80038e8:	0688      	lsls	r0, r1, #26
 80038ea:	d502      	bpl.n	80038f2 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80038ec:	4620      	mov	r0, r4
 80038ee:	f7ff ff84 	bl	80037fa <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80038f8:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80038fa:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038fc:	d402      	bmi.n	8003904 <HAL_UART_IRQHandler+0x8c>
 80038fe:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003902:	d01a      	beq.n	800393a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8003904:	f7ff fd76 	bl	80033f4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	0652      	lsls	r2, r2, #25
 800390e:	d510      	bpl.n	8003932 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003910:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003912:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003918:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800391a:	b150      	cbz	r0, 8003932 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800391c:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <HAL_UART_IRQHandler+0x13c>)
 800391e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003920:	f7fd fdd3 	bl	80014ca <HAL_DMA_Abort_IT>
 8003924:	2800      	cmp	r0, #0
 8003926:	d044      	beq.n	80039b2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003928:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800392a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800392e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003930:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003932:	4620      	mov	r0, r4
 8003934:	f7ff ff9f 	bl	8003876 <HAL_UART_ErrorCallback>
 8003938:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800393a:	f7ff ff9c 	bl	8003876 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003940:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003942:	0616      	lsls	r6, r2, #24
 8003944:	d527      	bpl.n	8003996 <HAL_UART_IRQHandler+0x11e>
 8003946:	060d      	lsls	r5, r1, #24
 8003948:	d525      	bpl.n	8003996 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800394a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800394e:	2a21      	cmp	r2, #33	; 0x21
 8003950:	d12f      	bne.n	80039b2 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003952:	68a2      	ldr	r2, [r4, #8]
 8003954:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003958:	6a22      	ldr	r2, [r4, #32]
 800395a:	d117      	bne.n	800398c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800395c:	8811      	ldrh	r1, [r2, #0]
 800395e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003962:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003964:	6921      	ldr	r1, [r4, #16]
 8003966:	b979      	cbnz	r1, 8003988 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8003968:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800396a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800396c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800396e:	3a01      	subs	r2, #1
 8003970:	b292      	uxth	r2, r2
 8003972:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003974:	b9ea      	cbnz	r2, 80039b2 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800397c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8003988:	3201      	adds	r2, #1
 800398a:	e7ee      	b.n	800396a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800398c:	1c51      	adds	r1, r2, #1
 800398e:	6221      	str	r1, [r4, #32]
 8003990:	7812      	ldrb	r2, [r2, #0]
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	e7ea      	b.n	800396c <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003996:	0650      	lsls	r0, r2, #25
 8003998:	d50b      	bpl.n	80039b2 <HAL_UART_IRQHandler+0x13a>
 800399a:	064a      	lsls	r2, r1, #25
 800399c:	d509      	bpl.n	80039b2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80039a6:	2320      	movs	r3, #32
 80039a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80039ac:	4620      	mov	r0, r4
 80039ae:	f7ff ff23 	bl	80037f8 <HAL_UART_TxCpltCallback>
 80039b2:	bd70      	pop	{r4, r5, r6, pc}
 80039b4:	080039b9 	.word	0x080039b9

080039b8 <UART_DMAAbortOnError>:
{
 80039b8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80039bc:	2300      	movs	r3, #0
 80039be:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039c0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80039c2:	f7ff ff58 	bl	8003876 <HAL_UART_ErrorCallback>
 80039c6:	bd08      	pop	{r3, pc}

080039c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80039ca:	3b01      	subs	r3, #1
 80039cc:	d101      	bne.n	80039d2 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80039ce:	2003      	movs	r0, #3
 80039d0:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039d2:	6902      	ldr	r2, [r0, #16]
 80039d4:	2a00      	cmp	r2, #0
 80039d6:	daf8      	bge.n	80039ca <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80039d8:	6903      	ldr	r3, [r0, #16]
 80039da:	4a06      	ldr	r2, [pc, #24]	; (80039f4 <USB_CoreReset+0x2c>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80039e2:	3a01      	subs	r2, #1
 80039e4:	d0f3      	beq.n	80039ce <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80039e6:	6903      	ldr	r3, [r0, #16]
 80039e8:	f013 0301 	ands.w	r3, r3, #1
 80039ec:	d1f9      	bne.n	80039e2 <USB_CoreReset+0x1a>

  return HAL_OK;
 80039ee:	4618      	mov	r0, r3
}
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	00030d41 	.word	0x00030d41

080039f8 <USB_CoreInit>:
{
 80039f8:	b084      	sub	sp, #16
 80039fa:	b538      	push	{r3, r4, r5, lr}
 80039fc:	ad05      	add	r5, sp, #20
 80039fe:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a04:	2b01      	cmp	r3, #1
{
 8003a06:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a08:	d125      	bne.n	8003a56 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a10:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a12:	68c3      	ldr	r3, [r0, #12]
 8003a14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a1c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a1e:	68c3      	ldr	r3, [r0, #12]
 8003a20:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003a24:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8003a26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a28:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a2a:	bf02      	ittt	eq
 8003a2c:	68c3      	ldreq	r3, [r0, #12]
 8003a2e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8003a32:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8003a34:	f7ff ffc8 	bl	80039c8 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8003a38:	9b08      	ldr	r3, [sp, #32]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d107      	bne.n	8003a4e <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a3e:	68a3      	ldr	r3, [r4, #8]
 8003a40:	f043 0306 	orr.w	r3, r3, #6
 8003a44:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a46:	68a3      	ldr	r3, [r4, #8]
 8003a48:	f043 0320 	orr.w	r3, r3, #32
 8003a4c:	60a3      	str	r3, [r4, #8]
}
 8003a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a52:	b004      	add	sp, #16
 8003a54:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a56:	68c3      	ldr	r3, [r0, #12]
 8003a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a5c:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8003a5e:	f7ff ffb3 	bl	80039c8 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8003a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a64:	b923      	cbnz	r3, 8003a70 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a6c:	63a3      	str	r3, [r4, #56]	; 0x38
 8003a6e:	e7e3      	b.n	8003a38 <USB_CoreInit+0x40>
 8003a70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a76:	e7f9      	b.n	8003a6c <USB_CoreInit+0x74>

08003a78 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a78:	6883      	ldr	r3, [r0, #8]
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	6083      	str	r3, [r0, #8]
}
 8003a80:	2000      	movs	r0, #0
 8003a82:	4770      	bx	lr

08003a84 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a84:	6883      	ldr	r3, [r0, #8]
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	6083      	str	r3, [r0, #8]
}
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	4770      	bx	lr

08003a90 <USB_SetCurrentMode>:
{
 8003a90:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a92:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003a94:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a96:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003a9a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003a9c:	d108      	bne.n	8003ab0 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a9e:	68c3      	ldr	r3, [r0, #12]
 8003aa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003aa4:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8003aa6:	2032      	movs	r0, #50	; 0x32
 8003aa8:	f7fd fa6c 	bl	8000f84 <HAL_Delay>
  return HAL_OK;
 8003aac:	2000      	movs	r0, #0
 8003aae:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8003ab0:	b919      	cbnz	r1, 8003aba <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ab2:	68c3      	ldr	r3, [r0, #12]
 8003ab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ab8:	e7f4      	b.n	8003aa4 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8003aba:	2001      	movs	r0, #1
}
 8003abc:	bd08      	pop	{r3, pc}
	...

08003ac0 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ac0:	0189      	lsls	r1, r1, #6
 8003ac2:	f041 0120 	orr.w	r1, r1, #32
 8003ac6:	4a06      	ldr	r2, [pc, #24]	; (8003ae0 <USB_FlushTxFifo+0x20>)
 8003ac8:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8003aca:	3a01      	subs	r2, #1
 8003acc:	d005      	beq.n	8003ada <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ace:	6903      	ldr	r3, [r0, #16]
 8003ad0:	f013 0320 	ands.w	r3, r3, #32
 8003ad4:	d1f9      	bne.n	8003aca <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003ada:	2003      	movs	r0, #3
}
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	00030d41 	.word	0x00030d41

08003ae4 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	4a06      	ldr	r2, [pc, #24]	; (8003b00 <USB_FlushRxFifo+0x1c>)
 8003ae8:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8003aea:	3a01      	subs	r2, #1
 8003aec:	d005      	beq.n	8003afa <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003aee:	6903      	ldr	r3, [r0, #16]
 8003af0:	f013 0310 	ands.w	r3, r3, #16
 8003af4:	d1f9      	bne.n	8003aea <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8003af6:	4618      	mov	r0, r3
 8003af8:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003afa:	2003      	movs	r0, #3
}
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	00030d41 	.word	0x00030d41

08003b04 <USB_WritePacket>:
{
 8003b04:	b510      	push	{r4, lr}
 8003b06:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8003b0a:	b94c      	cbnz	r4, 8003b20 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003b0c:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003b0e:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8003b12:	f023 0303 	bic.w	r3, r3, #3
 8003b16:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003b1a:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8003b1c:	4299      	cmp	r1, r3
 8003b1e:	d101      	bne.n	8003b24 <USB_WritePacket+0x20>
}
 8003b20:	2000      	movs	r0, #0
 8003b22:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003b24:	f851 2b04 	ldr.w	r2, [r1], #4
 8003b28:	6002      	str	r2, [r0, #0]
 8003b2a:	e7f7      	b.n	8003b1c <USB_WritePacket+0x18>

08003b2c <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003b2c:	3203      	adds	r2, #3
 8003b2e:	f022 0203 	bic.w	r2, r2, #3
 8003b32:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003b34:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8003b38:	4291      	cmp	r1, r2
 8003b3a:	d101      	bne.n	8003b40 <USB_ReadPacket+0x14>
}
 8003b3c:	4608      	mov	r0, r1
 8003b3e:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003b40:	6803      	ldr	r3, [r0, #0]
 8003b42:	f841 3b04 	str.w	r3, [r1], #4
 8003b46:	e7f7      	b.n	8003b38 <USB_ReadPacket+0xc>

08003b48 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003b48:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003b4a:	6980      	ldr	r0, [r0, #24]
}
 8003b4c:	4010      	ands	r0, r2
 8003b4e:	4770      	bx	lr

08003b50 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003b50:	6940      	ldr	r0, [r0, #20]
}
 8003b52:	f000 0001 	and.w	r0, r0, #1
 8003b56:	4770      	bx	lr

08003b58 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003b58:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8003b5c:	f023 0303 	bic.w	r3, r3, #3
{
 8003b60:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003b62:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003b66:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8003b6a:	f001 0303 	and.w	r3, r1, #3
 8003b6e:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 8003b70:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003b72:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003b76:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8003b7a:	d104      	bne.n	8003b86 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8003b7c:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8003b80:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8003b82:	2000      	movs	r0, #0
 8003b84:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8003b86:	2902      	cmp	r1, #2
 8003b88:	d1fb      	bne.n	8003b82 <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 8003b8a:	f241 7370 	movw	r3, #6000	; 0x1770
 8003b8e:	e7f7      	b.n	8003b80 <USB_InitFSLSPClkSel+0x28>

08003b90 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8003b92:	2500      	movs	r5, #0
 8003b94:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003b96:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003b9a:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003b9c:	9b01      	ldr	r3, [sp, #4]
 8003b9e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ba2:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003ba4:	9b01      	ldr	r3, [sp, #4]
 8003ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003baa:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003bac:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8003bb0:	2064      	movs	r0, #100	; 0x64
 8003bb2:	f7fd f9e7 	bl	8000f84 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003bb6:	9b01      	ldr	r3, [sp, #4]
 8003bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bbc:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8003bc0:	200a      	movs	r0, #10
 8003bc2:	f7fd f9df 	bl	8000f84 <HAL_Delay>

  return HAL_OK;
}
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	b003      	add	sp, #12
 8003bca:	bd30      	pop	{r4, r5, pc}

08003bcc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003bcc:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003bd2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003bd6:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003bd8:	9b01      	ldr	r3, [sp, #4]
 8003bda:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003bde:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003be0:	9b01      	ldr	r3, [sp, #4]
 8003be2:	04da      	lsls	r2, r3, #19
 8003be4:	d406      	bmi.n	8003bf4 <USB_DriveVbus+0x28>
 8003be6:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003be8:	bf02      	ittt	eq
 8003bea:	9b01      	ldreq	r3, [sp, #4]
 8003bec:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003bf0:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003bf4:	9b01      	ldr	r3, [sp, #4]
 8003bf6:	04db      	lsls	r3, r3, #19
 8003bf8:	d505      	bpl.n	8003c06 <USB_DriveVbus+0x3a>
 8003bfa:	b921      	cbnz	r1, 8003c06 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003bfc:	9b01      	ldr	r3, [sp, #4]
 8003bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c02:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8003c06:	2000      	movs	r0, #0
 8003c08:	b002      	add	sp, #8
 8003c0a:	4770      	bx	lr

08003c0c <USB_HostInit>:
{
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	b538      	push	{r3, r4, r5, lr}
 8003c10:	4604      	mov	r4, r0
 8003c12:	a805      	add	r0, sp, #20
 8003c14:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003c1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c24:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003c26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c28:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003c2c:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003c2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c34:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003c36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c38:	05da      	lsls	r2, r3, #23
 8003c3a:	d53f      	bpl.n	8003cbc <USB_HostInit+0xb0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8003c3c:	9b07      	ldr	r3, [sp, #28]
 8003c3e:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003c40:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8003c44:	d13c      	bne.n	8003cc0 <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003c46:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003c4a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003c4e:	2110      	movs	r1, #16
 8003c50:	4620      	mov	r0, r4
 8003c52:	f7ff ff35 	bl	8003ac0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003c56:	4620      	mov	r0, r4
 8003c58:	f7ff ff44 	bl	8003ae4 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	9906      	ldr	r1, [sp, #24]
 8003c60:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003c64:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8003c68:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8003c6a:	428b      	cmp	r3, r1
 8003c6c:	d12b      	bne.n	8003cc6 <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 8003c6e:	2101      	movs	r1, #1
 8003c70:	4620      	mov	r0, r4
 8003c72:	f7ff ffab 	bl	8003bcc <USB_DriveVbus>
  HAL_Delay(200U);
 8003c76:	20c8      	movs	r0, #200	; 0xc8
 8003c78:	f7fd f984 	bl	8000f84 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003c80:	f04f 33ff 	mov.w	r3, #4294967295
 8003c84:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003c86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c88:	05db      	lsls	r3, r3, #23
 8003c8a:	d521      	bpl.n	8003cd0 <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 8003c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c90:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003c92:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8003c96:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003c9a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8003c9e:	9b08      	ldr	r3, [sp, #32]
 8003ca0:	b91b      	cbnz	r3, 8003caa <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ca2:	69a3      	ldr	r3, [r4, #24]
 8003ca4:	f043 0310 	orr.w	r3, r3, #16
 8003ca8:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003caa:	69a2      	ldr	r2, [r4, #24]
 8003cac:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <USB_HostInit+0xd8>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61a3      	str	r3, [r4, #24]
}
 8003cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	b004      	add	sp, #16
 8003cba:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003cbc:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8003cc0:	f023 0304 	bic.w	r3, r3, #4
 8003cc4:	e7c1      	b.n	8003c4a <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003cc6:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003cc8:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8003cca:	60d5      	str	r5, [r2, #12]
 8003ccc:	3220      	adds	r2, #32
 8003cce:	e7cc      	b.n	8003c6a <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 8003cd0:	2380      	movs	r3, #128	; 0x80
 8003cd2:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003cd4:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8003cd8:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003cda:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <USB_HostInit+0xdc>)
 8003cdc:	e7dd      	b.n	8003c9a <USB_HostInit+0x8e>
 8003cde:	bf00      	nop
 8003ce0:	00e00300 	.word	0x00e00300
 8003ce4:	a3200008 	.word	0xa3200008
 8003ce8:	004000e0 	.word	0x004000e0

08003cec <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003cec:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003cf2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003cf6:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003cf8:	9801      	ldr	r0, [sp, #4]
}
 8003cfa:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8003cfe:	b002      	add	sp, #8
 8003d00:	4770      	bx	lr

08003d02 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003d02:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003d06:	6880      	ldr	r0, [r0, #8]
}
 8003d08:	b280      	uxth	r0, r0
 8003d0a:	4770      	bx	lr

08003d0c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8003d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003d10:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8003d14:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
{
 8003d18:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8003d1c:	4605      	mov	r5, r0
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d22:	60a0      	str	r0, [r4, #8]
 8003d24:	fa4f f882 	sxtb.w	r8, r2
 8003d28:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 8003d2c:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003d30:	2e03      	cmp	r6, #3
 8003d32:	d86c      	bhi.n	8003e0e <USB_HC_Init+0x102>
 8003d34:	e8df f006 	tbb	[pc, r6]
 8003d38:	4c026102 	.word	0x4c026102
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003d3c:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003d40:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003d44:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8003d46:	da03      	bge.n	8003d50 <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003d48:	68e1      	ldr	r1, [r4, #12]
 8003d4a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003d4e:	e005      	b.n	8003d5c <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8003d50:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8003d52:	05c9      	lsls	r1, r1, #23
 8003d54:	d542      	bpl.n	8003ddc <USB_HC_Init+0xd0>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003d56:	68e1      	ldr	r1, [r4, #12]
 8003d58:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8003d5c:	60e1      	str	r1, [r4, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d5e:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003d60:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8003d64:	2101      	movs	r1, #1
 8003d66:	fa01 f10e 	lsl.w	r1, r1, lr
 8003d6a:	4321      	orrs	r1, r4
 8003d6c:	f8cc 1018 	str.w	r1, [ip, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003d70:	69a9      	ldr	r1, [r5, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8003d72:	f1b8 0f00 	cmp.w	r8, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003d76:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003d7a:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8003d7c:	bfb4      	ite	lt
 8003d7e:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 8003d82:	2400      	movge	r4, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003d84:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    HCcharLowSpeed = 0U;
 8003d88:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003d8c:	059b      	lsls	r3, r3, #22
 8003d8e:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003d92:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003d96:	02d2      	lsls	r2, r2, #11
 8003d98:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003d9c:	432b      	orrs	r3, r5
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	04b2      	lsls	r2, r6, #18
 8003da2:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    HCcharLowSpeed = 0U;
 8003da6:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003da8:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = 0U;
 8003dac:	bf0c      	ite	eq
 8003dae:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 8003db2:	2100      	movne	r1, #0
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003db4:	4323      	orrs	r3, r4
 8003db6:	430b      	orrs	r3, r1

  if (ep_type == EP_TYPE_INTR)
 8003db8:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003dba:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8003dbe:	d128      	bne.n	8003e12 <USB_HC_Init+0x106>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8003dc0:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8003dc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dc8:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 8003dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003dd0:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8003dd4:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003dd8:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8003dda:	dbb5      	blt.n	8003d48 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003ddc:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8003de0:	2101      	movs	r1, #1
 8003de2:	fa01 f10e 	lsl.w	r1, r1, lr
 8003de6:	4301      	orrs	r1, r0
 8003de8:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003dec:	69a9      	ldr	r1, [r5, #24]
  HAL_StatusTypeDef ret = HAL_OK;
 8003dee:	2000      	movs	r0, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003df0:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003df4:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8003df6:	4604      	mov	r4, r0
 8003df8:	e7c4      	b.n	8003d84 <USB_HC_Init+0x78>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003dfa:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8003dfe:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003e02:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8003e04:	daea      	bge.n	8003ddc <USB_HC_Init+0xd0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003e06:	68e1      	ldr	r1, [r4, #12]
 8003e08:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8003e0c:	e7a6      	b.n	8003d5c <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 8003e0e:	2001      	movs	r0, #1
 8003e10:	e7a6      	b.n	8003d60 <USB_HC_Init+0x54>
}
 8003e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e16 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003e16:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003e1a:	6940      	ldr	r0, [r0, #20]
}
 8003e1c:	b280      	uxth	r0, r0
 8003e1e:	4770      	bx	lr

08003e20 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003e20:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003e24:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8003e28:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003e2c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003e30:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003e34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e38:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003e3c:	d11e      	bne.n	8003e7c <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003e3e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003e40:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003e44:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003e48:	d137      	bne.n	8003eba <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003e4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e4e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003e52:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003e56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e5a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003e5e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003e62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e66:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8003e6a:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	d002      	beq.n	8003e78 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003e72:	6811      	ldr	r1, [r2, #0]
 8003e74:	2900      	cmp	r1, #0
 8003e76:	dbfa      	blt.n	8003e6e <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8003e78:	2000      	movs	r0, #0
 8003e7a:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003e7c:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8003e80:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003e84:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003e88:	d117      	bne.n	8003eba <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003e8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e8e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003e92:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003e96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e9a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003e9e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003ea2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ea6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8003eaa:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	d0e2      	beq.n	8003e78 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003eb2:	6811      	ldr	r1, [r2, #0]
 8003eb4:	2900      	cmp	r1, #0
 8003eb6:	dbfa      	blt.n	8003eae <USB_HC_Halt+0x8e>
 8003eb8:	e7de      	b.n	8003e78 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003eba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ebe:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8003ec2:	e7d9      	b.n	8003e78 <USB_HC_Halt+0x58>

08003ec4 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003ec4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003ec8:	4a06      	ldr	r2, [pc, #24]	; (8003ee4 <USB_DoPing+0x20>)
 8003eca:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ece:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ed2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ed6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8003eda:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8003ede:	2000      	movs	r0, #0
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	80080000 	.word	0x80080000

08003ee8 <USB_HC_StartXfer>:
{
 8003ee8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003eec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003eee:	05db      	lsls	r3, r3, #23
{
 8003ef0:	4616      	mov	r6, r2
 8003ef2:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8003ef4:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003ef6:	d517      	bpl.n	8003f28 <USB_HC_StartXfer+0x40>
 8003ef8:	790d      	ldrb	r5, [r1, #4]
 8003efa:	b9ad      	cbnz	r5, 8003f28 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8003efc:	b94e      	cbnz	r6, 8003f12 <USB_HC_StartXfer+0x2a>
 8003efe:	794b      	ldrb	r3, [r1, #5]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d111      	bne.n	8003f28 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 8003f04:	4611      	mov	r1, r2
 8003f06:	f7ff ffdd 	bl	8003ec4 <USB_DoPing>
}
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	b002      	add	sp, #8
 8003f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 8003f12:	2e01      	cmp	r6, #1
 8003f14:	d108      	bne.n	8003f28 <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003f16:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8003f1a:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8003f1e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8003f22:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 8003f26:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 8003f28:	6908      	ldr	r0, [r1, #16]
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d066      	beq.n	8003ffc <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003f2e:	890b      	ldrh	r3, [r1, #8]
 8003f30:	3801      	subs	r0, #1
 8003f32:	4418      	add	r0, r3
 8003f34:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f38:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 8003f3a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003f3e:	d903      	bls.n	8003f48 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	610b      	str	r3, [r1, #16]
      num_packets = max_hc_pkt_count;
 8003f44:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8003f48:	78cf      	ldrb	r7, [r1, #3]
 8003f4a:	b117      	cbz	r7, 8003f52 <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003f4c:	890b      	ldrh	r3, [r1, #8]
 8003f4e:	4343      	muls	r3, r0
 8003f50:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003f52:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003f56:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003f58:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003f5c:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003f60:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003f64:	ea4e 0e08 	orr.w	lr, lr, r8
 8003f68:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8004048 <USB_HC_StartXfer+0x160>
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003f6c:	eb04 1542 	add.w	r5, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003f70:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 8003f74:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003f78:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 8003f7c:	b116      	cbz	r6, 8003f84 <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003f7e:	68c8      	ldr	r0, [r1, #12]
 8003f80:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003f84:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 8003f88:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003f8c:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8003f90:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
 8003f94:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003f98:	43c0      	mvns	r0, r0
 8003f9a:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8003f9e:	0740      	lsls	r0, r0, #29
 8003fa0:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8003fa4:	ea40 000c 	orr.w	r0, r0, ip
 8003fa8:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fac:	4825      	ldr	r0, [pc, #148]	; (8004044 <USB_HC_StartXfer+0x15c>)
 8003fae:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8003fb2:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fb6:	f8d0 c000 	ldr.w	ip, [r0]
 8003fba:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 8003fbe:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003fc2:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 8003fc6:	b1df      	cbz	r7, 8004000 <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003fc8:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003fcc:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fd0:	f8d0 c000 	ldr.w	ip, [r0]
 8003fd4:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 8003fd8:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fdc:	6800      	ldr	r0, [r0, #0]
 8003fde:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8003fe2:	2e00      	cmp	r6, #0
 8003fe4:	d191      	bne.n	8003f0a <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8003fe6:	2f00      	cmp	r7, #0
 8003fe8:	d18f      	bne.n	8003f0a <USB_HC_StartXfer+0x22>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d08d      	beq.n	8003f0a <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 8003fee:	79c8      	ldrb	r0, [r1, #7]
 8003ff0:	2803      	cmp	r0, #3
 8003ff2:	d813      	bhi.n	800401c <USB_HC_StartXfer+0x134>
 8003ff4:	e8df f000 	tbb	[pc, r0]
 8003ff8:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	e7a3      	b.n	8003f48 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004000:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 8004004:	e7e2      	b.n	8003fcc <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004006:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004008:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800400a:	f3c5 058f 	ubfx	r5, r5, #2, #16
 800400e:	b280      	uxth	r0, r0
 8004010:	4285      	cmp	r5, r0
 8004012:	d903      	bls.n	800401c <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004014:	69a0      	ldr	r0, [r4, #24]
 8004016:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800401a:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800401c:	2000      	movs	r0, #0
 800401e:	9000      	str	r0, [sp, #0]
 8004020:	b29b      	uxth	r3, r3
 8004022:	68c9      	ldr	r1, [r1, #12]
 8004024:	4620      	mov	r0, r4
 8004026:	f7ff fd6d 	bl	8003b04 <USB_WritePacket>
 800402a:	e76e      	b.n	8003f0a <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800402c:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004030:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004032:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8004036:	b280      	uxth	r0, r0
 8004038:	4285      	cmp	r5, r0
 800403a:	d9ef      	bls.n	800401c <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800403c:	69a0      	ldr	r0, [r4, #24]
 800403e:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8004042:	e7ea      	b.n	800401a <USB_HC_StartXfer+0x132>
 8004044:	200007ac 	.word	0x200007ac
 8004048:	1ff80000 	.word	0x1ff80000

0800404c <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800404c:	6883      	ldr	r3, [r0, #8]
 800404e:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004052:	b510      	push	{r4, lr}


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004054:	2110      	movs	r1, #16
{
 8004056:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004058:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800405a:	f7ff fd31 	bl	8003ac0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800405e:	4620      	mov	r0, r4
 8004060:	f7ff fd40 	bl	8003ae4 <USB_FlushRxFifo>
 8004064:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8004068:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 800406c:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800406e:	6811      	ldr	r1, [r2, #0]
 8004070:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004074:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8004078:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 800407c:	4290      	cmp	r0, r2
 800407e:	d1f6      	bne.n	800406e <USB_StopHost+0x22>
 8004080:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8004082:	6819      	ldr	r1, [r3, #0]
 8004084:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004088:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 800408c:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 800408e:	3001      	adds	r0, #1
 8004090:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004094:	d802      	bhi.n	800409c <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004096:	6819      	ldr	r1, [r3, #0]
 8004098:	2900      	cmp	r1, #0
 800409a:	dbf8      	blt.n	800408e <USB_StopHost+0x42>
 800409c:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 800409e:	429a      	cmp	r2, r3
 80040a0:	d1ef      	bne.n	8004082 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80040a2:	f04f 33ff 	mov.w	r3, #4294967295
 80040a6:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 80040aa:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040ac:	68a3      	ldr	r3, [r4, #8]
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	60a3      	str	r3, [r4, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80040b4:	2000      	movs	r0, #0
 80040b6:	bd10      	pop	{r4, pc}

080040b8 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 80040b8:	2000      	movs	r0, #0
 80040ba:	4770      	bx	lr

080040bc <USBH_CDC_InterfaceDeInit>:
{
 80040bc:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80040be:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80040c2:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 80040c4:	7821      	ldrb	r1, [r4, #0]
{
 80040c6:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 80040c8:	b139      	cbz	r1, 80040da <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80040ca:	f000 fe17 	bl	8004cfc <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80040ce:	7821      	ldrb	r1, [r4, #0]
 80040d0:	4628      	mov	r0, r5
 80040d2:	f000 fe2f 	bl	8004d34 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80040d6:	2300      	movs	r3, #0
 80040d8:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 80040da:	7b21      	ldrb	r1, [r4, #12]
 80040dc:	b141      	cbz	r1, 80040f0 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80040de:	4628      	mov	r0, r5
 80040e0:	f000 fe0c 	bl	8004cfc <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80040e4:	7b21      	ldrb	r1, [r4, #12]
 80040e6:	4628      	mov	r0, r5
 80040e8:	f000 fe24 	bl	8004d34 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80040ec:	2300      	movs	r3, #0
 80040ee:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 80040f0:	7b61      	ldrb	r1, [r4, #13]
 80040f2:	b141      	cbz	r1, 8004106 <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80040f4:	4628      	mov	r0, r5
 80040f6:	f000 fe01 	bl	8004cfc <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80040fa:	7b61      	ldrb	r1, [r4, #13]
 80040fc:	4628      	mov	r0, r5
 80040fe:	f000 fe19 	bl	8004d34 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8004102:	2300      	movs	r3, #0
 8004104:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 8004106:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800410a:	69d8      	ldr	r0, [r3, #28]
 800410c:	b128      	cbz	r0, 800411a <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 800410e:	f009 fc59 	bl	800d9c4 <free>
    phost->pActiveClass->pData = 0U;
 8004112:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8004116:	2200      	movs	r2, #0
 8004118:	61da      	str	r2, [r3, #28]
}
 800411a:	2000      	movs	r0, #0
 800411c:	bd38      	pop	{r3, r4, r5, pc}

0800411e <USBH_CDC_InterfaceInit>:
{
 800411e:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 8004120:	2202      	movs	r2, #2
{
 8004122:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 8004124:	2301      	movs	r3, #1
 8004126:	4611      	mov	r1, r2
{
 8004128:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 800412a:	f000 f9b2 	bl	8004492 <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 800412e:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 8004130:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 8004132:	d102      	bne.n	800413a <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8004134:	2002      	movs	r0, #2
}
 8004136:	b005      	add	sp, #20
 8004138:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 800413a:	4601      	mov	r1, r0
 800413c:	4628      	mov	r0, r5
 800413e:	f000 f99f 	bl	8004480 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8004142:	2050      	movs	r0, #80	; 0x50
 8004144:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 8004148:	f009 fc34 	bl	800d9b4 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800414c:	231a      	movs	r3, #26
 800414e:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8004152:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004154:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 8004158:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800415a:	bf42      	ittt	mi
 800415c:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800415e:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 8004162:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8004164:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8004166:	7841      	ldrb	r1, [r0, #1]
 8004168:	4628      	mov	r0, r5
 800416a:	f000 fdcc 	bl	8004d06 <USBH_AllocPipe>
 800416e:	4601      	mov	r1, r0
 8004170:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 8004172:	8960      	ldrh	r0, [r4, #10]
 8004174:	9002      	str	r0, [sp, #8]
 8004176:	2003      	movs	r0, #3
 8004178:	9001      	str	r0, [sp, #4]
 800417a:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800417e:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8004182:	7862      	ldrb	r2, [r4, #1]
 8004184:	9000      	str	r0, [sp, #0]
 8004186:	4628      	mov	r0, r5
 8004188:	f000 fda9 	bl	8004cde <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800418c:	2200      	movs	r2, #0
 800418e:	7821      	ldrb	r1, [r4, #0]
 8004190:	4628      	mov	r0, r5
 8004192:	f008 ff8e 	bl	800d0b2 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 8004196:	2300      	movs	r3, #0
 8004198:	461a      	mov	r2, r3
 800419a:	210a      	movs	r1, #10
 800419c:	4628      	mov	r0, r5
 800419e:	f000 f978 	bl	8004492 <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 80041a2:	28ff      	cmp	r0, #255	; 0xff
 80041a4:	d0c6      	beq.n	8004134 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80041a6:	231a      	movs	r3, #26
 80041a8:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80041ac:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80041b0:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80041b4:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
 80041b8:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80041bc:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80041c0:	bf0d      	iteet	eq
 80041c2:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80041c4:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80041c6:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80041c8:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80041ca:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80041ce:	bf08      	it	eq
 80041d0:	73a3      	strbeq	r3, [r4, #14]
 80041d2:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80041d6:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80041d8:	bf18      	it	ne
 80041da:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80041dc:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80041de:	bf14      	ite	ne
 80041e0:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80041e2:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80041e4:	f000 fd8f 	bl	8004d06 <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80041e8:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80041ea:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80041ec:	4628      	mov	r0, r5
 80041ee:	f000 fd8a 	bl	8004d06 <USBH_AllocPipe>
 80041f2:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 80041f4:	8b20      	ldrh	r0, [r4, #24]
 80041f6:	9002      	str	r0, [sp, #8]
 80041f8:	2602      	movs	r6, #2
 80041fa:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80041fe:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8004202:	7ba2      	ldrb	r2, [r4, #14]
 8004204:	7b61      	ldrb	r1, [r4, #13]
 8004206:	9601      	str	r6, [sp, #4]
 8004208:	9000      	str	r0, [sp, #0]
 800420a:	4628      	mov	r0, r5
 800420c:	f000 fd67 	bl	8004cde <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8004210:	8b60      	ldrh	r0, [r4, #26]
 8004212:	9002      	str	r0, [sp, #8]
 8004214:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8004218:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800421c:	7be2      	ldrb	r2, [r4, #15]
 800421e:	7b21      	ldrb	r1, [r4, #12]
 8004220:	9601      	str	r6, [sp, #4]
 8004222:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 8004224:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 8004226:	4628      	mov	r0, r5
 8004228:	f000 fd59 	bl	8004cde <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800422c:	4632      	mov	r2, r6
 800422e:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8004230:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8004234:	4628      	mov	r0, r5
 8004236:	f008 ff3c 	bl	800d0b2 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800423a:	4632      	mov	r2, r6
 800423c:	7b21      	ldrb	r1, [r4, #12]
 800423e:	4628      	mov	r0, r5
 8004240:	f008 ff37 	bl	800d0b2 <USBH_LL_SetToggle>
      status = USBH_OK;
 8004244:	4630      	mov	r0, r6
 8004246:	e776      	b.n	8004136 <USBH_CDC_InterfaceInit+0x18>

08004248 <USBH_CDC_ClassRequest>:
{
 8004248:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800424a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800424e:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004250:	23a1      	movs	r3, #161	; 0xa1
 8004252:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004254:	2321      	movs	r3, #33	; 0x21
 8004256:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004258:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800425e:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004260:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004262:	3140      	adds	r1, #64	; 0x40
{
 8004264:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004266:	f000 fac9 	bl	80047fc <USBH_CtlReq>
  if(status == USBH_OK)
 800426a:	4605      	mov	r5, r0
 800426c:	b920      	cbnz	r0, 8004278 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800426e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8004272:	2102      	movs	r1, #2
 8004274:	4620      	mov	r0, r4
 8004276:	4798      	blx	r3
}
 8004278:	4628      	mov	r0, r5
 800427a:	bd38      	pop	{r3, r4, r5, pc}

0800427c <USBH_CDC_TransmitCallback>:
 800427c:	4770      	bx	lr

0800427e <USBH_CDC_ReceiveCallback>:
 800427e:	4770      	bx	lr

08004280 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8004280:	4770      	bx	lr

08004282 <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004282:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8004286:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004288:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 800428a:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 800428e:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 8004290:	2b04      	cmp	r3, #4
 8004292:	d83d      	bhi.n	8004310 <USBH_CDC_Process+0x8e>
 8004294:	e8df f003 	tbb	[pc, r3]
 8004298:	42170603 	.word	0x42170603
 800429c:	a6          	.byte	0xa6
 800429d:	00          	.byte	0x00
    status = USBH_OK;
 800429e:	2000      	movs	r0, #0
}
 80042a0:	b002      	add	sp, #8
 80042a2:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80042a4:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80042a6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80042a8:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80042aa:	2320      	movs	r3, #32
 80042ac:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80042ae:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80042b4:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80042b6:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80042b8:	f000 faa0 	bl	80047fc <USBH_CtlReq>
    if(req_status == USBH_OK)
 80042bc:	bb50      	cbnz	r0, 8004314 <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80042be:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 80042c0:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80042c4:	e024      	b.n	8004310 <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80042c6:	23a1      	movs	r3, #161	; 0xa1
 80042c8:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80042ca:	2321      	movs	r3, #33	; 0x21
 80042cc:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80042ce:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80042d4:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80042d6:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80042d8:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80042dc:	f000 fa8e 	bl	80047fc <USBH_CtlReq>
    if(req_status == USBH_OK)
 80042e0:	b9c0      	cbnz	r0, 8004314 <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80042e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80042e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE;
 80042e6:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80042ea:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80042f4:	4291      	cmp	r1, r2
 80042f6:	d10b      	bne.n	8004310 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80042f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042fc:	795a      	ldrb	r2, [r3, #5]
 80042fe:	4291      	cmp	r1, r2
 8004300:	d106      	bne.n	8004310 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004302:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d102      	bne.n	8004310 <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 800430a:	4628      	mov	r0, r5
 800430c:	f7ff ffb8 	bl	8004280 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004310:	2001      	movs	r0, #1
 8004312:	e7c5      	b.n	80042a0 <USBH_CDC_Process+0x1e>
      if(req_status != USBH_BUSY)
 8004314:	2801      	cmp	r0, #1
 8004316:	d0fb      	beq.n	8004310 <USBH_CDC_Process+0x8e>
        CDC_Handle->state = CDC_ERROR_STATE;
 8004318:	2304      	movs	r3, #4
 800431a:	e7d1      	b.n	80042c0 <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 800431c:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8004320:	2901      	cmp	r1, #1
 8004322:	d021      	beq.n	8004368 <USBH_CDC_Process+0xe6>
 8004324:	2902      	cmp	r1, #2
 8004326:	d02e      	beq.n	8004386 <USBH_CDC_Process+0x104>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004328:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800432c:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 800432e:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 8004332:	2b03      	cmp	r3, #3
 8004334:	d045      	beq.n	80043c2 <USBH_CDC_Process+0x140>
 8004336:	2b04      	cmp	r3, #4
 8004338:	d1ea      	bne.n	8004310 <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800433a:	7b31      	ldrb	r1, [r6, #12]
 800433c:	4628      	mov	r0, r5
 800433e:	f008 fea7 	bl	800d090 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8004342:	2801      	cmp	r0, #1
 8004344:	d1e4      	bne.n	8004310 <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8004346:	7b31      	ldrb	r1, [r6, #12]
 8004348:	4628      	mov	r0, r5
 800434a:	f008 fe5d 	bl	800d008 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800434e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004350:	4298      	cmp	r0, r3
 8004352:	d040      	beq.n	80043d6 <USBH_CDC_Process+0x154>
 8004354:	8b72      	ldrh	r2, [r6, #26]
 8004356:	4290      	cmp	r0, r2
 8004358:	d93d      	bls.n	80043d6 <USBH_CDC_Process+0x154>
        CDC_Handle->RxDataLength -= length ;
 800435a:	1a1b      	subs	r3, r3, r0
 800435c:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800435e:	6a33      	ldr	r3, [r6, #32]
 8004360:	4418      	add	r0, r3
 8004362:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004364:	2303      	movs	r3, #3
 8004366:	e033      	b.n	80043d0 <USBH_CDC_Process+0x14e>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004368:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800436a:	8b22      	ldrh	r2, [r4, #24]
 800436c:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 800436e:	9100      	str	r1, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004370:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 8004372:	bf98      	it	ls
 8004374:	b282      	uxthls	r2, r0
 8004376:	69e1      	ldr	r1, [r4, #28]
 8004378:	4628      	mov	r0, r5
 800437a:	f000 fc89 	bl	8004c90 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800437e:	2302      	movs	r3, #2
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004380:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8004384:	e7d0      	b.n	8004328 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8004386:	7b61      	ldrb	r1, [r4, #13]
 8004388:	f008 fe82 	bl	800d090 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 800438c:	2801      	cmp	r0, #1
 800438e:	d115      	bne.n	80043bc <USBH_CDC_Process+0x13a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004392:	8b22      	ldrh	r2, [r4, #24]
 8004394:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004396:	bf83      	ittte	hi
 8004398:	1a9b      	subhi	r3, r3, r2
 800439a:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800439c:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 800439e:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80043a0:	bf8a      	itet	hi
 80043a2:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 80043a4:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80043a6:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 80043a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043aa:	b10b      	cbz	r3, 80043b0 <USBH_CDC_Process+0x12e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e7e7      	b.n	8004380 <USBH_CDC_Process+0xfe>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80043b0:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80043b4:	4628      	mov	r0, r5
 80043b6:	f7ff ff61 	bl	800427c <USBH_CDC_TransmitCallback>
 80043ba:	e7b5      	b.n	8004328 <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 80043bc:	2802      	cmp	r0, #2
 80043be:	d1b3      	bne.n	8004328 <USBH_CDC_Process+0xa6>
 80043c0:	e7f4      	b.n	80043ac <USBH_CDC_Process+0x12a>
    USBH_BulkReceiveData (phost,
 80043c2:	7b33      	ldrb	r3, [r6, #12]
 80043c4:	8b72      	ldrh	r2, [r6, #26]
 80043c6:	6a31      	ldr	r1, [r6, #32]
 80043c8:	4628      	mov	r0, r5
 80043ca:	f000 fc78 	bl	8004cbe <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80043ce:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80043d0:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 80043d4:	e79c      	b.n	8004310 <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80043dc:	4628      	mov	r0, r5
 80043de:	f7ff ff4e 	bl	800427e <USBH_CDC_ReceiveCallback>
 80043e2:	e795      	b.n	8004310 <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00U);
 80043e4:	2100      	movs	r1, #0
 80043e6:	f000 fc0d 	bl	8004c04 <USBH_ClrFeature>
    if(req_status == USBH_OK )
 80043ea:	2800      	cmp	r0, #0
 80043ec:	d190      	bne.n	8004310 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 80043ee:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 80043f2:	e78d      	b.n	8004310 <USBH_CDC_Process+0x8e>

080043f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80043f4:	f500 7360 	add.w	r3, r0, #896	; 0x380
 80043f8:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 80043fc:	2100      	movs	r1, #0
 80043fe:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8004402:	4293      	cmp	r3, r2
 8004404:	d1fb      	bne.n	80043fe <DeInitStateMachine+0xa>
 8004406:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800440a:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8004414:	4291      	cmp	r1, r2
 8004416:	d1fb      	bne.n	8004410 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8004418:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800441a:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 800441c:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 800441e:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8004420:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 8004422:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 8004426:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004428:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 800442a:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800442c:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8004430:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 8004434:	2000      	movs	r0, #0
 8004436:	4770      	bx	lr

08004438 <USBH_Init>:
{
 8004438:	b538      	push	{r3, r4, r5, lr}
 800443a:	460d      	mov	r5, r1
  if(phost == NULL)
 800443c:	4604      	mov	r4, r0
 800443e:	b180      	cbz	r0, 8004462 <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 8004440:	2300      	movs	r3, #0
  phost->id = id;
 8004442:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 8004446:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 800444a:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 800444e:	f7ff ffd1 	bl	80043f4 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8004452:	b10d      	cbz	r5, 8004458 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8004454:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  USBH_LL_Init(phost);
 8004458:	4620      	mov	r0, r4
 800445a:	f008 fd77 	bl	800cf4c <USBH_LL_Init>
  return USBH_OK;
 800445e:	2000      	movs	r0, #0
 8004460:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 8004462:	2002      	movs	r0, #2
}
 8004464:	bd38      	pop	{r3, r4, r5, pc}

08004466 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 8004466:	b149      	cbz	r1, 800447c <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8004468:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800446c:	b933      	cbnz	r3, 800447c <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800446e:	2201      	movs	r2, #1
 8004470:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
 8004474:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
      status = USBH_OK;
 8004478:	4618      	mov	r0, r3
 800447a:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800447c:	2002      	movs	r0, #2
  }

  return status;
}
 800447e:	4770      	bx	lr

08004480 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8004480:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 8004484:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8004486:	bf86      	itte	hi
 8004488:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 800448c:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800448e:	2002      	movls	r0, #2
  }
  return status;
}
 8004490:	4770      	bx	lr

08004492 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004492:	b570      	push	{r4, r5, r6, lr}
 8004494:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8004496:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 800449a:	428e      	cmp	r6, r1
 800449c:	b2e5      	uxtb	r5, r4
 800449e:	d001      	beq.n	80044a4 <USBH_FindInterface+0x12>
 80044a0:	29ff      	cmp	r1, #255	; 0xff
 80044a2:	d10b      	bne.n	80044bc <USBH_FindInterface+0x2a>
 80044a4:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 80044a8:	4296      	cmp	r6, r2
 80044aa:	d001      	beq.n	80044b0 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80044ac:	2aff      	cmp	r2, #255	; 0xff
 80044ae:	d105      	bne.n	80044bc <USBH_FindInterface+0x2a>
 80044b0:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 80044b4:	429e      	cmp	r6, r3
 80044b6:	d007      	beq.n	80044c8 <USBH_FindInterface+0x36>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80044b8:	2bff      	cmp	r3, #255	; 0xff
 80044ba:	d005      	beq.n	80044c8 <USBH_FindInterface+0x36>
 80044bc:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80044be:	2c02      	cmp	r4, #2
 80044c0:	f100 001a 	add.w	r0, r0, #26
 80044c4:	d1e7      	bne.n	8004496 <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 80044c6:	25ff      	movs	r5, #255	; 0xff
}
 80044c8:	4628      	mov	r0, r5
 80044ca:	bd70      	pop	{r4, r5, r6, pc}

080044cc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80044cc:	b510      	push	{r4, lr}
 80044ce:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80044d0:	f008 fd62 	bl	800cf98 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80044d4:	2101      	movs	r1, #1
 80044d6:	4620      	mov	r0, r4
 80044d8:	f008 fdde 	bl	800d098 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 80044dc:	2000      	movs	r0, #0
 80044de:	bd10      	pop	{r4, pc}

080044e0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80044e0:	b530      	push	{r4, r5, lr}
 80044e2:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80044e4:	2302      	movs	r3, #2
 80044e6:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 80044ea:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 80044ee:	4604      	mov	r4, r0
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80044f0:	b933      	cbnz	r3, 8004500 <USBH_Process+0x20>
 80044f2:	7802      	ldrb	r2, [r0, #0]
 80044f4:	b122      	cbz	r2, 8004500 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80044f6:	7802      	ldrb	r2, [r0, #0]
 80044f8:	2a03      	cmp	r2, #3
      phost->gState = HOST_DEV_DISCONNECTED;
 80044fa:	bf1c      	itt	ne
 80044fc:	2203      	movne	r2, #3
 80044fe:	7002      	strbne	r2, [r0, #0]
  switch (phost->gState)
 8004500:	7822      	ldrb	r2, [r4, #0]
 8004502:	2a0b      	cmp	r2, #11
 8004504:	d818      	bhi.n	8004538 <USBH_Process+0x58>
 8004506:	e8df f012 	tbh	[pc, r2, lsl #1]
 800450a:	000c      	.short	0x000c
 800450c:	001f001a 	.word	0x001f001a
 8004510:	00170121 	.word	0x00170121
 8004514:	0107004f 	.word	0x0107004f
 8004518:	00d000c6 	.word	0x00d000c6
 800451c:	00e700da 	.word	0x00e700da
 8004520:	0118      	.short	0x0118
    if (phost->device.is_connected)
 8004522:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8004526:	b13b      	cbz	r3, 8004538 <USBH_Process+0x58>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8004528:	2301      	movs	r3, #1
      USBH_Delay(200U);
 800452a:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800452c:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 800452e:	f008 fdcf 	bl	800d0d0 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8004532:	4620      	mov	r0, r4
 8004534:	f008 fd5a 	bl	800cfec <USBH_LL_ResetPort>
}
 8004538:	2000      	movs	r0, #0
 800453a:	b007      	add	sp, #28
 800453c:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 800453e:	2b01      	cmp	r3, #1
 8004540:	d1fa      	bne.n	8004538 <USBH_Process+0x58>
      phost->gState = HOST_DEV_ATTACHED;
 8004542:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 8004544:	7023      	strb	r3, [r4, #0]
 8004546:	e7f7      	b.n	8004538 <USBH_Process+0x58>
    USBH_Delay(100U);
 8004548:	2064      	movs	r0, #100	; 0x64
 800454a:	f008 fdc1 	bl	800d0d0 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800454e:	4620      	mov	r0, r4
 8004550:	f008 fd3e 	bl	800cfd0 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 8004554:	2305      	movs	r3, #5
 8004556:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8004558:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800455c:	2100      	movs	r1, #0
 800455e:	4620      	mov	r0, r4
 8004560:	f000 fbd1 	bl	8004d06 <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8004564:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8004566:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8004568:	4620      	mov	r0, r4
 800456a:	f000 fbcc 	bl	8004d06 <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 800456e:	79a2      	ldrb	r2, [r4, #6]
 8004570:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8004574:	7120      	strb	r0, [r4, #4]
 8004576:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 8004578:	9202      	str	r2, [sp, #8]
 800457a:	2500      	movs	r5, #0
      USBH_OpenPipe (phost,
 800457c:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8004580:	9200      	str	r2, [sp, #0]
 8004582:	9501      	str	r5, [sp, #4]
 8004584:	2280      	movs	r2, #128	; 0x80
 8004586:	4620      	mov	r0, r4
 8004588:	f000 fba9 	bl	8004cde <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 800458c:	79a2      	ldrb	r2, [r4, #6]
 800458e:	9202      	str	r2, [sp, #8]
 8004590:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8004594:	9200      	str	r2, [sp, #0]
 8004596:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800459a:	7961      	ldrb	r1, [r4, #5]
 800459c:	9501      	str	r5, [sp, #4]
 800459e:	462a      	mov	r2, r5
 80045a0:	4620      	mov	r0, r4
 80045a2:	f000 fb9c 	bl	8004cde <USBH_OpenPipe>
 80045a6:	e7c7      	b.n	8004538 <USBH_Process+0x58>
  switch (phost->EnumState)
 80045a8:	7863      	ldrb	r3, [r4, #1]
 80045aa:	2b07      	cmp	r3, #7
 80045ac:	d8c4      	bhi.n	8004538 <USBH_Process+0x58>
 80045ae:	e8df f003 	tbb	[pc, r3]
 80045b2:	1504      	.short	0x1504
 80045b4:	4138301e 	.word	0x4138301e
 80045b8:	5d4f      	.short	0x5d4f
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80045ba:	2108      	movs	r1, #8
 80045bc:	4620      	mov	r0, r4
 80045be:	f000 f9fa 	bl	80049b6 <USBH_Get_DevDesc>
 80045c2:	4605      	mov	r5, r0
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d1b7      	bne.n	8004538 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80045c8:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80045ca:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80045ce:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 80045d0:	7921      	ldrb	r1, [r4, #4]
 80045d2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80045d6:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 80045d8:	9202      	str	r2, [sp, #8]
 80045da:	e7cf      	b.n	800457c <USBH_Process+0x9c>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80045dc:	2112      	movs	r1, #18
 80045de:	4620      	mov	r0, r4
 80045e0:	f000 f9e9 	bl	80049b6 <USBH_Get_DevDesc>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d1a7      	bne.n	8004538 <USBH_Process+0x58>
      phost->EnumState = ENUM_SET_ADDR;
 80045e8:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80045ea:	7063      	strb	r3, [r4, #1]
 80045ec:	e7a4      	b.n	8004538 <USBH_Process+0x58>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80045ee:	2101      	movs	r1, #1
 80045f0:	4620      	mov	r0, r4
 80045f2:	f000 fadd 	bl	8004bb0 <USBH_SetAddress>
 80045f6:	4605      	mov	r5, r0
 80045f8:	2800      	cmp	r0, #0
 80045fa:	d19d      	bne.n	8004538 <USBH_Process+0x58>
      USBH_Delay(2U);
 80045fc:	2002      	movs	r0, #2
 80045fe:	f008 fd67 	bl	800d0d0 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8004602:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8004604:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 8004606:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8004608:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 800460c:	7921      	ldrb	r1, [r4, #4]
 800460e:	79a2      	ldrb	r2, [r4, #6]
 8004610:	e7e2      	b.n	80045d8 <USBH_Process+0xf8>
    if ( USBH_Get_CfgDesc(phost,
 8004612:	2109      	movs	r1, #9
 8004614:	4620      	mov	r0, r4
 8004616:	f000 fa16 	bl	8004a46 <USBH_Get_CfgDesc>
 800461a:	2800      	cmp	r0, #0
 800461c:	d18c      	bne.n	8004538 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800461e:	2304      	movs	r3, #4
 8004620:	e7e3      	b.n	80045ea <USBH_Process+0x10a>
    if (USBH_Get_CfgDesc(phost,
 8004622:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 8004626:	4620      	mov	r0, r4
 8004628:	f000 fa0d 	bl	8004a46 <USBH_Get_CfgDesc>
 800462c:	2800      	cmp	r0, #0
 800462e:	d183      	bne.n	8004538 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8004630:	2305      	movs	r3, #5
 8004632:	e7da      	b.n	80045ea <USBH_Process+0x10a>
    if (phost->device.DevDesc.iManufacturer != 0U)
 8004634:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 8004638:	b141      	cbz	r1, 800464c <USBH_Process+0x16c>
      if ( USBH_Get_StringDesc(phost,
 800463a:	23ff      	movs	r3, #255	; 0xff
 800463c:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8004640:	4620      	mov	r0, r4
 8004642:	f000 fa8e 	bl	8004b62 <USBH_Get_StringDesc>
 8004646:	2800      	cmp	r0, #0
 8004648:	f47f af76 	bne.w	8004538 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800464c:	2306      	movs	r3, #6
 800464e:	e7cc      	b.n	80045ea <USBH_Process+0x10a>
    if (phost->device.DevDesc.iProduct != 0U)
 8004650:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 8004654:	b141      	cbz	r1, 8004668 <USBH_Process+0x188>
      if ( USBH_Get_StringDesc(phost,
 8004656:	23ff      	movs	r3, #255	; 0xff
 8004658:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800465c:	4620      	mov	r0, r4
 800465e:	f000 fa80 	bl	8004b62 <USBH_Get_StringDesc>
 8004662:	2800      	cmp	r0, #0
 8004664:	f47f af68 	bne.w	8004538 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8004668:	2307      	movs	r3, #7
 800466a:	e7be      	b.n	80045ea <USBH_Process+0x10a>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800466c:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 8004670:	b141      	cbz	r1, 8004684 <USBH_Process+0x1a4>
      if ( USBH_Get_StringDesc(phost,
 8004672:	23ff      	movs	r3, #255	; 0xff
 8004674:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8004678:	4620      	mov	r0, r4
 800467a:	f000 fa72 	bl	8004b62 <USBH_Get_StringDesc>
 800467e:	2800      	cmp	r0, #0
 8004680:	f47f af5a 	bne.w	8004538 <USBH_Process+0x58>
      phost->device.current_interface = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800468a:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 800468e:	2b01      	cmp	r3, #1
 8004690:	d009      	beq.n	80046a6 <USBH_Process+0x1c6>
        phost->gState  = HOST_INPUT;
 8004692:	2307      	movs	r3, #7
 8004694:	e756      	b.n	8004544 <USBH_Process+0x64>
      if(phost->pUser != NULL)
 8004696:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800469a:	2b00      	cmp	r3, #0
 800469c:	f43f af4c 	beq.w	8004538 <USBH_Process+0x58>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80046a0:	2101      	movs	r1, #1
 80046a2:	4620      	mov	r0, r4
 80046a4:	4798      	blx	r3
        phost->gState  = HOST_SET_CONFIGURATION;
 80046a6:	2308      	movs	r3, #8
 80046a8:	e74c      	b.n	8004544 <USBH_Process+0x64>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80046aa:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 80046ae:	4620      	mov	r0, r4
 80046b0:	f000 fa8c 	bl	8004bcc <USBH_SetCfg>
 80046b4:	2800      	cmp	r0, #0
 80046b6:	f47f af3f 	bne.w	8004538 <USBH_Process+0x58>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80046ba:	2309      	movs	r3, #9
 80046bc:	e742      	b.n	8004544 <USBH_Process+0x64>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80046be:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 80046c2:	069b      	lsls	r3, r3, #26
 80046c4:	d506      	bpl.n	80046d4 <USBH_Process+0x1f4>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80046c6:	2101      	movs	r1, #1
 80046c8:	4620      	mov	r0, r4
 80046ca:	f000 fa8d 	bl	8004be8 <USBH_SetFeature>
 80046ce:	2800      	cmp	r0, #0
 80046d0:	f47f af32 	bne.w	8004538 <USBH_Process+0x58>
      phost->gState  = HOST_CHECK_CLASS;
 80046d4:	230a      	movs	r3, #10
 80046d6:	e735      	b.n	8004544 <USBH_Process+0x64>
    if(phost->ClassNumber == 0U)
 80046d8:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f43f af2b 	beq.w	8004538 <USBH_Process+0x58>
      phost->pActiveClass = NULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80046e8:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 80046ec:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 80046f0:	7919      	ldrb	r1, [r3, #4]
 80046f2:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 80046f4:	bf08      	it	eq
 80046f6:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 80046fa:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80046fe:	b1d3      	cbz	r3, 8004736 <USBH_Process+0x256>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	4620      	mov	r0, r4
 8004704:	4798      	blx	r3
 8004706:	b9b0      	cbnz	r0, 8004736 <USBH_Process+0x256>
          phost->gState  = HOST_CLASS_REQUEST;
 8004708:	2306      	movs	r3, #6
 800470a:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800470c:	2103      	movs	r1, #3
 800470e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8004712:	4620      	mov	r0, r4
 8004714:	4798      	blx	r3
 8004716:	e70f      	b.n	8004538 <USBH_Process+0x58>
    if(phost->pActiveClass != NULL)
 8004718:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800471c:	b15b      	cbz	r3, 8004736 <USBH_Process+0x256>
      status = phost->pActiveClass->Requests(phost);
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	4620      	mov	r0, r4
 8004722:	4798      	blx	r3
 8004724:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8004728:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f47f af03 	bne.w	8004538 <USBH_Process+0x58>
        phost->gState  = HOST_CLASS;
 8004732:	230b      	movs	r3, #11
 8004734:	e706      	b.n	8004544 <USBH_Process+0x64>
      phost->gState  = HOST_ABORT_STATE;
 8004736:	230d      	movs	r3, #13
 8004738:	e704      	b.n	8004544 <USBH_Process+0x64>
    if(phost->pActiveClass != NULL)
 800473a:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800473e:	2b00      	cmp	r3, #0
 8004740:	f43f aefa 	beq.w	8004538 <USBH_Process+0x58>
      phost->pActiveClass->BgndProcess(phost);
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	4620      	mov	r0, r4
 8004748:	4798      	blx	r3
 800474a:	e6f5      	b.n	8004538 <USBH_Process+0x58>
    DeInitStateMachine(phost);
 800474c:	4620      	mov	r0, r4
 800474e:	f7ff fe51 	bl	80043f4 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 8004752:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8004756:	2b00      	cmp	r3, #0
 8004758:	f43f aeee 	beq.w	8004538 <USBH_Process+0x58>
      phost->pActiveClass->DeInit(phost);
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	4620      	mov	r0, r4
 8004760:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8004762:	2300      	movs	r3, #0
 8004764:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 8004768:	e6e6      	b.n	8004538 <USBH_Process+0x58>

0800476a <USBH_LL_SetTimer>:
  phost->Timer = time;
 800476a:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 800476e:	4770      	bx	lr

08004770 <USBH_LL_IncTimer>:
  phost->Timer ++;
 8004770:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 8004774:	3201      	adds	r2, #1
 8004776:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800477a:	7802      	ldrb	r2, [r0, #0]
 800477c:	2a0b      	cmp	r2, #11
 800477e:	d104      	bne.n	800478a <USBH_LL_IncTimer+0x1a>
 8004780:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8004784:	b10b      	cbz	r3, 800478a <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	4718      	bx	r3
 800478a:	4770      	bx	lr

0800478c <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 800478c:	2301      	movs	r3, #1
 800478e:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 8004792:	4770      	bx	lr

08004794 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 800479a:	4770      	bx	lr

0800479c <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 800479c:	7802      	ldrb	r2, [r0, #0]
{
 800479e:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 80047a0:	b94a      	cbnz	r2, 80047b6 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 80047a2:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 80047a6:	2201      	movs	r2, #1
 80047a8:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 80047ac:	b10b      	cbz	r3, 80047b2 <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80047ae:	2104      	movs	r1, #4
 80047b0:	4798      	blx	r3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 80047b2:	2000      	movs	r0, #0
 80047b4:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 80047b6:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 80047ba:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 80047bc:	bf04      	itt	eq
 80047be:	2202      	moveq	r2, #2
 80047c0:	7002      	strbeq	r2, [r0, #0]
 80047c2:	e7f6      	b.n	80047b2 <USBH_LL_Connect+0x16>

080047c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80047c4:	b510      	push	{r4, lr}
 80047c6:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 80047c8:	f008 fbf4 	bl	800cfb4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80047cc:	7921      	ldrb	r1, [r4, #4]
 80047ce:	4620      	mov	r0, r4
 80047d0:	f000 fab0 	bl	8004d34 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80047d4:	7961      	ldrb	r1, [r4, #5]
 80047d6:	4620      	mov	r0, r4
 80047d8:	f000 faac 	bl	8004d34 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

  if(phost->pUser != NULL)
 80047e2:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80047e6:	b113      	cbz	r3, 80047ee <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80047e8:	2105      	movs	r1, #5
 80047ea:	4620      	mov	r0, r4
 80047ec:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80047ee:	4620      	mov	r0, r4
 80047f0:	f008 fbd2 	bl	800cf98 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80047f4:	2303      	movs	r3, #3
 80047f6:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 80047f8:	2000      	movs	r0, #0
 80047fa:	bd10      	pop	{r4, pc}

080047fc <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80047fc:	b513      	push	{r0, r1, r4, lr}
 80047fe:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8004800:	7880      	ldrb	r0, [r0, #2]
 8004802:	2801      	cmp	r0, #1
 8004804:	d003      	beq.n	800480e <USBH_CtlReq+0x12>
 8004806:	2802      	cmp	r0, #2
 8004808:	d008      	beq.n	800481c <USBH_CtlReq+0x20>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 800480a:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 800480c:	e004      	b.n	8004818 <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 800480e:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 8004810:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 8004812:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 8004814:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 8004816:	70a3      	strb	r3, [r4, #2]
}
 8004818:	b002      	add	sp, #8
 800481a:	bd10      	pop	{r4, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 800481c:	7e23      	ldrb	r3, [r4, #24]
 800481e:	3b01      	subs	r3, #1
 8004820:	2101      	movs	r1, #1
 8004822:	2b0a      	cmp	r3, #10
 8004824:	d8f1      	bhi.n	800480a <USBH_CtlReq+0xe>
 8004826:	e8df f003 	tbb	[pc, r3]
 800482a:	0f06      	.short	0x0f06
 800482c:	4c40362b 	.word	0x4c40362b
 8004830:	8c806f64 	.word	0x8c806f64
 8004834:	95          	.byte	0x95
 8004835:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8004836:	7962      	ldrb	r2, [r4, #5]
 8004838:	f104 0110 	add.w	r1, r4, #16
 800483c:	4620      	mov	r0, r4
 800483e:	f000 f9ef 	bl	8004c20 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8004842:	2302      	movs	r3, #2
      if (phost->Control.setup.b.wLength.w != 0U)
      {
        if (direction == USB_D2H)
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8004844:	7623      	strb	r3, [r4, #24]
 8004846:	e7e0      	b.n	800480a <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8004848:	7961      	ldrb	r1, [r4, #5]
 800484a:	4620      	mov	r0, r4
 800484c:	f008 fc20 	bl	800d090 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8004850:	2801      	cmp	r0, #1
 8004852:	d10f      	bne.n	8004874 <USBH_CtlReq+0x78>
      if (phost->Control.setup.b.wLength.w != 0U)
 8004854:	8ae2      	ldrh	r2, [r4, #22]
 8004856:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800485a:	b12a      	cbz	r2, 8004868 <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 800485c:	2b00      	cmp	r3, #0
 800485e:	da01      	bge.n	8004864 <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 8004860:	2303      	movs	r3, #3
 8004862:	e7ef      	b.n	8004844 <USBH_CtlReq+0x48>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8004864:	2305      	movs	r3, #5
 8004866:	e7ed      	b.n	8004844 <USBH_CtlReq+0x48>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8004868:	2b00      	cmp	r3, #0
 800486a:	da01      	bge.n	8004870 <USBH_CtlReq+0x74>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800486c:	2309      	movs	r3, #9
 800486e:	e7e9      	b.n	8004844 <USBH_CtlReq+0x48>
          phost->Control.state = CTRL_STATUS_IN;
 8004870:	2307      	movs	r3, #7
 8004872:	e7e7      	b.n	8004844 <USBH_CtlReq+0x48>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8004874:	2804      	cmp	r0, #4
 8004876:	d001      	beq.n	800487c <USBH_CtlReq+0x80>
 8004878:	2802      	cmp	r0, #2
 800487a:	d1c6      	bne.n	800480a <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 800487c:	230b      	movs	r3, #11
 800487e:	e7e1      	b.n	8004844 <USBH_CtlReq+0x48>
    phost->Control.timer = (uint16_t)phost->Timer;
 8004880:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8004884:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 8004886:	89a2      	ldrh	r2, [r4, #12]
 8004888:	7923      	ldrb	r3, [r4, #4]
 800488a:	68a1      	ldr	r1, [r4, #8]
 800488c:	4620      	mov	r0, r4
 800488e:	f000 f9ef 	bl	8004c70 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8004892:	2304      	movs	r3, #4
 8004894:	e7d6      	b.n	8004844 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8004896:	7921      	ldrb	r1, [r4, #4]
 8004898:	4620      	mov	r0, r4
 800489a:	f008 fbf9 	bl	800d090 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800489e:	2801      	cmp	r0, #1
 80048a0:	d0e4      	beq.n	800486c <USBH_CtlReq+0x70>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80048a2:	2805      	cmp	r0, #5
 80048a4:	d015      	beq.n	80048d2 <USBH_CtlReq+0xd6>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 80048a6:	2804      	cmp	r0, #4
 80048a8:	e7e7      	b.n	800487a <USBH_CtlReq+0x7e>
    USBH_CtlSendData (phost,
 80048aa:	7963      	ldrb	r3, [r4, #5]
 80048ac:	9100      	str	r1, [sp, #0]
 80048ae:	89a2      	ldrh	r2, [r4, #12]
 80048b0:	68a1      	ldr	r1, [r4, #8]
 80048b2:	4620      	mov	r0, r4
 80048b4:	f000 f9c5 	bl	8004c42 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80048b8:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80048bc:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80048be:	2306      	movs	r3, #6
 80048c0:	e7c0      	b.n	8004844 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80048c2:	7961      	ldrb	r1, [r4, #5]
 80048c4:	4620      	mov	r0, r4
 80048c6:	f008 fbe3 	bl	800d090 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80048ca:	2801      	cmp	r0, #1
 80048cc:	d0d0      	beq.n	8004870 <USBH_CtlReq+0x74>
    else if  (URB_Status == USBH_URB_STALL)
 80048ce:	2805      	cmp	r0, #5
 80048d0:	d105      	bne.n	80048de <USBH_CtlReq+0xe2>
      phost->RequestState = CMD_SEND;
 80048d2:	2301      	movs	r3, #1
 80048d4:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 80048d6:	2300      	movs	r3, #0
 80048d8:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 80048da:	2003      	movs	r0, #3
 80048dc:	e79c      	b.n	8004818 <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80048de:	2802      	cmp	r0, #2
 80048e0:	d0c0      	beq.n	8004864 <USBH_CtlReq+0x68>
      if (URB_Status == USBH_URB_ERROR)
 80048e2:	2804      	cmp	r0, #4
 80048e4:	d191      	bne.n	800480a <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 80048e6:	230b      	movs	r3, #11
 80048e8:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 80048ea:	2301      	movs	r3, #1
 80048ec:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 80048ee:	2002      	movs	r0, #2
 80048f0:	e792      	b.n	8004818 <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 80048f2:	2200      	movs	r2, #0
 80048f4:	7923      	ldrb	r3, [r4, #4]
 80048f6:	4611      	mov	r1, r2
 80048f8:	4620      	mov	r0, r4
 80048fa:	f000 f9b9 	bl	8004c70 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 80048fe:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8004902:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8004904:	2308      	movs	r3, #8
 8004906:	e79d      	b.n	8004844 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8004908:	7921      	ldrb	r1, [r4, #4]
 800490a:	4620      	mov	r0, r4
 800490c:	f008 fbc0 	bl	800d090 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8004910:	2801      	cmp	r0, #1
 8004912:	d104      	bne.n	800491e <USBH_CtlReq+0x122>
      phost->RequestState = CMD_SEND;
 8004914:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 8004916:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8004918:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 800491a:	7620      	strb	r0, [r4, #24]
 800491c:	e77c      	b.n	8004818 <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 800491e:	2804      	cmp	r0, #4
 8004920:	d0ac      	beq.n	800487c <USBH_CtlReq+0x80>
      if(URB_Status == USBH_URB_STALL)
 8004922:	2805      	cmp	r0, #5
 8004924:	f47f af71 	bne.w	800480a <USBH_CtlReq+0xe>
 8004928:	e7d3      	b.n	80048d2 <USBH_CtlReq+0xd6>
    USBH_CtlSendData (phost,
 800492a:	2200      	movs	r2, #0
 800492c:	7963      	ldrb	r3, [r4, #5]
 800492e:	9100      	str	r1, [sp, #0]
 8004930:	4620      	mov	r0, r4
 8004932:	4611      	mov	r1, r2
 8004934:	f000 f985 	bl	8004c42 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8004938:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800493c:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800493e:	230a      	movs	r3, #10
 8004940:	e780      	b.n	8004844 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8004942:	7961      	ldrb	r1, [r4, #5]
 8004944:	4620      	mov	r0, r4
 8004946:	f008 fba3 	bl	800d090 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800494a:	2801      	cmp	r0, #1
 800494c:	d0e2      	beq.n	8004914 <USBH_CtlReq+0x118>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800494e:	2802      	cmp	r0, #2
 8004950:	d1a9      	bne.n	80048a6 <USBH_CtlReq+0xaa>
 8004952:	e78b      	b.n	800486c <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8004954:	7e63      	ldrb	r3, [r4, #25]
 8004956:	3301      	adds	r3, #1
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	7663      	strb	r3, [r4, #25]
 800495e:	d806      	bhi.n	800496e <USBH_CtlReq+0x172>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8004960:	4620      	mov	r0, r4
 8004962:	f008 fb27 	bl	800cfb4 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8004966:	2301      	movs	r3, #1
 8004968:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 800496a:	70a3      	strb	r3, [r4, #2]
 800496c:	e74d      	b.n	800480a <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800496e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8004972:	2106      	movs	r1, #6
 8004974:	4620      	mov	r0, r4
 8004976:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	7663      	strb	r3, [r4, #25]
 800497c:	e7b5      	b.n	80048ea <USBH_CtlReq+0xee>

0800497e <USBH_GetDescriptor>:
{
 800497e:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 8004980:	7884      	ldrb	r4, [r0, #2]
{
 8004982:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 8004986:	2c01      	cmp	r4, #1
 8004988:	d110      	bne.n	80049ac <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800498a:	f061 047f 	orn	r4, r1, #127	; 0x7f
 800498e:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8004990:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8004994:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8004998:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800499a:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800499e:	bf0c      	ite	eq
 80049a0:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 80049a4:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80049a6:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 80049a8:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 80049aa:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 80049ac:	462a      	mov	r2, r5
 80049ae:	4619      	mov	r1, r3
}
 80049b0:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 80049b2:	f7ff bf23 	b.w	80047fc <USBH_CtlReq>

080049b6 <USBH_Get_DevDesc>:
{
 80049b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 80049b8:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 80049bc:	460d      	mov	r5, r1
 80049be:	9100      	str	r1, [sp, #0]
 80049c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049c4:	2100      	movs	r1, #0
{
 80049c6:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 80049c8:	f7ff ffd9 	bl	800497e <USBH_GetDescriptor>
 80049cc:	bbc8      	cbnz	r0, 8004a42 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80049ce:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 80049d2:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80049d6:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 80049da:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80049de:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 80049e2:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80049e6:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 80049ea:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80049ee:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 80049f2:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80049f6:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 80049fa:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  if (length > 8U)
 80049fe:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8004a00:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8004a04:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 8004a08:	d91b      	bls.n	8004a42 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 8004a0a:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 8004a0e:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 8004a12:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 8004a16:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8004a1a:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8004a1e:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8004a22:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8004a26:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8004a2a:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8004a2e:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8004a32:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8004a36:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8004a3a:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8004a3e:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 8004a42:	b003      	add	sp, #12
 8004a44:	bd30      	pop	{r4, r5, pc}

08004a46 <USBH_Get_CfgDesc>:
{
 8004a46:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 8004a4a:	f100 051c 	add.w	r5, r0, #28
{
 8004a4e:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 8004a50:	9100      	str	r1, [sp, #0]
 8004a52:	462b      	mov	r3, r5
 8004a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a58:	2100      	movs	r1, #0
{
 8004a5a:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8004a5c:	f7ff ff8f 	bl	800497e <USBH_GetDescriptor>
 8004a60:	bb48      	cbnz	r0, 8004ab6 <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8004a62:	7f23      	ldrb	r3, [r4, #28]
 8004a64:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8004a68:	7f63      	ldrb	r3, [r4, #29]
 8004a6a:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8004a6e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004a72:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8004a76:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8004a7a:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8004a7e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8004a82:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8004a86:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8004a8a:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8004a8e:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8004a92:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8004a94:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8004a98:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8004a9c:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8004aa0:	d909      	bls.n	8004ab6 <USBH_Get_CfgDesc+0x70>
 8004aa2:	4627      	mov	r7, r4
 8004aa4:	462b      	mov	r3, r5
 8004aa6:	4606      	mov	r6, r0
 8004aa8:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004aaa:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8004aae:	2e02      	cmp	r6, #2
 8004ab0:	d001      	beq.n	8004ab6 <USBH_Get_CfgDesc+0x70>
 8004ab2:	4596      	cmp	lr, r2
 8004ab4:	d802      	bhi.n	8004abc <USBH_Get_CfgDesc+0x76>
}
 8004ab6:	b003      	add	sp, #12
 8004ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004abc:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8004abe:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004ac0:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8004ac2:	7859      	ldrb	r1, [r3, #1]
 8004ac4:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004ac6:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8004ac8:	d1f1      	bne.n	8004aae <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8004aca:	7819      	ldrb	r1, [r3, #0]
 8004acc:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8004ad0:	7859      	ldrb	r1, [r3, #1]
 8004ad2:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8004ad6:	7899      	ldrb	r1, [r3, #2]
 8004ad8:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8004adc:	78d9      	ldrb	r1, [r3, #3]
 8004ade:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8004ae2:	7919      	ldrb	r1, [r3, #4]
 8004ae4:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8004ae8:	7959      	ldrb	r1, [r3, #5]
 8004aea:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8004aee:	7999      	ldrb	r1, [r3, #6]
 8004af0:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8004af4:	79d9      	ldrb	r1, [r3, #7]
 8004af6:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8004afa:	7a19      	ldrb	r1, [r3, #8]
 8004afc:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004b00:	fb0c f806 	mul.w	r8, ip, r6
        ep_ix = 0U;
 8004b04:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8004b06:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 8004b0a:	428d      	cmp	r5, r1
 8004b0c:	d802      	bhi.n	8004b14 <USBH_Get_CfgDesc+0xce>
 8004b0e:	3601      	adds	r6, #1
 8004b10:	371a      	adds	r7, #26
 8004b12:	e7cc      	b.n	8004aae <USBH_Get_CfgDesc+0x68>
 8004b14:	4596      	cmp	lr, r2
 8004b16:	d9fa      	bls.n	8004b0e <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004b18:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8004b1a:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004b1c:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8004b1e:	785d      	ldrb	r5, [r3, #1]
 8004b20:	2d05      	cmp	r5, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004b22:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8004b24:	d1ef      	bne.n	8004b06 <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004b26:	1c4d      	adds	r5, r1, #1
 8004b28:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 8004b2c:	4421      	add	r1, r4
 8004b2e:	f893 9000 	ldrb.w	r9, [r3]
 8004b32:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8004b36:	f893 9001 	ldrb.w	r9, [r3, #1]
 8004b3a:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8004b3e:	f893 9002 	ldrb.w	r9, [r3, #2]
 8004b42:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8004b46:	f893 9003 	ldrb.w	r9, [r3, #3]
 8004b4a:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8004b4e:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8004b52:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8004b56:	f893 9006 	ldrb.w	r9, [r3, #6]
 8004b5a:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 8004b5e:	b2e9      	uxtb	r1, r5
 8004b60:	e7d1      	b.n	8004b06 <USBH_Get_CfgDesc+0xc0>

08004b62 <USBH_Get_StringDesc>:
{
 8004b62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 8004b64:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8004b68:	4614      	mov	r4, r2
 8004b6a:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8004b72:	462b      	mov	r3, r5
 8004b74:	2100      	movs	r1, #0
{
 8004b76:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8004b78:	f7ff ff01 	bl	800497e <USBH_GetDescriptor>
 8004b7c:	b978      	cbnz	r0, 8004b9e <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8004b7e:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	d10b      	bne.n	8004b9e <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8004b86:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8004b8a:	3b02      	subs	r3, #2
 8004b8c:	42bb      	cmp	r3, r7
 8004b8e:	bf28      	it	cs
 8004b90:	463b      	movcs	r3, r7
 8004b92:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 8004b94:	4602      	mov	r2, r0
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d803      	bhi.n	8004ba2 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	7023      	strb	r3, [r4, #0]
}
 8004b9e:	b003      	add	sp, #12
 8004ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8004ba2:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8004ba4:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8004ba6:	7889      	ldrb	r1, [r1, #2]
 8004ba8:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8004bac:	b292      	uxth	r2, r2
 8004bae:	e7f2      	b.n	8004b96 <USBH_Get_StringDesc+0x34>

08004bb0 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8004bb0:	7883      	ldrb	r3, [r0, #2]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d106      	bne.n	8004bc4 <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004bb6:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004bb8:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004bba:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004bbc:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8004bbe:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004bc0:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004bc2:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	f7ff be18 	b.w	80047fc <USBH_CtlReq>

08004bcc <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8004bcc:	7883      	ldrb	r3, [r0, #2]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d106      	bne.n	8004be0 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004bd2:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004bd4:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004bd6:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004bd8:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8004bda:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004bdc:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004bde:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8004be0:	2200      	movs	r2, #0
 8004be2:	4611      	mov	r1, r2
 8004be4:	f7ff be0a 	b.w	80047fc <USBH_CtlReq>

08004be8 <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8004be8:	7883      	ldrb	r3, [r0, #2]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d106      	bne.n	8004bfc <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004bee:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8004bf0:	2203      	movs	r2, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004bf2:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8004bf4:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8004bf6:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004bf8:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004bfa:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	4611      	mov	r1, r2
 8004c00:	f7ff bdfc 	b.w	80047fc <USBH_CtlReq>

08004c04 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8004c04:	7883      	ldrb	r3, [r0, #2]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d106      	bne.n	8004c18 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004c0a:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8004c0c:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8004c0e:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004c10:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8004c12:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8004c14:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004c16:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8004c18:	2200      	movs	r2, #0
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	f7ff bdee 	b.w	80047fc <USBH_CtlReq>

08004c20 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8004c20:	b530      	push	{r4, r5, lr}
 8004c22:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004c24:	2400      	movs	r4, #0
{
 8004c26:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004c28:	2308      	movs	r3, #8
 8004c2a:	9302      	str	r3, [sp, #8]
 8004c2c:	9101      	str	r1, [sp, #4]
 8004c2e:	9403      	str	r4, [sp, #12]
 8004c30:	9400      	str	r4, [sp, #0]
 8004c32:	4623      	mov	r3, r4
 8004c34:	4622      	mov	r2, r4
 8004c36:	4629      	mov	r1, r5
 8004c38:	f008 fa10 	bl	800d05c <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	b005      	add	sp, #20
 8004c40:	bd30      	pop	{r4, r5, pc}

08004c42 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8004c42:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004c44:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8004c48:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004c4a:	2d00      	cmp	r5, #0
{
 8004c4c:	461c      	mov	r4, r3
 8004c4e:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004c52:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8004c54:	bf18      	it	ne
 8004c56:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004c58:	9303      	str	r3, [sp, #12]
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	9101      	str	r1, [sp, #4]
 8004c62:	461a      	mov	r2, r3
 8004c64:	4621      	mov	r1, r4
 8004c66:	f008 f9f9 	bl	800d05c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	b005      	add	sp, #20
 8004c6e:	bd30      	pop	{r4, r5, pc}

08004c70 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8004c70:	b530      	push	{r4, r5, lr}
 8004c72:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004c74:	2400      	movs	r4, #0
{
 8004c76:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004c78:	9202      	str	r2, [sp, #8]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	9101      	str	r1, [sp, #4]
 8004c7e:	9403      	str	r4, [sp, #12]
 8004c80:	9200      	str	r2, [sp, #0]
 8004c82:	4623      	mov	r3, r4
 8004c84:	4629      	mov	r1, r5
 8004c86:	f008 f9e9 	bl	800d05c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	b005      	add	sp, #20
 8004c8e:	bd30      	pop	{r4, r5, pc}

08004c90 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8004c90:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004c92:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8004c96:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004c98:	2d00      	cmp	r5, #0
{
 8004c9a:	461c      	mov	r4, r3
 8004c9c:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004ca0:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8004ca2:	bf18      	it	ne
 8004ca4:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004ca6:	9303      	str	r3, [sp, #12]
 8004ca8:	2301      	movs	r3, #1
 8004caa:	9101      	str	r1, [sp, #4]
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	f008 f9d2 	bl	800d05c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8004cb8:	2000      	movs	r0, #0
 8004cba:	b005      	add	sp, #20
 8004cbc:	bd30      	pop	{r4, r5, pc}

08004cbe <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8004cbe:	b530      	push	{r4, r5, lr}
 8004cc0:	b085      	sub	sp, #20
 8004cc2:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004cc4:	2400      	movs	r4, #0
 8004cc6:	9202      	str	r2, [sp, #8]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	9101      	str	r1, [sp, #4]
 8004ccc:	9403      	str	r4, [sp, #12]
 8004cce:	9200      	str	r2, [sp, #0]
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	f008 f9c2 	bl	800d05c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8004cd8:	4620      	mov	r0, r4
 8004cda:	b005      	add	sp, #20
 8004cdc:	bd30      	pop	{r4, r5, pc}

08004cde <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8004cde:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8004ce0:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004ce4:	9402      	str	r4, [sp, #8]
 8004ce6:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004cea:	9401      	str	r4, [sp, #4]
 8004cec:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004cf0:	9400      	str	r4, [sp, #0]
 8004cf2:	f008 f98d 	bl	800d010 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	b004      	add	sp, #16
 8004cfa:	bd10      	pop	{r4, pc}

08004cfc <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8004cfc:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8004cfe:	f008 f99f 	bl	800d040 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 8004d02:	2000      	movs	r0, #0
 8004d04:	bd08      	pop	{r3, pc}

08004d06 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8004d06:	b530      	push	{r4, r5, lr}
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8004d0e:	f854 5b04 	ldr.w	r5, [r4], #4
 8004d12:	042d      	lsls	r5, r5, #16
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	d407      	bmi.n	8004d28 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8004d18:	33e0      	adds	r3, #224	; 0xe0
 8004d1a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004d1e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	{
	   return (uint16_t)idx;
 8004d22:	b292      	uxth	r2, r2
}
 8004d24:	b2d0      	uxtb	r0, r2
 8004d26:	bd30      	pop	{r4, r5, pc}
 8004d28:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8004d2a:	2b0b      	cmp	r3, #11
 8004d2c:	d1ef      	bne.n	8004d0e <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 8004d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d32:	e7f7      	b.n	8004d24 <USBH_AllocPipe+0x1e>

08004d34 <USBH_FreePipe>:
   if(idx < 11U)
 8004d34:	290a      	cmp	r1, #10
 8004d36:	bf9f      	itttt	ls
 8004d38:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8004d3c:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 8004d40:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8004d44:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 8004d48:	2000      	movs	r0, #0
 8004d4a:	4770      	bx	lr

08004d4c <fs_open_custom>:
extern const  unsigned long file_engine_js_size;
extern uint8_t radio_log[];
extern char json_orders[];

int fs_open_custom(struct fs_file *file, const char *name)
{
 8004d4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  int len = 0;
  file->flags = 0;
 8004d4e:	2300      	movs	r3, #0
{
 8004d50:	460d      	mov	r5, r1
 8004d52:	4604      	mov	r4, r0
  file->flags = 0;
 8004d54:	7403      	strb	r3, [r0, #16]

  if ( strcmp( name, "/!!" ) == 0 )
 8004d56:	495c      	ldr	r1, [pc, #368]	; (8004ec8 <fs_open_custom+0x17c>)
 8004d58:	4628      	mov	r0, r5
 8004d5a:	f7fb fa39 	bl	80001d0 <strcmp>
 8004d5e:	bb20      	cbnz	r0, 8004daa <fs_open_custom+0x5e>
  {
	len = strlen( json_orders );
 8004d60:	485a      	ldr	r0, [pc, #360]	; (8004ecc <fs_open_custom+0x180>)
 8004d62:	f7fb fa3f 	bl	80001e4 <strlen>

	if ( len > 6 )
 8004d66:	2806      	cmp	r0, #6
	len = strlen( json_orders );
 8004d68:	4606      	mov	r6, r0
	if ( len > 6 )
 8004d6a:	dd1a      	ble.n	8004da2 <fs_open_custom+0x56>
	{
		strcat( json_orders, "{}]}" );
 8004d6c:	4958      	ldr	r1, [pc, #352]	; (8004ed0 <fs_open_custom+0x184>)
 8004d6e:	4857      	ldr	r0, [pc, #348]	; (8004ecc <fs_open_custom+0x180>)
 8004d70:	f008 ff4a 	bl	800dc08 <strcat>
		len += 4;

		file->data = ( char * )malloc( len + 1 );
 8004d74:	1d70      	adds	r0, r6, #5
 8004d76:	f008 fe1d 	bl	800d9b4 <malloc>
		file->flags |= 0x04; // Must be deleted later
 8004d7a:	7c23      	ldrb	r3, [r4, #16]

		strcpy( ( char * )file->data, json_orders );
 8004d7c:	4953      	ldr	r1, [pc, #332]	; (8004ecc <fs_open_custom+0x180>)
		file->data = ( char * )malloc( len + 1 );
 8004d7e:	6020      	str	r0, [r4, #0]
		file->flags |= 0x04; // Must be deleted later
 8004d80:	f043 0304 	orr.w	r3, r3, #4
 8004d84:	7423      	strb	r3, [r4, #16]
		strcpy( ( char * )file->data, json_orders );
 8004d86:	f008 ff5c 	bl	800dc42 <strcpy>

		strcpy( json_orders, "{\"L\":[" );
 8004d8a:	4952      	ldr	r1, [pc, #328]	; (8004ed4 <fs_open_custom+0x188>)
 8004d8c:	484f      	ldr	r0, [pc, #316]	; (8004ecc <fs_open_custom+0x180>)
		len += 4;
 8004d8e:	1d35      	adds	r5, r6, #4
		strcpy( json_orders, "{\"L\":[" );
 8004d90:	f008 ff57 	bl	800dc42 <strcpy>
#endif
  }

  file->len = len;
  file->index = len;
  file->pextension = 0;
 8004d94:	2300      	movs	r3, #0

  return len;
}
 8004d96:	4628      	mov	r0, r5
  file->len = len;
 8004d98:	6065      	str	r5, [r4, #4]
  file->index = len;
 8004d9a:	60a5      	str	r5, [r4, #8]
  file->pextension = 0;
 8004d9c:	60e3      	str	r3, [r4, #12]
}
 8004d9e:	b002      	add	sp, #8
 8004da0:	bd70      	pop	{r4, r5, r6, pc}
	    file->data = json_nil;
 8004da2:	4b4d      	ldr	r3, [pc, #308]	; (8004ed8 <fs_open_custom+0x18c>)
	file->data = "ok";
 8004da4:	6023      	str	r3, [r4, #0]
	len = 2;
 8004da6:	2502      	movs	r5, #2
 8004da8:	e7f4      	b.n	8004d94 <fs_open_custom+0x48>
  else if ( strncmp( name, "/register_player/", 17 ) == 0 )
 8004daa:	2211      	movs	r2, #17
 8004dac:	494b      	ldr	r1, [pc, #300]	; (8004edc <fs_open_custom+0x190>)
 8004dae:	4628      	mov	r0, r5
 8004db0:	f008 ff4f 	bl	800dc52 <strncmp>
 8004db4:	b938      	cbnz	r0, 8004dc6 <fs_open_custom+0x7a>
    file->data = ok;
 8004db6:	4b4a      	ldr	r3, [pc, #296]	; (8004ee0 <fs_open_custom+0x194>)
 8004db8:	6023      	str	r3, [r4, #0]
    bum_game_register( name + 17 );
 8004dba:	f105 0011 	add.w	r0, r5, #17
 8004dbe:	f006 f9cf 	bl	800b160 <bum_game_register>
      len = strlen( ok );
 8004dc2:	2556      	movs	r5, #86	; 0x56
 8004dc4:	e7e6      	b.n	8004d94 <fs_open_custom+0x48>
  else if ( strncmp( name, "/acc/", 5 ) == 0 ) // FOR TEST ONLY
 8004dc6:	2205      	movs	r2, #5
 8004dc8:	4946      	ldr	r1, [pc, #280]	; (8004ee4 <fs_open_custom+0x198>)
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f008 ff41 	bl	800dc52 <strncmp>
 8004dd0:	4606      	mov	r6, r0
 8004dd2:	b9a8      	cbnz	r0, 8004e00 <fs_open_custom+0xb4>
    file->data = ok;
 8004dd4:	4b42      	ldr	r3, [pc, #264]	; (8004ee0 <fs_open_custom+0x194>)
 8004dd6:	6023      	str	r3, [r4, #0]
    ax = strtol( name + 5, &endptr, 10 );
 8004dd8:	a901      	add	r1, sp, #4
 8004dda:	1d68      	adds	r0, r5, #5
 8004ddc:	220a      	movs	r2, #10
 8004dde:	f008 fffb 	bl	800ddd8 <strtol>
 8004de2:	b245      	sxtb	r5, r0
    if ( *endptr ) ay = strtol( endptr + 1, 0, 10 );
 8004de4:	9801      	ldr	r0, [sp, #4]
 8004de6:	7801      	ldrb	r1, [r0, #0]
 8004de8:	b129      	cbz	r1, 8004df6 <fs_open_custom+0xaa>
 8004dea:	4631      	mov	r1, r6
 8004dec:	220a      	movs	r2, #10
 8004dee:	3001      	adds	r0, #1
 8004df0:	f008 fff2 	bl	800ddd8 <strtol>
 8004df4:	b241      	sxtb	r1, r0
    bum_game_acceleration( ax, ay, 0 );
 8004df6:	2200      	movs	r2, #0
 8004df8:	4628      	mov	r0, r5
 8004dfa:	f006 f9d1 	bl	800b1a0 <bum_game_acceleration>
 8004dfe:	e7e0      	b.n	8004dc2 <fs_open_custom+0x76>
  else if ( strcmp( name, "/favicon.ico" ) == 0 )
 8004e00:	4939      	ldr	r1, [pc, #228]	; (8004ee8 <fs_open_custom+0x19c>)
 8004e02:	4628      	mov	r0, r5
 8004e04:	f7fb f9e4 	bl	80001d0 <strcmp>
 8004e08:	b920      	cbnz	r0, 8004e14 <fs_open_custom+0xc8>
	len = img_favicon_size;
 8004e0a:	4b38      	ldr	r3, [pc, #224]	; (8004eec <fs_open_custom+0x1a0>)
 8004e0c:	681d      	ldr	r5, [r3, #0]
	file->data = ( const char * )img_favicon;
 8004e0e:	4b38      	ldr	r3, [pc, #224]	; (8004ef0 <fs_open_custom+0x1a4>)
 8004e10:	6023      	str	r3, [r4, #0]
 8004e12:	e7bf      	b.n	8004d94 <fs_open_custom+0x48>
  else if ( strcmp( name, "/index.html" ) == 0 )
 8004e14:	4937      	ldr	r1, [pc, #220]	; (8004ef4 <fs_open_custom+0x1a8>)
 8004e16:	4628      	mov	r0, r5
 8004e18:	f7fb f9da 	bl	80001d0 <strcmp>
 8004e1c:	b920      	cbnz	r0, 8004e28 <fs_open_custom+0xdc>
    file->data = ( const char * )file_index_html;
 8004e1e:	4b36      	ldr	r3, [pc, #216]	; (8004ef8 <fs_open_custom+0x1ac>)
 8004e20:	6023      	str	r3, [r4, #0]
    len = file_index_html_size;
 8004e22:	4b36      	ldr	r3, [pc, #216]	; (8004efc <fs_open_custom+0x1b0>)
    len = file_engine_js_size;
 8004e24:	681d      	ldr	r5, [r3, #0]
 8004e26:	e7b5      	b.n	8004d94 <fs_open_custom+0x48>
  else if ( strcmp( name, "/engine.js" ) == 0 )
 8004e28:	4935      	ldr	r1, [pc, #212]	; (8004f00 <fs_open_custom+0x1b4>)
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f7fb f9d0 	bl	80001d0 <strcmp>
 8004e30:	b918      	cbnz	r0, 8004e3a <fs_open_custom+0xee>
    file->data = ( const char * )file_engine_js;
 8004e32:	4b34      	ldr	r3, [pc, #208]	; (8004f04 <fs_open_custom+0x1b8>)
 8004e34:	6023      	str	r3, [r4, #0]
    len = file_engine_js_size;
 8004e36:	4b34      	ldr	r3, [pc, #208]	; (8004f08 <fs_open_custom+0x1bc>)
 8004e38:	e7f4      	b.n	8004e24 <fs_open_custom+0xd8>
  else if ( strcmp( name, "/radio_log.html" ) == 0 )
 8004e3a:	4934      	ldr	r1, [pc, #208]	; (8004f0c <fs_open_custom+0x1c0>)
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	f7fb f9c7 	bl	80001d0 <strcmp>
 8004e42:	b928      	cbnz	r0, 8004e50 <fs_open_custom+0x104>
    file->data = ( const char * )radio_log;
 8004e44:	4832      	ldr	r0, [pc, #200]	; (8004f10 <fs_open_custom+0x1c4>)
 8004e46:	6020      	str	r0, [r4, #0]
    len = strlen( ( const char * )radio_log );
 8004e48:	f7fb f9cc 	bl	80001e4 <strlen>
    len = sprintf( buffer, "%s %d", r == 0 ? "SUCCESS" : "ERROR", r );
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	e7a1      	b.n	8004d94 <fs_open_custom+0x48>
  else if ( strcmp( name, "/xbee_switch_to_api.html" ) == 0 )
 8004e50:	4930      	ldr	r1, [pc, #192]	; (8004f14 <fs_open_custom+0x1c8>)
 8004e52:	4628      	mov	r0, r5
 8004e54:	f7fb f9bc 	bl	80001d0 <strcmp>
 8004e58:	b970      	cbnz	r0, 8004e78 <fs_open_custom+0x12c>
	int r = xbee_AT_configure_API1();
 8004e5a:	f008 fcf5 	bl	800d848 <xbee_AT_configure_API1>
    file->data = buffer;
 8004e5e:	4d2e      	ldr	r5, [pc, #184]	; (8004f18 <fs_open_custom+0x1cc>)
    len = sprintf( buffer, "%s %d", r == 0 ? "SUCCESS" : "ERROR", r );
 8004e60:	492e      	ldr	r1, [pc, #184]	; (8004f1c <fs_open_custom+0x1d0>)
 8004e62:	4a2f      	ldr	r2, [pc, #188]	; (8004f20 <fs_open_custom+0x1d4>)
    file->data = buffer;
 8004e64:	6025      	str	r5, [r4, #0]
    len = sprintf( buffer, "%s %d", r == 0 ? "SUCCESS" : "ERROR", r );
 8004e66:	2800      	cmp	r0, #0
 8004e68:	bf08      	it	eq
 8004e6a:	460a      	moveq	r2, r1
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	492d      	ldr	r1, [pc, #180]	; (8004f24 <fs_open_custom+0x1d8>)
 8004e70:	4628      	mov	r0, r5
 8004e72:	f008 fea5 	bl	800dbc0 <siprintf>
 8004e76:	e7e9      	b.n	8004e4c <fs_open_custom+0x100>
  else if ( strcmp( name, "/orange.html" ) == 0 )
 8004e78:	492b      	ldr	r1, [pc, #172]	; (8004f28 <fs_open_custom+0x1dc>)
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f7fb f9a8 	bl	80001d0 <strcmp>
 8004e80:	b938      	cbnz	r0, 8004e92 <fs_open_custom+0x146>
      HAL_GPIO_TogglePin( GPIOD, LD3_Pin);
 8004e82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      HAL_GPIO_TogglePin( GPIOD, LD6_Pin);
 8004e86:	4829      	ldr	r0, [pc, #164]	; (8004f2c <fs_open_custom+0x1e0>)
 8004e88:	f7fc ff8f 	bl	8001daa <HAL_GPIO_TogglePin>
      file->data = ok;
 8004e8c:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <fs_open_custom+0x194>)
 8004e8e:	6023      	str	r3, [r4, #0]
 8004e90:	e797      	b.n	8004dc2 <fs_open_custom+0x76>
    else if ( strcmp( name, "/green.html" ) == 0 )
 8004e92:	4927      	ldr	r1, [pc, #156]	; (8004f30 <fs_open_custom+0x1e4>)
 8004e94:	4628      	mov	r0, r5
 8004e96:	f7fb f99b 	bl	80001d0 <strcmp>
 8004e9a:	b910      	cbnz	r0, 8004ea2 <fs_open_custom+0x156>
      HAL_GPIO_TogglePin( GPIOD, LD4_Pin);
 8004e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ea0:	e7f1      	b.n	8004e86 <fs_open_custom+0x13a>
    else if ( strcmp( name, "/red.html" ) == 0 )
 8004ea2:	4924      	ldr	r1, [pc, #144]	; (8004f34 <fs_open_custom+0x1e8>)
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	f7fb f993 	bl	80001d0 <strcmp>
 8004eaa:	b910      	cbnz	r0, 8004eb2 <fs_open_custom+0x166>
      HAL_GPIO_TogglePin( GPIOD, LD5_Pin);
 8004eac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004eb0:	e7e9      	b.n	8004e86 <fs_open_custom+0x13a>
    else if ( strcmp( name, "/blue.html" ) == 0 )
 8004eb2:	4921      	ldr	r1, [pc, #132]	; (8004f38 <fs_open_custom+0x1ec>)
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	f7fb f98b 	bl	80001d0 <strcmp>
 8004eba:	b910      	cbnz	r0, 8004ec2 <fs_open_custom+0x176>
      HAL_GPIO_TogglePin( GPIOD, LD6_Pin);
 8004ebc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ec0:	e7e1      	b.n	8004e86 <fs_open_custom+0x13a>
	file->data = "ok";
 8004ec2:	4b1e      	ldr	r3, [pc, #120]	; (8004f3c <fs_open_custom+0x1f0>)
 8004ec4:	e76e      	b.n	8004da4 <fs_open_custom+0x58>
 8004ec6:	bf00      	nop
 8004ec8:	0800edf2 	.word	0x0800edf2
 8004ecc:	20009b6c 	.word	0x20009b6c
 8004ed0:	0800edf6 	.word	0x0800edf6
 8004ed4:	0800edfb 	.word	0x0800edfb
 8004ed8:	0800ee9e 	.word	0x0800ee9e
 8004edc:	0800ee02 	.word	0x0800ee02
 8004ee0:	0800eea1 	.word	0x0800eea1
 8004ee4:	0800ee14 	.word	0x0800ee14
 8004ee8:	0800ee1a 	.word	0x0800ee1a
 8004eec:	200005a8 	.word	0x200005a8
 8004ef0:	20000028 	.word	0x20000028
 8004ef4:	0800ee27 	.word	0x0800ee27
 8004ef8:	080121b4 	.word	0x080121b4
 8004efc:	080125e0 	.word	0x080125e0
 8004f00:	0800ee33 	.word	0x0800ee33
 8004f04:	08010ca3 	.word	0x08010ca3
 8004f08:	0801219c 	.word	0x0801219c
 8004f0c:	0800ee3e 	.word	0x0800ee3e
 8004f10:	20005070 	.word	0x20005070
 8004f14:	0800ee4e 	.word	0x0800ee4e
 8004f18:	20001ac8 	.word	0x20001ac8
 8004f1c:	0800ede4 	.word	0x0800ede4
 8004f20:	0800edec 	.word	0x0800edec
 8004f24:	0800ee67 	.word	0x0800ee67
 8004f28:	0800ee6d 	.word	0x0800ee6d
 8004f2c:	40020c00 	.word	0x40020c00
 8004f30:	0800ee7a 	.word	0x0800ee7a
 8004f34:	0800ee86 	.word	0x0800ee86
 8004f38:	0800ee90 	.word	0x0800ee90
 8004f3c:	0800ee9b 	.word	0x0800ee9b

08004f40 <fs_close_custom>:

/*-----------------------------------------------------------------------------------*/
void fs_close_custom(struct fs_file *file)
{
 8004f40:	b510      	push	{r4, lr}
	if ( file->flags & 0x04 )
 8004f42:	7c03      	ldrb	r3, [r0, #16]
 8004f44:	075b      	lsls	r3, r3, #29
{
 8004f46:	4604      	mov	r4, r0
	if ( file->flags & 0x04 )
 8004f48:	d502      	bpl.n	8004f50 <fs_close_custom+0x10>
	{
	  free( ( char * )file->data );
 8004f4a:	6800      	ldr	r0, [r0, #0]
 8004f4c:	f008 fd3a 	bl	800d9c4 <free>
	}
	file->data = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	6023      	str	r3, [r4, #0]
	file->len = 0;
 8004f54:	6063      	str	r3, [r4, #4]
 8004f56:	bd10      	pop	{r4, pc}

08004f58 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8004f58:	b510      	push	{r4, lr}
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8004f5a:	4604      	mov	r4, r0
 8004f5c:	b158      	cbz	r0, 8004f76 <fs_open+0x1e>
 8004f5e:	b151      	cbz	r1, 8004f76 <fs_open+0x1e>
     return ERR_ARG;
  }

#if LWIP_HTTPD_CUSTOM_FILES
  if (fs_open_custom(file, name)) {
 8004f60:	f7ff fef4 	bl	8004d4c <fs_open_custom>
 8004f64:	b118      	cbz	r0, 8004f6e <fs_open+0x16>
    file->is_custom_file = 1;
 8004f66:	2301      	movs	r3, #1
 8004f68:	7463      	strb	r3, [r4, #17]
    return ERR_OK;
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	bd10      	pop	{r4, pc}
  }
  file->is_custom_file = 0;
 8004f6e:	7460      	strb	r0, [r4, #17]
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8004f70:	f06f 0005 	mvn.w	r0, #5
 8004f74:	bd10      	pop	{r4, pc}
     return ERR_ARG;
 8004f76:	f06f 000f 	mvn.w	r0, #15
}
 8004f7a:	bd10      	pop	{r4, pc}

08004f7c <fs_close>:
/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
#if LWIP_HTTPD_CUSTOM_FILES
  if (file->is_custom_file) {
 8004f7c:	7c43      	ldrb	r3, [r0, #17]
 8004f7e:	b10b      	cbz	r3, 8004f84 <fs_close+0x8>
    fs_close_custom(file);
 8004f80:	f7ff bfde 	b.w	8004f40 <fs_close_custom>
 8004f84:	4770      	bx	lr

08004f86 <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8004f86:	6842      	ldr	r2, [r0, #4]
 8004f88:	6880      	ldr	r0, [r0, #8]
}
 8004f8a:	1a10      	subs	r0, r2, r0
 8004f8c:	4770      	bx	lr
	...

08004f90 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 8004f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f94:	4605      	mov	r5, r0
 8004f96:	460f      	mov	r7, r1
 8004f98:	4698      	mov	r8, r3
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8004f9a:	4616      	mov	r6, r2
 8004f9c:	b932      	cbnz	r2, 8004fac <http_write+0x1c>
 8004f9e:	4b18      	ldr	r3, [pc, #96]	; (8005000 <http_write+0x70>)
 8004fa0:	4918      	ldr	r1, [pc, #96]	; (8005004 <http_write+0x74>)
 8004fa2:	4819      	ldr	r0, [pc, #100]	; (8005008 <http_write+0x78>)
 8004fa4:	f44f 7204 	mov.w	r2, #528	; 0x210
 8004fa8:	f008 fde2 	bl	800db70 <iprintf>
  len = *length;
 8004fac:	8830      	ldrh	r0, [r6, #0]
  if (len == 0) {
 8004fae:	b328      	cbz	r0, 8004ffc <http_write+0x6c>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8004fb0:	8e6c      	ldrh	r4, [r5, #50]	; 0x32
 8004fb2:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8004fb6:	0064      	lsls	r4, r4, #1
 8004fb8:	b2a4      	uxth	r4, r4
 8004fba:	429c      	cmp	r4, r3
 8004fbc:	bf28      	it	cs
 8004fbe:	461c      	movcs	r4, r3
 8004fc0:	4284      	cmp	r4, r0
 8004fc2:	bf28      	it	cs
 8004fc4:	4604      	movcs	r4, r0
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 8004fc6:	4643      	mov	r3, r8
 8004fc8:	4622      	mov	r2, r4
 8004fca:	4639      	mov	r1, r7
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f005 f845 	bl	800a05c <tcp_write>
    if (err == ERR_MEM) {
 8004fd2:	1c43      	adds	r3, r0, #1
 8004fd4:	d10d      	bne.n	8004ff2 <http_write+0x62>
      if ((tcp_sndbuf(pcb) == 0) ||
 8004fd6:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8004fda:	b133      	cbz	r3, 8004fea <http_write+0x5a>
 8004fdc:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d802      	bhi.n	8004fea <http_write+0x5a>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
          /* no need to try smaller sizes */
          len = 1;
      } else {
        len /= 2;
 8004fe4:	0864      	lsrs	r4, r4, #1
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8004fe6:	2c01      	cmp	r4, #1
 8004fe8:	d8ed      	bhi.n	8004fc6 <http_write+0x36>
  if (err == ERR_OK) {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8004fea:	2300      	movs	r3, #0
 8004fec:	8033      	strh	r3, [r6, #0]
 8004fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (err == ERR_OK) {
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	d1f9      	bne.n	8004fea <http_write+0x5a>
    *length = len;
 8004ff6:	8034      	strh	r4, [r6, #0]
 8004ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
}
 8004ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005000:	0800f1c9 	.word	0x0800f1c9
 8005004:	0800f200 	.word	0x0800f200
 8005008:	0800f20f 	.word	0x0800f20f

0800500c <http_state_eof>:
{
 800500c:	b510      	push	{r4, lr}
 800500e:	4604      	mov	r4, r0
  if(hs->handle) {
 8005010:	6940      	ldr	r0, [r0, #20]
 8005012:	b118      	cbz	r0, 800501c <http_state_eof+0x10>
    fs_close(hs->handle);
 8005014:	f7ff ffb2 	bl	8004f7c <fs_close>
    hs->handle = NULL;
 8005018:	2300      	movs	r3, #0
 800501a:	6163      	str	r3, [r4, #20]
  if (hs->req) {
 800501c:	6a20      	ldr	r0, [r4, #32]
 800501e:	b118      	cbz	r0, 8005028 <http_state_eof+0x1c>
    pbuf_free(hs->req);
 8005020:	f002 fab8 	bl	8007594 <pbuf_free>
    hs->req = NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	6223      	str	r3, [r4, #32]
 8005028:	bd10      	pop	{r4, pc}
	...

0800502c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 8005030:	490a      	ldr	r1, [pc, #40]	; (800505c <http_get_404_file+0x30>)
 8005032:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8005034:	4604      	mov	r4, r0
 8005036:	f7ff ff8f 	bl	8004f58 <fs_open>
  if (err != ERR_OK) {
 800503a:	b168      	cbz	r0, 8005058 <http_get_404_file+0x2c>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800503c:	4908      	ldr	r1, [pc, #32]	; (8005060 <http_get_404_file+0x34>)
 800503e:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8005040:	4620      	mov	r0, r4
 8005042:	f7ff ff89 	bl	8004f58 <fs_open>
    if (err != ERR_OK) {
 8005046:	b138      	cbz	r0, 8005058 <http_get_404_file+0x2c>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8005048:	4906      	ldr	r1, [pc, #24]	; (8005064 <http_get_404_file+0x38>)
 800504a:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 800504c:	4620      	mov	r0, r4
 800504e:	f7ff ff83 	bl	8004f58 <fs_open>
      if (err != ERR_OK) {
 8005052:	b108      	cbz	r0, 8005058 <http_get_404_file+0x2c>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8005054:	2400      	movs	r4, #0
 8005056:	602c      	str	r4, [r5, #0]
      }
    }
  }

  return &hs->file_handle;
}
 8005058:	4620      	mov	r0, r4
 800505a:	bd38      	pop	{r3, r4, r5, pc}
 800505c:	0800f174 	.word	0x0800f174
 8005060:	0800f17e 	.word	0x0800f17e
 8005064:	0800f187 	.word	0x0800f187

08005068 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	460c      	mov	r4, r1
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800506c:	4615      	mov	r5, r2
 800506e:	bb42      	cbnz	r2, 80050c2 <http_accept+0x5a>
 8005070:	b339      	cbz	r1, 80050c2 <http_accept+0x5a>
    return ERR_VAL;
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8005072:	2101      	movs	r1, #1
 8005074:	4620      	mov	r0, r4
 8005076:	f002 fee5 	bl	8007e44 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800507a:	2054      	movs	r0, #84	; 0x54
 800507c:	f002 f828 	bl	80070d0 <mem_malloc>
  if (ret != NULL) {
 8005080:	4606      	mov	r6, r0
 8005082:	b308      	cbz	r0, 80050c8 <http_accept+0x60>
  memset(hs, 0, sizeof(struct http_state));
 8005084:	2254      	movs	r2, #84	; 0x54
 8005086:	4629      	mov	r1, r5
 8005088:	f008 fcbe 	bl	800da08 <memset>
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 800508c:	2305      	movs	r3, #5
 800508e:	f8a6 304e 	strh.w	r3, [r6, #78]	; 0x4e
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 8005092:	4631      	mov	r1, r6
 8005094:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8005096:	61f4      	str	r4, [r6, #28]
  tcp_arg(pcb, hs);
 8005098:	f002 feec 	bl	8007e74 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 800509c:	490c      	ldr	r1, [pc, #48]	; (80050d0 <http_accept+0x68>)
 800509e:	4620      	mov	r0, r4
 80050a0:	f002 feec 	bl	8007e7c <tcp_recv>
  tcp_err(pcb, http_err);
 80050a4:	490b      	ldr	r1, [pc, #44]	; (80050d4 <http_accept+0x6c>)
 80050a6:	4620      	mov	r0, r4
 80050a8:	f002 ff16 	bl	8007ed8 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80050ac:	490a      	ldr	r1, [pc, #40]	; (80050d8 <http_accept+0x70>)
 80050ae:	4620      	mov	r0, r4
 80050b0:	2204      	movs	r2, #4
 80050b2:	f002 ff2f 	bl	8007f14 <tcp_poll>
  tcp_sent(pcb, http_sent);
 80050b6:	4909      	ldr	r1, [pc, #36]	; (80050dc <http_accept+0x74>)
 80050b8:	4620      	mov	r0, r4
 80050ba:	f002 fef7 	bl	8007eac <tcp_sent>

  return ERR_OK;
}
 80050be:	4628      	mov	r0, r5
 80050c0:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80050c2:	f06f 0505 	mvn.w	r5, #5
 80050c6:	e7fa      	b.n	80050be <http_accept+0x56>
    return ERR_MEM;
 80050c8:	f04f 35ff 	mov.w	r5, #4294967295
 80050cc:	e7f7      	b.n	80050be <http_accept+0x56>
 80050ce:	bf00      	nop
 80050d0:	08005631 	.word	0x08005631
 80050d4:	0800597d 	.word	0x0800597d
 80050d8:	080055f5 	.word	0x080055f5
 80050dc:	080055dd 	.word	0x080055dd

080050e0 <http_find_file>:
{
 80050e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e4:	4604      	mov	r4, r0
  size_t uri_len = strlen(uri);
 80050e6:	4608      	mov	r0, r1
{
 80050e8:	9101      	str	r1, [sp, #4]
 80050ea:	4692      	mov	sl, r2
  size_t uri_len = strlen(uri);
 80050ec:	460d      	mov	r5, r1
 80050ee:	f7fb f879 	bl	80001e4 <strlen>
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 80050f2:	b9c8      	cbnz	r0, 8005128 <http_find_file+0x48>
    params = (char *)strchr(uri, '?');
 80050f4:	213f      	movs	r1, #63	; 0x3f
 80050f6:	9801      	ldr	r0, [sp, #4]
 80050f8:	f008 fd95 	bl	800dc26 <strchr>
    if (params != NULL) {
 80050fc:	2800      	cmp	r0, #0
 80050fe:	f040 809a 	bne.w	8005236 <http_find_file+0x156>
    err = fs_open(&hs->file_handle, uri);
 8005102:	9901      	ldr	r1, [sp, #4]
 8005104:	4620      	mov	r0, r4
 8005106:	4625      	mov	r5, r4
 8005108:	f7ff ff26 	bl	8004f58 <fs_open>
    if (err == ERR_OK) {
 800510c:	b120      	cbz	r0, 8005118 <http_find_file+0x38>
      file = http_get_404_file(hs, &uri);
 800510e:	a901      	add	r1, sp, #4
 8005110:	4620      	mov	r0, r4
 8005112:	f7ff ff8b 	bl	800502c <http_get_404_file>
 8005116:	4605      	mov	r5, r0
  if (file == NULL) {
 8005118:	2d00      	cmp	r5, #0
 800511a:	d143      	bne.n	80051a4 <http_find_file+0xc4>
    file = http_get_404_file(hs, &uri);
 800511c:	a901      	add	r1, sp, #4
 800511e:	4620      	mov	r0, r4
 8005120:	f7ff ff84 	bl	800502c <http_get_404_file>
 8005124:	4605      	mov	r5, r0
 8005126:	e03d      	b.n	80051a4 <http_find_file+0xc4>
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 8005128:	1e46      	subs	r6, r0, #1
 800512a:	5dab      	ldrb	r3, [r5, r6]
 800512c:	2b2f      	cmp	r3, #47	; 0x2f
 800512e:	d1e1      	bne.n	80050f4 <http_find_file+0x14>
 8005130:	4b7e      	ldr	r3, [pc, #504]	; (800532c <http_find_file+0x24c>)
 8005132:	429d      	cmp	r5, r3
 8005134:	4698      	mov	r8, r3
 8005136:	d101      	bne.n	800513c <http_find_file+0x5c>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005138:	2801      	cmp	r0, #1
 800513a:	d1db      	bne.n	80050f4 <http_find_file+0x14>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800513c:	2e3f      	cmp	r6, #63	; 0x3f
 800513e:	bf28      	it	cs
 8005140:	263f      	movcs	r6, #63	; 0x3f
    if (copy_len > 0) {
 8005142:	b13e      	cbz	r6, 8005154 <http_find_file+0x74>
      MEMCPY(http_uri_buf, uri, copy_len);
 8005144:	4632      	mov	r2, r6
 8005146:	4629      	mov	r1, r5
 8005148:	4878      	ldr	r0, [pc, #480]	; (800532c <http_find_file+0x24c>)
 800514a:	f008 fc52 	bl	800d9f2 <memcpy>
      http_uri_buf[copy_len] = 0;
 800514e:	2300      	movs	r3, #0
 8005150:	f808 3006 	strb.w	r3, [r8, r6]
        file_name = g_psDefaultFilenames[loop].name;
 8005154:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8005378 <http_find_file+0x298>
        file_name = http_uri_buf;
 8005158:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 800532c <http_find_file+0x24c>
{
 800515c:	2700      	movs	r7, #0
      if (copy_len > 0) {
 800515e:	b19e      	cbz	r6, 8005188 <http_find_file+0xa8>
        if (len_left > 0) {
 8005160:	f1d6 023f 	rsbs	r2, r6, #63	; 0x3f
 8005164:	d00e      	beq.n	8005184 <http_find_file+0xa4>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 8005166:	f859 5037 	ldr.w	r5, [r9, r7, lsl #3]
 800516a:	9200      	str	r2, [sp, #0]
 800516c:	4628      	mov	r0, r5
 800516e:	f7fb f839 	bl	80001e4 <strlen>
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 8005172:	9a00      	ldr	r2, [sp, #0]
 8005174:	4282      	cmp	r2, r0
 8005176:	bf28      	it	cs
 8005178:	4602      	movcs	r2, r0
 800517a:	4629      	mov	r1, r5
 800517c:	eb08 0006 	add.w	r0, r8, r6
 8005180:	f008 fc37 	bl	800d9f2 <memcpy>
        file_name = http_uri_buf;
 8005184:	465b      	mov	r3, fp
 8005186:	e001      	b.n	800518c <http_find_file+0xac>
        file_name = g_psDefaultFilenames[loop].name;
 8005188:	f859 3037 	ldr.w	r3, [r9, r7, lsl #3]
      err = fs_open(&hs->file_handle, file_name);
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	4619      	mov	r1, r3
 8005190:	4620      	mov	r0, r4
 8005192:	f7ff fee1 	bl	8004f58 <fs_open>
 8005196:	4625      	mov	r5, r4
      if(err == ERR_OK) {
 8005198:	9b00      	ldr	r3, [sp, #0]
 800519a:	2800      	cmp	r0, #0
 800519c:	d147      	bne.n	800522e <http_find_file+0x14e>
        uri = file_name;
 800519e:	9301      	str	r3, [sp, #4]
  if (file == NULL) {
 80051a0:	2c00      	cmp	r4, #0
 80051a2:	d0a7      	beq.n	80050f4 <http_find_file+0x14>
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80051a4:	9e01      	ldr	r6, [sp, #4]
    hs->handle = file;
 80051a6:	6165      	str	r5, [r4, #20]
  if (file != NULL) {
 80051a8:	2d00      	cmp	r5, #0
 80051aa:	d049      	beq.n	8005240 <http_find_file+0x160>
    hs->file = file->data;
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80051b0:	686b      	ldr	r3, [r5, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	da06      	bge.n	80051c4 <http_find_file+0xe4>
 80051b6:	4b5e      	ldr	r3, [pc, #376]	; (8005330 <http_find_file+0x250>)
 80051b8:	495e      	ldr	r1, [pc, #376]	; (8005334 <http_find_file+0x254>)
 80051ba:	485f      	ldr	r0, [pc, #380]	; (8005338 <http_find_file+0x258>)
 80051bc:	f640 02cf 	movw	r2, #2255	; 0x8cf
 80051c0:	f008 fcd6 	bl	800db70 <iprintf>
    if (file->is_custom_file && (file->data == NULL)) {
 80051c4:	7c6b      	ldrb	r3, [r5, #17]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d038      	beq.n	800523c <http_find_file+0x15c>
 80051ca:	682b      	ldr	r3, [r5, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d135      	bne.n	800523c <http_find_file+0x15c>
      hs->left = file->len;
 80051d0:	6263      	str	r3, [r4, #36]	; 0x24
    hs->retries = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80051d8:	f1ba 0f00 	cmp.w	sl, #0
 80051dc:	d010      	beq.n	8005200 <http_find_file+0x120>
 80051de:	6963      	ldr	r3, [r4, #20]
 80051e0:	7c1b      	ldrb	r3, [r3, #16]
 80051e2:	07da      	lsls	r2, r3, #31
 80051e4:	d50c      	bpl.n	8005200 <http_find_file+0x120>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80051e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80051e8:	4954      	ldr	r1, [pc, #336]	; (800533c <http_find_file+0x25c>)
 80051ea:	69a0      	ldr	r0, [r4, #24]
 80051ec:	f000 fc17 	bl	8005a1e <lwip_strnstr>
      if (file_start != NULL) {
 80051f0:	b130      	cbz	r0, 8005200 <http_find_file+0x120>
        size_t diff = file_start + 4 - hs->file;
 80051f2:	69a3      	ldr	r3, [r4, #24]
 80051f4:	3004      	adds	r0, #4
 80051f6:	1ac2      	subs	r2, r0, r3
        hs->left -= (u32_t)diff;
 80051f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hs->file += diff;
 80051fa:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 80051fc:	1a9b      	subs	r3, r3, r2
 80051fe:	6263      	str	r3, [r4, #36]	; 0x24
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 8005200:	6963      	ldr	r3, [r4, #20]
 8005202:	b113      	cbz	r3, 800520a <http_find_file+0x12a>
 8005204:	7c1b      	ldrb	r3, [r3, #16]
 8005206:	07db      	lsls	r3, r3, #31
 8005208:	d40d      	bmi.n	8005226 <http_find_file+0x146>
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 800520a:	4b4d      	ldr	r3, [pc, #308]	; (8005340 <http_find_file+0x260>)
 800520c:	6323      	str	r3, [r4, #48]	; 0x30
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEPALIVE] = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	6363      	str	r3, [r4, #52]	; 0x34
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 8005212:	63a3      	str	r3, [r4, #56]	; 0x38
  if (uri == NULL) {
 8005214:	b9ce      	cbnz	r6, 800524a <http_find_file+0x16a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 8005216:	4b4b      	ldr	r3, [pc, #300]	; (8005344 <http_find_file+0x264>)
 8005218:	62e3      	str	r3, [r4, #44]	; 0x2c
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 800521a:	4b4b      	ldr	r3, [pc, #300]	; (8005348 <http_find_file+0x268>)
 800521c:	63e3      	str	r3, [r4, #60]	; 0x3c
    hs->hdr_index = 0;
 800521e:	f8a4 604e 	strh.w	r6, [r4, #78]	; 0x4e
    hs->hdr_pos = 0;
 8005222:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
}
 8005226:	2000      	movs	r0, #0
 8005228:	b003      	add	sp, #12
 800522a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800522e:	3701      	adds	r7, #1
 8005230:	2f05      	cmp	r7, #5
 8005232:	d194      	bne.n	800515e <http_find_file+0x7e>
 8005234:	e75e      	b.n	80050f4 <http_find_file+0x14>
      *params = '\0';
 8005236:	2300      	movs	r3, #0
 8005238:	7003      	strb	r3, [r0, #0]
 800523a:	e762      	b.n	8005102 <http_find_file+0x22>
      hs->left = file->len;
 800523c:	686b      	ldr	r3, [r5, #4]
 800523e:	e7c7      	b.n	80051d0 <http_find_file+0xf0>
    hs->file = NULL;
 8005240:	61a5      	str	r5, [r4, #24]
    hs->left = 0;
 8005242:	6265      	str	r5, [r4, #36]	; 0x24
    hs->retries = 0;
 8005244:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 8005248:	e7da      	b.n	8005200 <http_find_file+0x120>
  if (strstr(uri, "404")) {
 800524a:	4940      	ldr	r1, [pc, #256]	; (800534c <http_find_file+0x26c>)
 800524c:	4630      	mov	r0, r6
 800524e:	f008 fd27 	bl	800dca0 <strstr>
 8005252:	b308      	cbz	r0, 8005298 <http_find_file+0x1b8>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 8005254:	4b3b      	ldr	r3, [pc, #236]	; (8005344 <http_find_file+0x264>)
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 8005256:	62e3      	str	r3, [r4, #44]	; 0x2c
  vars = strchr(uri, '?');
 8005258:	213f      	movs	r1, #63	; 0x3f
 800525a:	4630      	mov	r0, r6
 800525c:	f008 fce3 	bl	800dc26 <strchr>
  if(vars) {
 8005260:	4607      	mov	r7, r0
 8005262:	b108      	cbz	r0, 8005268 <http_find_file+0x188>
    *vars = '\0';
 8005264:	2300      	movs	r3, #0
 8005266:	7003      	strb	r3, [r0, #0]
  tmp = strchr(uri, '.');
 8005268:	4630      	mov	r0, r6
 800526a:	212e      	movs	r1, #46	; 0x2e
 800526c:	f008 fcdb 	bl	800dc26 <strchr>
  ext = NULL;
 8005270:	2600      	movs	r6, #0
  while (tmp) {
 8005272:	bb08      	cbnz	r0, 80052b8 <http_find_file+0x1d8>
  if (ext != NULL) {
 8005274:	b166      	cbz	r6, 8005290 <http_find_file+0x1b0>
      if(!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 8005276:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8005368 <http_find_file+0x288>
  if (ext != NULL) {
 800527a:	4605      	mov	r5, r0
      if(!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 800527c:	4631      	mov	r1, r6
 800527e:	f858 0035 	ldr.w	r0, [r8, r5, lsl #3]
 8005282:	f000 fbea 	bl	8005a5a <lwip_stricmp>
 8005286:	2800      	cmp	r0, #0
 8005288:	d035      	beq.n	80052f6 <http_find_file+0x216>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800528a:	3501      	adds	r5, #1
 800528c:	2d14      	cmp	r5, #20
 800528e:	d1f5      	bne.n	800527c <http_find_file+0x19c>
  if (vars) {
 8005290:	b9c7      	cbnz	r7, 80052c4 <http_find_file+0x1e4>
  } else if (!ext) {
 8005292:	bb76      	cbnz	r6, 80052f2 <http_find_file+0x212>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 8005294:	4b2e      	ldr	r3, [pc, #184]	; (8005350 <http_find_file+0x270>)
 8005296:	e01e      	b.n	80052d6 <http_find_file+0x1f6>
  } else if (strstr(uri, "400")) {
 8005298:	492e      	ldr	r1, [pc, #184]	; (8005354 <http_find_file+0x274>)
 800529a:	4630      	mov	r0, r6
 800529c:	f008 fd00 	bl	800dca0 <strstr>
 80052a0:	b108      	cbz	r0, 80052a6 <http_find_file+0x1c6>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 80052a2:	4b2d      	ldr	r3, [pc, #180]	; (8005358 <http_find_file+0x278>)
 80052a4:	e7d7      	b.n	8005256 <http_find_file+0x176>
  } else if (strstr(uri, "501")) {
 80052a6:	492d      	ldr	r1, [pc, #180]	; (800535c <http_find_file+0x27c>)
 80052a8:	4630      	mov	r0, r6
 80052aa:	f008 fcf9 	bl	800dca0 <strstr>
 80052ae:	b108      	cbz	r0, 80052b4 <http_find_file+0x1d4>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 80052b0:	4b2b      	ldr	r3, [pc, #172]	; (8005360 <http_find_file+0x280>)
 80052b2:	e7d0      	b.n	8005256 <http_find_file+0x176>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 80052b4:	4b2b      	ldr	r3, [pc, #172]	; (8005364 <http_find_file+0x284>)
 80052b6:	e7ce      	b.n	8005256 <http_find_file+0x176>
    ext = tmp + 1;
 80052b8:	1c46      	adds	r6, r0, #1
    tmp = strchr(ext, '.');
 80052ba:	212e      	movs	r1, #46	; 0x2e
 80052bc:	4630      	mov	r0, r6
 80052be:	f008 fcb2 	bl	800dc26 <strchr>
 80052c2:	e7d6      	b.n	8005272 <http_find_file+0x192>
  if (vars) {
 80052c4:	2514      	movs	r5, #20
    *vars = '?';
 80052c6:	233f      	movs	r3, #63	; 0x3f
  if(content_type < NUM_HTTP_HEADERS) {
 80052c8:	2d14      	cmp	r5, #20
    *vars = '?';
 80052ca:	703b      	strb	r3, [r7, #0]
  if(content_type < NUM_HTTP_HEADERS) {
 80052cc:	d0e1      	beq.n	8005292 <http_find_file+0x1b2>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 80052ce:	4826      	ldr	r0, [pc, #152]	; (8005368 <http_find_file+0x288>)
 80052d0:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80052d4:	686b      	ldr	r3, [r5, #4]
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 80052d6:	63e3      	str	r3, [r4, #60]	; 0x3c
  if ((hs->handle == NULL) ||
 80052d8:	6963      	ldr	r3, [r4, #20]
 80052da:	b123      	cbz	r3, 80052e6 <http_find_file+0x206>
 80052dc:	7c1a      	ldrb	r2, [r3, #16]
 80052de:	f002 0203 	and.w	r2, r2, #3
 80052e2:	2a01      	cmp	r2, #1
 80052e4:	d10a      	bne.n	80052fc <http_find_file+0x21c>
  hs->hdr_index = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  hs->hdr_pos = 0;
 80052ec:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80052f0:	e799      	b.n	8005226 <http_find_file+0x146>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 80052f2:	4b1e      	ldr	r3, [pc, #120]	; (800536c <http_find_file+0x28c>)
 80052f4:	e7ef      	b.n	80052d6 <http_find_file+0x1f6>
  if (vars) {
 80052f6:	2f00      	cmp	r7, #0
 80052f8:	d1e5      	bne.n	80052c6 <http_find_file+0x1e6>
 80052fa:	e7e8      	b.n	80052ce <http_find_file+0x1ee>
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 80052fc:	f104 0540 	add.w	r5, r4, #64	; 0x40
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	210c      	movs	r1, #12
 8005304:	4628      	mov	r0, r5
 8005306:	f000 fbbf 	bl	8005a88 <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 800530a:	4628      	mov	r0, r5
 800530c:	f7fa ff6a 	bl	80001e4 <strlen>
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 8005310:	2809      	cmp	r0, #9
 8005312:	d8e8      	bhi.n	80052e6 <http_find_file+0x206>
      SMEMCPY(&hs->hdr_content_len[len], CRLF "\0", 3);
 8005314:	3040      	adds	r0, #64	; 0x40
 8005316:	4b16      	ldr	r3, [pc, #88]	; (8005370 <http_find_file+0x290>)
 8005318:	1822      	adds	r2, r4, r0
 800531a:	8819      	ldrh	r1, [r3, #0]
 800531c:	789b      	ldrb	r3, [r3, #2]
 800531e:	5221      	strh	r1, [r4, r0]
 8005320:	7093      	strb	r3, [r2, #2]
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 8005322:	4b14      	ldr	r3, [pc, #80]	; (8005374 <http_find_file+0x294>)
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 8005324:	63a5      	str	r5, [r4, #56]	; 0x38
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 8005326:	6363      	str	r3, [r4, #52]	; 0x34
 8005328:	e7dd      	b.n	80052e6 <http_find_file+0x206>
 800532a:	bf00      	nop
 800532c:	200007b0 	.word	0x200007b0
 8005330:	0800f1c9 	.word	0x0800f1c9
 8005334:	0800eff7 	.word	0x0800eff7
 8005338:	0800f20f 	.word	0x0800f20f
 800533c:	0800f328 	.word	0x0800f328
 8005340:	0800f015 	.word	0x0800f015
 8005344:	0800f055 	.word	0x0800f055
 8005348:	0800f073 	.word	0x0800f073
 800534c:	0800f0c3 	.word	0x0800f0c3
 8005350:	0800f11b 	.word	0x0800f11b
 8005354:	0800f0c7 	.word	0x0800f0c7
 8005358:	0800f0cb 	.word	0x0800f0cb
 800535c:	0800f0e6 	.word	0x0800f0e6
 8005360:	0800f0ea 	.word	0x0800f0ea
 8005364:	0800f109 	.word	0x0800f109
 8005368:	0800ef20 	.word	0x0800ef20
 800536c:	0800f146 	.word	0x0800f146
 8005370:	0800eddc 	.word	0x0800eddc
 8005374:	0800f163 	.word	0x0800f163
 8005378:	0800eef8 	.word	0x0800eef8

0800537c <http_post_rxpbuf>:
{
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	4604      	mov	r4, r0
  if (p != NULL) {
 8005380:	b131      	cbz	r1, 8005390 <http_post_rxpbuf+0x14>
    if (hs->post_content_len_left < p->tot_len) {
 8005382:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005384:	890a      	ldrh	r2, [r1, #8]
 8005386:	4293      	cmp	r3, r2
      hs->post_content_len_left = 0;
 8005388:	bf34      	ite	cc
 800538a:	2300      	movcc	r3, #0
      hs->post_content_len_left -= p->tot_len;
 800538c:	1a9b      	subcs	r3, r3, r2
 800538e:	6503      	str	r3, [r0, #80]	; 0x50
  err = httpd_post_receive_data(hs, p);
 8005390:	4620      	mov	r0, r4
 8005392:	f007 fad0 	bl	800c936 <httpd_post_receive_data>
  if (err != ERR_OK) {
 8005396:	b108      	cbz	r0, 800539c <http_post_rxpbuf+0x20>
    hs->post_content_len_left = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	6523      	str	r3, [r4, #80]	; 0x50
  if (hs->post_content_len_left == 0) {
 800539c:	6d26      	ldr	r6, [r4, #80]	; 0x50
 800539e:	b96e      	cbnz	r6, 80053bc <http_post_rxpbuf+0x40>
  http_uri_buf[0] = 0;
 80053a0:	4d07      	ldr	r5, [pc, #28]	; (80053c0 <http_post_rxpbuf+0x44>)
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80053a2:	4620      	mov	r0, r4
 80053a4:	4629      	mov	r1, r5
 80053a6:	223f      	movs	r2, #63	; 0x3f
  http_uri_buf[0] = 0;
 80053a8:	702e      	strb	r6, [r5, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80053aa:	f007 fac6 	bl	800c93a <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 80053ae:	4632      	mov	r2, r6
 80053b0:	4629      	mov	r1, r5
 80053b2:	4620      	mov	r0, r4
}
 80053b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return http_find_file(hs, http_uri_buf, 0);
 80053b8:	f7ff be92 	b.w	80050e0 <http_find_file>
}
 80053bc:	2000      	movs	r0, #0
 80053be:	bd70      	pop	{r4, r5, r6, pc}
 80053c0:	200007b0 	.word	0x200007b0

080053c4 <http_close_conn>:
{
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4604      	mov	r4, r0
  if (hs != NULL) {
 80053c8:	460d      	mov	r5, r1
 80053ca:	b141      	cbz	r1, 80053de <http_close_conn+0x1a>
    if ((hs->post_content_len_left != 0)
 80053cc:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80053ce:	b133      	cbz	r3, 80053de <http_close_conn+0x1a>
      http_uri_buf[0] = 0;
 80053d0:	4917      	ldr	r1, [pc, #92]	; (8005430 <http_close_conn+0x6c>)
 80053d2:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80053d4:	223f      	movs	r2, #63	; 0x3f
 80053d6:	4628      	mov	r0, r5
      http_uri_buf[0] = 0;
 80053d8:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80053da:	f007 faae 	bl	800c93a <httpd_post_finished>
  tcp_arg(pcb, NULL);
 80053de:	2100      	movs	r1, #0
 80053e0:	4620      	mov	r0, r4
 80053e2:	f002 fd47 	bl	8007e74 <tcp_arg>
  tcp_recv(pcb, NULL);
 80053e6:	2100      	movs	r1, #0
 80053e8:	4620      	mov	r0, r4
 80053ea:	f002 fd47 	bl	8007e7c <tcp_recv>
  tcp_err(pcb, NULL);
 80053ee:	2100      	movs	r1, #0
 80053f0:	4620      	mov	r0, r4
 80053f2:	f002 fd71 	bl	8007ed8 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 80053f6:	2200      	movs	r2, #0
 80053f8:	4611      	mov	r1, r2
 80053fa:	4620      	mov	r0, r4
 80053fc:	f002 fd8a 	bl	8007f14 <tcp_poll>
  tcp_sent(pcb, NULL);
 8005400:	2100      	movs	r1, #0
 8005402:	4620      	mov	r0, r4
 8005404:	f002 fd52 	bl	8007eac <tcp_sent>
  if (hs != NULL) {
 8005408:	b12d      	cbz	r5, 8005416 <http_close_conn+0x52>
    http_state_eof(hs);
 800540a:	4628      	mov	r0, r5
 800540c:	f7ff fdfe 	bl	800500c <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8005410:	4628      	mov	r0, r5
 8005412:	f001 fd3d 	bl	8006e90 <mem_free>
  err = tcp_close(pcb);
 8005416:	4620      	mov	r0, r4
 8005418:	f003 f88c 	bl	8008534 <tcp_close>
  if (err != ERR_OK) {
 800541c:	4605      	mov	r5, r0
 800541e:	b120      	cbz	r0, 800542a <http_close_conn+0x66>
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005420:	2204      	movs	r2, #4
 8005422:	4904      	ldr	r1, [pc, #16]	; (8005434 <http_close_conn+0x70>)
 8005424:	4620      	mov	r0, r4
 8005426:	f002 fd75 	bl	8007f14 <tcp_poll>
}
 800542a:	4628      	mov	r0, r5
 800542c:	bd38      	pop	{r3, r4, r5, pc}
 800542e:	bf00      	nop
 8005430:	200007b0 	.word	0x200007b0
 8005434:	080055f5 	.word	0x080055f5

08005438 <http_check_eof>:
{
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	4605      	mov	r5, r0
  if (hs->handle == NULL) {
 800543c:	6948      	ldr	r0, [r1, #20]
{
 800543e:	460c      	mov	r4, r1
  if (hs->handle == NULL) {
 8005440:	b928      	cbnz	r0, 800544e <http_check_eof+0x16>
    http_close_conn(pcb, hs);
 8005442:	4621      	mov	r1, r4
 8005444:	4628      	mov	r0, r5
 8005446:	f7ff ffbd 	bl	80053c4 <http_close_conn>
    return 0;
 800544a:	2000      	movs	r0, #0
 800544c:	bd38      	pop	{r3, r4, r5, pc}
  bytes_left = fs_bytes_left(hs->handle);
 800544e:	f7ff fd9a 	bl	8004f86 <fs_bytes_left>
  if (bytes_left <= 0) {
 8005452:	2800      	cmp	r0, #0
 8005454:	ddf5      	ble.n	8005442 <http_check_eof+0xa>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8005456:	4b04      	ldr	r3, [pc, #16]	; (8005468 <http_check_eof+0x30>)
 8005458:	4904      	ldr	r1, [pc, #16]	; (800546c <http_check_eof+0x34>)
 800545a:	4805      	ldr	r0, [pc, #20]	; (8005470 <http_check_eof+0x38>)
 800545c:	f240 4283 	movw	r2, #1155	; 0x483
 8005460:	f008 fb86 	bl	800db70 <iprintf>
  return 1;
 8005464:	2001      	movs	r0, #1
}
 8005466:	bd38      	pop	{r3, r4, r5, pc}
 8005468:	0800f1c9 	.word	0x0800f1c9
 800546c:	0800efc0 	.word	0x0800efc0
 8005470:	0800f20f 	.word	0x0800f20f

08005474 <http_send>:
{
 8005474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005478:	4605      	mov	r5, r0
  if (hs == NULL) {
 800547a:	460c      	mov	r4, r1
 800547c:	b921      	cbnz	r1, 8005488 <http_send+0x14>
    return 0;
 800547e:	2600      	movs	r6, #0
}
 8005480:	4630      	mov	r0, r6
 8005482:	b003      	add	sp, #12
 8005484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 8005488:	f8b1 304e 	ldrh.w	r3, [r1, #78]	; 0x4e
 800548c:	2b04      	cmp	r3, #4
 800548e:	d81d      	bhi.n	80054cc <http_send+0x58>
  sendlen = len;
 8005490:	af02      	add	r7, sp, #8
  len = tcp_sndbuf(pcb);
 8005492:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  sendlen = len;
 8005496:	f827 6d02 	strh.w	r6, [r7, #-2]!
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 800549a:	f04f 0800 	mov.w	r8, #0
 800549e:	f8b4 a04e 	ldrh.w	sl, [r4, #78]	; 0x4e
  while(len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 80054a2:	b12e      	cbz	r6, 80054b0 <http_send+0x3c>
 80054a4:	f1ba 0f04 	cmp.w	sl, #4
 80054a8:	d802      	bhi.n	80054b0 <http_send+0x3c>
 80054aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80054ae:	b9fb      	cbnz	r3, 80054f0 <http_send+0x7c>
  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 80054b0:	f1ba 0f04 	cmp.w	sl, #4
 80054b4:	d905      	bls.n	80054c2 <http_send+0x4e>
 80054b6:	69a3      	ldr	r3, [r4, #24]
 80054b8:	b91b      	cbnz	r3, 80054c2 <http_send+0x4e>
    if(http_check_eof(pcb, hs)) {
 80054ba:	4621      	mov	r1, r4
 80054bc:	4628      	mov	r0, r5
 80054be:	f7ff ffbb 	bl	8005438 <http_check_eof>
  if((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 80054c2:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	f240 8086 	bls.w	80055d8 <http_send+0x164>
  if (hs->left == 0) {
 80054cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d051      	beq.n	8005576 <http_send+0x102>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80054d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80054d4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80054d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054dc:	428a      	cmp	r2, r1
 80054de:	bf98      	it	ls
 80054e0:	4613      	movls	r3, r2
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80054e2:	69a1      	ldr	r1, [r4, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80054e4:	f8ad 3006 	strh.w	r3, [sp, #6]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80054e8:	2900      	cmp	r1, #0
 80054ea:	d14b      	bne.n	8005584 <http_send+0x110>
 80054ec:	2301      	movs	r3, #1
 80054ee:	e053      	b.n	8005598 <http_send+0x124>
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 80054f0:	eb04 038a 	add.w	r3, r4, sl, lsl #2
 80054f4:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
 80054f8:	4658      	mov	r0, fp
 80054fa:	f7fa fe73 	bl	80001e4 <strlen>
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 80054fe:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 8005502:	fa1f f980 	uxth.w	r9, r0
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8005506:	4648      	mov	r0, r9
 8005508:	1a40      	subs	r0, r0, r1
 800550a:	42b0      	cmp	r0, r6
 800550c:	bfa8      	it	ge
 800550e:	4630      	movge	r0, r6
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 8005510:	f1ba 0f03 	cmp.w	sl, #3
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8005514:	f8ad 0006 	strh.w	r0, [sp, #6]
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 8005518:	4459      	add	r1, fp
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800551a:	d02a      	beq.n	8005572 <http_send+0xfe>
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 800551c:	f1ba 0f04 	cmp.w	sl, #4
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 8005520:	f04f 0300 	mov.w	r3, #0
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 8005524:	d001      	beq.n	800552a <http_send+0xb6>
      apiflags |= TCP_WRITE_FLAG_MORE;
 8005526:	f043 0302 	orr.w	r3, r3, #2
    err = http_write(pcb, ptr, &sendlen, apiflags);
 800552a:	463a      	mov	r2, r7
 800552c:	4628      	mov	r0, r5
 800552e:	f7ff fd2f 	bl	8004f90 <http_write>
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 8005532:	b108      	cbz	r0, 8005538 <http_send+0xc4>
      sendlen = 0;
 8005534:	f8ad 8006 	strh.w	r8, [sp, #6]
    hs->hdr_pos += sendlen;
 8005538:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800553c:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 8005540:	4413      	add	r3, r2
 8005542:	b29b      	uxth	r3, r3
    len -= sendlen;
 8005544:	1ab6      	subs	r6, r6, r2
    if(hs->hdr_pos == hdrlen) {
 8005546:	4599      	cmp	r9, r3
    hs->hdr_pos += sendlen;
 8005548:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    len -= sendlen;
 800554c:	b2b6      	uxth	r6, r6
    if(hs->hdr_pos == hdrlen) {
 800554e:	d1a6      	bne.n	800549e <http_send+0x2a>
      hs->hdr_index++;
 8005550:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
        hs->hdr_index++;
 8005554:	3301      	adds	r3, #1
 8005556:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800555a:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 800555e:	2b04      	cmp	r3, #4
 8005560:	d804      	bhi.n	800556c <http_send+0xf8>
         (hs->hdrs[hs->hdr_index] == NULL)) {
 8005562:	eb04 0283 	add.w	r2, r4, r3, lsl #2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 8005566:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005568:	2a00      	cmp	r2, #0
 800556a:	d0f3      	beq.n	8005554 <http_send+0xe0>
      hs->hdr_pos = 0;
 800556c:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
 8005570:	e795      	b.n	800549e <http_send+0x2a>
      apiflags |= TCP_WRITE_FLAG_COPY;
 8005572:	2301      	movs	r3, #1
 8005574:	e7d7      	b.n	8005526 <http_send+0xb2>
    if (!http_check_eof(pcb, hs)) {
 8005576:	4621      	mov	r1, r4
 8005578:	4628      	mov	r0, r5
 800557a:	f7ff ff5d 	bl	8005438 <http_check_eof>
 800557e:	2800      	cmp	r0, #0
 8005580:	d1a7      	bne.n	80054d2 <http_send+0x5e>
 8005582:	e77c      	b.n	800547e <http_send+0xa>
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005584:	6960      	ldr	r0, [r4, #20]
 8005586:	2800      	cmp	r0, #0
 8005588:	d0b0      	beq.n	80054ec <http_send+0x78>
 800558a:	6843      	ldr	r3, [r0, #4]
 800558c:	1a9a      	subs	r2, r3, r2
 800558e:	6803      	ldr	r3, [r0, #0]
 8005590:	4413      	add	r3, r2
 8005592:	1acb      	subs	r3, r1, r3
 8005594:	bf18      	it	ne
 8005596:	2301      	movne	r3, #1
 8005598:	f10d 0206 	add.w	r2, sp, #6
 800559c:	4628      	mov	r0, r5
 800559e:	f7ff fcf7 	bl	8004f90 <http_write>
  if (err == ERR_OK) {
 80055a2:	b9b8      	cbnz	r0, 80055d4 <http_send+0x160>
    hs->file += len;
 80055a4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80055a8:	69a2      	ldr	r2, [r4, #24]
    hs->left -= len;
 80055aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hs->file += len;
 80055ac:	440a      	add	r2, r1
    hs->left -= len;
 80055ae:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 80055b0:	61a2      	str	r2, [r4, #24]
    hs->left -= len;
 80055b2:	6263      	str	r3, [r4, #36]	; 0x24
    data_to_send = 1;
 80055b4:	2601      	movs	r6, #1
  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80055b6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80055b8:	2f00      	cmp	r7, #0
 80055ba:	f47f af61 	bne.w	8005480 <http_send+0xc>
 80055be:	6960      	ldr	r0, [r4, #20]
 80055c0:	f7ff fce1 	bl	8004f86 <fs_bytes_left>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	f73f af5b 	bgt.w	8005480 <http_send+0xc>
    http_close_conn(pcb, hs);
 80055ca:	4621      	mov	r1, r4
 80055cc:	4628      	mov	r0, r5
 80055ce:	f7ff fef9 	bl	80053c4 <http_close_conn>
 80055d2:	e754      	b.n	800547e <http_send+0xa>
  u8_t data_to_send = 0;
 80055d4:	2600      	movs	r6, #0
 80055d6:	e7ee      	b.n	80055b6 <http_send+0x142>
 80055d8:	2602      	movs	r6, #2
 80055da:	e751      	b.n	8005480 <http_send+0xc>

080055dc <http_sent>:
{
 80055dc:	b508      	push	{r3, lr}
 80055de:	460b      	mov	r3, r1
  if (hs == NULL) {
 80055e0:	4601      	mov	r1, r0
 80055e2:	b128      	cbz	r0, 80055f0 <http_sent+0x14>
  hs->retries = 0;
 80055e4:	2200      	movs	r2, #0
 80055e6:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  http_send(pcb, hs);
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff ff42 	bl	8005474 <http_send>
}
 80055f0:	2000      	movs	r0, #0
 80055f2:	bd08      	pop	{r3, pc}

080055f4 <http_poll>:
{
 80055f4:	b510      	push	{r4, lr}
 80055f6:	460c      	mov	r4, r1
  if (hs == NULL) {
 80055f8:	4601      	mov	r1, r0
 80055fa:	b920      	cbnz	r0, 8005606 <http_poll+0x12>
      http_close_conn(pcb, hs);
 80055fc:	4620      	mov	r0, r4
 80055fe:	f7ff fee1 	bl	80053c4 <http_close_conn>
}
 8005602:	2000      	movs	r0, #0
 8005604:	bd10      	pop	{r4, pc}
    hs->retries++;
 8005606:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800560a:	3301      	adds	r3, #1
 800560c:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800560e:	2b04      	cmp	r3, #4
    hs->retries++;
 8005610:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8005614:	d0f2      	beq.n	80055fc <http_poll+0x8>
    if(hs && (hs->handle)) {
 8005616:	6943      	ldr	r3, [r0, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f2      	beq.n	8005602 <http_poll+0xe>
      if(http_send(pcb, hs)) {
 800561c:	4620      	mov	r0, r4
 800561e:	f7ff ff29 	bl	8005474 <http_send>
 8005622:	2800      	cmp	r0, #0
 8005624:	d0ed      	beq.n	8005602 <http_poll+0xe>
        tcp_output(pcb);
 8005626:	4620      	mov	r0, r4
 8005628:	f005 f89e 	bl	800a768 <tcp_output>
 800562c:	e7e9      	b.n	8005602 <http_poll+0xe>
	...

08005630 <http_recv>:
{
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	b08d      	sub	sp, #52	; 0x34
 8005636:	4604      	mov	r4, r0
 8005638:	9108      	str	r1, [sp, #32]
 800563a:	4617      	mov	r7, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800563c:	461d      	mov	r5, r3
 800563e:	b94b      	cbnz	r3, 8005654 <http_recv+0x24>
 8005640:	b152      	cbz	r2, 8005658 <http_recv+0x28>
 8005642:	b988      	cbnz	r0, 8005668 <http_recv+0x38>
      tcp_recved(pcb, p->tot_len);
 8005644:	9808      	ldr	r0, [sp, #32]
 8005646:	8939      	ldrh	r1, [r7, #8]
 8005648:	f002 fba8 	bl	8007d9c <tcp_recved>
      pbuf_free(p);
 800564c:	4638      	mov	r0, r7
 800564e:	f001 ffa1 	bl	8007594 <pbuf_free>
 8005652:	e001      	b.n	8005658 <http_recv+0x28>
    if (p != NULL) {
 8005654:	2a00      	cmp	r2, #0
 8005656:	d1f5      	bne.n	8005644 <http_recv+0x14>
    http_close_conn(pcb, hs);
 8005658:	4621      	mov	r1, r4
 800565a:	9808      	ldr	r0, [sp, #32]
 800565c:	f7ff feb2 	bl	80053c4 <http_close_conn>
}
 8005660:	2000      	movs	r0, #0
 8005662:	b00d      	add	sp, #52	; 0x34
 8005664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tcp_recved(pcb, p->tot_len);
 8005668:	8911      	ldrh	r1, [r2, #8]
 800566a:	9808      	ldr	r0, [sp, #32]
 800566c:	f002 fb96 	bl	8007d9c <tcp_recved>
  if (hs->post_content_len_left > 0) {
 8005670:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005672:	b16b      	cbz	r3, 8005690 <http_recv+0x60>
    hs->retries = 0;
 8005674:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 8005678:	4639      	mov	r1, r7
 800567a:	4620      	mov	r0, r4
 800567c:	f7ff fe7e 	bl	800537c <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 8005680:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1ec      	bne.n	8005660 <http_recv+0x30>
      http_send(pcb, hs);
 8005686:	4621      	mov	r1, r4
 8005688:	9808      	ldr	r0, [sp, #32]
 800568a:	f7ff fef3 	bl	8005474 <http_send>
 800568e:	e7e7      	b.n	8005660 <http_recv+0x30>
    if (hs->handle == NULL) {
 8005690:	6963      	ldr	r3, [r4, #20]
 8005692:	2b00      	cmp	r3, #0
 8005694:	f040 8147 	bne.w	8005926 <http_recv+0x2f6>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8005698:	69a3      	ldr	r3, [r4, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	f040 8154 	bne.w	8005948 <http_recv+0x318>
  if (hs->req == NULL) {
 80056a0:	6a20      	ldr	r0, [r4, #32]
 80056a2:	2800      	cmp	r0, #0
 80056a4:	f040 8098 	bne.w	80057d8 <http_recv+0x1a8>
    hs->req = p;
 80056a8:	6227      	str	r7, [r4, #32]
  pbuf_ref(p);
 80056aa:	4638      	mov	r0, r7
 80056ac:	f002 f92c 	bl	8007908 <pbuf_ref>
  if (hs->req->next != NULL) {
 80056b0:	6a20      	ldr	r0, [r4, #32]
 80056b2:	6803      	ldr	r3, [r0, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 8093 	beq.w	80057e0 <http_recv+0x1b0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80056ba:	8906      	ldrh	r6, [r0, #8]
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80056bc:	49a4      	ldr	r1, [pc, #656]	; (8005950 <http_recv+0x320>)
    data = httpd_req_buf;
 80056be:	4da4      	ldr	r5, [pc, #656]	; (8005950 <http_recv+0x320>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80056c0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80056c4:	429e      	cmp	r6, r3
 80056c6:	bf28      	it	cs
 80056c8:	461e      	movcs	r6, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80056ca:	4632      	mov	r2, r6
 80056cc:	2300      	movs	r3, #0
 80056ce:	f002 f9f3 	bl	8007ab8 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 80056d2:	2e06      	cmp	r6, #6
 80056d4:	f240 810f 	bls.w	80058f6 <http_recv+0x2c6>
    crlf = lwip_strnstr(data, CRLF, data_len);
 80056d8:	4632      	mov	r2, r6
 80056da:	499e      	ldr	r1, [pc, #632]	; (8005954 <http_recv+0x324>)
 80056dc:	4628      	mov	r0, r5
 80056de:	f000 f99e 	bl	8005a1e <lwip_strnstr>
    if (crlf != NULL) {
 80056e2:	2800      	cmp	r0, #0
 80056e4:	f000 8107 	beq.w	80058f6 <http_recv+0x2c6>
      if (!strncmp(data, "GET ", 4)) {
 80056e8:	2204      	movs	r2, #4
 80056ea:	499b      	ldr	r1, [pc, #620]	; (8005958 <http_recv+0x328>)
 80056ec:	4628      	mov	r0, r5
 80056ee:	f008 fab0 	bl	800dc52 <strncmp>
 80056f2:	4681      	mov	r9, r0
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d176      	bne.n	80057e6 <http_recv+0x1b6>
        sp1 = data + 3;
 80056f8:	1ceb      	adds	r3, r5, #3
 80056fa:	9306      	str	r3, [sp, #24]
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 80056fc:	9b06      	ldr	r3, [sp, #24]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80056fe:	4997      	ldr	r1, [pc, #604]	; (800595c <http_recv+0x32c>)
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8005700:	f103 0801 	add.w	r8, r3, #1
 8005704:	eba8 0a05 	sub.w	sl, r8, r5
 8005708:	eba6 0a0a 	sub.w	sl, r6, sl
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800570c:	fa1f fa8a 	uxth.w	sl, sl
 8005710:	4652      	mov	r2, sl
 8005712:	4640      	mov	r0, r8
 8005714:	f000 f983 	bl	8005a1e <lwip_strnstr>
      if (sp2 == NULL) {
 8005718:	4683      	mov	fp, r0
 800571a:	2800      	cmp	r0, #0
 800571c:	d173      	bne.n	8005806 <http_recv+0x1d6>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800571e:	4652      	mov	r2, sl
 8005720:	498c      	ldr	r1, [pc, #560]	; (8005954 <http_recv+0x324>)
 8005722:	4640      	mov	r0, r8
 8005724:	f000 f97b 	bl	8005a1e <lwip_strnstr>
 8005728:	4683      	mov	fp, r0
        if (is_post) {
 800572a:	f1b9 0f00 	cmp.w	r9, #0
 800572e:	d167      	bne.n	8005800 <http_recv+0x1d0>
      if ((sp2 != 0) && (sp2 > sp1)) {
 8005730:	2800      	cmp	r0, #0
 8005732:	f000 80e0 	beq.w	80058f6 <http_recv+0x2c6>
        is_09 = 1;
 8005736:	f04f 0a01 	mov.w	sl, #1
      if ((sp2 != 0) && (sp2 > sp1)) {
 800573a:	9b06      	ldr	r3, [sp, #24]
 800573c:	455b      	cmp	r3, fp
 800573e:	f080 80da 	bcs.w	80058f6 <http_recv+0x2c6>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8005742:	4632      	mov	r2, r6
 8005744:	4986      	ldr	r1, [pc, #536]	; (8005960 <http_recv+0x330>)
 8005746:	4628      	mov	r0, r5
 8005748:	f000 f969 	bl	8005a1e <lwip_strnstr>
 800574c:	2800      	cmp	r0, #0
 800574e:	f000 80d2 	beq.w	80058f6 <http_recv+0x2c6>
          *sp1 = 0;
 8005752:	9a06      	ldr	r2, [sp, #24]
 8005754:	2300      	movs	r3, #0
 8005756:	7013      	strb	r3, [r2, #0]
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8005758:	ebab 0208 	sub.w	r2, fp, r8
          uri[uri_len] = 0;
 800575c:	b292      	uxth	r2, r2
 800575e:	9209      	str	r2, [sp, #36]	; 0x24
 8005760:	f808 3002 	strb.w	r3, [r8, r2]
          if (is_post) {
 8005764:	f1b9 0f00 	cmp.w	r9, #0
 8005768:	f000 80bc 	beq.w	80058e4 <http_recv+0x2b4>
            struct pbuf *q = hs->req;
 800576c:	6a23      	ldr	r3, [r4, #32]
 800576e:	9304      	str	r3, [sp, #16]
  char* crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8005770:	f10b 0301 	add.w	r3, fp, #1
 8005774:	1b5a      	subs	r2, r3, r5
 8005776:	1ab2      	subs	r2, r6, r2
 8005778:	4979      	ldr	r1, [pc, #484]	; (8005960 <http_recv+0x330>)
 800577a:	9305      	str	r3, [sp, #20]
 800577c:	4618      	mov	r0, r3
 800577e:	f000 f94e 	bl	8005a1e <lwip_strnstr>
  if (crlfcrlf != NULL) {
 8005782:	9007      	str	r0, [sp, #28]
 8005784:	2800      	cmp	r0, #0
 8005786:	f000 80aa 	beq.w	80058de <http_recv+0x2ae>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800578a:	9a05      	ldr	r2, [sp, #20]
 800578c:	4975      	ldr	r1, [pc, #468]	; (8005964 <http_recv+0x334>)
 800578e:	1a82      	subs	r2, r0, r2
 8005790:	9805      	ldr	r0, [sp, #20]
 8005792:	f000 f944 	bl	8005a1e <lwip_strnstr>
    if (scontent_len != NULL) {
 8005796:	4682      	mov	sl, r0
 8005798:	2800      	cmp	r0, #0
 800579a:	d137      	bne.n	800580c <http_recv+0x1dc>
    return ERR_ARG;
 800579c:	f06f 050f 	mvn.w	r5, #15
              *sp1 = ' ';
 80057a0:	9a06      	ldr	r2, [sp, #24]
 80057a2:	2320      	movs	r3, #32
 80057a4:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 80057a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
              *sp2 = ' ';
 80057a8:	f88b 3000 	strb.w	r3, [fp]
            if (err == ERR_ARG) {
 80057ac:	f115 0f10 	cmn.w	r5, #16
              uri[uri_len] = ' ';
 80057b0:	f808 3002 	strb.w	r3, [r8, r2]
            if (err == ERR_ARG) {
 80057b4:	d024      	beq.n	8005800 <http_recv+0x1d0>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80057b6:	1d6b      	adds	r3, r5, #5
 80057b8:	f000 80a9 	beq.w	800590e <http_recv+0x2de>
 80057bc:	f025 0308 	bic.w	r3, r5, #8
 80057c0:	b25b      	sxtb	r3, r3
 80057c2:	3310      	adds	r3, #16
 80057c4:	f000 8084 	beq.w	80058d0 <http_recv+0x2a0>
 80057c8:	4b67      	ldr	r3, [pc, #412]	; (8005968 <http_recv+0x338>)
 80057ca:	4968      	ldr	r1, [pc, #416]	; (800596c <http_recv+0x33c>)
 80057cc:	4868      	ldr	r0, [pc, #416]	; (8005970 <http_recv+0x340>)
 80057ce:	f640 12b5 	movw	r2, #2485	; 0x9b5
 80057d2:	f008 f9cd 	bl	800db70 <iprintf>
 80057d6:	e07b      	b.n	80058d0 <http_recv+0x2a0>
    pbuf_cat(hs->req, p);
 80057d8:	4639      	mov	r1, r7
 80057da:	f002 f8a9 	bl	8007930 <pbuf_cat>
 80057de:	e764      	b.n	80056aa <http_recv+0x7a>
    data = (char *)p->payload;
 80057e0:	687d      	ldr	r5, [r7, #4]
    data_len = p->len;
 80057e2:	897e      	ldrh	r6, [r7, #10]
 80057e4:	e775      	b.n	80056d2 <http_recv+0xa2>
      } else if (!strncmp(data, "POST ", 5)) {
 80057e6:	2205      	movs	r2, #5
 80057e8:	4962      	ldr	r1, [pc, #392]	; (8005974 <http_recv+0x344>)
 80057ea:	4628      	mov	r0, r5
 80057ec:	f008 fa31 	bl	800dc52 <strncmp>
 80057f0:	b920      	cbnz	r0, 80057fc <http_recv+0x1cc>
        sp1 = data + 4;
 80057f2:	1d2b      	adds	r3, r5, #4
 80057f4:	9306      	str	r3, [sp, #24]
        is_post = 1;
 80057f6:	f04f 0901 	mov.w	r9, #1
 80057fa:	e77f      	b.n	80056fc <http_recv+0xcc>
        data[4] = 0;
 80057fc:	2300      	movs	r3, #0
 80057fe:	712b      	strb	r3, [r5, #4]
    return ERR_USE;
 8005800:	f06f 050f 	mvn.w	r5, #15
 8005804:	e064      	b.n	80058d0 <http_recv+0x2a0>
      int is_09 = 0;
 8005806:	f04f 0a00 	mov.w	sl, #0
 800580a:	e796      	b.n	800573a <http_recv+0x10a>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800580c:	f100 0910 	add.w	r9, r0, #16
 8005810:	220a      	movs	r2, #10
 8005812:	4950      	ldr	r1, [pc, #320]	; (8005954 <http_recv+0x324>)
 8005814:	4648      	mov	r0, r9
 8005816:	f000 f902 	bl	8005a1e <lwip_strnstr>
      if (scontent_len_end != NULL) {
 800581a:	2800      	cmp	r0, #0
 800581c:	d0be      	beq.n	800579c <http_recv+0x16c>
        content_len = atoi(content_len_num);
 800581e:	4648      	mov	r0, r9
 8005820:	f008 f89f 	bl	800d962 <atoi>
        if (content_len == 0) {
 8005824:	f1b0 0900 	subs.w	r9, r0, #0
 8005828:	d140      	bne.n	80058ac <http_recv+0x27c>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800582a:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800582e:	2b30      	cmp	r3, #48	; 0x30
 8005830:	d1b4      	bne.n	800579c <http_recv+0x16c>
 8005832:	f89a 3011 	ldrb.w	r3, [sl, #17]
 8005836:	2b0d      	cmp	r3, #13
 8005838:	d1b0      	bne.n	800579c <http_recv+0x16c>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800583a:	9b07      	ldr	r3, [sp, #28]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800583c:	9a05      	ldr	r2, [sp, #20]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800583e:	3304      	adds	r3, #4
 8005840:	1b5d      	subs	r5, r3, r5
 8005842:	42ae      	cmp	r6, r5
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8005844:	eba3 0302 	sub.w	r3, r3, r2
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8005848:	bfac      	ite	ge
 800584a:	b2ad      	uxthge	r5, r5
 800584c:	4635      	movlt	r5, r6
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800584e:	429e      	cmp	r6, r3
 8005850:	bfa8      	it	ge
 8005852:	b29e      	uxthge	r6, r3
          u8_t post_auto_wnd = 1;
 8005854:	ab0c      	add	r3, sp, #48	; 0x30
 8005856:	2201      	movs	r2, #1
 8005858:	f803 2d01 	strb.w	r2, [r3, #-1]!
          http_uri_buf[0] = 0;
 800585c:	4a46      	ldr	r2, [pc, #280]	; (8005978 <http_recv+0x348>)
 800585e:	f04f 0a00 	mov.w	sl, #0
 8005862:	f882 a000 	strb.w	sl, [r2]
          *crlfcrlf = 0;
 8005866:	9a07      	ldr	r2, [sp, #28]
 8005868:	f882 a000 	strb.w	sl, [r2]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800586c:	9303      	str	r3, [sp, #12]
 800586e:	233f      	movs	r3, #63	; 0x3f
 8005870:	9302      	str	r3, [sp, #8]
 8005872:	4b41      	ldr	r3, [pc, #260]	; (8005978 <http_recv+0x348>)
 8005874:	9301      	str	r3, [sp, #4]
 8005876:	f8cd 9000 	str.w	r9, [sp]
 800587a:	4633      	mov	r3, r6
 800587c:	9a05      	ldr	r2, [sp, #20]
 800587e:	4641      	mov	r1, r8
 8005880:	4620      	mov	r0, r4
 8005882:	f007 f856 	bl	800c932 <httpd_post_begin>
          if (err == ERR_OK) {
 8005886:	b9c8      	cbnz	r0, 80058bc <http_recv+0x28c>
            hs->post_content_len_left = (u32_t)content_len;
 8005888:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
            while((q != NULL) && (q->len <= start_offset)) {
 800588c:	9b04      	ldr	r3, [sp, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d04d      	beq.n	800592e <http_recv+0x2fe>
 8005892:	8959      	ldrh	r1, [r3, #10]
 8005894:	428d      	cmp	r5, r1
 8005896:	d20b      	bcs.n	80058b0 <http_recv+0x280>
              pbuf_header(q, -(s16_t)start_offset);
 8005898:	4269      	negs	r1, r5
 800589a:	b209      	sxth	r1, r1
 800589c:	9804      	ldr	r0, [sp, #16]
 800589e:	f001 fe73 	bl	8007588 <pbuf_header>
              pbuf_ref(q);
 80058a2:	9804      	ldr	r0, [sp, #16]
 80058a4:	f002 f830 	bl	8007908 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 80058a8:	9904      	ldr	r1, [sp, #16]
 80058aa:	e049      	b.n	8005940 <http_recv+0x310>
        if (content_len >= 0) {
 80058ac:	dac5      	bge.n	800583a <http_recv+0x20a>
 80058ae:	e775      	b.n	800579c <http_recv+0x16c>
              q = q->next;
 80058b0:	9b04      	ldr	r3, [sp, #16]
              start_offset -= q->len;
 80058b2:	1a6d      	subs	r5, r5, r1
              q = q->next;
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	9304      	str	r3, [sp, #16]
              start_offset -= q->len;
 80058b8:	b2ad      	uxth	r5, r5
 80058ba:	e7e7      	b.n	800588c <http_recv+0x25c>
            return http_find_file(hs, http_uri_buf, 0);
 80058bc:	4652      	mov	r2, sl
 80058be:	492e      	ldr	r1, [pc, #184]	; (8005978 <http_recv+0x348>)
 80058c0:	4620      	mov	r0, r4
 80058c2:	f7ff fc0d 	bl	80050e0 <http_find_file>
 80058c6:	4605      	mov	r5, r0
            if (err != ERR_OK) {
 80058c8:	2800      	cmp	r0, #0
 80058ca:	f47f af69 	bne.w	80057a0 <http_recv+0x170>
  return ERR_INPROGRESS;
 80058ce:	2500      	movs	r5, #0
        if (hs->req != NULL) {
 80058d0:	6a20      	ldr	r0, [r4, #32]
 80058d2:	b1f0      	cbz	r0, 8005912 <http_recv+0x2e2>
          pbuf_free(hs->req);
 80058d4:	f001 fe5e 	bl	8007594 <pbuf_free>
          hs->req = NULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	6223      	str	r3, [r4, #32]
 80058dc:	e019      	b.n	8005912 <http_recv+0x2e2>
  return ERR_INPROGRESS;
 80058de:	f06f 0504 	mvn.w	r5, #4
 80058e2:	e75d      	b.n	80057a0 <http_recv+0x170>
            return http_find_file(hs, uri, is_09);
 80058e4:	4652      	mov	r2, sl
 80058e6:	4641      	mov	r1, r8
 80058e8:	4620      	mov	r0, r4
 80058ea:	f7ff fbf9 	bl	80050e0 <http_find_file>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80058ee:	4605      	mov	r5, r0
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d0ec      	beq.n	80058ce <http_recv+0x29e>
 80058f4:	e75f      	b.n	80057b6 <http_recv+0x186>
  clen = pbuf_clen(hs->req);
 80058f6:	6a20      	ldr	r0, [r4, #32]
 80058f8:	f001 fffe 	bl	80078f8 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80058fc:	6a23      	ldr	r3, [r4, #32]
 80058fe:	891b      	ldrh	r3, [r3, #8]
 8005900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005904:	f4bf af7c 	bcs.w	8005800 <http_recv+0x1d0>
 8005908:	2805      	cmp	r0, #5
 800590a:	f63f af79 	bhi.w	8005800 <http_recv+0x1d0>
  return ERR_INPROGRESS;
 800590e:	f06f 0504 	mvn.w	r5, #4
      pbuf_free(p);
 8005912:	4638      	mov	r0, r7
 8005914:	f001 fe3e 	bl	8007594 <pbuf_free>
      if (parsed == ERR_OK) {
 8005918:	2d00      	cmp	r5, #0
 800591a:	f43f aeb1 	beq.w	8005680 <http_recv+0x50>
      } else if (parsed == ERR_ARG) {
 800591e:	3510      	adds	r5, #16
 8005920:	f47f ae9e 	bne.w	8005660 <http_recv+0x30>
 8005924:	e698      	b.n	8005658 <http_recv+0x28>
      pbuf_free(p);
 8005926:	4638      	mov	r0, r7
 8005928:	f001 fe34 	bl	8007594 <pbuf_free>
 800592c:	e698      	b.n	8005660 <http_recv+0x30>
            } else if (hs->post_content_len_left == 0) {
 800592e:	f1b9 0f00 	cmp.w	r9, #0
 8005932:	d1cc      	bne.n	80058ce <http_recv+0x29e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8005934:	4649      	mov	r1, r9
 8005936:	2202      	movs	r2, #2
 8005938:	2004      	movs	r0, #4
 800593a:	f001 fe8d 	bl	8007658 <pbuf_alloc>
              return http_post_rxpbuf(hs, q);
 800593e:	4601      	mov	r1, r0
              return http_post_rxpbuf(hs, q);
 8005940:	4620      	mov	r0, r4
 8005942:	f7ff fd1b 	bl	800537c <http_post_rxpbuf>
 8005946:	e7be      	b.n	80058c6 <http_recv+0x296>
    return ERR_USE;
 8005948:	f06f 0507 	mvn.w	r5, #7
 800594c:	e7c0      	b.n	80058d0 <http_recv+0x2a0>
 800594e:	bf00      	nop
 8005950:	200007f0 	.word	0x200007f0
 8005954:	0800f32a 	.word	0x0800f32a
 8005958:	0800f192 	.word	0x0800f192
 800595c:	0801280a 	.word	0x0801280a
 8005960:	0800f328 	.word	0x0800f328
 8005964:	0800f163 	.word	0x0800f163
 8005968:	0800f1c9 	.word	0x0800f1c9
 800596c:	0800f19d 	.word	0x0800f19d
 8005970:	0800f20f 	.word	0x0800f20f
 8005974:	0800f197 	.word	0x0800f197
 8005978:	200007b0 	.word	0x200007b0

0800597c <http_err>:
{
 800597c:	b510      	push	{r4, lr}
  if (hs != NULL) {
 800597e:	4604      	mov	r4, r0
 8005980:	b130      	cbz	r0, 8005990 <http_err+0x14>
    http_state_eof(hs);
 8005982:	f7ff fb43 	bl	800500c <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8005986:	4620      	mov	r0, r4
}
 8005988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 800598c:	f001 ba80 	b.w	8006e90 <mem_free>
 8005990:	bd10      	pop	{r4, pc}
	...

08005994 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8005994:	b510      	push	{r4, lr}
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 8005996:	202e      	movs	r0, #46	; 0x2e
 8005998:	f002 ffb4 	bl	8008904 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800599c:	4604      	mov	r4, r0
 800599e:	b930      	cbnz	r0, 80059ae <httpd_init+0x1a>
 80059a0:	4b15      	ldr	r3, [pc, #84]	; (80059f8 <httpd_init+0x64>)
 80059a2:	4916      	ldr	r1, [pc, #88]	; (80059fc <httpd_init+0x68>)
 80059a4:	4816      	ldr	r0, [pc, #88]	; (8005a00 <httpd_init+0x6c>)
 80059a6:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 80059aa:	f008 f8e1 	bl	800db70 <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 80059ae:	2101      	movs	r1, #1
 80059b0:	4620      	mov	r0, r4
 80059b2:	f002 fa47 	bl	8007e44 <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 80059b6:	2250      	movs	r2, #80	; 0x50
 80059b8:	4912      	ldr	r1, [pc, #72]	; (8005a04 <httpd_init+0x70>)
 80059ba:	4620      	mov	r0, r4
 80059bc:	f002 f91c 	bl	8007bf8 <tcp_bind>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80059c0:	b130      	cbz	r0, 80059d0 <httpd_init+0x3c>
 80059c2:	4b0d      	ldr	r3, [pc, #52]	; (80059f8 <httpd_init+0x64>)
 80059c4:	4910      	ldr	r1, [pc, #64]	; (8005a08 <httpd_init+0x74>)
 80059c6:	480e      	ldr	r0, [pc, #56]	; (8005a00 <httpd_init+0x6c>)
 80059c8:	f640 2215 	movw	r2, #2581	; 0xa15
 80059cc:	f008 f8d0 	bl	800db70 <iprintf>
  pcb = tcp_listen(pcb);
 80059d0:	4620      	mov	r0, r4
 80059d2:	21ff      	movs	r1, #255	; 0xff
 80059d4:	f002 f9b2 	bl	8007d3c <tcp_listen_with_backlog>
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80059d8:	4604      	mov	r4, r0
 80059da:	b930      	cbnz	r0, 80059ea <httpd_init+0x56>
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <httpd_init+0x64>)
 80059de:	490b      	ldr	r1, [pc, #44]	; (8005a0c <httpd_init+0x78>)
 80059e0:	4807      	ldr	r0, [pc, #28]	; (8005a00 <httpd_init+0x6c>)
 80059e2:	f640 2217 	movw	r2, #2583	; 0xa17
 80059e6:	f008 f8c3 	bl	800db70 <iprintf>
  tcp_accept(pcb, http_accept);
 80059ea:	4620      	mov	r0, r4
 80059ec:	4908      	ldr	r1, [pc, #32]	; (8005a10 <httpd_init+0x7c>)
}
 80059ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_accept(pcb, http_accept);
 80059f2:	f002 ba89 	b.w	8007f08 <tcp_accept>
 80059f6:	bf00      	nop
 80059f8:	0800f1c9 	.word	0x0800f1c9
 80059fc:	0800f237 	.word	0x0800f237
 8005a00:	0800f20f 	.word	0x0800f20f
 8005a04:	0800f7f0 	.word	0x0800f7f0
 8005a08:	0800f252 	.word	0x0800f252
 8005a0c:	0800f26e 	.word	0x0800f26e
 8005a10:	08005069 	.word	0x08005069

08005a14 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8005a14:	ba40      	rev16	r0, r0
}
 8005a16:	b280      	uxth	r0, r0
 8005a18:	4770      	bx	lr

08005a1a <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 8005a1a:	ba00      	rev	r0, r0
 8005a1c:	4770      	bx	lr

08005a1e <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 8005a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a20:	4604      	mov	r4, r0
  const char* p;
  size_t tokenlen = strlen(token);
 8005a22:	4608      	mov	r0, r1
{
 8005a24:	460f      	mov	r7, r1
 8005a26:	4615      	mov	r5, r2
  size_t tokenlen = strlen(token);
 8005a28:	f7fa fbdc 	bl	80001e4 <strlen>
  if (tokenlen == 0) {
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	b190      	cbz	r0, 8005a56 <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005a30:	4425      	add	r5, r4
 8005a32:	7820      	ldrb	r0, [r4, #0]
 8005a34:	b180      	cbz	r0, 8005a58 <lwip_strnstr+0x3a>
 8005a36:	19a3      	adds	r3, r4, r6
 8005a38:	429d      	cmp	r5, r3
 8005a3a:	d201      	bcs.n	8005a40 <lwip_strnstr+0x22>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8005a40:	783b      	ldrb	r3, [r7, #0]
 8005a42:	4283      	cmp	r3, r0
 8005a44:	d105      	bne.n	8005a52 <lwip_strnstr+0x34>
 8005a46:	4632      	mov	r2, r6
 8005a48:	4639      	mov	r1, r7
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f008 f901 	bl	800dc52 <strncmp>
 8005a50:	b108      	cbz	r0, 8005a56 <lwip_strnstr+0x38>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005a52:	3401      	adds	r4, #1
 8005a54:	e7ed      	b.n	8005a32 <lwip_strnstr+0x14>
 8005a56:	4620      	mov	r0, r4
}
 8005a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a5a <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 8005a5a:	b530      	push	{r4, r5, lr}
  char c1, c2;

  do {
    c1 = *str1++;
 8005a5c:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8005a60:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d009      	beq.n	8005a7c <lwip_stricmp+0x22>
      char c1_upc = c1 | 0x20;
 8005a68:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8005a6c:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 8005a70:	2d19      	cmp	r5, #25
 8005a72:	d807      	bhi.n	8005a84 <lwip_stricmp+0x2a>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8005a74:	f042 0220 	orr.w	r2, r2, #32
 8005a78:	4294      	cmp	r4, r2
 8005a7a:	d103      	bne.n	8005a84 <lwip_stricmp+0x2a>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1ed      	bne.n	8005a5c <lwip_stricmp+0x2>
  return 0;
 8005a80:	4618      	mov	r0, r3
 8005a82:	bd30      	pop	{r4, r5, pc}
        return 1;
 8005a84:	2001      	movs	r0, #1
}
 8005a86:	bd30      	pop	{r4, r5, pc}

08005a88 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char* result, size_t bufsize, int number)
{
 8005a88:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_UNUSED_ARG(bufsize);

  do {
    tmp_value = number;
    number /= base;
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
 8005a8a:	4e13      	ldr	r6, [pc, #76]	; (8005ad8 <lwip_itoa+0x50>)
  char* ptr = result, *ptr1 = result, tmp_char;
 8005a8c:	4601      	mov	r1, r0
    number /= base;
 8005a8e:	f04f 0e0a 	mov.w	lr, #10
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
 8005a92:	f06f 0709 	mvn.w	r7, #9
    number /= base;
 8005a96:	fb92 f4fe 	sdiv	r4, r2, lr
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
 8005a9a:	fb07 6504 	mla	r5, r7, r4, r6
 8005a9e:	4415      	add	r5, r2
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
 8005aa6:	f803 5b01 	strb.w	r5, [r3], #1
  } while(number);
 8005aaa:	b954      	cbnz	r4, 8005ac2 <lwip_itoa+0x3a>

   /* Apply negative sign */
  if (tmp_value < 0) {
 8005aac:	2a00      	cmp	r2, #0
     *ptr++ = '-';
 8005aae:	bfbe      	ittt	lt
 8005ab0:	222d      	movlt	r2, #45	; 0x2d
 8005ab2:	701a      	strblt	r2, [r3, #0]
 8005ab4:	1c8b      	addlt	r3, r1, #2
  }
  *ptr-- = '\0';
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	1e5a      	subs	r2, r3, #1
 8005aba:	7019      	strb	r1, [r3, #0]
  while(ptr1 < ptr) {
 8005abc:	4282      	cmp	r2, r0
 8005abe:	d803      	bhi.n	8005ac8 <lwip_itoa+0x40>
    tmp_char = *ptr;
    *ptr--= *ptr1;
    *ptr1++ = tmp_char;
  }
}
 8005ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	e7e6      	b.n	8005a96 <lwip_itoa+0xe>
    tmp_char = *ptr;
 8005ac8:	7813      	ldrb	r3, [r2, #0]
    *ptr--= *ptr1;
 8005aca:	7801      	ldrb	r1, [r0, #0]
 8005acc:	f802 1901 	strb.w	r1, [r2], #-1
    *ptr1++ = tmp_char;
 8005ad0:	f800 3b01 	strb.w	r3, [r0], #1
 8005ad4:	e7f2      	b.n	8005abc <lwip_itoa+0x34>
 8005ad6:	bf00      	nop
 8005ad8:	0800f4c4 	.word	0x0800f4c4

08005adc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005adc:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005ade:	f001 f9b7 	bl	8006e50 <mem_init>
  memp_init();
 8005ae2:	f001 fbc9 	bl	8007278 <memp_init>
  pbuf_init();
  netif_init();
 8005ae6:	f001 fc14 	bl	8007312 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005aea:	f005 f9ed 	bl	800aec8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005aee:	f002 f881 	bl	8007bf4 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8005af2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8005af6:	f005 b98d 	b.w	800ae14 <sys_timeouts_init>
	...

08005afc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8005afc:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8005afe:	2618      	movs	r6, #24
 8005b00:	4c07      	ldr	r4, [pc, #28]	; (8005b20 <etharp_free_entry+0x24>)
 8005b02:	4346      	muls	r6, r0
{
 8005b04:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8005b06:	59a0      	ldr	r0, [r4, r6]
 8005b08:	b118      	cbz	r0, 8005b12 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8005b0a:	f001 fd43 	bl	8007594 <pbuf_free>
    arp_table[i].q = NULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8005b12:	2318      	movs	r3, #24
 8005b14:	fb03 4405 	mla	r4, r3, r5, r4
 8005b18:	2300      	movs	r3, #0
 8005b1a:	7523      	strb	r3, [r4, #20]
 8005b1c:	bd70      	pop	{r4, r5, r6, pc}
 8005b1e:	bf00      	nop
 8005b20:	20000bf0 	.word	0x20000bf0

08005b24 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8005b24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b28:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005b2a:	4689      	mov	r9, r1
 8005b2c:	4692      	mov	sl, r2
 8005b2e:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005b30:	4607      	mov	r7, r0
 8005b32:	b930      	cbnz	r0, 8005b42 <etharp_raw+0x1e>
 8005b34:	4b2c      	ldr	r3, [pc, #176]	; (8005be8 <etharp_raw+0xc4>)
 8005b36:	492d      	ldr	r1, [pc, #180]	; (8005bec <etharp_raw+0xc8>)
 8005b38:	482d      	ldr	r0, [pc, #180]	; (8005bf0 <etharp_raw+0xcc>)
 8005b3a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8005b3e:	f008 f817 	bl	800db70 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8005b42:	2200      	movs	r2, #0
 8005b44:	211c      	movs	r1, #28
 8005b46:	2002      	movs	r0, #2
 8005b48:	f001 fd86 	bl	8007658 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8005b4c:	4606      	mov	r6, r0
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d047      	beq.n	8005be2 <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8005b52:	8943      	ldrh	r3, [r0, #10]
 8005b54:	2b1b      	cmp	r3, #27
 8005b56:	d806      	bhi.n	8005b66 <etharp_raw+0x42>
 8005b58:	4b23      	ldr	r3, [pc, #140]	; (8005be8 <etharp_raw+0xc4>)
 8005b5a:	4926      	ldr	r1, [pc, #152]	; (8005bf4 <etharp_raw+0xd0>)
 8005b5c:	4824      	ldr	r0, [pc, #144]	; (8005bf0 <etharp_raw+0xcc>)
 8005b5e:	f240 4264 	movw	r2, #1124	; 0x464
 8005b62:	f008 f805 	bl	800db70 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8005b66:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 8005b6a:	6874      	ldr	r4, [r6, #4]
  hdr->opcode = lwip_htons(opcode);
 8005b6c:	f7ff ff52 	bl	8005a14 <lwip_htons>
 8005b70:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8005b72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b76:	2b06      	cmp	r3, #6
 8005b78:	d006      	beq.n	8005b88 <etharp_raw+0x64>
 8005b7a:	4b1b      	ldr	r3, [pc, #108]	; (8005be8 <etharp_raw+0xc4>)
 8005b7c:	491e      	ldr	r1, [pc, #120]	; (8005bf8 <etharp_raw+0xd4>)
 8005b7e:	481c      	ldr	r0, [pc, #112]	; (8005bf0 <etharp_raw+0xcc>)
 8005b80:	f240 426b 	movw	r2, #1131	; 0x46b
 8005b84:	f007 fff4 	bl	800db70 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8005b88:	f8d8 3000 	ldr.w	r3, [r8]
 8005b8c:	60a3      	str	r3, [r4, #8]
 8005b8e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8005b92:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8005b94:	682b      	ldr	r3, [r5, #0]
 8005b96:	f8c4 3012 	str.w	r3, [r4, #18]
 8005b9a:	88ab      	ldrh	r3, [r5, #4]
 8005b9c:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8005b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8005ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8005bac:	2301      	movs	r3, #1
 8005bae:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005bb0:	2308      	movs	r3, #8
 8005bb2:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8005bb4:	2306      	movs	r3, #6
 8005bb6:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8005bb8:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8005bba:	2500      	movs	r5, #0
  hdr->protolen = sizeof(ip4_addr_t);
 8005bbc:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005bbe:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8005bc2:	7025      	strb	r5, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005bc4:	70e5      	strb	r5, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005bc6:	464a      	mov	r2, r9
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	4631      	mov	r1, r6
 8005bcc:	4653      	mov	r3, sl
 8005bce:	4638      	mov	r0, r7
 8005bd0:	f005 fa76 	bl	800b0c0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	f001 fcdd 	bl	8007594 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8005bda:	4628      	mov	r0, r5
}
 8005bdc:	b002      	add	sp, #8
 8005bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8005be2:	f04f 30ff 	mov.w	r0, #4294967295
 8005be6:	e7f9      	b.n	8005bdc <etharp_raw+0xb8>
 8005be8:	0800f601 	.word	0x0800f601
 8005bec:	0800f638 	.word	0x0800f638
 8005bf0:	0800f20f 	.word	0x0800f20f
 8005bf4:	0800f646 	.word	0x0800f646
 8005bf8:	0800f677 	.word	0x0800f677

08005bfc <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8005bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c00:	4b3e      	ldr	r3, [pc, #248]	; (8005cfc <etharp_find_entry.isra.0+0x100>)
 8005c02:	9101      	str	r1, [sp, #4]
  s8_t old_queue = ARP_TABLE_SIZE;
 8005c04:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8005c06:	4605      	mov	r5, r0
 8005c08:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8005c0a:	4694      	mov	ip, r2
 8005c0c:	4614      	mov	r4, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8005c0e:	4681      	mov	r9, r0
 8005c10:	4680      	mov	r8, r0
 8005c12:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 8005c14:	4696      	mov	lr, r2
 8005c16:	461e      	mov	r6, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005c18:	f1be 0f0a 	cmp.w	lr, #10
    u8_t state = arp_table[i].state;
 8005c1c:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005c1e:	d112      	bne.n	8005c46 <etharp_find_entry.isra.0+0x4a>
 8005c20:	b99f      	cbnz	r7, 8005c4a <etharp_find_entry.isra.0+0x4e>
      empty = i;
 8005c22:	fa4f fe80 	sxtb.w	lr, r0
 8005c26:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005c28:	280a      	cmp	r0, #10
 8005c2a:	f103 0318 	add.w	r3, r3, #24
 8005c2e:	d1f3      	bne.n	8005c18 <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8005c30:	9b01      	ldr	r3, [sp, #4]
 8005c32:	0799      	lsls	r1, r3, #30
 8005c34:	d404      	bmi.n	8005c40 <etharp_find_entry.isra.0+0x44>
 8005c36:	f1be 0f0a 	cmp.w	lr, #10
 8005c3a:	d11c      	bne.n	8005c76 <etharp_find_entry.isra.0+0x7a>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8005c3c:	07db      	lsls	r3, r3, #31
 8005c3e:	d435      	bmi.n	8005cac <etharp_find_entry.isra.0+0xb0>
    return (s8_t)ERR_MEM;
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295
 8005c44:	e009      	b.n	8005c5a <etharp_find_entry.isra.0+0x5e>
    } else if (state != ETHARP_STATE_EMPTY) {
 8005c46:	2f00      	cmp	r7, #0
 8005c48:	d0ed      	beq.n	8005c26 <etharp_find_entry.isra.0+0x2a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005c4a:	2d00      	cmp	r5, #0
 8005c4c:	d04a      	beq.n	8005ce4 <etharp_find_entry.isra.0+0xe8>
 8005c4e:	6829      	ldr	r1, [r5, #0]
 8005c50:	468a      	mov	sl, r1
 8005c52:	6859      	ldr	r1, [r3, #4]
 8005c54:	458a      	cmp	sl, r1
 8005c56:	d145      	bne.n	8005ce4 <etharp_find_entry.isra.0+0xe8>
        return i;
 8005c58:	b240      	sxtb	r0, r0
}
 8005c5a:	b003      	add	sp, #12
 8005c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8005c60:	45c2      	cmp	sl, r8
 8005c62:	d3e0      	bcc.n	8005c26 <etharp_find_entry.isra.0+0x2a>
            old_pending = i;
 8005c64:	fa4f fc80 	sxtb.w	ip, r0
 8005c68:	46d0      	mov	r8, sl
 8005c6a:	e7dc      	b.n	8005c26 <etharp_find_entry.isra.0+0x2a>
          if (arp_table[i].ctime >= age_stable) {
 8005c6c:	45ca      	cmp	sl, r9
            old_stable = i;
 8005c6e:	bf24      	itt	cs
 8005c70:	b244      	sxtbcs	r4, r0
 8005c72:	46d1      	movcs	r9, sl
 8005c74:	e7d7      	b.n	8005c26 <etharp_find_entry.isra.0+0x2a>
    i = empty;
 8005c76:	fa5f f78e 	uxtb.w	r7, lr
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8005c7a:	2318      	movs	r3, #24
 8005c7c:	fb03 6307 	mla	r3, r3, r7, r6
 8005c80:	7d1b      	ldrb	r3, [r3, #20]
 8005c82:	b133      	cbz	r3, 8005c92 <etharp_find_entry.isra.0+0x96>
 8005c84:	4b1e      	ldr	r3, [pc, #120]	; (8005d00 <etharp_find_entry.isra.0+0x104>)
 8005c86:	491f      	ldr	r1, [pc, #124]	; (8005d04 <etharp_find_entry.isra.0+0x108>)
 8005c88:	481f      	ldr	r0, [pc, #124]	; (8005d08 <etharp_find_entry.isra.0+0x10c>)
 8005c8a:	f240 1287 	movw	r2, #391	; 0x187
 8005c8e:	f007 ff6f 	bl	800db70 <iprintf>
  if (ipaddr != NULL) {
 8005c92:	b125      	cbz	r5, 8005c9e <etharp_find_entry.isra.0+0xa2>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8005c94:	2318      	movs	r3, #24
 8005c96:	fb03 6307 	mla	r3, r3, r7, r6
 8005c9a:	682a      	ldr	r2, [r5, #0]
 8005c9c:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8005c9e:	2318      	movs	r3, #24
 8005ca0:	fb03 6607 	mla	r6, r3, r7, r6
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	8273      	strh	r3, [r6, #18]
  return (err_t)i;
 8005ca8:	b278      	sxtb	r0, r7
 8005caa:	e7d6      	b.n	8005c5a <etharp_find_entry.isra.0+0x5e>
    if (old_stable < ARP_TABLE_SIZE) {
 8005cac:	2c0a      	cmp	r4, #10
 8005cae:	d00f      	beq.n	8005cd0 <etharp_find_entry.isra.0+0xd4>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8005cb0:	2318      	movs	r3, #24
      i = old_stable;
 8005cb2:	b2e7      	uxtb	r7, r4
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8005cb4:	435c      	muls	r4, r3
 8005cb6:	5933      	ldr	r3, [r6, r4]
 8005cb8:	b133      	cbz	r3, 8005cc8 <etharp_find_entry.isra.0+0xcc>
 8005cba:	4b11      	ldr	r3, [pc, #68]	; (8005d00 <etharp_find_entry.isra.0+0x104>)
 8005cbc:	4913      	ldr	r1, [pc, #76]	; (8005d0c <etharp_find_entry.isra.0+0x110>)
 8005cbe:	4812      	ldr	r0, [pc, #72]	; (8005d08 <etharp_find_entry.isra.0+0x10c>)
 8005cc0:	f240 126f 	movw	r2, #367	; 0x16f
 8005cc4:	f007 ff54 	bl	800db70 <iprintf>
    etharp_free_entry(i);
 8005cc8:	4638      	mov	r0, r7
 8005cca:	f7ff ff17 	bl	8005afc <etharp_free_entry>
 8005cce:	e7d4      	b.n	8005c7a <etharp_find_entry.isra.0+0x7e>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8005cd0:	f1bc 0f0a 	cmp.w	ip, #10
 8005cd4:	d002      	beq.n	8005cdc <etharp_find_entry.isra.0+0xe0>
      i = old_pending;
 8005cd6:	fa5f f78c 	uxtb.w	r7, ip
 8005cda:	e7f5      	b.n	8005cc8 <etharp_find_entry.isra.0+0xcc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8005cdc:	2a0a      	cmp	r2, #10
 8005cde:	d0af      	beq.n	8005c40 <etharp_find_entry.isra.0+0x44>
      i = old_queue;
 8005ce0:	b2d7      	uxtb	r7, r2
 8005ce2:	e7f1      	b.n	8005cc8 <etharp_find_entry.isra.0+0xcc>
      if (state == ETHARP_STATE_PENDING) {
 8005ce4:	2f01      	cmp	r7, #1
 8005ce6:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 8005cea:	d1bf      	bne.n	8005c6c <etharp_find_entry.isra.0+0x70>
        if (arp_table[i].q != NULL) {
 8005cec:	681f      	ldr	r7, [r3, #0]
 8005cee:	2f00      	cmp	r7, #0
 8005cf0:	d0b6      	beq.n	8005c60 <etharp_find_entry.isra.0+0x64>
          if (arp_table[i].ctime >= age_queue) {
 8005cf2:	45da      	cmp	sl, fp
 8005cf4:	d397      	bcc.n	8005c26 <etharp_find_entry.isra.0+0x2a>
            old_queue = i;
 8005cf6:	b242      	sxtb	r2, r0
 8005cf8:	46d3      	mov	fp, sl
 8005cfa:	e794      	b.n	8005c26 <etharp_find_entry.isra.0+0x2a>
 8005cfc:	20000bf0 	.word	0x20000bf0
 8005d00:	0800f601 	.word	0x0800f601
 8005d04:	0800f523 	.word	0x0800f523
 8005d08:	0800f20f 	.word	0x0800f20f
 8005d0c:	0800f50c 	.word	0x0800f50c

08005d10 <etharp_cleanup_netif>:
{
 8005d10:	b570      	push	{r4, r5, r6, lr}
 8005d12:	4d08      	ldr	r5, [pc, #32]	; (8005d34 <etharp_cleanup_netif+0x24>)
 8005d14:	4606      	mov	r6, r0
 8005d16:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8005d18:	7d2b      	ldrb	r3, [r5, #20]
 8005d1a:	b12b      	cbz	r3, 8005d28 <etharp_cleanup_netif+0x18>
 8005d1c:	68ab      	ldr	r3, [r5, #8]
 8005d1e:	42b3      	cmp	r3, r6
 8005d20:	d102      	bne.n	8005d28 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8005d22:	4620      	mov	r0, r4
 8005d24:	f7ff feea 	bl	8005afc <etharp_free_entry>
 8005d28:	3401      	adds	r4, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005d2a:	2c0a      	cmp	r4, #10
 8005d2c:	f105 0518 	add.w	r5, r5, #24
 8005d30:	d1f2      	bne.n	8005d18 <etharp_cleanup_netif+0x8>
}
 8005d32:	bd70      	pop	{r4, r5, r6, pc}
 8005d34:	20000bf0 	.word	0x20000bf0

08005d38 <etharp_input>:
{
 8005d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3c:	4680      	mov	r8, r0
 8005d3e:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8005d40:	460c      	mov	r4, r1
 8005d42:	b949      	cbnz	r1, 8005d58 <etharp_input+0x20>
 8005d44:	4b46      	ldr	r3, [pc, #280]	; (8005e60 <etharp_input+0x128>)
 8005d46:	4947      	ldr	r1, [pc, #284]	; (8005e64 <etharp_input+0x12c>)
 8005d48:	4847      	ldr	r0, [pc, #284]	; (8005e68 <etharp_input+0x130>)
 8005d4a:	f44f 7222 	mov.w	r2, #648	; 0x288
 8005d4e:	f007 ff0f 	bl	800db70 <iprintf>
}
 8005d52:	b006      	add	sp, #24
 8005d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8005d58:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8005d5a:	882b      	ldrh	r3, [r5, #0]
 8005d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d60:	d108      	bne.n	8005d74 <etharp_input+0x3c>
 8005d62:	792b      	ldrb	r3, [r5, #4]
 8005d64:	2b06      	cmp	r3, #6
 8005d66:	d105      	bne.n	8005d74 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8005d68:	796b      	ldrb	r3, [r5, #5]
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d102      	bne.n	8005d74 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8005d6e:	886b      	ldrh	r3, [r5, #2]
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d003      	beq.n	8005d7c <etharp_input+0x44>
  pbuf_free(p);
 8005d74:	4640      	mov	r0, r8
 8005d76:	f001 fc0d 	bl	8007594 <pbuf_free>
 8005d7a:	e7ea      	b.n	8005d52 <etharp_input+0x1a>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005d7c:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8005d7e:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8005d82:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8005d84:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005d86:	b116      	cbz	r6, 8005d8e <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8005d88:	1b9b      	subs	r3, r3, r6
 8005d8a:	425e      	negs	r6, r3
 8005d8c:	415e      	adcs	r6, r3
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8005d8e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8005d92:	2e00      	cmp	r6, #0
 8005d94:	bf14      	ite	ne
 8005d96:	f04f 0901 	movne.w	r9, #1
 8005d9a:	f04f 0902 	moveq.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8005d9e:	2b06      	cmp	r3, #6
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8005da0:	f105 0708 	add.w	r7, r5, #8
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8005da4:	d006      	beq.n	8005db4 <etharp_input+0x7c>
 8005da6:	4b2e      	ldr	r3, [pc, #184]	; (8005e60 <etharp_input+0x128>)
 8005da8:	4930      	ldr	r1, [pc, #192]	; (8005e6c <etharp_input+0x134>)
 8005daa:	482f      	ldr	r0, [pc, #188]	; (8005e68 <etharp_input+0x130>)
 8005dac:	f240 12ab 	movw	r2, #427	; 0x1ab
 8005db0:	f007 fede 	bl	800db70 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8005db4:	9805      	ldr	r0, [sp, #20]
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d03c      	beq.n	8005e34 <etharp_input+0xfc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8005dba:	4621      	mov	r1, r4
 8005dbc:	f000 fc95 	bl	80066ea <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8005dc0:	4682      	mov	sl, r0
 8005dc2:	bbb8      	cbnz	r0, 8005e34 <etharp_input+0xfc>
      ip4_addr_ismulticast(ipaddr)) {
 8005dc4:	9b05      	ldr	r3, [sp, #20]
 8005dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8005dca:	2be0      	cmp	r3, #224	; 0xe0
 8005dcc:	d032      	beq.n	8005e34 <etharp_input+0xfc>
  i = etharp_find_entry(ipaddr, flags, netif);
 8005dce:	4649      	mov	r1, r9
 8005dd0:	a805      	add	r0, sp, #20
 8005dd2:	f7ff ff13 	bl	8005bfc <etharp_find_entry.isra.0>
  if (i < 0) {
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	db2c      	blt.n	8005e34 <etharp_input+0xfc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8005dda:	4b25      	ldr	r3, [pc, #148]	; (8005e70 <etharp_input+0x138>)
 8005ddc:	2218      	movs	r2, #24
 8005dde:	fb02 f100 	mul.w	r1, r2, r0
 8005de2:	eb03 0e01 	add.w	lr, r3, r1
 8005de6:	f04f 0c02 	mov.w	ip, #2
 8005dea:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8005dee:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 8005df2:	f8ce 4008 	str.w	r4, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8005df6:	fb12 c200 	smlabb	r2, r2, r0, ip
 8005dfa:	6838      	ldr	r0, [r7, #0]
 8005dfc:	5098      	str	r0, [r3, r2]
 8005dfe:	eb03 0c02 	add.w	ip, r3, r2
 8005e02:	88ba      	ldrh	r2, [r7, #4]
 8005e04:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 8005e08:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 8005e0c:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 8005e10:	f1b9 0f00 	cmp.w	r9, #0
 8005e14:	d00e      	beq.n	8005e34 <etharp_input+0xfc>
    arp_table[i].q = NULL;
 8005e16:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8005e1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8005e24:	463b      	mov	r3, r7
 8005e26:	4649      	mov	r1, r9
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f005 f949 	bl	800b0c0 <ethernet_output>
    pbuf_free(p);
 8005e2e:	4648      	mov	r0, r9
 8005e30:	f001 fbb0 	bl	8007594 <pbuf_free>
  switch (hdr->opcode) {
 8005e34:	88eb      	ldrh	r3, [r5, #6]
 8005e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e3a:	d19b      	bne.n	8005d74 <etharp_input+0x3c>
    if (for_us) {
 8005e3c:	2e00      	cmp	r6, #0
 8005e3e:	d099      	beq.n	8005d74 <etharp_input+0x3c>
      etharp_raw(netif,
 8005e40:	2202      	movs	r2, #2
 8005e42:	9203      	str	r2, [sp, #12]
 8005e44:	aa05      	add	r2, sp, #20
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8005e46:	f104 0325 	add.w	r3, r4, #37	; 0x25
      etharp_raw(netif,
 8005e4a:	9202      	str	r2, [sp, #8]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8005e4c:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 8005e4e:	9200      	str	r2, [sp, #0]
 8005e50:	9701      	str	r7, [sp, #4]
 8005e52:	463a      	mov	r2, r7
 8005e54:	4619      	mov	r1, r3
 8005e56:	4620      	mov	r0, r4
 8005e58:	f7ff fe64 	bl	8005b24 <etharp_raw>
 8005e5c:	e78a      	b.n	8005d74 <etharp_input+0x3c>
 8005e5e:	bf00      	nop
 8005e60:	0800f601 	.word	0x0800f601
 8005e64:	0800f638 	.word	0x0800f638
 8005e68:	0800f20f 	.word	0x0800f20f
 8005e6c:	0800f56b 	.word	0x0800f56b
 8005e70:	20000bf0 	.word	0x20000bf0

08005e74 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8005e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e76:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005e78:	f100 0325 	add.w	r3, r0, #37	; 0x25
 8005e7c:	9102      	str	r1, [sp, #8]
 8005e7e:	2401      	movs	r4, #1
 8005e80:	4905      	ldr	r1, [pc, #20]	; (8005e98 <etharp_request+0x24>)
 8005e82:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005e84:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005e86:	9200      	str	r2, [sp, #0]
 8005e88:	9403      	str	r4, [sp, #12]
 8005e8a:	4a04      	ldr	r2, [pc, #16]	; (8005e9c <etharp_request+0x28>)
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	f7ff fe49 	bl	8005b24 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8005e92:	b004      	add	sp, #16
 8005e94:	bd10      	pop	{r4, pc}
 8005e96:	bf00      	nop
 8005e98:	08010c18 	.word	0x08010c18
 8005e9c:	08010bac 	.word	0x08010bac

08005ea0 <etharp_tmr>:
{
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	4c13      	ldr	r4, [pc, #76]	; (8005ef0 <etharp_tmr+0x50>)
 8005ea4:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8005ea6:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8005ea8:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8005eaa:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8005eac:	b16a      	cbz	r2, 8005eca <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8005eae:	89e3      	ldrh	r3, [r4, #14]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005eb4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8005eb8:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005eba:	d203      	bcs.n	8005ec4 <etharp_tmr+0x24>
 8005ebc:	2a01      	cmp	r2, #1
 8005ebe:	d10a      	bne.n	8005ed6 <etharp_tmr+0x36>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d90c      	bls.n	8005ede <etharp_tmr+0x3e>
        etharp_free_entry(i);
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	f7ff fe19 	bl	8005afc <etharp_free_entry>
 8005eca:	3501      	adds	r5, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005ecc:	2d0a      	cmp	r5, #10
 8005ece:	f104 0418 	add.w	r4, r4, #24
 8005ed2:	d1ea      	bne.n	8005eaa <etharp_tmr+0xa>
 8005ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8005ed6:	2a03      	cmp	r2, #3
 8005ed8:	d106      	bne.n	8005ee8 <etharp_tmr+0x48>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8005eda:	7427      	strb	r7, [r4, #16]
 8005edc:	e7f5      	b.n	8005eca <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8005ede:	4621      	mov	r1, r4
 8005ee0:	6860      	ldr	r0, [r4, #4]
 8005ee2:	f7ff ffc7 	bl	8005e74 <etharp_request>
 8005ee6:	e7f0      	b.n	8005eca <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8005ee8:	2a04      	cmp	r2, #4
 8005eea:	d1ee      	bne.n	8005eca <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8005eec:	7426      	strb	r6, [r4, #16]
 8005eee:	e7ec      	b.n	8005eca <etharp_tmr+0x2a>
 8005ef0:	20000bf4 	.word	0x20000bf4

08005ef4 <etharp_output_to_arp_index>:
{
 8005ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005ef8:	4d27      	ldr	r5, [pc, #156]	; (8005f98 <etharp_output_to_arp_index+0xa4>)
{
 8005efa:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005efc:	2218      	movs	r2, #24
 8005efe:	fb02 5204 	mla	r2, r2, r4, r5
{
 8005f02:	b085      	sub	sp, #20
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005f04:	7d12      	ldrb	r2, [r2, #20]
 8005f06:	2a01      	cmp	r2, #1
{
 8005f08:	4606      	mov	r6, r0
 8005f0a:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005f0c:	d806      	bhi.n	8005f1c <etharp_output_to_arp_index+0x28>
 8005f0e:	4b23      	ldr	r3, [pc, #140]	; (8005f9c <etharp_output_to_arp_index+0xa8>)
 8005f10:	4923      	ldr	r1, [pc, #140]	; (8005fa0 <etharp_output_to_arp_index+0xac>)
 8005f12:	4824      	ldr	r0, [pc, #144]	; (8005fa4 <etharp_output_to_arp_index+0xb0>)
 8005f14:	f240 22ed 	movw	r2, #749	; 0x2ed
 8005f18:	f007 fe2a 	bl	800db70 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8005f1c:	2118      	movs	r1, #24
 8005f1e:	fb01 5904 	mla	r9, r1, r4, r5
 8005f22:	f106 0725 	add.w	r7, r6, #37	; 0x25
 8005f26:	f899 3014 	ldrb.w	r3, [r9, #20]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d10d      	bne.n	8005f4a <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8005f2e:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 8005f32:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8005f36:	d917      	bls.n	8005f68 <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8005f38:	4649      	mov	r1, r9
 8005f3a:	3104      	adds	r1, #4
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	f7ff ff99 	bl	8005e74 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005f42:	b910      	cbnz	r0, 8005f4a <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8005f44:	2303      	movs	r3, #3
 8005f46:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8005f4a:	2318      	movs	r3, #24
 8005f4c:	fb03 5304 	mla	r3, r3, r4, r5
 8005f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f54:	9200      	str	r2, [sp, #0]
 8005f56:	330c      	adds	r3, #12
 8005f58:	463a      	mov	r2, r7
 8005f5a:	4641      	mov	r1, r8
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f005 f8af 	bl	800b0c0 <ethernet_output>
}
 8005f62:	b005      	add	sp, #20
 8005f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8005f68:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005f6c:	d3ed      	bcc.n	8005f4a <etharp_output_to_arp_index+0x56>
 8005f6e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8005f72:	00db      	lsls	r3, r3, #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005f74:	f103 020c 	add.w	r2, r3, #12
 8005f78:	3304      	adds	r3, #4
 8005f7a:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005f7c:	9302      	str	r3, [sp, #8]
 8005f7e:	4b0a      	ldr	r3, [pc, #40]	; (8005fa8 <etharp_output_to_arp_index+0xb4>)
 8005f80:	9301      	str	r3, [sp, #4]
 8005f82:	2101      	movs	r1, #1
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005f84:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005f86:	9103      	str	r1, [sp, #12]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	442a      	add	r2, r5
 8005f8c:	463b      	mov	r3, r7
 8005f8e:	4639      	mov	r1, r7
 8005f90:	4630      	mov	r0, r6
 8005f92:	f7ff fdc7 	bl	8005b24 <etharp_raw>
 8005f96:	e7d4      	b.n	8005f42 <etharp_output_to_arp_index+0x4e>
 8005f98:	20000bf0 	.word	0x20000bf0
 8005f9c:	0800f601 	.word	0x0800f601
 8005fa0:	0800f58f 	.word	0x0800f58f
 8005fa4:	0800f20f 	.word	0x0800f20f
 8005fa8:	08010c18 	.word	0x08010c18

08005fac <etharp_query>:
{
 8005fac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb0:	4689      	mov	r9, r1
 8005fb2:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005fb4:	4601      	mov	r1, r0
 8005fb6:	f8d9 0000 	ldr.w	r0, [r9]
{
 8005fba:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005fbc:	f000 fb95 	bl	80066ea <ip4_addr_isbroadcast_u32>
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	d15e      	bne.n	8006084 <etharp_query+0xd8>
      ip4_addr_ismulticast(ipaddr) ||
 8005fc6:	f8d9 3000 	ldr.w	r3, [r9]
 8005fca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005fce:	2ae0      	cmp	r2, #224	; 0xe0
 8005fd0:	d058      	beq.n	8006084 <etharp_query+0xd8>
      ip4_addr_isany(ipaddr)) {
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d056      	beq.n	8006084 <etharp_query+0xd8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	4648      	mov	r0, r9
 8005fda:	f7ff fe0f 	bl	8005bfc <etharp_find_entry.isra.0>
  if (i < 0) {
 8005fde:	1e05      	subs	r5, r0, #0
 8005fe0:	db53      	blt.n	800608a <etharp_query+0xde>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8005fe2:	4f40      	ldr	r7, [pc, #256]	; (80060e4 <etharp_query+0x138>)
 8005fe4:	2318      	movs	r3, #24
 8005fe6:	fb03 7305 	mla	r3, r3, r5, r7
 8005fea:	7d1a      	ldrb	r2, [r3, #20]
 8005fec:	b91a      	cbnz	r2, 8005ff6 <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8005fee:	2401      	movs	r4, #1
 8005ff0:	751c      	strb	r4, [r3, #20]
    arp_table[i].netif = netif;
 8005ff2:	f8c3 8008 	str.w	r8, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8005ff6:	2318      	movs	r3, #24
 8005ff8:	fb03 7305 	mla	r3, r3, r5, r7
 8005ffc:	7d1b      	ldrb	r3, [r3, #20]
 8005ffe:	b933      	cbnz	r3, 800600e <etharp_query+0x62>
 8006000:	4b39      	ldr	r3, [pc, #228]	; (80060e8 <etharp_query+0x13c>)
 8006002:	493a      	ldr	r1, [pc, #232]	; (80060ec <etharp_query+0x140>)
 8006004:	483a      	ldr	r0, [pc, #232]	; (80060f0 <etharp_query+0x144>)
 8006006:	f240 32c9 	movw	r2, #969	; 0x3c9
 800600a:	f007 fdb1 	bl	800db70 <iprintf>
  if (is_new_entry || (q == NULL)) {
 800600e:	b90c      	cbnz	r4, 8006014 <etharp_query+0x68>
 8006010:	2e00      	cmp	r6, #0
 8006012:	d13c      	bne.n	800608e <etharp_query+0xe2>
    result = etharp_request(netif, ipaddr);
 8006014:	4649      	mov	r1, r9
 8006016:	4640      	mov	r0, r8
 8006018:	f7ff ff2c 	bl	8005e74 <etharp_request>
    if (q == NULL) {
 800601c:	2e00      	cmp	r6, #0
 800601e:	d138      	bne.n	8006092 <etharp_query+0xe6>
}
 8006020:	b002      	add	sp, #8
 8006022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8006026:	d1fb      	bne.n	8006020 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8006028:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80060e8 <etharp_query+0x13c>
 800602c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80060f8 <etharp_query+0x14c>
 8006030:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80060f0 <etharp_query+0x144>
 8006034:	4634      	mov	r4, r6
    while (p) {
 8006036:	b99c      	cbnz	r4, 8006060 <etharp_query+0xb4>
      pbuf_ref(p);
 8006038:	4630      	mov	r0, r6
 800603a:	f001 fc65 	bl	8007908 <pbuf_ref>
    if (p != NULL) {
 800603e:	2e00      	cmp	r6, #0
 8006040:	d04c      	beq.n	80060dc <etharp_query+0x130>
 8006042:	46b0      	mov	r8, r6
      if (arp_table[i].q != NULL) {
 8006044:	2318      	movs	r3, #24
 8006046:	fb03 f205 	mul.w	r2, r3, r5
 800604a:	461c      	mov	r4, r3
 800604c:	58b8      	ldr	r0, [r7, r2]
 800604e:	b108      	cbz	r0, 8006054 <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 8006050:	f001 faa0 	bl	8007594 <pbuf_free>
      arp_table[i].q = p;
 8006054:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 8006058:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800605a:	f847 8003 	str.w	r8, [r7, r3]
 800605e:	e7df      	b.n	8006020 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8006060:	8962      	ldrh	r2, [r4, #10]
 8006062:	8923      	ldrh	r3, [r4, #8]
 8006064:	429a      	cmp	r2, r3
 8006066:	d108      	bne.n	800607a <etharp_query+0xce>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	b133      	cbz	r3, 800607a <etharp_query+0xce>
 800606c:	4643      	mov	r3, r8
 800606e:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8006072:	4649      	mov	r1, r9
 8006074:	4650      	mov	r0, sl
 8006076:	f007 fd7b 	bl	800db70 <iprintf>
      if (p->type != PBUF_ROM) {
 800607a:	7b23      	ldrb	r3, [r4, #12]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d11e      	bne.n	80060be <etharp_query+0x112>
      p = p->next;
 8006080:	6824      	ldr	r4, [r4, #0]
 8006082:	e7d8      	b.n	8006036 <etharp_query+0x8a>
    return ERR_ARG;
 8006084:	f06f 000f 	mvn.w	r0, #15
 8006088:	e7ca      	b.n	8006020 <etharp_query+0x74>
 800608a:	4628      	mov	r0, r5
 800608c:	e7c8      	b.n	8006020 <etharp_query+0x74>
  err_t result = ERR_MEM;
 800608e:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8006092:	2318      	movs	r3, #24
 8006094:	fb03 7205 	mla	r2, r3, r5, r7
 8006098:	7d12      	ldrb	r2, [r2, #20]
 800609a:	2a01      	cmp	r2, #1
 800609c:	d9c3      	bls.n	8006026 <etharp_query+0x7a>
    ETHARP_SET_HINT(netif, i);
 800609e:	4a15      	ldr	r2, [pc, #84]	; (80060f4 <etharp_query+0x148>)
 80060a0:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80060a2:	220c      	movs	r2, #12
 80060a4:	fb13 2305 	smlabb	r3, r3, r5, r2
 80060a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060ac:	9200      	str	r2, [sp, #0]
 80060ae:	443b      	add	r3, r7
 80060b0:	f108 0225 	add.w	r2, r8, #37	; 0x25
 80060b4:	4631      	mov	r1, r6
 80060b6:	4640      	mov	r0, r8
 80060b8:	f005 f802 	bl	800b0c0 <ethernet_output>
 80060bc:	e7b0      	b.n	8006020 <etharp_query+0x74>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80060be:	2200      	movs	r2, #0
 80060c0:	8921      	ldrh	r1, [r4, #8]
 80060c2:	2002      	movs	r0, #2
 80060c4:	f001 fac8 	bl	8007658 <pbuf_alloc>
      if (p != NULL) {
 80060c8:	4680      	mov	r8, r0
 80060ca:	b138      	cbz	r0, 80060dc <etharp_query+0x130>
        if (pbuf_copy(p, q) != ERR_OK) {
 80060cc:	4631      	mov	r1, r6
 80060ce:	f001 fc69 	bl	80079a4 <pbuf_copy>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d0b6      	beq.n	8006044 <etharp_query+0x98>
          pbuf_free(p);
 80060d6:	4640      	mov	r0, r8
 80060d8:	f001 fa5c 	bl	8007594 <pbuf_free>
      result = ERR_MEM;
 80060dc:	f04f 30ff 	mov.w	r0, #4294967295
 80060e0:	e79e      	b.n	8006020 <etharp_query+0x74>
 80060e2:	bf00      	nop
 80060e4:	20000bf0 	.word	0x20000bf0
 80060e8:	0800f601 	.word	0x0800f601
 80060ec:	0800f5bf 	.word	0x0800f5bf
 80060f0:	0800f20f 	.word	0x0800f20f
 80060f4:	20000ce0 	.word	0x20000ce0
 80060f8:	0800f5e7 	.word	0x0800f5e7

080060fc <etharp_output>:
{
 80060fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060fe:	460e      	mov	r6, r1
 8006100:	b085      	sub	sp, #20
 8006102:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8006104:	4604      	mov	r4, r0
 8006106:	b930      	cbnz	r0, 8006116 <etharp_output+0x1a>
 8006108:	4b3e      	ldr	r3, [pc, #248]	; (8006204 <etharp_output+0x108>)
 800610a:	493f      	ldr	r1, [pc, #252]	; (8006208 <etharp_output+0x10c>)
 800610c:	483f      	ldr	r0, [pc, #252]	; (800620c <etharp_output+0x110>)
 800610e:	f240 321b 	movw	r2, #795	; 0x31b
 8006112:	f007 fd2d 	bl	800db70 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8006116:	b936      	cbnz	r6, 8006126 <etharp_output+0x2a>
 8006118:	4b3a      	ldr	r3, [pc, #232]	; (8006204 <etharp_output+0x108>)
 800611a:	493d      	ldr	r1, [pc, #244]	; (8006210 <etharp_output+0x114>)
 800611c:	483b      	ldr	r0, [pc, #236]	; (800620c <etharp_output+0x110>)
 800611e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8006122:	f007 fd25 	bl	800db70 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8006126:	b935      	cbnz	r5, 8006136 <etharp_output+0x3a>
 8006128:	4b36      	ldr	r3, [pc, #216]	; (8006204 <etharp_output+0x108>)
 800612a:	493a      	ldr	r1, [pc, #232]	; (8006214 <etharp_output+0x118>)
 800612c:	4837      	ldr	r0, [pc, #220]	; (800620c <etharp_output+0x110>)
 800612e:	f240 321d 	movw	r2, #797	; 0x31d
 8006132:	f007 fd1d 	bl	800db70 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8006136:	4621      	mov	r1, r4
 8006138:	6828      	ldr	r0, [r5, #0]
 800613a:	f000 fad6 	bl	80066ea <ip4_addr_isbroadcast_u32>
 800613e:	2800      	cmp	r0, #0
 8006140:	d15b      	bne.n	80061fa <etharp_output+0xfe>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8006142:	682b      	ldr	r3, [r5, #0]
 8006144:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006148:	2ae0      	cmp	r2, #224	; 0xe0
 800614a:	d11d      	bne.n	8006188 <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800614c:	2301      	movs	r3, #1
 800614e:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8006152:	235e      	movs	r3, #94	; 0x5e
 8006154:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8006158:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800615a:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800615e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006162:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8006166:	78ab      	ldrb	r3, [r5, #2]
 8006168:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800616c:	78eb      	ldrb	r3, [r5, #3]
 800616e:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8006172:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8006174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006178:	9200      	str	r2, [sp, #0]
 800617a:	4631      	mov	r1, r6
 800617c:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8006180:	4620      	mov	r0, r4
 8006182:	f004 ff9d 	bl	800b0c0 <ethernet_output>
 8006186:	e01f      	b.n	80061c8 <etharp_output+0xcc>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8006188:	6862      	ldr	r2, [r4, #4]
 800618a:	68a1      	ldr	r1, [r4, #8]
 800618c:	405a      	eors	r2, r3
 800618e:	420a      	tst	r2, r1
 8006190:	d008      	beq.n	80061a4 <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 8006192:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8006194:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8006198:	4293      	cmp	r3, r2
 800619a:	d003      	beq.n	80061a4 <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800619c:	68e3      	ldr	r3, [r4, #12]
 800619e:	b373      	cbz	r3, 80061fe <etharp_output+0x102>
            dst_addr = netif_ip4_gw(netif);
 80061a0:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80061a4:	4b1c      	ldr	r3, [pc, #112]	; (8006218 <etharp_output+0x11c>)
 80061a6:	491d      	ldr	r1, [pc, #116]	; (800621c <etharp_output+0x120>)
 80061a8:	781a      	ldrb	r2, [r3, #0]
 80061aa:	2018      	movs	r0, #24
 80061ac:	fb00 1002 	mla	r0, r0, r2, r1
 80061b0:	7d01      	ldrb	r1, [r0, #20]
 80061b2:	2901      	cmp	r1, #1
 80061b4:	4619      	mov	r1, r3
 80061b6:	d909      	bls.n	80061cc <etharp_output+0xd0>
 80061b8:	682f      	ldr	r7, [r5, #0]
 80061ba:	6843      	ldr	r3, [r0, #4]
 80061bc:	429f      	cmp	r7, r3
 80061be:	d105      	bne.n	80061cc <etharp_output+0xd0>
        return etharp_output_to_arp_index(netif, q, i);
 80061c0:	4631      	mov	r1, r6
 80061c2:	4620      	mov	r0, r4
 80061c4:	f7ff fe96 	bl	8005ef4 <etharp_output_to_arp_index>
}
 80061c8:	b005      	add	sp, #20
 80061ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061cc:	4b13      	ldr	r3, [pc, #76]	; (800621c <etharp_output+0x120>)
{
 80061ce:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80061d0:	7d18      	ldrb	r0, [r3, #20]
 80061d2:	2801      	cmp	r0, #1
 80061d4:	d906      	bls.n	80061e4 <etharp_output+0xe8>
 80061d6:	682f      	ldr	r7, [r5, #0]
 80061d8:	6858      	ldr	r0, [r3, #4]
 80061da:	4287      	cmp	r7, r0
 80061dc:	d102      	bne.n	80061e4 <etharp_output+0xe8>
        ETHARP_SET_HINT(netif, i);
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	700a      	strb	r2, [r1, #0]
 80061e2:	e7ed      	b.n	80061c0 <etharp_output+0xc4>
 80061e4:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80061e6:	2a0a      	cmp	r2, #10
 80061e8:	f103 0318 	add.w	r3, r3, #24
 80061ec:	d1f0      	bne.n	80061d0 <etharp_output+0xd4>
    return etharp_query(netif, dst_addr, q);
 80061ee:	4632      	mov	r2, r6
 80061f0:	4629      	mov	r1, r5
 80061f2:	4620      	mov	r0, r4
 80061f4:	f7ff feda 	bl	8005fac <etharp_query>
 80061f8:	e7e6      	b.n	80061c8 <etharp_output+0xcc>
    dest = (const struct eth_addr *)&ethbroadcast;
 80061fa:	4b09      	ldr	r3, [pc, #36]	; (8006220 <etharp_output+0x124>)
 80061fc:	e7ba      	b.n	8006174 <etharp_output+0x78>
            return ERR_RTE;
 80061fe:	f06f 0003 	mvn.w	r0, #3
 8006202:	e7e1      	b.n	80061c8 <etharp_output+0xcc>
 8006204:	0800f601 	.word	0x0800f601
 8006208:	0800f638 	.word	0x0800f638
 800620c:	0800f20f 	.word	0x0800f20f
 8006210:	0800ffe7 	.word	0x0800ffe7
 8006214:	0800f54c 	.word	0x0800f54c
 8006218:	20000ce0 	.word	0x20000ce0
 800621c:	20000bf0 	.word	0x20000bf0
 8006220:	08010bac 	.word	0x08010bac

08006224 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8006224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006226:	4604      	mov	r4, r0
 8006228:	b087      	sub	sp, #28
 800622a:	460f      	mov	r7, r1
 800622c:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800622e:	2124      	movs	r1, #36	; 0x24
 8006230:	2200      	movs	r2, #0
 8006232:	2001      	movs	r0, #1
 8006234:	f001 fa10 	bl	8007658 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8006238:	4605      	mov	r5, r0
 800623a:	b3a0      	cbz	r0, 80062a6 <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800623c:	8943      	ldrh	r3, [r0, #10]
 800623e:	2b23      	cmp	r3, #35	; 0x23
 8006240:	d806      	bhi.n	8006250 <icmp_send_response.isra.0+0x2c>
 8006242:	4b1a      	ldr	r3, [pc, #104]	; (80062ac <icmp_send_response.isra.0+0x88>)
 8006244:	491a      	ldr	r1, [pc, #104]	; (80062b0 <icmp_send_response.isra.0+0x8c>)
 8006246:	481b      	ldr	r0, [pc, #108]	; (80062b4 <icmp_send_response.isra.0+0x90>)
 8006248:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800624c:	f007 fc90 	bl	800db70 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8006250:	6822      	ldr	r2, [r4, #0]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8006252:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8006254:	2300      	movs	r3, #0
 8006256:	7123      	strb	r3, [r4, #4]
 8006258:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800625a:	71a3      	strb	r3, [r4, #6]
 800625c:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 800625e:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8006260:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006262:	4613      	mov	r3, r2
 8006264:	f104 0108 	add.w	r1, r4, #8
 8006268:	f102 001c 	add.w	r0, r2, #28
 800626c:	f853 6b04 	ldr.w	r6, [r3], #4
 8006270:	f841 6b04 	str.w	r6, [r1], #4
 8006274:	4283      	cmp	r3, r0
 8006276:	d1f9      	bne.n	800626c <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8006278:	ae06      	add	r6, sp, #24
 800627a:	68d3      	ldr	r3, [r2, #12]
 800627c:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8006280:	4630      	mov	r0, r6
 8006282:	f000 f8bb 	bl	80063fc <ip4_route>
#endif
  if (netif != NULL) {
 8006286:	b158      	cbz	r0, 80062a0 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8006288:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800628a:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 800628c:	70a1      	strb	r1, [r4, #2]
 800628e:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8006290:	4632      	mov	r2, r6
 8006292:	9002      	str	r0, [sp, #8]
 8006294:	e88d 000a 	stmia.w	sp, {r1, r3}
 8006298:	4628      	mov	r0, r5
 800629a:	23ff      	movs	r3, #255	; 0xff
 800629c:	f000 fa14 	bl	80066c8 <ip4_output_if>
  }
  pbuf_free(q);
 80062a0:	4628      	mov	r0, r5
 80062a2:	f001 f977 	bl	8007594 <pbuf_free>
}
 80062a6:	b007      	add	sp, #28
 80062a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062aa:	bf00      	nop
 80062ac:	0800f71f 	.word	0x0800f71f
 80062b0:	0800f754 	.word	0x0800f754
 80062b4:	0800f20f 	.word	0x0800f20f

080062b8 <icmp_input>:
{
 80062b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 80062bc:	4b44      	ldr	r3, [pc, #272]	; (80063d0 <icmp_input+0x118>)
 80062be:	f8d3 9008 	ldr.w	r9, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 80062c2:	f899 5000 	ldrb.w	r5, [r9]
 80062c6:	f005 050f 	and.w	r5, r5, #15
 80062ca:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 80062cc:	2d13      	cmp	r5, #19
{
 80062ce:	b085      	sub	sp, #20
 80062d0:	4604      	mov	r4, r0
 80062d2:	4688      	mov	r8, r1
 80062d4:	461f      	mov	r7, r3
  if (hlen < IP_HLEN) {
 80062d6:	d92a      	bls.n	800632e <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 80062d8:	8942      	ldrh	r2, [r0, #10]
 80062da:	2a03      	cmp	r2, #3
 80062dc:	d927      	bls.n	800632e <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 80062de:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 80062e0:	7812      	ldrb	r2, [r2, #0]
 80062e2:	2a08      	cmp	r2, #8
 80062e4:	d123      	bne.n	800632e <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80062e6:	6958      	ldr	r0, [r3, #20]
 80062e8:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80062ec:	2ae0      	cmp	r2, #224	; 0xe0
 80062ee:	d01e      	beq.n	800632e <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80062f0:	6819      	ldr	r1, [r3, #0]
 80062f2:	f000 f9fa 	bl	80066ea <ip4_addr_isbroadcast_u32>
 80062f6:	4606      	mov	r6, r0
 80062f8:	b9c8      	cbnz	r0, 800632e <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80062fa:	8923      	ldrh	r3, [r4, #8]
 80062fc:	2b07      	cmp	r3, #7
 80062fe:	d916      	bls.n	800632e <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8006300:	f105 010e 	add.w	r1, r5, #14
 8006304:	4620      	mov	r0, r4
 8006306:	f001 f93f 	bl	8007588 <pbuf_header>
 800630a:	2800      	cmp	r0, #0
 800630c:	d04f      	beq.n	80063ae <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800630e:	8921      	ldrh	r1, [r4, #8]
 8006310:	4429      	add	r1, r5
 8006312:	4632      	mov	r2, r6
 8006314:	b289      	uxth	r1, r1
 8006316:	2002      	movs	r0, #2
 8006318:	f001 f99e 	bl	8007658 <pbuf_alloc>
      if (r == NULL) {
 800631c:	4606      	mov	r6, r0
 800631e:	b130      	cbz	r0, 800632e <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8006320:	8942      	ldrh	r2, [r0, #10]
 8006322:	f105 0308 	add.w	r3, r5, #8
 8006326:	429a      	cmp	r2, r3
 8006328:	d207      	bcs.n	800633a <icmp_input+0x82>
        pbuf_free(r);
 800632a:	f001 f933 	bl	8007594 <pbuf_free>
  pbuf_free(p);
 800632e:	4620      	mov	r0, r4
}
 8006330:	b005      	add	sp, #20
 8006332:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8006336:	f001 b92d 	b.w	8007594 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 800633a:	4649      	mov	r1, r9
 800633c:	462a      	mov	r2, r5
 800633e:	6840      	ldr	r0, [r0, #4]
 8006340:	f007 fb57 	bl	800d9f2 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8006344:	4269      	negs	r1, r5
 8006346:	4630      	mov	r0, r6
 8006348:	f001 f91e 	bl	8007588 <pbuf_header>
 800634c:	b138      	cbz	r0, 800635e <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800634e:	4b21      	ldr	r3, [pc, #132]	; (80063d4 <icmp_input+0x11c>)
 8006350:	4921      	ldr	r1, [pc, #132]	; (80063d8 <icmp_input+0x120>)
 8006352:	4822      	ldr	r0, [pc, #136]	; (80063dc <icmp_input+0x124>)
 8006354:	22af      	movs	r2, #175	; 0xaf
 8006356:	f007 fc0b 	bl	800db70 <iprintf>
        pbuf_free(r);
 800635a:	4630      	mov	r0, r6
 800635c:	e7e5      	b.n	800632a <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 800635e:	4621      	mov	r1, r4
 8006360:	4630      	mov	r0, r6
 8006362:	f001 fb1f 	bl	80079a4 <pbuf_copy>
 8006366:	2800      	cmp	r0, #0
 8006368:	d1f7      	bne.n	800635a <icmp_input+0xa2>
      pbuf_free(p);
 800636a:	4620      	mov	r0, r4
 800636c:	f001 f912 	bl	8007594 <pbuf_free>
 8006370:	4634      	mov	r4, r6
    if (pbuf_header(p, (s16_t)hlen)) {
 8006372:	4629      	mov	r1, r5
 8006374:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 8006376:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8006378:	f001 f906 	bl	8007588 <pbuf_header>
 800637c:	4602      	mov	r2, r0
 800637e:	2800      	cmp	r0, #0
 8006380:	d1d5      	bne.n	800632e <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8006382:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800638c:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800638e:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 8006390:	70b0      	strb	r0, [r6, #2]
 8006392:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8006394:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8006396:	7288      	strb	r0, [r1, #10]
 8006398:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800639a:	2101      	movs	r1, #1
 800639c:	9101      	str	r1, [sp, #4]
 800639e:	9000      	str	r0, [sp, #0]
 80063a0:	f8cd 8008 	str.w	r8, [sp, #8]
 80063a4:	490e      	ldr	r1, [pc, #56]	; (80063e0 <icmp_input+0x128>)
 80063a6:	4620      	mov	r0, r4
 80063a8:	f000 f98e 	bl	80066c8 <ip4_output_if>
 80063ac:	e7bf      	b.n	800632e <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80063ae:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 80063b2:	31f2      	adds	r1, #242	; 0xf2
 80063b4:	b209      	sxth	r1, r1
 80063b6:	4620      	mov	r0, r4
 80063b8:	f001 f8e6 	bl	8007588 <pbuf_header>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d0d8      	beq.n	8006372 <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80063c0:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <icmp_input+0x11c>)
 80063c2:	4908      	ldr	r1, [pc, #32]	; (80063e4 <icmp_input+0x12c>)
 80063c4:	4805      	ldr	r0, [pc, #20]	; (80063dc <icmp_input+0x124>)
 80063c6:	22c0      	movs	r2, #192	; 0xc0
 80063c8:	f007 fbd2 	bl	800db70 <iprintf>
        goto icmperr;
 80063cc:	e7af      	b.n	800632e <icmp_input+0x76>
 80063ce:	bf00      	nop
 80063d0:	20001b2c 	.word	0x20001b2c
 80063d4:	0800f71f 	.word	0x0800f71f
 80063d8:	0800f6b8 	.word	0x0800f6b8
 80063dc:	0800f20f 	.word	0x0800f20f
 80063e0:	20001b40 	.word	0x20001b40
 80063e4:	0800f6ed 	.word	0x0800f6ed

080063e8 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 80063e8:	460a      	mov	r2, r1
 80063ea:	3004      	adds	r0, #4
 80063ec:	2103      	movs	r1, #3
 80063ee:	f7ff bf19 	b.w	8006224 <icmp_send_response.isra.0>

080063f2 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 80063f2:	460a      	mov	r2, r1
 80063f4:	3004      	adds	r0, #4
 80063f6:	210b      	movs	r1, #11
 80063f8:	f7ff bf14 	b.w	8006224 <icmp_send_response.isra.0>

080063fc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80063fc:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80063fe:	4b13      	ldr	r3, [pc, #76]	; (800644c <ip4_route+0x50>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	b96b      	cbnz	r3, 8006420 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8006404:	4a12      	ldr	r2, [pc, #72]	; (8006450 <ip4_route+0x54>)
 8006406:	6812      	ldr	r2, [r2, #0]
 8006408:	b1ea      	cbz	r2, 8006446 <ip4_route+0x4a>
 800640a:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
 800640e:	f001 0105 	and.w	r1, r1, #5
 8006412:	2905      	cmp	r1, #5
 8006414:	d117      	bne.n	8006446 <ip4_route+0x4a>
 8006416:	6851      	ldr	r1, [r2, #4]
 8006418:	2900      	cmp	r1, #0
 800641a:	bf18      	it	ne
 800641c:	4613      	movne	r3, r2
 800641e:	e012      	b.n	8006446 <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006420:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 8006424:	f004 0205 	and.w	r2, r4, #5
 8006428:	2a05      	cmp	r2, #5
 800642a:	d1e9      	bne.n	8006400 <ip4_route+0x4>
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	2a00      	cmp	r2, #0
 8006430:	d0e6      	beq.n	8006400 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8006432:	6801      	ldr	r1, [r0, #0]
 8006434:	689d      	ldr	r5, [r3, #8]
 8006436:	404a      	eors	r2, r1
 8006438:	422a      	tst	r2, r5
 800643a:	d004      	beq.n	8006446 <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800643c:	07a2      	lsls	r2, r4, #30
 800643e:	d4df      	bmi.n	8006400 <ip4_route+0x4>
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	4291      	cmp	r1, r2
 8006444:	d1dc      	bne.n	8006400 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8006446:	4618      	mov	r0, r3
 8006448:	bd30      	pop	{r4, r5, pc}
 800644a:	bf00      	nop
 800644c:	20005044 	.word	0x20005044
 8006450:	20005048 	.word	0x20005048

08006454 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8006454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8006458:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800645a:	f897 9000 	ldrb.w	r9, [r7]
 800645e:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8006462:	2b04      	cmp	r3, #4
{
 8006464:	4605      	mov	r5, r0
 8006466:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 8006468:	d005      	beq.n	8006476 <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800646a:	4628      	mov	r0, r5
 800646c:	f001 f892 	bl	8007594 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8006470:	2000      	movs	r0, #0
 8006472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8006476:	8878      	ldrh	r0, [r7, #2]
 8006478:	f7ff facc 	bl	8005a14 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 800647c:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL(iphdr);
 800647e:	f009 090f 	and.w	r9, r9, #15
  if (iphdr_len < p->tot_len) {
 8006482:	4283      	cmp	r3, r0
  iphdr_hlen *= 4;
 8006484:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8006488:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 800648a:	d903      	bls.n	8006494 <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 800648c:	4601      	mov	r1, r0
 800648e:	4628      	mov	r0, r5
 8006490:	f001 f9c2 	bl	8007818 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8006494:	896b      	ldrh	r3, [r5, #10]
 8006496:	454b      	cmp	r3, r9
 8006498:	d3e7      	bcc.n	800646a <ip4_input+0x16>
 800649a:	892b      	ldrh	r3, [r5, #8]
 800649c:	42a3      	cmp	r3, r4
 800649e:	d3e4      	bcc.n	800646a <ip4_input+0x16>
 80064a0:	f1b9 0f13 	cmp.w	r9, #19
 80064a4:	d9e1      	bls.n	800646a <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	4c49      	ldr	r4, [pc, #292]	; (80065d0 <ip4_input+0x17c>)
 80064aa:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80064ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80064b4:	2be0      	cmp	r3, #224	; 0xe0
 80064b6:	d139      	bne.n	800652c <ip4_input+0xd8>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80064b8:	f898 302b 	ldrb.w	r3, [r8, #43]	; 0x2b
 80064bc:	07da      	lsls	r2, r3, #31
 80064be:	d503      	bpl.n	80064c8 <ip4_input+0x74>
 80064c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d158      	bne.n	800657a <ip4_input+0x126>
      netif = NULL;
 80064c8:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80064ca:	4641      	mov	r1, r8
 80064cc:	6920      	ldr	r0, [r4, #16]
 80064ce:	f000 f90c 	bl	80066ea <ip4_addr_isbroadcast_u32>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d1c9      	bne.n	800646a <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80064d6:	6923      	ldr	r3, [r4, #16]
 80064d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80064dc:	2be0      	cmp	r3, #224	; 0xe0
 80064de:	d0c4      	beq.n	800646a <ip4_input+0x16>
  if (netif == NULL) {
 80064e0:	2e00      	cmp	r6, #0
 80064e2:	d0c2      	beq.n	800646a <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80064e4:	88fb      	ldrh	r3, [r7, #6]
 80064e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80064ea:	b133      	cbz	r3, 80064fa <ip4_input+0xa6>
    p = ip4_reass(p);
 80064ec:	4628      	mov	r0, r5
 80064ee:	f000 fa2b 	bl	8006948 <ip4_reass>
    if (p == NULL) {
 80064f2:	4605      	mov	r5, r0
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d0bb      	beq.n	8006470 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 80064f8:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 80064fa:	60a7      	str	r7, [r4, #8]
  ip_data.current_input_netif = inp;
 80064fc:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8006500:	783b      	ldrb	r3, [r7, #0]
 8006502:	f003 030f 	and.w	r3, r3, #15
 8006506:	009b      	lsls	r3, r3, #2
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8006508:	f1c9 0100 	rsb	r1, r9, #0
 800650c:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800650e:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8006510:	f001 f83a 	bl	8007588 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8006514:	7a7b      	ldrb	r3, [r7, #9]
 8006516:	2b06      	cmp	r3, #6
 8006518:	d03d      	beq.n	8006596 <ip4_input+0x142>
 800651a:	2b11      	cmp	r3, #17
 800651c:	d02f      	beq.n	800657e <ip4_input+0x12a>
 800651e:	2b01      	cmp	r3, #1
 8006520:	d13e      	bne.n	80065a0 <ip4_input+0x14c>
      icmp_input(p, inp);
 8006522:	4641      	mov	r1, r8
 8006524:	4628      	mov	r0, r5
 8006526:	f7ff fec7 	bl	80062b8 <icmp_input>
      break;
 800652a:	e02c      	b.n	8006586 <ip4_input+0x132>
        netif = netif_list;
 800652c:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80065d4 <ip4_input+0x180>
 8006530:	4646      	mov	r6, r8
 8006532:	f04f 0a01 	mov.w	sl, #1
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8006536:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 800653a:	07db      	lsls	r3, r3, #31
 800653c:	d404      	bmi.n	8006548 <ip4_input+0xf4>
      if (first) {
 800653e:	f1ba 0f00 	cmp.w	sl, #0
 8006542:	d10d      	bne.n	8006560 <ip4_input+0x10c>
        netif = netif->next;
 8006544:	6836      	ldr	r6, [r6, #0]
 8006546:	e010      	b.n	800656a <ip4_input+0x116>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8006548:	6873      	ldr	r3, [r6, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0f7      	beq.n	800653e <ip4_input+0xea>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800654e:	6960      	ldr	r0, [r4, #20]
 8006550:	4283      	cmp	r3, r0
 8006552:	d0ba      	beq.n	80064ca <ip4_input+0x76>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8006554:	4631      	mov	r1, r6
 8006556:	f000 f8c8 	bl	80066ea <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800655a:	2800      	cmp	r0, #0
 800655c:	d0ef      	beq.n	800653e <ip4_input+0xea>
 800655e:	e7b4      	b.n	80064ca <ip4_input+0x76>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8006560:	7d23      	ldrb	r3, [r4, #20]
 8006562:	2b7f      	cmp	r3, #127	; 0x7f
 8006564:	d0b0      	beq.n	80064c8 <ip4_input+0x74>
        netif = netif_list;
 8006566:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 800656a:	4546      	cmp	r6, r8
        netif = netif->next;
 800656c:	bf08      	it	eq
 800656e:	6836      	ldreq	r6, [r6, #0]
 8006570:	f04f 0a00 	mov.w	sl, #0
    } while (netif != NULL);
 8006574:	2e00      	cmp	r6, #0
 8006576:	d1de      	bne.n	8006536 <ip4_input+0xe2>
 8006578:	e7a6      	b.n	80064c8 <ip4_input+0x74>
 800657a:	4646      	mov	r6, r8
 800657c:	e7a5      	b.n	80064ca <ip4_input+0x76>
      udp_input(p, inp);
 800657e:	4641      	mov	r1, r8
 8006580:	4628      	mov	r0, r5
 8006582:	f004 fca3 	bl	800aecc <udp_input>
  ip_data.current_netif = NULL;
 8006586:	2300      	movs	r3, #0
 8006588:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 800658a:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 800658c:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 800658e:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8006590:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8006592:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8006594:	e76c      	b.n	8006470 <ip4_input+0x1c>
      tcp_input(p, inp);
 8006596:	4641      	mov	r1, r8
 8006598:	4628      	mov	r0, r5
 800659a:	f002 ff7b 	bl	8009494 <tcp_input>
      break;
 800659e:	e7f2      	b.n	8006586 <ip4_input+0x132>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80065a0:	4631      	mov	r1, r6
 80065a2:	6960      	ldr	r0, [r4, #20]
 80065a4:	f000 f8a1 	bl	80066ea <ip4_addr_isbroadcast_u32>
 80065a8:	b968      	cbnz	r0, 80065c6 <ip4_input+0x172>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80065aa:	6963      	ldr	r3, [r4, #20]
 80065ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80065b0:	2be0      	cmp	r3, #224	; 0xe0
 80065b2:	d008      	beq.n	80065c6 <ip4_input+0x172>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80065b4:	4649      	mov	r1, r9
 80065b6:	4628      	mov	r0, r5
 80065b8:	f000 ffe9 	bl	800758e <pbuf_header_force>
        p->payload = iphdr;
 80065bc:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80065be:	2102      	movs	r1, #2
 80065c0:	4628      	mov	r0, r5
 80065c2:	f7ff ff11 	bl	80063e8 <icmp_dest_unreach>
      pbuf_free(p);
 80065c6:	4628      	mov	r0, r5
 80065c8:	f000 ffe4 	bl	8007594 <pbuf_free>
 80065cc:	e7db      	b.n	8006586 <ip4_input+0x132>
 80065ce:	bf00      	nop
 80065d0:	20001b2c 	.word	0x20001b2c
 80065d4:	20005044 	.word	0x20005044

080065d8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80065d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80065dc:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80065de:	89c3      	ldrh	r3, [r0, #14]
{
 80065e0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80065e4:	2b01      	cmp	r3, #1
{
 80065e6:	4605      	mov	r5, r0
 80065e8:	468a      	mov	sl, r1
 80065ea:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80065ec:	d006      	beq.n	80065fc <ip4_output_if_src+0x24>
 80065ee:	4b30      	ldr	r3, [pc, #192]	; (80066b0 <ip4_output_if_src+0xd8>)
 80065f0:	4930      	ldr	r1, [pc, #192]	; (80066b4 <ip4_output_if_src+0xdc>)
 80065f2:	4831      	ldr	r0, [pc, #196]	; (80066b8 <ip4_output_if_src+0xe0>)
 80065f4:	f240 3233 	movw	r2, #819	; 0x333
 80065f8:	f007 faba 	bl	800db70 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80065fc:	2e00      	cmp	r6, #0
 80065fe:	d047      	beq.n	8006690 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8006600:	2114      	movs	r1, #20
 8006602:	4628      	mov	r0, r5
 8006604:	f000 ffc0 	bl	8007588 <pbuf_header>
 8006608:	2800      	cmp	r0, #0
 800660a:	d14e      	bne.n	80066aa <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800660c:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800660e:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8006610:	2b13      	cmp	r3, #19
 8006612:	d806      	bhi.n	8006622 <ip4_output_if_src+0x4a>
 8006614:	4b26      	ldr	r3, [pc, #152]	; (80066b0 <ip4_output_if_src+0xd8>)
 8006616:	4929      	ldr	r1, [pc, #164]	; (80066bc <ip4_output_if_src+0xe4>)
 8006618:	4827      	ldr	r0, [pc, #156]	; (80066b8 <ip4_output_if_src+0xe0>)
 800661a:	f240 3261 	movw	r2, #865	; 0x361
 800661e:	f007 faa7 	bl	800db70 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 8006622:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8006626:	7227      	strb	r7, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8006628:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800662a:	6833      	ldr	r3, [r6, #0]
 800662c:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800662e:	2345      	movs	r3, #69	; 0x45
 8006630:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8006632:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8006636:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8006638:	8928      	ldrh	r0, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800663a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80066c4 <ip4_output_if_src+0xec>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800663e:	f7ff f9e9 	bl	8005a14 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8006642:	2700      	movs	r7, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8006644:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8006646:	71a7      	strb	r7, [r4, #6]
 8006648:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800664a:	f8b9 0000 	ldrh.w	r0, [r9]
 800664e:	f7ff f9e1 	bl	8005a14 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8006652:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8006656:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 8006658:	3301      	adds	r3, #1
 800665a:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800665e:	f1ba 0f00 	cmp.w	sl, #0
 8006662:	d112      	bne.n	800668a <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8006664:	4b16      	ldr	r3, [pc, #88]	; (80066c0 <ip4_output_if_src+0xe8>)
 8006666:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8006668:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800666a:	72a7      	strb	r7, [r4, #10]
 800666c:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800666e:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8006672:	b19b      	cbz	r3, 800669c <ip4_output_if_src+0xc4>
 8006674:	892a      	ldrh	r2, [r5, #8]
 8006676:	429a      	cmp	r2, r3
 8006678:	d910      	bls.n	800669c <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 800667a:	4632      	mov	r2, r6
 800667c:	4641      	mov	r1, r8
 800667e:	4628      	mov	r0, r5
 8006680:	f000 fb0c 	bl	8006c9c <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8006684:	b002      	add	sp, #8
 8006686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 800668a:	f8da 3000 	ldr.w	r3, [sl]
 800668e:	e7eb      	b.n	8006668 <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8006690:	686b      	ldr	r3, [r5, #4]
 8006692:	ae02      	add	r6, sp, #8
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f846 3d04 	str.w	r3, [r6, #-4]!
 800669a:	e7e8      	b.n	800666e <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 800669c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80066a0:	4632      	mov	r2, r6
 80066a2:	4629      	mov	r1, r5
 80066a4:	4640      	mov	r0, r8
 80066a6:	4798      	blx	r3
 80066a8:	e7ec      	b.n	8006684 <ip4_output_if_src+0xac>
      return ERR_BUF;
 80066aa:	f06f 0001 	mvn.w	r0, #1
 80066ae:	e7e9      	b.n	8006684 <ip4_output_if_src+0xac>
 80066b0:	0800f780 	.word	0x0800f780
 80066b4:	0800f7b4 	.word	0x0800f7b4
 80066b8:	0800f20f 	.word	0x0800f20f
 80066bc:	0800f7c0 	.word	0x0800f7c0
 80066c0:	0800f7f0 	.word	0x0800f7f0
 80066c4:	20000ce2 	.word	0x20000ce2

080066c8 <ip4_output_if>:
{
 80066c8:	b4f0      	push	{r4, r5, r6, r7}
 80066ca:	9c06      	ldr	r4, [sp, #24]
 80066cc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80066d0:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80066d4:	b11a      	cbz	r2, 80066de <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 80066d6:	b109      	cbz	r1, 80066dc <ip4_output_if+0x14>
 80066d8:	680f      	ldr	r7, [r1, #0]
 80066da:	b907      	cbnz	r7, 80066de <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 80066dc:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80066de:	9406      	str	r4, [sp, #24]
 80066e0:	9605      	str	r6, [sp, #20]
 80066e2:	9504      	str	r5, [sp, #16]
}
 80066e4:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80066e6:	f7ff bf77 	b.w	80065d8 <ip4_output_if_src>

080066ea <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80066ea:	1e43      	subs	r3, r0, #1
 80066ec:	3303      	adds	r3, #3
 80066ee:	d811      	bhi.n	8006714 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80066f0:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 80066f4:	f013 0302 	ands.w	r3, r3, #2
 80066f8:	d00e      	beq.n	8006718 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80066fa:	684a      	ldr	r2, [r1, #4]
 80066fc:	4290      	cmp	r0, r2
 80066fe:	d00b      	beq.n	8006718 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8006700:	688b      	ldr	r3, [r1, #8]
 8006702:	4042      	eors	r2, r0
 8006704:	421a      	tst	r2, r3
 8006706:	d107      	bne.n	8006718 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8006708:	43db      	mvns	r3, r3
 800670a:	4383      	bics	r3, r0
    return 1;
 800670c:	bf0c      	ite	eq
 800670e:	2001      	moveq	r0, #1
 8006710:	2000      	movne	r0, #0
 8006712:	4770      	bx	lr
 8006714:	2001      	movs	r0, #1
 8006716:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8006718:	2000      	movs	r0, #0
  }
}
 800671a:	4770      	bx	lr

0800671c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800671c:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800671e:	4b0c      	ldr	r3, [pc, #48]	; (8006750 <ip_reass_dequeue_datagram+0x34>)
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	4282      	cmp	r2, r0
{
 8006724:	4604      	mov	r4, r0
 8006726:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8006728:	d107      	bne.n	800673a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800672a:	6802      	ldr	r2, [r0, #0]
 800672c:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800672e:	4621      	mov	r1, r4
 8006730:	2004      	movs	r0, #4
}
 8006732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8006736:	f000 bdc9 	b.w	80072cc <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800673a:	b931      	cbnz	r1, 800674a <ip_reass_dequeue_datagram+0x2e>
 800673c:	4b05      	ldr	r3, [pc, #20]	; (8006754 <ip_reass_dequeue_datagram+0x38>)
 800673e:	4906      	ldr	r1, [pc, #24]	; (8006758 <ip_reass_dequeue_datagram+0x3c>)
 8006740:	4806      	ldr	r0, [pc, #24]	; (800675c <ip_reass_dequeue_datagram+0x40>)
 8006742:	f240 1245 	movw	r2, #325	; 0x145
 8006746:	f007 fa13 	bl	800db70 <iprintf>
    prev->next = ipr->next;
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	602b      	str	r3, [r5, #0]
 800674e:	e7ee      	b.n	800672e <ip_reass_dequeue_datagram+0x12>
 8006750:	20000ce8 	.word	0x20000ce8
 8006754:	0800f8d9 	.word	0x0800f8d9
 8006758:	0800f912 	.word	0x0800f912
 800675c:	0800f20f 	.word	0x0800f20f

08006760 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8006760:	4281      	cmp	r1, r0
{
 8006762:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006766:	4605      	mov	r5, r0
 8006768:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800676a:	d105      	bne.n	8006778 <ip_reass_free_complete_datagram+0x18>
 800676c:	4b2f      	ldr	r3, [pc, #188]	; (800682c <ip_reass_free_complete_datagram+0xcc>)
 800676e:	4930      	ldr	r1, [pc, #192]	; (8006830 <ip_reass_free_complete_datagram+0xd0>)
 8006770:	4830      	ldr	r0, [pc, #192]	; (8006834 <ip_reass_free_complete_datagram+0xd4>)
 8006772:	22ab      	movs	r2, #171	; 0xab
 8006774:	f007 f9fc 	bl	800db70 <iprintf>
  if (prev != NULL) {
 8006778:	b147      	cbz	r7, 800678c <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	429d      	cmp	r5, r3
 800677e:	d005      	beq.n	800678c <ip_reass_free_complete_datagram+0x2c>
 8006780:	4b2a      	ldr	r3, [pc, #168]	; (800682c <ip_reass_free_complete_datagram+0xcc>)
 8006782:	492d      	ldr	r1, [pc, #180]	; (8006838 <ip_reass_free_complete_datagram+0xd8>)
 8006784:	482b      	ldr	r0, [pc, #172]	; (8006834 <ip_reass_free_complete_datagram+0xd4>)
 8006786:	22ad      	movs	r2, #173	; 0xad
 8006788:	f007 f9f2 	bl	800db70 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800678c:	686e      	ldr	r6, [r5, #4]
 800678e:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8006790:	889a      	ldrh	r2, [r3, #4]
 8006792:	bb92      	cbnz	r2, 80067fa <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8006798:	f105 011c 	add.w	r1, r5, #28
 800679c:	f105 0208 	add.w	r2, r5, #8
 80067a0:	f852 0b04 	ldr.w	r0, [r2], #4
 80067a4:	f843 0b04 	str.w	r0, [r3], #4
 80067a8:	428a      	cmp	r2, r1
 80067aa:	d1f9      	bne.n	80067a0 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80067ac:	2101      	movs	r1, #1
 80067ae:	4630      	mov	r0, r6
 80067b0:	f7ff fe1f 	bl	80063f2 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80067b4:	4630      	mov	r0, r6
 80067b6:	f001 f89f 	bl	80078f8 <pbuf_clen>
 80067ba:	4604      	mov	r4, r0
    pbuf_free(p);
 80067bc:	4630      	mov	r0, r6
 80067be:	f000 fee9 	bl	8007594 <pbuf_free>
  p = ipr->p;
 80067c2:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80067c4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800682c <ip_reass_free_complete_datagram+0xcc>
 80067c8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8006844 <ip_reass_free_complete_datagram+0xe4>
 80067cc:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006834 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 80067d0:	b9ae      	cbnz	r6, 80067fe <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 80067d2:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80067d4:	4d19      	ldr	r5, [pc, #100]	; (800683c <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 80067d6:	4639      	mov	r1, r7
 80067d8:	f7ff ffa0 	bl	800671c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80067dc:	882b      	ldrh	r3, [r5, #0]
 80067de:	42a3      	cmp	r3, r4
 80067e0:	d205      	bcs.n	80067ee <ip_reass_free_complete_datagram+0x8e>
 80067e2:	4b12      	ldr	r3, [pc, #72]	; (800682c <ip_reass_free_complete_datagram+0xcc>)
 80067e4:	4916      	ldr	r1, [pc, #88]	; (8006840 <ip_reass_free_complete_datagram+0xe0>)
 80067e6:	4813      	ldr	r0, [pc, #76]	; (8006834 <ip_reass_free_complete_datagram+0xd4>)
 80067e8:	22d2      	movs	r2, #210	; 0xd2
 80067ea:	f007 f9c1 	bl	800db70 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 80067ee:	882b      	ldrh	r3, [r5, #0]
 80067f0:	1b1b      	subs	r3, r3, r4
 80067f2:	802b      	strh	r3, [r5, #0]
}
 80067f4:	4620      	mov	r0, r4
 80067f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 80067fa:	2400      	movs	r4, #0
 80067fc:	e7e1      	b.n	80067c2 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 80067fe:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8006800:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8006802:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8006806:	f001 f877 	bl	80078f8 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800680a:	4404      	add	r4, r0
 800680c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8006810:	db05      	blt.n	800681e <ip_reass_free_complete_datagram+0xbe>
 8006812:	4643      	mov	r3, r8
 8006814:	22cc      	movs	r2, #204	; 0xcc
 8006816:	4649      	mov	r1, r9
 8006818:	4650      	mov	r0, sl
 800681a:	f007 f9a9 	bl	800db70 <iprintf>
    pbuf_free(pcur);
 800681e:	4630      	mov	r0, r6
    pbufs_freed += clen;
 8006820:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 8006822:	f000 feb7 	bl	8007594 <pbuf_free>
    p = iprh->next_pbuf;
 8006826:	465e      	mov	r6, fp
 8006828:	e7d2      	b.n	80067d0 <ip_reass_free_complete_datagram+0x70>
 800682a:	bf00      	nop
 800682c:	0800f8d9 	.word	0x0800f8d9
 8006830:	0800f92b 	.word	0x0800f92b
 8006834:	0800f20f 	.word	0x0800f20f
 8006838:	0800f937 	.word	0x0800f937
 800683c:	20000ce4 	.word	0x20000ce4
 8006840:	0800f966 	.word	0x0800f966
 8006844:	0800f949 	.word	0x0800f949

08006848 <ip_reass_remove_oldest_datagram>:
{
 8006848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 800684c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80068bc <ip_reass_remove_oldest_datagram+0x74>
{
 8006850:	4606      	mov	r6, r0
 8006852:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8006854:	2500      	movs	r5, #0
    other_datagrams = 0;
 8006856:	2400      	movs	r4, #0
    r = reassdatagrams;
 8006858:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 800685c:	4621      	mov	r1, r4
    prev = NULL;
 800685e:	46a6      	mov	lr, r4
    oldest = NULL;
 8006860:	4620      	mov	r0, r4
    while (r != NULL) {
 8006862:	b953      	cbnz	r3, 800687a <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8006864:	b110      	cbz	r0, 800686c <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8006866:	f7ff ff7b 	bl	8006760 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800686a:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800686c:	42bd      	cmp	r5, r7
 800686e:	da01      	bge.n	8006874 <ip_reass_remove_oldest_datagram+0x2c>
 8006870:	2c01      	cmp	r4, #1
 8006872:	dcf0      	bgt.n	8006856 <ip_reass_remove_oldest_datagram+0xe>
}
 8006874:	4628      	mov	r0, r5
 8006876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800687a:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800687e:	695a      	ldr	r2, [r3, #20]
 8006880:	4562      	cmp	r2, ip
 8006882:	d109      	bne.n	8006898 <ip_reass_remove_oldest_datagram+0x50>
 8006884:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	4562      	cmp	r2, ip
 800688c:	d104      	bne.n	8006898 <ip_reass_remove_oldest_datagram+0x50>
 800688e:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8006892:	88b2      	ldrh	r2, [r6, #4]
 8006894:	4594      	cmp	ip, r2
 8006896:	d008      	beq.n	80068aa <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8006898:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800689a:	b160      	cbz	r0, 80068b6 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 800689c:	7fc2      	ldrb	r2, [r0, #31]
 800689e:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 80068a2:	4594      	cmp	ip, r2
 80068a4:	bf9c      	itt	ls
 80068a6:	4671      	movls	r1, lr
 80068a8:	4618      	movls	r0, r3
      if (r->next != NULL) {
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	2a00      	cmp	r2, #0
 80068ae:	bf18      	it	ne
 80068b0:	469e      	movne	lr, r3
 80068b2:	4613      	mov	r3, r2
 80068b4:	e7d5      	b.n	8006862 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 80068b6:	4671      	mov	r1, lr
 80068b8:	4618      	mov	r0, r3
 80068ba:	e7f6      	b.n	80068aa <ip_reass_remove_oldest_datagram+0x62>
 80068bc:	20000ce8 	.word	0x20000ce8

080068c0 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80068c0:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80068c2:	4604      	mov	r4, r0
 80068c4:	b930      	cbnz	r0, 80068d4 <ip_frag_free_pbuf_custom_ref+0x14>
 80068c6:	4b06      	ldr	r3, [pc, #24]	; (80068e0 <ip_frag_free_pbuf_custom_ref+0x20>)
 80068c8:	4906      	ldr	r1, [pc, #24]	; (80068e4 <ip_frag_free_pbuf_custom_ref+0x24>)
 80068ca:	4807      	ldr	r0, [pc, #28]	; (80068e8 <ip_frag_free_pbuf_custom_ref+0x28>)
 80068cc:	f240 22ae 	movw	r2, #686	; 0x2ae
 80068d0:	f007 f94e 	bl	800db70 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80068d4:	4621      	mov	r1, r4
 80068d6:	2005      	movs	r0, #5
}
 80068d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80068dc:	f000 bcf6 	b.w	80072cc <memp_free>
 80068e0:	0800f8d9 	.word	0x0800f8d9
 80068e4:	0800ffa3 	.word	0x0800ffa3
 80068e8:	0800f20f 	.word	0x0800f20f

080068ec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80068ec:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80068ee:	4604      	mov	r4, r0
 80068f0:	b930      	cbnz	r0, 8006900 <ipfrag_free_pbuf_custom+0x14>
 80068f2:	4b08      	ldr	r3, [pc, #32]	; (8006914 <ipfrag_free_pbuf_custom+0x28>)
 80068f4:	4908      	ldr	r1, [pc, #32]	; (8006918 <ipfrag_free_pbuf_custom+0x2c>)
 80068f6:	4809      	ldr	r0, [pc, #36]	; (800691c <ipfrag_free_pbuf_custom+0x30>)
 80068f8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80068fc:	f007 f938 	bl	800db70 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8006900:	6960      	ldr	r0, [r4, #20]
 8006902:	b108      	cbz	r0, 8006908 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8006904:	f000 fe46 	bl	8007594 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8006908:	4620      	mov	r0, r4
}
 800690a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 800690e:	f7ff bfd7 	b.w	80068c0 <ip_frag_free_pbuf_custom_ref>
 8006912:	bf00      	nop
 8006914:	0800f8d9 	.word	0x0800f8d9
 8006918:	0800f981 	.word	0x0800f981
 800691c:	0800f20f 	.word	0x0800f20f

08006920 <ip_reass_tmr>:
{
 8006920:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8006922:	4b08      	ldr	r3, [pc, #32]	; (8006944 <ip_reass_tmr+0x24>)
 8006924:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 8006926:	2400      	movs	r4, #0
  while (r != NULL) {
 8006928:	b900      	cbnz	r0, 800692c <ip_reass_tmr+0xc>
}
 800692a:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 800692c:	7fc3      	ldrb	r3, [r0, #31]
 800692e:	6805      	ldr	r5, [r0, #0]
 8006930:	b123      	cbz	r3, 800693c <ip_reass_tmr+0x1c>
      r->timer--;
 8006932:	3b01      	subs	r3, #1
 8006934:	77c3      	strb	r3, [r0, #31]
 8006936:	4604      	mov	r4, r0
      r = r->next;
 8006938:	4628      	mov	r0, r5
 800693a:	e7f5      	b.n	8006928 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 800693c:	4621      	mov	r1, r4
 800693e:	f7ff ff0f 	bl	8006760 <ip_reass_free_complete_datagram>
 8006942:	e7f9      	b.n	8006938 <ip_reass_tmr+0x18>
 8006944:	20000ce8 	.word	0x20000ce8

08006948 <ip4_reass>:
{
 8006948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 800694c:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800694e:	782b      	ldrb	r3, [r5, #0]
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	2b05      	cmp	r3, #5
{
 8006956:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8006958:	f040 808c 	bne.w	8006a74 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800695c:	88e8      	ldrh	r0, [r5, #6]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800695e:	4cb4      	ldr	r4, [pc, #720]	; (8006c30 <ip4_reass+0x2e8>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8006960:	f7ff f858 	bl	8005a14 <lwip_htons>
 8006964:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006968:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800696c:	8868      	ldrh	r0, [r5, #2]
 800696e:	f7ff f851 	bl	8005a14 <lwip_htons>
 8006972:	782b      	ldrb	r3, [r5, #0]
 8006974:	f003 030f 	and.w	r3, r3, #15
 8006978:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 800697c:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 800697e:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8006980:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8006982:	f000 ffb9 	bl	80078f8 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8006986:	8823      	ldrh	r3, [r4, #0]
 8006988:	4403      	add	r3, r0
 800698a:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 800698c:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800698e:	dc68      	bgt.n	8006a62 <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006990:	4ea8      	ldr	r6, [pc, #672]	; (8006c34 <ip4_reass+0x2ec>)
 8006992:	6834      	ldr	r4, [r6, #0]
 8006994:	2c00      	cmp	r4, #0
 8006996:	d172      	bne.n	8006a7e <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8006998:	2004      	movs	r0, #4
 800699a:	f000 fc7b 	bl	8007294 <memp_malloc>
  if (ipr == NULL) {
 800699e:	4604      	mov	r4, r0
 80069a0:	b958      	cbnz	r0, 80069ba <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80069a2:	4651      	mov	r1, sl
 80069a4:	4628      	mov	r0, r5
 80069a6:	f7ff ff4f 	bl	8006848 <ip_reass_remove_oldest_datagram>
 80069aa:	4582      	cmp	sl, r0
 80069ac:	dc62      	bgt.n	8006a74 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80069ae:	2004      	movs	r0, #4
 80069b0:	f000 fc70 	bl	8007294 <memp_malloc>
    if (ipr == NULL)
 80069b4:	4604      	mov	r4, r0
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d05c      	beq.n	8006a74 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80069ba:	2220      	movs	r2, #32
 80069bc:	2100      	movs	r1, #0
 80069be:	4620      	mov	r0, r4
 80069c0:	f007 f822 	bl	800da08 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80069c4:	2303      	movs	r3, #3
 80069c6:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 80069c8:	6833      	ldr	r3, [r6, #0]
 80069ca:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 80069cc:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80069ce:	462b      	mov	r3, r5
 80069d0:	f104 0208 	add.w	r2, r4, #8
 80069d4:	f105 0114 	add.w	r1, r5, #20
 80069d8:	f853 0b04 	ldr.w	r0, [r3], #4
 80069dc:	f842 0b04 	str.w	r0, [r2], #4
 80069e0:	428b      	cmp	r3, r1
 80069e2:	d1f9      	bne.n	80069d8 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80069e4:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 80069e8:	f01b 0b20 	ands.w	fp, fp, #32
 80069ec:	d108      	bne.n	8006a00 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 80069ee:	9b01      	ldr	r3, [sp, #4]
 80069f0:	444b      	add	r3, r9
 80069f2:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80069f4:	4599      	cmp	r9, r3
 80069f6:	d83d      	bhi.n	8006a74 <ip4_reass+0x12c>
 80069f8:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d839      	bhi.n	8006a74 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 8006a00:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8006a02:	8868      	ldrh	r0, [r5, #2]
 8006a04:	f7ff f806 	bl	8005a14 <lwip_htons>
 8006a08:	f895 8000 	ldrb.w	r8, [r5]
 8006a0c:	f008 080f 	and.w	r8, r8, #15
 8006a10:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8006a14:	88e8      	ldrh	r0, [r5, #6]
 8006a16:	f7fe fffd 	bl	8005a14 <lwip_htons>
 8006a1a:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8006a1e:	fa1f f888 	uxth.w	r8, r8
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8006a22:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 8006a24:	687e      	ldr	r6, [r7, #4]
  for (q = ipr->p; q != NULL;) {
 8006a26:	f8d4 e004 	ldr.w	lr, [r4, #4]
  iprh->start = offset;
 8006a2a:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 8006a2c:	eb08 0300 	add.w	r3, r8, r0
  iprh->next_pbuf = NULL;
 8006a30:	2500      	movs	r5, #0
  iprh->end = offset + len;
 8006a32:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 8006a34:	7035      	strb	r5, [r6, #0]
 8006a36:	7075      	strb	r5, [r6, #1]
 8006a38:	70b5      	strb	r5, [r6, #2]
 8006a3a:	70f5      	strb	r5, [r6, #3]
  iprh->end = offset + len;
 8006a3c:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 8006a3e:	4672      	mov	r2, lr
  int valid = 1;
 8006a40:	f04f 0801 	mov.w	r8, #1
  for (q = ipr->p; q != NULL;) {
 8006a44:	bb52      	cbnz	r2, 8006a9c <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 8006a46:	2d00      	cmp	r5, #0
 8006a48:	f040 8092 	bne.w	8006b70 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8006a4c:	f1be 0f00 	cmp.w	lr, #0
 8006a50:	d07d      	beq.n	8006b4e <ip4_reass+0x206>
 8006a52:	4b79      	ldr	r3, [pc, #484]	; (8006c38 <ip4_reass+0x2f0>)
 8006a54:	4979      	ldr	r1, [pc, #484]	; (8006c3c <ip4_reass+0x2f4>)
 8006a56:	487a      	ldr	r0, [pc, #488]	; (8006c40 <ip4_reass+0x2f8>)
 8006a58:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8006a5c:	f007 f888 	bl	800db70 <iprintf>
 8006a60:	e075      	b.n	8006b4e <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006a62:	4601      	mov	r1, r0
 8006a64:	4628      	mov	r0, r5
 8006a66:	f7ff feef 	bl	8006848 <ip_reass_remove_oldest_datagram>
 8006a6a:	b118      	cbz	r0, 8006a74 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8006a6c:	8823      	ldrh	r3, [r4, #0]
 8006a6e:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006a70:	2b0a      	cmp	r3, #10
 8006a72:	dd8d      	ble.n	8006990 <ip4_reass+0x48>
  pbuf_free(p);
 8006a74:	4638      	mov	r0, r7
 8006a76:	f000 fd8d 	bl	8007594 <pbuf_free>
  return NULL;
 8006a7a:	2500      	movs	r5, #0
 8006a7c:	e0d4      	b.n	8006c28 <ip4_reass+0x2e0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8006a7e:	68eb      	ldr	r3, [r5, #12]
 8006a80:	6962      	ldr	r2, [r4, #20]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d108      	bne.n	8006a98 <ip4_reass+0x150>
 8006a86:	692b      	ldr	r3, [r5, #16]
 8006a88:	69a2      	ldr	r2, [r4, #24]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d104      	bne.n	8006a98 <ip4_reass+0x150>
 8006a8e:	89a2      	ldrh	r2, [r4, #12]
 8006a90:	88ab      	ldrh	r3, [r5, #4]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	f000 80dc 	beq.w	8006c50 <ip4_reass+0x308>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006a98:	6824      	ldr	r4, [r4, #0]
 8006a9a:	e77b      	b.n	8006994 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8006a9c:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8006aa0:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8006aa4:	4288      	cmp	r0, r1
 8006aa6:	d254      	bcs.n	8006b52 <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 8006aa8:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 8006aaa:	2d00      	cmp	r5, #0
 8006aac:	d04d      	beq.n	8006b4a <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8006aae:	88ea      	ldrh	r2, [r5, #6]
 8006ab0:	4290      	cmp	r0, r2
 8006ab2:	f0c0 8091 	bcc.w	8006bd8 <ip4_reass+0x290>
 8006ab6:	428b      	cmp	r3, r1
 8006ab8:	f200 808e 	bhi.w	8006bd8 <ip4_reass+0x290>
        iprh_prev->next_pbuf = new_p;
 8006abc:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 8006abe:	4290      	cmp	r0, r2
      if (iprh_prev->end != iprh->start) {
 8006ac0:	f040 80e4 	bne.w	8006c8c <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8006ac4:	f1bb 0f00 	cmp.w	fp, #0
 8006ac8:	d004      	beq.n	8006ad4 <ip4_reass+0x18c>
 8006aca:	7fa3      	ldrb	r3, [r4, #30]
 8006acc:	f013 0301 	ands.w	r3, r3, #1
 8006ad0:	f000 80da 	beq.w	8006c88 <ip4_reass+0x340>
    if (valid) {
 8006ad4:	f1b8 0f00 	cmp.w	r8, #0
 8006ad8:	d159      	bne.n	8006b8e <ip4_reass+0x246>
          q = iprh->next_pbuf;
 8006ada:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8006ade:	4e54      	ldr	r6, [pc, #336]	; (8006c30 <ip4_reass+0x2e8>)
 8006ae0:	8833      	ldrh	r3, [r6, #0]
 8006ae2:	449a      	add	sl, r3
 8006ae4:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 8006ae8:	f1bb 0f00 	cmp.w	fp, #0
 8006aec:	d107      	bne.n	8006afe <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 8006aee:	9b01      	ldr	r3, [sp, #4]
 8006af0:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006af2:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8006af4:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006af8:	f043 0301 	orr.w	r3, r3, #1
 8006afc:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8006afe:	f1b8 0f01 	cmp.w	r8, #1
 8006b02:	d1ba      	bne.n	8006a7a <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 8006b04:	8ba3      	ldrh	r3, [r4, #28]
 8006b06:	3314      	adds	r3, #20
 8006b08:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8006b0a:	6863      	ldr	r3, [r4, #4]
 8006b0c:	685d      	ldr	r5, [r3, #4]
 8006b0e:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006b10:	f104 0308 	add.w	r3, r4, #8
 8006b14:	462a      	mov	r2, r5
 8006b16:	f104 011c 	add.w	r1, r4, #28
 8006b1a:	f853 0b04 	ldr.w	r0, [r3], #4
 8006b1e:	f842 0b04 	str.w	r0, [r2], #4
 8006b22:	428b      	cmp	r3, r1
 8006b24:	d1f9      	bne.n	8006b1a <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8006b26:	8ba0      	ldrh	r0, [r4, #28]
 8006b28:	f7fe ff74 	bl	8005a14 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8006b2c:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8006b2e:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8006b30:	71ab      	strb	r3, [r5, #6]
 8006b32:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8006b34:	72ab      	strb	r3, [r5, #10]
 8006b36:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 8006b38:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 8006b3a:	2f00      	cmp	r7, #0
 8006b3c:	d157      	bne.n	8006bee <ip4_reass+0x2a6>
    if (ipr == reassdatagrams) {
 8006b3e:	4b3d      	ldr	r3, [pc, #244]	; (8006c34 <ip4_reass+0x2ec>)
 8006b40:	6819      	ldr	r1, [r3, #0]
 8006b42:	428c      	cmp	r4, r1
 8006b44:	d165      	bne.n	8006c12 <ip4_reass+0x2ca>
      ipr_prev = NULL;
 8006b46:	4639      	mov	r1, r7
 8006b48:	e065      	b.n	8006c16 <ip4_reass+0x2ce>
        if (iprh->end > iprh_tmp->start) {
 8006b4a:	428b      	cmp	r3, r1
 8006b4c:	d844      	bhi.n	8006bd8 <ip4_reass+0x290>
      ipr->p = new_p;
 8006b4e:	6067      	str	r7, [r4, #4]
 8006b50:	e7b8      	b.n	8006ac4 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 8006b52:	d041      	beq.n	8006bd8 <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 8006b54:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8006b58:	4282      	cmp	r2, r0
 8006b5a:	d83d      	bhi.n	8006bd8 <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 8006b5c:	b125      	cbz	r5, 8006b68 <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 8006b5e:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 8006b60:	428a      	cmp	r2, r1
 8006b62:	bf18      	it	ne
 8006b64:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 8006b68:	f8dc 2000 	ldr.w	r2, [ip]
 8006b6c:	4665      	mov	r5, ip
 8006b6e:	e769      	b.n	8006a44 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8006b70:	88eb      	ldrh	r3, [r5, #6]
 8006b72:	4283      	cmp	r3, r0
 8006b74:	d906      	bls.n	8006b84 <ip4_reass+0x23c>
 8006b76:	4b30      	ldr	r3, [pc, #192]	; (8006c38 <ip4_reass+0x2f0>)
 8006b78:	4932      	ldr	r1, [pc, #200]	; (8006c44 <ip4_reass+0x2fc>)
 8006b7a:	4831      	ldr	r0, [pc, #196]	; (8006c40 <ip4_reass+0x2f8>)
 8006b7c:	f240 12ab 	movw	r2, #427	; 0x1ab
 8006b80:	f006 fff6 	bl	800db70 <iprintf>
      iprh_prev->next_pbuf = new_p;
 8006b84:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8006b86:	88ea      	ldrh	r2, [r5, #6]
 8006b88:	88b3      	ldrh	r3, [r6, #4]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	e798      	b.n	8006ac0 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8006b8e:	6863      	ldr	r3, [r4, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0a2      	beq.n	8006ada <ip4_reass+0x192>
 8006b94:	6859      	ldr	r1, [r3, #4]
 8006b96:	888b      	ldrh	r3, [r1, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d19e      	bne.n	8006ada <ip4_reass+0x192>
        q = iprh->next_pbuf;
 8006b9c:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8006b9e:	b99b      	cbnz	r3, 8006bc8 <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 8006ba0:	42b1      	cmp	r1, r6
 8006ba2:	d106      	bne.n	8006bb2 <ip4_reass+0x26a>
 8006ba4:	4b24      	ldr	r3, [pc, #144]	; (8006c38 <ip4_reass+0x2f0>)
 8006ba6:	4928      	ldr	r1, [pc, #160]	; (8006c48 <ip4_reass+0x300>)
 8006ba8:	4825      	ldr	r0, [pc, #148]	; (8006c40 <ip4_reass+0x2f8>)
 8006baa:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8006bae:	f006 ffdf 	bl	800db70 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8006bb2:	6833      	ldr	r3, [r6, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d092      	beq.n	8006ade <ip4_reass+0x196>
 8006bb8:	4b1f      	ldr	r3, [pc, #124]	; (8006c38 <ip4_reass+0x2f0>)
 8006bba:	4924      	ldr	r1, [pc, #144]	; (8006c4c <ip4_reass+0x304>)
 8006bbc:	4820      	ldr	r0, [pc, #128]	; (8006c40 <ip4_reass+0x2f8>)
 8006bbe:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8006bc2:	f006 ffd5 	bl	800db70 <iprintf>
 8006bc6:	e78a      	b.n	8006ade <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 8006bc8:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8006bca:	88f0      	ldrh	r0, [r6, #6]
 8006bcc:	8893      	ldrh	r3, [r2, #4]
 8006bce:	4298      	cmp	r0, r3
 8006bd0:	d183      	bne.n	8006ada <ip4_reass+0x192>
          q = iprh->next_pbuf;
 8006bd2:	6813      	ldr	r3, [r2, #0]
 8006bd4:	4616      	mov	r6, r2
 8006bd6:	e7e2      	b.n	8006b9e <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8006bd8:	4638      	mov	r0, r7
 8006bda:	f000 fe8d 	bl	80078f8 <pbuf_clen>
 8006bde:	4a14      	ldr	r2, [pc, #80]	; (8006c30 <ip4_reass+0x2e8>)
 8006be0:	8813      	ldrh	r3, [r2, #0]
 8006be2:	1a18      	subs	r0, r3, r0
 8006be4:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 8006be6:	4638      	mov	r0, r7
 8006be8:	f000 fcd4 	bl	8007594 <pbuf_free>
 8006bec:	e742      	b.n	8006a74 <ip4_reass+0x12c>
      iprh = (struct ip_reass_helper*)r->payload;
 8006bee:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 8006bf2:	f06f 0113 	mvn.w	r1, #19
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	f000 fcc6 	bl	8007588 <pbuf_header>
      pbuf_cat(p, r);
 8006bfc:	4639      	mov	r1, r7
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f000 fe96 	bl	8007930 <pbuf_cat>
      r = iprh->next_pbuf;
 8006c04:	f8d8 7000 	ldr.w	r7, [r8]
 8006c08:	e797      	b.n	8006b3a <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 8006c0a:	680b      	ldr	r3, [r1, #0]
 8006c0c:	429c      	cmp	r4, r3
 8006c0e:	d002      	beq.n	8006c16 <ip4_reass+0x2ce>
 8006c10:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006c12:	2900      	cmp	r1, #0
 8006c14:	d1f9      	bne.n	8006c0a <ip4_reass+0x2c2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8006c16:	4620      	mov	r0, r4
 8006c18:	f7ff fd80 	bl	800671c <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f000 fe6b 	bl	80078f8 <pbuf_clen>
 8006c22:	8833      	ldrh	r3, [r6, #0]
 8006c24:	1a18      	subs	r0, r3, r0
 8006c26:	8030      	strh	r0, [r6, #0]
}
 8006c28:	4628      	mov	r0, r5
 8006c2a:	b003      	add	sp, #12
 8006c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c30:	20000ce4 	.word	0x20000ce4
 8006c34:	20000ce8 	.word	0x20000ce8
 8006c38:	0800f8d9 	.word	0x0800f8d9
 8006c3c:	0800f873 	.word	0x0800f873
 8006c40:	0800f20f 	.word	0x0800f20f
 8006c44:	0800f855 	.word	0x0800f855
 8006c48:	0800f8aa 	.word	0x0800f8aa
 8006c4c:	0800f8b7 	.word	0x0800f8b7
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006c50:	88e8      	ldrh	r0, [r5, #6]
 8006c52:	f7fe fedf 	bl	8005a14 <lwip_htons>
 8006c56:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	f47f aec2 	bne.w	80069e4 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8006c60:	89e0      	ldrh	r0, [r4, #14]
 8006c62:	f7fe fed7 	bl	8005a14 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006c66:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	f43f aeba 	beq.w	80069e4 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8006c70:	462b      	mov	r3, r5
 8006c72:	f104 0208 	add.w	r2, r4, #8
 8006c76:	f105 0114 	add.w	r1, r5, #20
 8006c7a:	f853 0b04 	ldr.w	r0, [r3], #4
 8006c7e:	f842 0b04 	str.w	r0, [r2], #4
 8006c82:	428b      	cmp	r3, r1
 8006c84:	d1f9      	bne.n	8006c7a <ip4_reass+0x332>
 8006c86:	e6ad      	b.n	80069e4 <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8006c88:	4698      	mov	r8, r3
 8006c8a:	e728      	b.n	8006ade <ip4_reass+0x196>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8006c8c:	f1bb 0f00 	cmp.w	fp, #0
 8006c90:	f43f af23 	beq.w	8006ada <ip4_reass+0x192>
 8006c94:	f04f 0800 	mov.w	r8, #0
 8006c98:	e717      	b.n	8006aca <ip4_reass+0x182>
 8006c9a:	bf00      	nop

08006c9c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8006c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8006ca0:	f8b1 8022 	ldrh.w	r8, [r1, #34]	; 0x22
{
 8006ca4:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8006ca6:	2308      	movs	r3, #8
 8006ca8:	f1a8 0814 	sub.w	r8, r8, #20
 8006cac:	fb98 f8f3 	sdiv	r8, r8, r3
 8006cb0:	fa1f f388 	uxth.w	r3, r8
 8006cb4:	9306      	str	r3, [sp, #24]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8006cb6:	6843      	ldr	r3, [r0, #4]
{
 8006cb8:	9208      	str	r2, [sp, #32]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8006cba:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 8006cbc:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8006cbe:	f006 060f 	and.w	r6, r6, #15
 8006cc2:	00b6      	lsls	r6, r6, #2
 8006cc4:	2e14      	cmp	r6, #20
{
 8006cc6:	4607      	mov	r7, r0
 8006cc8:	468b      	mov	fp, r1
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8006cca:	d00b      	beq.n	8006ce4 <ip4_frag+0x48>
 8006ccc:	4b5a      	ldr	r3, [pc, #360]	; (8006e38 <ip4_frag+0x19c>)
 8006cce:	495b      	ldr	r1, [pc, #364]	; (8006e3c <ip4_frag+0x1a0>)
 8006cd0:	f240 22e1 	movw	r2, #737	; 0x2e1

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8006cd4:	485a      	ldr	r0, [pc, #360]	; (8006e40 <ip4_frag+0x1a4>)
 8006cd6:	f006 ff4b 	bl	800db70 <iprintf>
 8006cda:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8006cde:	b00b      	add	sp, #44	; 0x2c
 8006ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8006ce4:	9b02      	ldr	r3, [sp, #8]
 8006ce6:	88d8      	ldrh	r0, [r3, #6]
 8006ce8:	f7fe fe94 	bl	8005a14 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8006cec:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8006cf0:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 8006cf4:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8006cf6:	d004      	beq.n	8006d02 <ip4_frag+0x66>
 8006cf8:	4b4f      	ldr	r3, [pc, #316]	; (8006e38 <ip4_frag+0x19c>)
 8006cfa:	4952      	ldr	r1, [pc, #328]	; (8006e44 <ip4_frag+0x1a8>)
 8006cfc:	f240 22e6 	movw	r2, #742	; 0x2e6
 8006d00:	e7e8      	b.n	8006cd4 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 8006d02:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 8006d04:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 8006d08:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 8006d0a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 8006d0e:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 8006d10:	9307      	str	r3, [sp, #28]
  while (left) {
 8006d12:	b90d      	cbnz	r5, 8006d18 <ip4_frag+0x7c>
  return ERR_OK;
 8006d14:	4628      	mov	r0, r5
 8006d16:	e7e2      	b.n	8006cde <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 8006d18:	9b07      	ldr	r3, [sp, #28]
 8006d1a:	42ab      	cmp	r3, r5
 8006d1c:	bfa8      	it	ge
 8006d1e:	462b      	movge	r3, r5
 8006d20:	b29b      	uxth	r3, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8006d22:	2200      	movs	r2, #0
 8006d24:	2114      	movs	r1, #20
 8006d26:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 8006d28:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8006d2a:	f000 fc95 	bl	8007658 <pbuf_alloc>
    if (rambuf == NULL) {
 8006d2e:	4680      	mov	r8, r0
 8006d30:	b370      	cbz	r0, 8006d90 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8006d32:	897b      	ldrh	r3, [r7, #10]
 8006d34:	2b13      	cmp	r3, #19
 8006d36:	d806      	bhi.n	8006d46 <ip4_frag+0xaa>
 8006d38:	4b3f      	ldr	r3, [pc, #252]	; (8006e38 <ip4_frag+0x19c>)
 8006d3a:	4943      	ldr	r1, [pc, #268]	; (8006e48 <ip4_frag+0x1ac>)
 8006d3c:	4840      	ldr	r0, [pc, #256]	; (8006e40 <ip4_frag+0x1a4>)
 8006d3e:	f240 3209 	movw	r2, #777	; 0x309
 8006d42:	f006 ff15 	bl	800db70 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8006d46:	9b02      	ldr	r3, [sp, #8]
 8006d48:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	3114      	adds	r1, #20
 8006d50:	f853 0b04 	ldr.w	r0, [r3], #4
 8006d54:	f842 0b04 	str.w	r0, [r2], #4
 8006d58:	428b      	cmp	r3, r1
 8006d5a:	d1f9      	bne.n	8006d50 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8006d5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8006d60:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8006d64:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 8006d66:	f1b9 0f00 	cmp.w	r9, #0
 8006d6a:	d037      	beq.n	8006ddc <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 8006d6c:	897c      	ldrh	r4, [r7, #10]
 8006d6e:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8006d70:	b2a4      	uxth	r4, r4
 8006d72:	454c      	cmp	r4, r9
 8006d74:	bf28      	it	cs
 8006d76:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 8006d78:	b914      	cbnz	r4, 8006d80 <ip4_frag+0xe4>
        p = p->next;
 8006d7a:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 8006d7c:	2600      	movs	r6, #0
 8006d7e:	e7f2      	b.n	8006d66 <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8006d80:	2005      	movs	r0, #5
 8006d82:	f000 fa87 	bl	8007294 <memp_malloc>
      if (pcr == NULL) {
 8006d86:	4682      	mov	sl, r0
 8006d88:	b928      	cbnz	r0, 8006d96 <ip4_frag+0xfa>
        pbuf_free(rambuf);
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	f000 fc02 	bl	8007594 <pbuf_free>
  return ERR_MEM;
 8006d90:	f04f 30ff 	mov.w	r0, #4294967295
 8006d94:	e7a3      	b.n	8006cde <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8006d96:	9401      	str	r4, [sp, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4433      	add	r3, r6
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	4603      	mov	r3, r0
 8006da2:	4621      	mov	r1, r4
 8006da4:	2004      	movs	r0, #4
 8006da6:	f000 fbb7 	bl	8007518 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8006daa:	b918      	cbnz	r0, 8006db4 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 8006dac:	4650      	mov	r0, sl
 8006dae:	f7ff fd87 	bl	80068c0 <ip_frag_free_pbuf_custom_ref>
 8006db2:	e7ea      	b.n	8006d8a <ip4_frag+0xee>
 8006db4:	9009      	str	r0, [sp, #36]	; 0x24
      pbuf_ref(p);
 8006db6:	4638      	mov	r0, r7
 8006db8:	f000 fda6 	bl	8007908 <pbuf_ref>
      left_to_copy -= newpbuflen;
 8006dbc:	eba9 0904 	sub.w	r9, r9, r4
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8006dc0:	4b22      	ldr	r3, [pc, #136]	; (8006e4c <ip4_frag+0x1b0>)
      pcr->original = p;
 8006dc2:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8006dc6:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 8006dca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dcc:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 8006dce:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8006dd2:	f000 fdad 	bl	8007930 <pbuf_cat>
      if (left_to_copy) {
 8006dd6:	f1b9 0f00 	cmp.w	r9, #0
 8006dda:	d1ce      	bne.n	8006d7a <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 8006ddc:	9b04      	ldr	r3, [sp, #16]
 8006dde:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8006de2:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
 8006de6:	3b13      	subs	r3, #19
    if (!last) {
 8006de8:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 8006dea:	bfa8      	it	ge
 8006dec:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8006df0:	f7fe fe10 	bl	8005a14 <lwip_htons>
 8006df4:	9b03      	ldr	r3, [sp, #12]
 8006df6:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8006df8:	9b05      	ldr	r3, [sp, #20]
 8006dfa:	f103 0014 	add.w	r0, r3, #20
 8006dfe:	b280      	uxth	r0, r0
 8006e00:	f7fe fe08 	bl	8005a14 <lwip_htons>
 8006e04:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8006e06:	9a03      	ldr	r2, [sp, #12]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8006e08:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	7293      	strb	r3, [r2, #10]
 8006e0e:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 8006e10:	4641      	mov	r1, r8
 8006e12:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006e16:	9a08      	ldr	r2, [sp, #32]
 8006e18:	4658      	mov	r0, fp
 8006e1a:	4798      	blx	r3
    pbuf_free(rambuf);
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	f000 fbb9 	bl	8007594 <pbuf_free>
    left -= fragsize;
 8006e22:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 8006e24:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 8006e26:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 8006e28:	9b04      	ldr	r3, [sp, #16]
 8006e2a:	4413      	add	r3, r2
    poff += newpbuflen;
 8006e2c:	4426      	add	r6, r4
    ofo += nfb;
 8006e2e:	b29b      	uxth	r3, r3
    poff += newpbuflen;
 8006e30:	b2b6      	uxth	r6, r6
    left -= fragsize;
 8006e32:	b2ad      	uxth	r5, r5
    ofo += nfb;
 8006e34:	9304      	str	r3, [sp, #16]
 8006e36:	e76c      	b.n	8006d12 <ip4_frag+0x76>
 8006e38:	0800f8d9 	.word	0x0800f8d9
 8006e3c:	0800f7f4 	.word	0x0800f7f4
 8006e40:	0800f20f 	.word	0x0800f20f
 8006e44:	0800f81b 	.word	0x0800f81b
 8006e48:	0800f835 	.word	0x0800f835
 8006e4c:	080068ed 	.word	0x080068ed

08006e50 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006e50:	4b0b      	ldr	r3, [pc, #44]	; (8006e80 <mem_init+0x30>)
 8006e52:	4a0c      	ldr	r2, [pc, #48]	; (8006e84 <mem_init+0x34>)
 8006e54:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 8006e58:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006e5a:	6013      	str	r3, [r2, #0]
  mem->prev = 0;
 8006e5c:	8059      	strh	r1, [r3, #2]
  mem->next = MEM_SIZE_ALIGNED;
 8006e5e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->used = 0;
 8006e62:	7119      	strb	r1, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8006e64:	4908      	ldr	r1, [pc, #32]	; (8006e88 <mem_init+0x38>)
  mem->next = MEM_SIZE_ALIGNED;
 8006e66:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8006e68:	1898      	adds	r0, r3, r2
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8006e6a:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006e6e:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006e72:	4a06      	ldr	r2, [pc, #24]	; (8006e8c <mem_init+0x3c>)
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8006e74:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 8006e76:	2101      	movs	r1, #1
 8006e78:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644
  lfree = (struct mem *)(void *)ram;
 8006e7c:	6013      	str	r3, [r2, #0]
 8006e7e:	4770      	bx	lr
 8006e80:	20001b47 	.word	0x20001b47
 8006e84:	20000cf0 	.word	0x20000cf0
 8006e88:	20000cf4 	.word	0x20000cf4
 8006e8c:	20000cec 	.word	0x20000cec

08006e90 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006e94:	4604      	mov	r4, r0
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f000 8088 	beq.w	8006fac <mem_free+0x11c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8006e9c:	0783      	lsls	r3, r0, #30
 8006e9e:	d006      	beq.n	8006eae <mem_free+0x1e>
 8006ea0:	4b43      	ldr	r3, [pc, #268]	; (8006fb0 <mem_free+0x120>)
 8006ea2:	4944      	ldr	r1, [pc, #272]	; (8006fb4 <mem_free+0x124>)
 8006ea4:	4844      	ldr	r0, [pc, #272]	; (8006fb8 <mem_free+0x128>)
 8006ea6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8006eaa:	f006 fe61 	bl	800db70 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006eae:	4f43      	ldr	r7, [pc, #268]	; (8006fbc <mem_free+0x12c>)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	429c      	cmp	r4, r3
 8006eb4:	d303      	bcc.n	8006ebe <mem_free+0x2e>
 8006eb6:	4b42      	ldr	r3, [pc, #264]	; (8006fc0 <mem_free+0x130>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	429c      	cmp	r4, r3
 8006ebc:	d306      	bcc.n	8006ecc <mem_free+0x3c>
 8006ebe:	4b3c      	ldr	r3, [pc, #240]	; (8006fb0 <mem_free+0x120>)
 8006ec0:	4940      	ldr	r1, [pc, #256]	; (8006fc4 <mem_free+0x134>)
 8006ec2:	483d      	ldr	r0, [pc, #244]	; (8006fb8 <mem_free+0x128>)
 8006ec4:	f240 12af 	movw	r2, #431	; 0x1af
 8006ec8:	f006 fe52 	bl	800db70 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	429c      	cmp	r4, r3
 8006ed0:	d36c      	bcc.n	8006fac <mem_free+0x11c>
 8006ed2:	4b3b      	ldr	r3, [pc, #236]	; (8006fc0 <mem_free+0x130>)
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	4294      	cmp	r4, r2
 8006ed8:	4698      	mov	r8, r3
 8006eda:	d267      	bcs.n	8006fac <mem_free+0x11c>
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8006edc:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006ee0:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8006ee4:	b933      	cbnz	r3, 8006ef4 <mem_free+0x64>
 8006ee6:	4b32      	ldr	r3, [pc, #200]	; (8006fb0 <mem_free+0x120>)
 8006ee8:	4937      	ldr	r1, [pc, #220]	; (8006fc8 <mem_free+0x138>)
 8006eea:	4833      	ldr	r0, [pc, #204]	; (8006fb8 <mem_free+0x128>)
 8006eec:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8006ef0:	f006 fe3e 	bl	800db70 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;

  if (mem < lfree) {
 8006ef4:	4e35      	ldr	r6, [pc, #212]	; (8006fcc <mem_free+0x13c>)
  mem->used = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8006efc:	6833      	ldr	r3, [r6, #0]
 8006efe:	429d      	cmp	r5, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006f00:	683b      	ldr	r3, [r7, #0]
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006f02:	bf38      	it	cc
 8006f04:	6035      	strcc	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006f06:	429d      	cmp	r5, r3
 8006f08:	d206      	bcs.n	8006f18 <mem_free+0x88>
 8006f0a:	4b29      	ldr	r3, [pc, #164]	; (8006fb0 <mem_free+0x120>)
 8006f0c:	4930      	ldr	r1, [pc, #192]	; (8006fd0 <mem_free+0x140>)
 8006f0e:	482a      	ldr	r0, [pc, #168]	; (8006fb8 <mem_free+0x128>)
 8006f10:	f240 125d 	movw	r2, #349	; 0x15d
 8006f14:	f006 fe2c 	bl	800db70 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006f18:	f8d8 3000 	ldr.w	r3, [r8]
 8006f1c:	429d      	cmp	r5, r3
 8006f1e:	d306      	bcc.n	8006f2e <mem_free+0x9e>
 8006f20:	4b23      	ldr	r3, [pc, #140]	; (8006fb0 <mem_free+0x120>)
 8006f22:	492c      	ldr	r1, [pc, #176]	; (8006fd4 <mem_free+0x144>)
 8006f24:	4824      	ldr	r0, [pc, #144]	; (8006fb8 <mem_free+0x128>)
 8006f26:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006f2a:	f006 fe21 	bl	800db70 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006f2e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8006f32:	b133      	cbz	r3, 8006f42 <mem_free+0xb2>
 8006f34:	4b1e      	ldr	r3, [pc, #120]	; (8006fb0 <mem_free+0x120>)
 8006f36:	4928      	ldr	r1, [pc, #160]	; (8006fd8 <mem_free+0x148>)
 8006f38:	481f      	ldr	r0, [pc, #124]	; (8006fb8 <mem_free+0x128>)
 8006f3a:	f240 125f 	movw	r2, #351	; 0x15f
 8006f3e:	f006 fe17 	bl	800db70 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006f42:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8006f46:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006f4a:	d906      	bls.n	8006f5a <mem_free+0xca>
 8006f4c:	4b18      	ldr	r3, [pc, #96]	; (8006fb0 <mem_free+0x120>)
 8006f4e:	4923      	ldr	r1, [pc, #140]	; (8006fdc <mem_free+0x14c>)
 8006f50:	4819      	ldr	r0, [pc, #100]	; (8006fb8 <mem_free+0x128>)
 8006f52:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8006f56:	f006 fe0b 	bl	800db70 <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006f60:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006f62:	4295      	cmp	r5, r2
 8006f64:	d010      	beq.n	8006f88 <mem_free+0xf8>
 8006f66:	7910      	ldrb	r0, [r2, #4]
 8006f68:	b970      	cbnz	r0, 8006f88 <mem_free+0xf8>
 8006f6a:	f8d8 0000 	ldr.w	r0, [r8]
 8006f6e:	4282      	cmp	r2, r0
 8006f70:	d00a      	beq.n	8006f88 <mem_free+0xf8>
    if (lfree == nmem) {
 8006f72:	6830      	ldr	r0, [r6, #0]
 8006f74:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8006f76:	5a5a      	ldrh	r2, [r3, r1]
 8006f78:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8006f7c:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8006f7e:	bf08      	it	eq
 8006f80:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8006f82:	441a      	add	r2, r3
 8006f84:	1ae9      	subs	r1, r5, r3
 8006f86:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8006f88:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 8006f8c:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8006f8e:	428d      	cmp	r5, r1
 8006f90:	d00c      	beq.n	8006fac <mem_free+0x11c>
 8006f92:	7908      	ldrb	r0, [r1, #4]
 8006f94:	b950      	cbnz	r0, 8006fac <mem_free+0x11c>
    if (lfree == mem) {
 8006f96:	6830      	ldr	r0, [r6, #0]
 8006f98:	4285      	cmp	r5, r0
      lfree = pmem;
 8006f9a:	bf08      	it	eq
 8006f9c:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 8006f9e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006fa2:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8006fa4:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006fa8:	440b      	add	r3, r1
 8006faa:	805a      	strh	r2, [r3, #2]
 8006fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb0:	0800f98d 	.word	0x0800f98d
 8006fb4:	0800f9bc 	.word	0x0800f9bc
 8006fb8:	0800f20f 	.word	0x0800f20f
 8006fbc:	20000cf0 	.word	0x20000cf0
 8006fc0:	20000cf4 	.word	0x20000cf4
 8006fc4:	0800f9dd 	.word	0x0800f9dd
 8006fc8:	0800f9f4 	.word	0x0800f9f4
 8006fcc:	20000cec 	.word	0x20000cec
 8006fd0:	0800fa08 	.word	0x0800fa08
 8006fd4:	0800fa1f 	.word	0x0800fa1f
 8006fd8:	0800fa39 	.word	0x0800fa39
 8006fdc:	0800fa54 	.word	0x0800fa54

08006fe0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8006fe2:	3103      	adds	r1, #3
 8006fe4:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8006fe8:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8006fea:	2d0b      	cmp	r5, #11
{
 8006fec:	4604      	mov	r4, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 8006fee:	d904      	bls.n	8006ffa <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8006ff0:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8006ff4:	d902      	bls.n	8006ffc <mem_trim+0x1c>
    return NULL;
 8006ff6:	2400      	movs	r4, #0
 8006ff8:	e059      	b.n	80070ae <mem_trim+0xce>
    newsize = MIN_SIZE_ALIGNED;
 8006ffa:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006ffc:	4e2d      	ldr	r6, [pc, #180]	; (80070b4 <mem_trim+0xd4>)
 8006ffe:	6832      	ldr	r2, [r6, #0]
 8007000:	42a2      	cmp	r2, r4
 8007002:	d803      	bhi.n	800700c <mem_trim+0x2c>
 8007004:	4b2c      	ldr	r3, [pc, #176]	; (80070b8 <mem_trim+0xd8>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	429c      	cmp	r4, r3
 800700a:	d306      	bcc.n	800701a <mem_trim+0x3a>
 800700c:	4b2b      	ldr	r3, [pc, #172]	; (80070bc <mem_trim+0xdc>)
 800700e:	492c      	ldr	r1, [pc, #176]	; (80070c0 <mem_trim+0xe0>)
 8007010:	482c      	ldr	r0, [pc, #176]	; (80070c4 <mem_trim+0xe4>)
 8007012:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007016:	f006 fdab 	bl	800db70 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800701a:	6833      	ldr	r3, [r6, #0]
 800701c:	429c      	cmp	r4, r3
 800701e:	d346      	bcc.n	80070ae <mem_trim+0xce>
 8007020:	4a25      	ldr	r2, [pc, #148]	; (80070b8 <mem_trim+0xd8>)
 8007022:	6812      	ldr	r2, [r2, #0]
 8007024:	4294      	cmp	r4, r2
 8007026:	d242      	bcs.n	80070ae <mem_trim+0xce>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007028:	f1a4 0208 	sub.w	r2, r4, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800702c:	f834 0c08 	ldrh.w	r0, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8007030:	1ad2      	subs	r2, r2, r3
 8007032:	b292      	uxth	r2, r2
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8007034:	f1a0 0108 	sub.w	r1, r0, #8
 8007038:	1a89      	subs	r1, r1, r2
 800703a:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800703c:	42a9      	cmp	r1, r5
 800703e:	d219      	bcs.n	8007074 <mem_trim+0x94>
 8007040:	4b1e      	ldr	r3, [pc, #120]	; (80070bc <mem_trim+0xdc>)
 8007042:	4921      	ldr	r1, [pc, #132]	; (80070c8 <mem_trim+0xe8>)
 8007044:	481f      	ldr	r0, [pc, #124]	; (80070c4 <mem_trim+0xe4>)
 8007046:	f240 2206 	movw	r2, #518	; 0x206
 800704a:	f006 fd91 	bl	800db70 <iprintf>
 800704e:	e7d2      	b.n	8006ff6 <mem_trim+0x16>
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007050:	f105 0614 	add.w	r6, r5, #20
 8007054:	428e      	cmp	r6, r1
 8007056:	d82a      	bhi.n	80070ae <mem_trim+0xce>
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    mem2 = (struct mem *)(void *)&ram[ptr2];
    if (mem2 < lfree) {
 8007058:	4e1c      	ldr	r6, [pc, #112]	; (80070cc <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800705a:	f102 0108 	add.w	r1, r2, #8
 800705e:	440d      	add	r5, r1
    if (mem2 < lfree) {
 8007060:	6837      	ldr	r7, [r6, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007062:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8007064:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 8007066:	42b9      	cmp	r1, r7
      lfree = mem2;
 8007068:	bf38      	it	cc
 800706a:	6031      	strcc	r1, [r6, #0]
    }
    mem2->used = 0;
 800706c:	2600      	movs	r6, #0
 800706e:	710e      	strb	r6, [r1, #4]
    mem2->next = mem->next;
 8007070:	5358      	strh	r0, [r3, r5]
 8007072:	e013      	b.n	800709c <mem_trim+0xbc>
  if (newsize == size) {
 8007074:	d01b      	beq.n	80070ae <mem_trim+0xce>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 8007076:	181e      	adds	r6, r3, r0
  if (mem2->used == 0) {
 8007078:	7937      	ldrb	r7, [r6, #4]
 800707a:	2f00      	cmp	r7, #0
 800707c:	d1e8      	bne.n	8007050 <mem_trim+0x70>
    next = mem2->next;
 800707e:	5a1f      	ldrh	r7, [r3, r0]
    if (lfree == mem2) {
 8007080:	4812      	ldr	r0, [pc, #72]	; (80070cc <mem_trim+0xec>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007082:	f102 0108 	add.w	r1, r2, #8
 8007086:	440d      	add	r5, r1
    if (lfree == mem2) {
 8007088:	6801      	ldr	r1, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800708a:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 800708c:	428e      	cmp	r6, r1
 800708e:	eb03 0105 	add.w	r1, r3, r5
      lfree = (struct mem *)(void *)&ram[ptr2];
 8007092:	bf08      	it	eq
 8007094:	6001      	streq	r1, [r0, #0]
    mem2->used = 0;
 8007096:	2000      	movs	r0, #0
 8007098:	7108      	strb	r0, [r1, #4]
    mem2->next = next;
 800709a:	535f      	strh	r7, [r3, r5]
    mem2->prev = ptr;
 800709c:	804a      	strh	r2, [r1, #2]
    mem->next = ptr2;
 800709e:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80070a2:	5b5a      	ldrh	r2, [r3, r5]
 80070a4:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 80070a8:	d001      	beq.n	80070ae <mem_trim+0xce>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80070aa:	4413      	add	r3, r2
 80070ac:	805d      	strh	r5, [r3, #2]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 80070ae:	4620      	mov	r0, r4
 80070b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000cf0 	.word	0x20000cf0
 80070b8:	20000cf4 	.word	0x20000cf4
 80070bc:	0800f98d 	.word	0x0800f98d
 80070c0:	0800fb19 	.word	0x0800fb19
 80070c4:	0800f20f 	.word	0x0800f20f
 80070c8:	0800fb30 	.word	0x0800fb30
 80070cc:	20000cec 	.word	0x20000cec

080070d0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80070d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80070d4:	b148      	cbz	r0, 80070ea <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80070d6:	3003      	adds	r0, #3
 80070d8:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 80070dc:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 80070de:	2d0b      	cmp	r5, #11
 80070e0:	d905      	bls.n	80070ee <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 80070e2:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 80070e6:	d903      	bls.n	80070f0 <mem_malloc+0x20>
    return NULL;
 80070e8:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 80070ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 80070ee:	250c      	movs	r5, #12
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80070f0:	4837      	ldr	r0, [pc, #220]	; (80071d0 <mem_malloc+0x100>)
 80070f2:	4e38      	ldr	r6, [pc, #224]	; (80071d4 <mem_malloc+0x104>)
 80070f4:	6807      	ldr	r7, [r0, #0]
 80070f6:	6831      	ldr	r1, [r6, #0]
 80070f8:	1a7b      	subs	r3, r7, r1
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007100:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007104:	4543      	cmp	r3, r8
 8007106:	d2ef      	bcs.n	80070e8 <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 8007108:	18cc      	adds	r4, r1, r3
 800710a:	f831 e003 	ldrh.w	lr, [r1, r3]
      if ((!mem->used) &&
 800710e:	f894 c004 	ldrb.w	ip, [r4, #4]
 8007112:	f1bc 0f00 	cmp.w	ip, #0
 8007116:	d158      	bne.n	80071ca <mem_malloc+0xfa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007118:	eba9 0203 	sub.w	r2, r9, r3
 800711c:	4472      	add	r2, lr
      if ((!mem->used) &&
 800711e:	4295      	cmp	r5, r2
 8007120:	d853      	bhi.n	80071ca <mem_malloc+0xfa>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007122:	f105 0814 	add.w	r8, r5, #20
 8007126:	4542      	cmp	r2, r8
 8007128:	d349      	bcc.n	80071be <mem_malloc+0xee>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800712a:	f105 0208 	add.w	r2, r5, #8
 800712e:	441a      	add	r2, r3
 8007130:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8007132:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 8007136:	f888 c004 	strb.w	ip, [r8, #4]
          mem2->next = mem->next;
 800713a:	f821 e002 	strh.w	lr, [r1, r2]
          mem2->prev = ptr;
 800713e:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 8007142:	2301      	movs	r3, #1
          mem->next = ptr2;
 8007144:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8007146:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007148:	5a8b      	ldrh	r3, [r1, r2]
 800714a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800714e:	d001      	beq.n	8007154 <mem_malloc+0x84>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007150:	4419      	add	r1, r3
 8007152:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 8007154:	42a7      	cmp	r7, r4
 8007156:	4f20      	ldr	r7, [pc, #128]	; (80071d8 <mem_malloc+0x108>)
 8007158:	d111      	bne.n	800717e <mem_malloc+0xae>
          while (cur->used && cur != ram_end) {
 800715a:	6839      	ldr	r1, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 800715c:	6836      	ldr	r6, [r6, #0]
 800715e:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 8007160:	791a      	ldrb	r2, [r3, #4]
 8007162:	b10a      	cbz	r2, 8007168 <mem_malloc+0x98>
 8007164:	428b      	cmp	r3, r1
 8007166:	d12d      	bne.n	80071c4 <mem_malloc+0xf4>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007168:	428b      	cmp	r3, r1
          lfree = cur;
 800716a:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800716c:	d007      	beq.n	800717e <mem_malloc+0xae>
 800716e:	b132      	cbz	r2, 800717e <mem_malloc+0xae>
 8007170:	4b1a      	ldr	r3, [pc, #104]	; (80071dc <mem_malloc+0x10c>)
 8007172:	491b      	ldr	r1, [pc, #108]	; (80071e0 <mem_malloc+0x110>)
 8007174:	481b      	ldr	r0, [pc, #108]	; (80071e4 <mem_malloc+0x114>)
 8007176:	f240 22cf 	movw	r2, #719	; 0x2cf
 800717a:	f006 fcf9 	bl	800db70 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800717e:	3508      	adds	r5, #8
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	4425      	add	r5, r4
 8007184:	42ab      	cmp	r3, r5
 8007186:	d206      	bcs.n	8007196 <mem_malloc+0xc6>
 8007188:	4b14      	ldr	r3, [pc, #80]	; (80071dc <mem_malloc+0x10c>)
 800718a:	4917      	ldr	r1, [pc, #92]	; (80071e8 <mem_malloc+0x118>)
 800718c:	4815      	ldr	r0, [pc, #84]	; (80071e4 <mem_malloc+0x114>)
 800718e:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8007192:	f006 fced 	bl	800db70 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007196:	07a3      	lsls	r3, r4, #30
 8007198:	d00d      	beq.n	80071b6 <mem_malloc+0xe6>
 800719a:	4b10      	ldr	r3, [pc, #64]	; (80071dc <mem_malloc+0x10c>)
 800719c:	4913      	ldr	r1, [pc, #76]	; (80071ec <mem_malloc+0x11c>)
 800719e:	4811      	ldr	r0, [pc, #68]	; (80071e4 <mem_malloc+0x114>)
 80071a0:	f240 22d6 	movw	r2, #726	; 0x2d6
 80071a4:	f006 fce4 	bl	800db70 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80071a8:	4b0c      	ldr	r3, [pc, #48]	; (80071dc <mem_malloc+0x10c>)
 80071aa:	4911      	ldr	r1, [pc, #68]	; (80071f0 <mem_malloc+0x120>)
 80071ac:	480d      	ldr	r0, [pc, #52]	; (80071e4 <mem_malloc+0x114>)
 80071ae:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 80071b2:	f006 fcdd 	bl	800db70 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80071b6:	f104 0008 	add.w	r0, r4, #8
 80071ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 80071be:	2301      	movs	r3, #1
 80071c0:	7123      	strb	r3, [r4, #4]
 80071c2:	e7c7      	b.n	8007154 <mem_malloc+0x84>
            cur = (struct mem *)(void *)&ram[cur->next];
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	4433      	add	r3, r6
 80071c8:	e7ca      	b.n	8007160 <mem_malloc+0x90>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80071ca:	4673      	mov	r3, lr
 80071cc:	e79a      	b.n	8007104 <mem_malloc+0x34>
 80071ce:	bf00      	nop
 80071d0:	20000cec 	.word	0x20000cec
 80071d4:	20000cf0 	.word	0x20000cf0
 80071d8:	20000cf4 	.word	0x20000cf4
 80071dc:	0800f98d 	.word	0x0800f98d
 80071e0:	0800fa7e 	.word	0x0800fa7e
 80071e4:	0800f20f 	.word	0x0800f20f
 80071e8:	0800fa97 	.word	0x0800fa97
 80071ec:	0800fac7 	.word	0x0800fac7
 80071f0:	0800faf6 	.word	0x0800faf6

080071f4 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 80071f4:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80071f6:	6804      	ldr	r4, [r0, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80071f8:	b154      	cbz	r4, 8007210 <do_memp_malloc_pool.isra.0+0x1c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	6003      	str	r3, [r0, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80071fe:	07a3      	lsls	r3, r4, #30
 8007200:	d006      	beq.n	8007210 <do_memp_malloc_pool.isra.0+0x1c>
 8007202:	4b04      	ldr	r3, [pc, #16]	; (8007214 <do_memp_malloc_pool.isra.0+0x20>)
 8007204:	4904      	ldr	r1, [pc, #16]	; (8007218 <do_memp_malloc_pool.isra.0+0x24>)
 8007206:	4805      	ldr	r0, [pc, #20]	; (800721c <do_memp_malloc_pool.isra.0+0x28>)
 8007208:	f240 1249 	movw	r2, #329	; 0x149
 800720c:	f006 fcb0 	bl	800db70 <iprintf>
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
}
 8007210:	4620      	mov	r0, r4
 8007212:	bd10      	pop	{r4, pc}
 8007214:	0800fb70 	.word	0x0800fb70
 8007218:	0800fba0 	.word	0x0800fba0
 800721c:	0800f20f 	.word	0x0800f20f

08007220 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8007220:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007222:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8007224:	4605      	mov	r5, r0
 8007226:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007228:	d006      	beq.n	8007238 <do_memp_free_pool.isra.1+0x18>
 800722a:	4b06      	ldr	r3, [pc, #24]	; (8007244 <do_memp_free_pool.isra.1+0x24>)
 800722c:	4906      	ldr	r1, [pc, #24]	; (8007248 <do_memp_free_pool.isra.1+0x28>)
 800722e:	4807      	ldr	r0, [pc, #28]	; (800724c <do_memp_free_pool.isra.1+0x2c>)
 8007230:	f240 129d 	movw	r2, #413	; 0x19d
 8007234:	f006 fc9c 	bl	800db70 <iprintf>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007238:	682b      	ldr	r3, [r5, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800723e:	601c      	str	r4, [r3, #0]
 8007240:	bd38      	pop	{r3, r4, r5, pc}
 8007242:	bf00      	nop
 8007244:	0800fb70 	.word	0x0800fb70
 8007248:	0800fb50 	.word	0x0800fb50
 800724c:	0800f20f 	.word	0x0800f20f

08007250 <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8007250:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8007252:	6881      	ldr	r1, [r0, #8]
{
 8007254:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 8007256:	2200      	movs	r2, #0
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8007258:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 800725a:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800725c:	600a      	str	r2, [r1, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800725e:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8007262:	42a2      	cmp	r2, r4
 8007264:	db00      	blt.n	8007268 <memp_init_pool+0x18>
}
 8007266:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8007268:	680d      	ldr	r5, [r1, #0]
 800726a:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800726c:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 800726e:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8007270:	3201      	adds	r2, #1
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007272:	442b      	add	r3, r5
 8007274:	e7f5      	b.n	8007262 <memp_init_pool+0x12>
	...

08007278 <memp_init>:
{
 8007278:	b538      	push	{r3, r4, r5, lr}
    memp_init_pool(memp_pools[i]);
 800727a:	4d05      	ldr	r5, [pc, #20]	; (8007290 <memp_init+0x18>)
{
 800727c:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 800727e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8007282:	3401      	adds	r4, #1
 8007284:	f7ff ffe4 	bl	8007250 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007288:	2c09      	cmp	r4, #9
 800728a:	d1f8      	bne.n	800727e <memp_init+0x6>
}
 800728c:	bd38      	pop	{r3, r4, r5, pc}
 800728e:	bf00      	nop
 8007290:	0800fc68 	.word	0x0800fc68

08007294 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007294:	2808      	cmp	r0, #8
{
 8007296:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007298:	d807      	bhi.n	80072aa <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800729a:	4b08      	ldr	r3, [pc, #32]	; (80072bc <memp_malloc+0x28>)
 800729c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80072a0:	6898      	ldr	r0, [r3, #8]
}
 80072a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 80072a6:	f7ff bfa5 	b.w	80071f4 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80072aa:	4b05      	ldr	r3, [pc, #20]	; (80072c0 <memp_malloc+0x2c>)
 80072ac:	4905      	ldr	r1, [pc, #20]	; (80072c4 <memp_malloc+0x30>)
 80072ae:	4806      	ldr	r0, [pc, #24]	; (80072c8 <memp_malloc+0x34>)
 80072b0:	f240 1287 	movw	r2, #391	; 0x187
 80072b4:	f006 fc5c 	bl	800db70 <iprintf>
}
 80072b8:	2000      	movs	r0, #0
 80072ba:	bd08      	pop	{r3, pc}
 80072bc:	0800fc68 	.word	0x0800fc68
 80072c0:	0800fb70 	.word	0x0800fb70
 80072c4:	0800fc4b 	.word	0x0800fc4b
 80072c8:	0800f20f 	.word	0x0800f20f

080072cc <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80072cc:	2808      	cmp	r0, #8
 80072ce:	d906      	bls.n	80072de <memp_free+0x12>
 80072d0:	4b07      	ldr	r3, [pc, #28]	; (80072f0 <memp_free+0x24>)
 80072d2:	4908      	ldr	r1, [pc, #32]	; (80072f4 <memp_free+0x28>)
 80072d4:	4808      	ldr	r0, [pc, #32]	; (80072f8 <memp_free+0x2c>)
 80072d6:	f240 12db 	movw	r2, #475	; 0x1db
 80072da:	f006 bc49 	b.w	800db70 <iprintf>

  if (mem == NULL) {
 80072de:	b129      	cbz	r1, 80072ec <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80072e0:	4b06      	ldr	r3, [pc, #24]	; (80072fc <memp_free+0x30>)
 80072e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80072e6:	3008      	adds	r0, #8
 80072e8:	f7ff bf9a 	b.w	8007220 <do_memp_free_pool.isra.1>
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	0800fb70 	.word	0x0800fb70
 80072f4:	0800fc30 	.word	0x0800fc30
 80072f8:	0800f20f 	.word	0x0800f20f
 80072fc:	0800fc68 	.word	0x0800fc68

08007300 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007300:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8007304:	071b      	lsls	r3, r3, #28
netif_issue_reports(struct netif* netif, u8_t report_type)
 8007306:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007308:	d502      	bpl.n	8007310 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 800730a:	3104      	adds	r1, #4
 800730c:	f7fe bdb2 	b.w	8005e74 <etharp_request>
 8007310:	4770      	bx	lr

08007312 <netif_init>:
{
 8007312:	4770      	bx	lr

08007314 <netif_set_ipaddr>:
{
 8007314:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007316:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8007318:	460c      	mov	r4, r1
 800731a:	b1b9      	cbz	r1, 800734c <netif_set_ipaddr+0x38>
 800731c:	680b      	ldr	r3, [r1, #0]
 800731e:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8007320:	9a01      	ldr	r2, [sp, #4]
 8007322:	686b      	ldr	r3, [r5, #4]
 8007324:	429a      	cmp	r2, r3
 8007326:	d00f      	beq.n	8007348 <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007328:	1d2e      	adds	r6, r5, #4
 800732a:	a901      	add	r1, sp, #4
 800732c:	4630      	mov	r0, r6
 800732e:	f001 fb09 	bl	8008944 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007332:	a901      	add	r1, sp, #4
 8007334:	4630      	mov	r0, r6
 8007336:	f003 fe61 	bl	800affc <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800733a:	b104      	cbz	r4, 800733e <netif_set_ipaddr+0x2a>
 800733c:	6824      	ldr	r4, [r4, #0]
 800733e:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007340:	b114      	cbz	r4, 8007348 <netif_set_ipaddr+0x34>
 8007342:	4628      	mov	r0, r5
 8007344:	f7ff ffdc 	bl	8007300 <netif_issue_reports.part.0>
}
 8007348:	b002      	add	sp, #8
 800734a:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800734c:	4b01      	ldr	r3, [pc, #4]	; (8007354 <netif_set_ipaddr+0x40>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	e7e5      	b.n	800731e <netif_set_ipaddr+0xa>
 8007352:	bf00      	nop
 8007354:	0800f7f0 	.word	0x0800f7f0

08007358 <netif_set_addr>:
{
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	4606      	mov	r6, r0
 800735c:	4615      	mov	r5, r2
 800735e:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8007360:	b109      	cbz	r1, 8007366 <netif_set_addr+0xe>
 8007362:	680b      	ldr	r3, [r1, #0]
 8007364:	b94b      	cbnz	r3, 800737a <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 8007366:	4630      	mov	r0, r6
 8007368:	f7ff ffd4 	bl	8007314 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800736c:	b105      	cbz	r5, 8007370 <netif_set_addr+0x18>
 800736e:	682d      	ldr	r5, [r5, #0]
 8007370:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007372:	b104      	cbz	r4, 8007376 <netif_set_addr+0x1e>
 8007374:	6824      	ldr	r4, [r4, #0]
 8007376:	60f4      	str	r4, [r6, #12]
 8007378:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800737a:	b102      	cbz	r2, 800737e <netif_set_addr+0x26>
 800737c:	6815      	ldr	r5, [r2, #0]
 800737e:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007380:	b104      	cbz	r4, 8007384 <netif_set_addr+0x2c>
 8007382:	6824      	ldr	r4, [r4, #0]
 8007384:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 8007386:	4630      	mov	r0, r6
}
 8007388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 800738c:	f7ff bfc2 	b.w	8007314 <netif_set_ipaddr>

08007390 <netif_add>:
{
 8007390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007394:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007396:	4604      	mov	r4, r0
 8007398:	460f      	mov	r7, r1
 800739a:	4690      	mov	r8, r2
 800739c:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 800739e:	b92e      	cbnz	r6, 80073ac <netif_add+0x1c>
 80073a0:	4b15      	ldr	r3, [pc, #84]	; (80073f8 <netif_add+0x68>)
 80073a2:	4916      	ldr	r1, [pc, #88]	; (80073fc <netif_add+0x6c>)
 80073a4:	4816      	ldr	r0, [pc, #88]	; (8007400 <netif_add+0x70>)
 80073a6:	22fb      	movs	r2, #251	; 0xfb
 80073a8:	f006 fbe2 	bl	800db70 <iprintf>
  netif->num = netif_num++;
 80073ac:	4a15      	ldr	r2, [pc, #84]	; (8007404 <netif_add+0x74>)
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 80073b4:	9b08      	ldr	r3, [sp, #32]
 80073b6:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 80073b8:	7813      	ldrb	r3, [r2, #0]
 80073ba:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80073be:	2500      	movs	r5, #0
  netif->num = netif_num++;
 80073c0:	1c59      	adds	r1, r3, #1
  netif->input = input;
 80073c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 80073c4:	7011      	strb	r1, [r2, #0]
  netif->input = input;
 80073c6:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80073c8:	4620      	mov	r0, r4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80073ca:	6065      	str	r5, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80073cc:	60a5      	str	r5, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80073ce:	60e5      	str	r5, [r4, #12]
  netif->flags = 0;
 80073d0:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
  netif_set_addr(netif, ipaddr, netmask, gw);
 80073d4:	464b      	mov	r3, r9
 80073d6:	4642      	mov	r2, r8
 80073d8:	4639      	mov	r1, r7
 80073da:	f7ff ffbd 	bl	8007358 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80073de:	4620      	mov	r0, r4
 80073e0:	47b0      	blx	r6
 80073e2:	b930      	cbnz	r0, 80073f2 <netif_add+0x62>
  netif->next = netif_list;
 80073e4:	4b08      	ldr	r3, [pc, #32]	; (8007408 <netif_add+0x78>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 80073ea:	601c      	str	r4, [r3, #0]
}
 80073ec:	4620      	mov	r0, r4
 80073ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 80073f2:	462c      	mov	r4, r5
 80073f4:	e7fa      	b.n	80073ec <netif_add+0x5c>
 80073f6:	bf00      	nop
 80073f8:	0800fc8c 	.word	0x0800fc8c
 80073fc:	0800fcbd 	.word	0x0800fcbd
 8007400:	0800f20f 	.word	0x0800f20f
 8007404:	20000d1c 	.word	0x20000d1c
 8007408:	20005044 	.word	0x20005044

0800740c <netif_set_default>:
  netif_default = netif;
 800740c:	4b01      	ldr	r3, [pc, #4]	; (8007414 <netif_set_default+0x8>)
 800740e:	6018      	str	r0, [r3, #0]
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	20005048 	.word	0x20005048

08007418 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007418:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 800741c:	07d1      	lsls	r1, r2, #31
 800741e:	d409      	bmi.n	8007434 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8007420:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007424:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 8007426:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800742a:	d503      	bpl.n	8007434 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800742c:	6843      	ldr	r3, [r0, #4]
 800742e:	b10b      	cbz	r3, 8007434 <netif_set_up+0x1c>
 8007430:	f7ff bf66 	b.w	8007300 <netif_issue_reports.part.0>
 8007434:	4770      	bx	lr

08007436 <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 8007436:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800743a:	07d9      	lsls	r1, r3, #31
 800743c:	d507      	bpl.n	800744e <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 800743e:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007442:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 8007444:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007448:	d501      	bpl.n	800744e <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 800744a:	f7fe bc61 	b.w	8005d10 <etharp_cleanup_netif>
 800744e:	4770      	bx	lr

08007450 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007450:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007452:	4604      	mov	r4, r0
 8007454:	2800      	cmp	r0, #0
 8007456:	d12f      	bne.n	80074b8 <pbuf_header_impl+0x68>
 8007458:	4b1f      	ldr	r3, [pc, #124]	; (80074d8 <pbuf_header_impl+0x88>)
 800745a:	4920      	ldr	r1, [pc, #128]	; (80074dc <pbuf_header_impl+0x8c>)
 800745c:	4820      	ldr	r0, [pc, #128]	; (80074e0 <pbuf_header_impl+0x90>)
 800745e:	f240 223f 	movw	r2, #575	; 0x23f
 8007462:	f006 fb85 	bl	800db70 <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8007466:	2000      	movs	r0, #0
 8007468:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)header_size_increment;
 800746a:	b288      	uxth	r0, r1
  type = p->type;
 800746c:	7b25      	ldrb	r5, [r4, #12]
  payload = p->payload;
 800746e:	6863      	ldr	r3, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8007470:	b10d      	cbz	r5, 8007476 <pbuf_header_impl+0x26>
 8007472:	2d03      	cmp	r5, #3
 8007474:	d106      	bne.n	8007484 <pbuf_header_impl+0x34>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8007476:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007478:	f104 0210 	add.w	r2, r4, #16
 800747c:	4293      	cmp	r3, r2
 800747e:	d20a      	bcs.n	8007496 <pbuf_header_impl+0x46>
      return 1;
 8007480:	2001      	movs	r0, #1
 8007482:	bd38      	pop	{r3, r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8007484:	3d01      	subs	r5, #1
 8007486:	2d01      	cmp	r5, #1
 8007488:	d811      	bhi.n	80074ae <pbuf_header_impl+0x5e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800748a:	2900      	cmp	r1, #0
 800748c:	da0c      	bge.n	80074a8 <pbuf_header_impl+0x58>
 800748e:	8962      	ldrh	r2, [r4, #10]
 8007490:	4282      	cmp	r2, r0
 8007492:	d3f5      	bcc.n	8007480 <pbuf_header_impl+0x30>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8007494:	1a5b      	subs	r3, r3, r1
  p->tot_len += header_size_increment;
 8007496:	8920      	ldrh	r0, [r4, #8]
    p->payload = (u8_t *)p->payload - header_size_increment;
 8007498:	6063      	str	r3, [r4, #4]
  p->len += header_size_increment;
 800749a:	8963      	ldrh	r3, [r4, #10]
 800749c:	b289      	uxth	r1, r1
 800749e:	440b      	add	r3, r1
  p->tot_len += header_size_increment;
 80074a0:	4401      	add	r1, r0
  p->len += header_size_increment;
 80074a2:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 80074a4:	8121      	strh	r1, [r4, #8]
 80074a6:	e7de      	b.n	8007466 <pbuf_header_impl+0x16>
    } else if ((header_size_increment > 0) && force) {
 80074a8:	2a00      	cmp	r2, #0
 80074aa:	d1f3      	bne.n	8007494 <pbuf_header_impl+0x44>
 80074ac:	e7e8      	b.n	8007480 <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 80074ae:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <pbuf_header_impl+0x88>)
 80074b0:	490c      	ldr	r1, [pc, #48]	; (80074e4 <pbuf_header_impl+0x94>)
 80074b2:	f240 2277 	movw	r2, #631	; 0x277
 80074b6:	e00b      	b.n	80074d0 <pbuf_header_impl+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 80074b8:	2900      	cmp	r1, #0
 80074ba:	d0d4      	beq.n	8007466 <pbuf_header_impl+0x16>
  if (header_size_increment < 0) {
 80074bc:	dad5      	bge.n	800746a <pbuf_header_impl+0x1a>
    increment_magnitude = (u16_t)-header_size_increment;
 80074be:	4248      	negs	r0, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80074c0:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 80074c2:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80074c4:	4283      	cmp	r3, r0
 80074c6:	d2d1      	bcs.n	800746c <pbuf_header_impl+0x1c>
 80074c8:	4b03      	ldr	r3, [pc, #12]	; (80074d8 <pbuf_header_impl+0x88>)
 80074ca:	4907      	ldr	r1, [pc, #28]	; (80074e8 <pbuf_header_impl+0x98>)
 80074cc:	f240 2247 	movw	r2, #583	; 0x247
    LWIP_ASSERT("bad pbuf type", 0);
 80074d0:	4803      	ldr	r0, [pc, #12]	; (80074e0 <pbuf_header_impl+0x90>)
 80074d2:	f006 fb4d 	bl	800db70 <iprintf>
 80074d6:	e7d3      	b.n	8007480 <pbuf_header_impl+0x30>
 80074d8:	0800ff39 	.word	0x0800ff39
 80074dc:	0800ffa3 	.word	0x0800ffa3
 80074e0:	0800f20f 	.word	0x0800f20f
 80074e4:	0800ff87 	.word	0x0800ff87
 80074e8:	0800ff69 	.word	0x0800ff69

080074ec <pbuf_free_ooseq>:
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80074ec:	4b08      	ldr	r3, [pc, #32]	; (8007510 <pbuf_free_ooseq+0x24>)
 80074ee:	2200      	movs	r2, #0
{
 80074f0:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80074f2:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80074f4:	4b07      	ldr	r3, [pc, #28]	; (8007514 <pbuf_free_ooseq+0x28>)
 80074f6:	681c      	ldr	r4, [r3, #0]
 80074f8:	b904      	cbnz	r4, 80074fc <pbuf_free_ooseq+0x10>
 80074fa:	bd10      	pop	{r4, pc}
    if (NULL != pcb->ooseq) {
 80074fc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80074fe:	b120      	cbz	r0, 800750a <pbuf_free_ooseq+0x1e>
      tcp_segs_free(pcb->ooseq);
 8007500:	f000 fc98 	bl	8007e34 <tcp_segs_free>
      pcb->ooseq = NULL;
 8007504:	2300      	movs	r3, #0
 8007506:	6723      	str	r3, [r4, #112]	; 0x70
      return;
 8007508:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800750a:	68e4      	ldr	r4, [r4, #12]
 800750c:	e7f4      	b.n	80074f8 <pbuf_free_ooseq+0xc>
 800750e:	bf00      	nop
 8007510:	2000504c 	.word	0x2000504c
 8007514:	20005054 	.word	0x20005054

08007518 <pbuf_alloced_custom>:
{
 8007518:	b570      	push	{r4, r5, r6, lr}
 800751a:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 800751c:	2804      	cmp	r0, #4
 800751e:	d81e      	bhi.n	800755e <pbuf_alloced_custom+0x46>
 8007520:	e8df f000 	tbb	[pc, r0]
 8007524:	1b280326 	.word	0x1b280326
 8007528:	1b          	.byte	0x1b
 8007529:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800752a:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800752c:	3403      	adds	r4, #3
 800752e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8007532:	f024 0403 	bic.w	r4, r4, #3
 8007536:	190e      	adds	r6, r1, r4
 8007538:	4286      	cmp	r6, r0
 800753a:	f04f 0000 	mov.w	r0, #0
 800753e:	d80b      	bhi.n	8007558 <pbuf_alloced_custom+0x40>
  p->pbuf.next = NULL;
 8007540:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 8007542:	b1cd      	cbz	r5, 8007578 <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007544:	442c      	add	r4, r5
 8007546:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8007548:	2002      	movs	r0, #2
  p->pbuf.type = type;
 800754a:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800754c:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800754e:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8007550:	8119      	strh	r1, [r3, #8]
 8007552:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8007554:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8007556:	4618      	mov	r0, r3
}
 8007558:	bd70      	pop	{r4, r5, r6, pc}
    offset = 0;
 800755a:	2400      	movs	r4, #0
    break;
 800755c:	e7e6      	b.n	800752c <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800755e:	4b07      	ldr	r3, [pc, #28]	; (800757c <pbuf_alloced_custom+0x64>)
 8007560:	4907      	ldr	r1, [pc, #28]	; (8007580 <pbuf_alloced_custom+0x68>)
 8007562:	4808      	ldr	r0, [pc, #32]	; (8007584 <pbuf_alloced_custom+0x6c>)
 8007564:	f240 12c5 	movw	r2, #453	; 0x1c5
 8007568:	f006 fb02 	bl	800db70 <iprintf>
    return NULL;
 800756c:	2000      	movs	r0, #0
 800756e:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8007570:	2436      	movs	r4, #54	; 0x36
 8007572:	e7db      	b.n	800752c <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8007574:	240e      	movs	r4, #14
 8007576:	e7d9      	b.n	800752c <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 8007578:	605d      	str	r5, [r3, #4]
 800757a:	e7e5      	b.n	8007548 <pbuf_alloced_custom+0x30>
 800757c:	0800ff39 	.word	0x0800ff39
 8007580:	0800fd7c 	.word	0x0800fd7c
 8007584:	0800f20f 	.word	0x0800f20f

08007588 <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 8007588:	2200      	movs	r2, #0
 800758a:	f7ff bf61 	b.w	8007450 <pbuf_header_impl>

0800758e <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 800758e:	2201      	movs	r2, #1
 8007590:	f7ff bf5e 	b.w	8007450 <pbuf_header_impl>

08007594 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007598:	4604      	mov	r4, r0
 800759a:	b950      	cbnz	r0, 80075b2 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 800759c:	4b28      	ldr	r3, [pc, #160]	; (8007640 <pbuf_free+0xac>)
 800759e:	4929      	ldr	r1, [pc, #164]	; (8007644 <pbuf_free+0xb0>)
 80075a0:	4829      	ldr	r0, [pc, #164]	; (8007648 <pbuf_free+0xb4>)
 80075a2:	f240 22d2 	movw	r2, #722	; 0x2d2
 80075a6:	f006 fae3 	bl	800db70 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80075aa:	4626      	mov	r6, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80075ac:	4630      	mov	r0, r6
 80075ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 80075b2:	7b03      	ldrb	r3, [r0, #12]
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d906      	bls.n	80075c6 <pbuf_free+0x32>
 80075b8:	4b21      	ldr	r3, [pc, #132]	; (8007640 <pbuf_free+0xac>)
 80075ba:	4924      	ldr	r1, [pc, #144]	; (800764c <pbuf_free+0xb8>)
 80075bc:	4822      	ldr	r0, [pc, #136]	; (8007648 <pbuf_free+0xb4>)
 80075be:	f240 22de 	movw	r2, #734	; 0x2de
 80075c2:	f006 fad5 	bl	800db70 <iprintf>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80075c6:	4f1e      	ldr	r7, [pc, #120]	; (8007640 <pbuf_free+0xac>)
 80075c8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8007654 <pbuf_free+0xc0>
 80075cc:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8007648 <pbuf_free+0xb4>
{
 80075d0:	2500      	movs	r5, #0
 80075d2:	b2ee      	uxtb	r6, r5
  while (p != NULL) {
 80075d4:	2c00      	cmp	r4, #0
 80075d6:	d0e9      	beq.n	80075ac <pbuf_free+0x18>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80075d8:	89e3      	ldrh	r3, [r4, #14]
 80075da:	b933      	cbnz	r3, 80075ea <pbuf_free+0x56>
 80075dc:	463b      	mov	r3, r7
 80075de:	f240 22eb 	movw	r2, #747	; 0x2eb
 80075e2:	4649      	mov	r1, r9
 80075e4:	4640      	mov	r0, r8
 80075e6:	f006 fac3 	bl	800db70 <iprintf>
    ref = --(p->ref);
 80075ea:	89e3      	ldrh	r3, [r4, #14]
 80075ec:	3b01      	subs	r3, #1
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	81e3      	strh	r3, [r4, #14]
    if (ref == 0) {
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1da      	bne.n	80075ac <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80075f6:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 80075f8:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80075fa:	079b      	lsls	r3, r3, #30
 80075fc:	d50e      	bpl.n	800761c <pbuf_free+0x88>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80075fe:	6923      	ldr	r3, [r4, #16]
 8007600:	b933      	cbnz	r3, 8007610 <pbuf_free+0x7c>
 8007602:	463b      	mov	r3, r7
 8007604:	f240 22f9 	movw	r2, #761	; 0x2f9
 8007608:	4911      	ldr	r1, [pc, #68]	; (8007650 <pbuf_free+0xbc>)
 800760a:	4640      	mov	r0, r8
 800760c:	f006 fab0 	bl	800db70 <iprintf>
        pc->custom_free_function(p);
 8007610:	6923      	ldr	r3, [r4, #16]
 8007612:	4620      	mov	r0, r4
 8007614:	4798      	blx	r3
 8007616:	3501      	adds	r5, #1
      p = q;
 8007618:	4634      	mov	r4, r6
 800761a:	e7da      	b.n	80075d2 <pbuf_free+0x3e>
      type = p->type;
 800761c:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 800761e:	2b03      	cmp	r3, #3
 8007620:	d104      	bne.n	800762c <pbuf_free+0x98>
          memp_free(MEMP_PBUF_POOL, p);
 8007622:	4621      	mov	r1, r4
 8007624:	2008      	movs	r0, #8
          memp_free(MEMP_PBUF, p);
 8007626:	f7ff fe51 	bl	80072cc <memp_free>
 800762a:	e7f4      	b.n	8007616 <pbuf_free+0x82>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800762c:	3b01      	subs	r3, #1
 800762e:	2b01      	cmp	r3, #1
 8007630:	d802      	bhi.n	8007638 <pbuf_free+0xa4>
          memp_free(MEMP_PBUF, p);
 8007632:	4621      	mov	r1, r4
 8007634:	2007      	movs	r0, #7
 8007636:	e7f6      	b.n	8007626 <pbuf_free+0x92>
          mem_free(p);
 8007638:	4620      	mov	r0, r4
 800763a:	f7ff fc29 	bl	8006e90 <mem_free>
 800763e:	e7ea      	b.n	8007616 <pbuf_free+0x82>
 8007640:	0800ff39 	.word	0x0800ff39
 8007644:	0800ffa3 	.word	0x0800ffa3
 8007648:	0800f20f 	.word	0x0800f20f
 800764c:	0800feed 	.word	0x0800feed
 8007650:	0800ff18 	.word	0x0800ff18
 8007654:	0800ff02 	.word	0x0800ff02

08007658 <pbuf_alloc>:
{
 8007658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	460e      	mov	r6, r1
 800765e:	4617      	mov	r7, r2
  switch (layer) {
 8007660:	2804      	cmp	r0, #4
 8007662:	d80e      	bhi.n	8007682 <pbuf_alloc+0x2a>
 8007664:	e8df f000 	tbb	[pc, r0]
 8007668:	0b170315 	.word	0x0b170315
 800766c:	0b          	.byte	0x0b
 800766d:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800766e:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 8007670:	2f03      	cmp	r7, #3
 8007672:	f200 80bc 	bhi.w	80077ee <pbuf_alloc+0x196>
 8007676:	e8df f007 	tbb	[pc, r7]
 800767a:	ad92      	.short	0xad92
 800767c:	10ad      	.short	0x10ad
    offset = 0;
 800767e:	2500      	movs	r5, #0
    break;
 8007680:	e7f6      	b.n	8007670 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8007682:	4b5d      	ldr	r3, [pc, #372]	; (80077f8 <pbuf_alloc+0x1a0>)
 8007684:	495d      	ldr	r1, [pc, #372]	; (80077fc <pbuf_alloc+0x1a4>)
 8007686:	f44f 728b 	mov.w	r2, #278	; 0x116
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800768a:	485d      	ldr	r0, [pc, #372]	; (8007800 <pbuf_alloc+0x1a8>)
 800768c:	f006 fa70 	bl	800db70 <iprintf>
 8007690:	e04b      	b.n	800772a <pbuf_alloc+0xd2>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8007692:	2536      	movs	r5, #54	; 0x36
 8007694:	e7ec      	b.n	8007670 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8007696:	250e      	movs	r5, #14
 8007698:	e7ea      	b.n	8007670 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800769a:	2008      	movs	r0, #8
 800769c:	f7ff fdfa 	bl	8007294 <memp_malloc>
    if (p == NULL) {
 80076a0:	4604      	mov	r4, r0
 80076a2:	b928      	cbnz	r0, 80076b0 <pbuf_alloc+0x58>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80076a4:	4b57      	ldr	r3, [pc, #348]	; (8007804 <pbuf_alloc+0x1ac>)
 80076a6:	2201      	movs	r2, #1
 80076a8:	701a      	strb	r2, [r3, #0]
}
 80076aa:	4620      	mov	r0, r4
 80076ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 80076b0:	2303      	movs	r3, #3
 80076b2:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 80076b4:	2300      	movs	r3, #0
 80076b6:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80076b8:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80076ba:	3503      	adds	r5, #3
 80076bc:	f025 0503 	bic.w	r5, r5, #3
 80076c0:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
 80076c4:	42b5      	cmp	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80076c6:	f103 0313 	add.w	r3, r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80076ca:	bf28      	it	cs
 80076cc:	4635      	movcs	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80076ce:	f023 0303 	bic.w	r3, r3, #3
 80076d2:	6043      	str	r3, [r0, #4]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80076d4:	f500 7718 	add.w	r7, r0, #608	; 0x260
 80076d8:	442b      	add	r3, r5
 80076da:	429f      	cmp	r7, r3
    p->tot_len = length;
 80076dc:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80076de:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80076e0:	d206      	bcs.n	80076f0 <pbuf_alloc+0x98>
 80076e2:	4b45      	ldr	r3, [pc, #276]	; (80077f8 <pbuf_alloc+0x1a0>)
 80076e4:	4948      	ldr	r1, [pc, #288]	; (8007808 <pbuf_alloc+0x1b0>)
 80076e6:	4846      	ldr	r0, [pc, #280]	; (8007800 <pbuf_alloc+0x1a8>)
 80076e8:	f44f 7298 	mov.w	r2, #304	; 0x130
 80076ec:	f006 fa40 	bl	800db70 <iprintf>
    p->ref = 1;
 80076f0:	2301      	movs	r3, #1
 80076f2:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 80076f4:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80076f6:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80077f8 <pbuf_alloc+0x1a0>
 80076fa:	f8df a118 	ldr.w	sl, [pc, #280]	; 8007814 <pbuf_alloc+0x1bc>
 80076fe:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007800 <pbuf_alloc+0x1a8>
    rem_len = length - p->len;
 8007702:	1af6      	subs	r6, r6, r3
    while (rem_len > 0) {
 8007704:	46a3      	mov	fp, r4
 8007706:	2e00      	cmp	r6, #0
 8007708:	dc04      	bgt.n	8007714 <pbuf_alloc+0xbc>
  p->ref = 1;
 800770a:	2301      	movs	r3, #1
 800770c:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	7363      	strb	r3, [r4, #13]
  return p;
 8007712:	e7ca      	b.n	80076aa <pbuf_alloc+0x52>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007714:	2008      	movs	r0, #8
 8007716:	f7ff fdbd 	bl	8007294 <memp_malloc>
      if (q == NULL) {
 800771a:	4605      	mov	r5, r0
 800771c:	b938      	cbnz	r0, 800772e <pbuf_alloc+0xd6>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800771e:	4b39      	ldr	r3, [pc, #228]	; (8007804 <pbuf_alloc+0x1ac>)
 8007720:	2201      	movs	r2, #1
        pbuf_free(p);
 8007722:	4620      	mov	r0, r4
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007724:	701a      	strb	r2, [r3, #0]
        pbuf_free(p);
 8007726:	f7ff ff35 	bl	8007594 <pbuf_free>
    return NULL;
 800772a:	2400      	movs	r4, #0
 800772c:	e7bd      	b.n	80076aa <pbuf_alloc+0x52>
      q->type = type;
 800772e:	2303      	movs	r3, #3
 8007730:	7303      	strb	r3, [r0, #12]
      q->flags = 0;
 8007732:	2300      	movs	r3, #0
 8007734:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8007736:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8007738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800773c:	429e      	cmp	r6, r3
      r->next = q;
 800773e:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8007742:	d106      	bne.n	8007752 <pbuf_alloc+0xfa>
 8007744:	4643      	mov	r3, r8
 8007746:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800774a:	4651      	mov	r1, sl
 800774c:	4648      	mov	r0, r9
 800774e:	f006 fa0f 	bl	800db70 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8007752:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8007754:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 8007758:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800775a:	bf28      	it	cs
 800775c:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8007760:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8007762:	f105 0310 	add.w	r3, r5, #16
 8007766:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007768:	079b      	lsls	r3, r3, #30
 800776a:	d006      	beq.n	800777a <pbuf_alloc+0x122>
 800776c:	4643      	mov	r3, r8
 800776e:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8007772:	4926      	ldr	r1, [pc, #152]	; (800780c <pbuf_alloc+0x1b4>)
 8007774:	4648      	mov	r0, r9
 8007776:	f006 f9fb 	bl	800db70 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800777a:	8962      	ldrh	r2, [r4, #10]
 800777c:	6863      	ldr	r3, [r4, #4]
 800777e:	4413      	add	r3, r2
 8007780:	429f      	cmp	r7, r3
 8007782:	d206      	bcs.n	8007792 <pbuf_alloc+0x13a>
 8007784:	4643      	mov	r3, r8
 8007786:	f240 1255 	movw	r2, #341	; 0x155
 800778a:	491f      	ldr	r1, [pc, #124]	; (8007808 <pbuf_alloc+0x1b0>)
 800778c:	4648      	mov	r0, r9
 800778e:	f006 f9ef 	bl	800db70 <iprintf>
      q->ref = 1;
 8007792:	2301      	movs	r3, #1
 8007794:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 8007796:	896b      	ldrh	r3, [r5, #10]
 8007798:	46ab      	mov	fp, r5
 800779a:	1af6      	subs	r6, r6, r3
 800779c:	e7b3      	b.n	8007706 <pbuf_alloc+0xae>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800779e:	f105 0013 	add.w	r0, r5, #19
 80077a2:	1cf3      	adds	r3, r6, #3
 80077a4:	f023 0303 	bic.w	r3, r3, #3
 80077a8:	f020 0003 	bic.w	r0, r0, #3
 80077ac:	4418      	add	r0, r3
 80077ae:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80077b0:	4298      	cmp	r0, r3
 80077b2:	d3ba      	bcc.n	800772a <pbuf_alloc+0xd2>
      p = (struct pbuf*)mem_malloc(alloc_len);
 80077b4:	f7ff fc8c 	bl	80070d0 <mem_malloc>
    if (p == NULL) {
 80077b8:	4604      	mov	r4, r0
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d0b5      	beq.n	800772a <pbuf_alloc+0xd2>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80077be:	4405      	add	r5, r0
 80077c0:	3513      	adds	r5, #19
    p->next = NULL;
 80077c2:	2300      	movs	r3, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80077c4:	f025 0503 	bic.w	r5, r5, #3
 80077c8:	6045      	str	r5, [r0, #4]
    p->len = p->tot_len = length;
 80077ca:	8106      	strh	r6, [r0, #8]
 80077cc:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 80077ce:	6003      	str	r3, [r0, #0]
    p->type = type;
 80077d0:	7303      	strb	r3, [r0, #12]
 80077d2:	e79a      	b.n	800770a <pbuf_alloc+0xb2>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80077d4:	2007      	movs	r0, #7
 80077d6:	f7ff fd5d 	bl	8007294 <memp_malloc>
    if (p == NULL) {
 80077da:	4604      	mov	r4, r0
 80077dc:	2800      	cmp	r0, #0
 80077de:	d0a4      	beq.n	800772a <pbuf_alloc+0xd2>
    p->payload = NULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 80077e4:	8106      	strh	r6, [r0, #8]
 80077e6:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 80077e8:	6003      	str	r3, [r0, #0]
    p->type = type;
 80077ea:	7307      	strb	r7, [r0, #12]
    break;
 80077ec:	e78d      	b.n	800770a <pbuf_alloc+0xb2>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80077ee:	4b02      	ldr	r3, [pc, #8]	; (80077f8 <pbuf_alloc+0x1a0>)
 80077f0:	4907      	ldr	r1, [pc, #28]	; (8007810 <pbuf_alloc+0x1b8>)
 80077f2:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80077f6:	e748      	b.n	800768a <pbuf_alloc+0x32>
 80077f8:	0800ff39 	.word	0x0800ff39
 80077fc:	0800fcd4 	.word	0x0800fcd4
 8007800:	0800f20f 	.word	0x0800f20f
 8007804:	2000504c 	.word	0x2000504c
 8007808:	0800fcef 	.word	0x0800fcef
 800780c:	0800fd34 	.word	0x0800fd34
 8007810:	0800fd61 	.word	0x0800fd61
 8007814:	0800fd20 	.word	0x0800fd20

08007818 <pbuf_realloc>:
{
 8007818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800781c:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800781e:	4604      	mov	r4, r0
 8007820:	b930      	cbnz	r0, 8007830 <pbuf_realloc+0x18>
 8007822:	4b2e      	ldr	r3, [pc, #184]	; (80078dc <pbuf_realloc+0xc4>)
 8007824:	492e      	ldr	r1, [pc, #184]	; (80078e0 <pbuf_realloc+0xc8>)
 8007826:	482f      	ldr	r0, [pc, #188]	; (80078e4 <pbuf_realloc+0xcc>)
 8007828:	f240 12f3 	movw	r2, #499	; 0x1f3
 800782c:	f006 f9a0 	bl	800db70 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8007830:	7b23      	ldrb	r3, [r4, #12]
 8007832:	2b03      	cmp	r3, #3
 8007834:	d906      	bls.n	8007844 <pbuf_realloc+0x2c>
 8007836:	4b29      	ldr	r3, [pc, #164]	; (80078dc <pbuf_realloc+0xc4>)
 8007838:	492b      	ldr	r1, [pc, #172]	; (80078e8 <pbuf_realloc+0xd0>)
 800783a:	482a      	ldr	r0, [pc, #168]	; (80078e4 <pbuf_realloc+0xcc>)
 800783c:	f240 12f7 	movw	r2, #503	; 0x1f7
 8007840:	f006 f996 	bl	800db70 <iprintf>
  if (new_len >= p->tot_len) {
 8007844:	8926      	ldrh	r6, [r4, #8]
 8007846:	42ae      	cmp	r6, r5
 8007848:	d945      	bls.n	80078d6 <pbuf_realloc+0xbe>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800784a:	4f24      	ldr	r7, [pc, #144]	; (80078dc <pbuf_realloc+0xc4>)
 800784c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80078f4 <pbuf_realloc+0xdc>
 8007850:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80078e4 <pbuf_realloc+0xcc>
  grow = new_len - p->tot_len;
 8007854:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 8007856:	8963      	ldrh	r3, [r4, #10]
 8007858:	429d      	cmp	r5, r3
 800785a:	d819      	bhi.n	8007890 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800785c:	7b22      	ldrb	r2, [r4, #12]
 800785e:	2a00      	cmp	r2, #0
 8007860:	d131      	bne.n	80078c6 <pbuf_realloc+0xae>
 8007862:	429d      	cmp	r5, r3
 8007864:	d02f      	beq.n	80078c6 <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007866:	7b63      	ldrb	r3, [r4, #13]
 8007868:	079b      	lsls	r3, r3, #30
 800786a:	d42c      	bmi.n	80078c6 <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800786c:	6861      	ldr	r1, [r4, #4]
 800786e:	1b09      	subs	r1, r1, r4
 8007870:	4429      	add	r1, r5
 8007872:	4620      	mov	r0, r4
 8007874:	b289      	uxth	r1, r1
 8007876:	f7ff fbb3 	bl	8006fe0 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800787a:	4604      	mov	r4, r0
 800787c:	bb18      	cbnz	r0, 80078c6 <pbuf_realloc+0xae>
 800787e:	4b17      	ldr	r3, [pc, #92]	; (80078dc <pbuf_realloc+0xc4>)
 8007880:	491a      	ldr	r1, [pc, #104]	; (80078ec <pbuf_realloc+0xd4>)
 8007882:	4818      	ldr	r0, [pc, #96]	; (80078e4 <pbuf_realloc+0xcc>)
 8007884:	f240 221d 	movw	r2, #541	; 0x21d
 8007888:	f006 f972 	bl	800db70 <iprintf>
  q->len = rem_len;
 800788c:	8164      	strh	r4, [r4, #10]
 800788e:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 8007890:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8007892:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007896:	429e      	cmp	r6, r3
    rem_len -= q->len;
 8007898:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800789a:	dd06      	ble.n	80078aa <pbuf_realloc+0x92>
 800789c:	463b      	mov	r3, r7
 800789e:	f240 220b 	movw	r2, #523	; 0x20b
 80078a2:	4649      	mov	r1, r9
 80078a4:	4640      	mov	r0, r8
 80078a6:	f006 f963 	bl	800db70 <iprintf>
    q->tot_len += (u16_t)grow;
 80078aa:	8923      	ldrh	r3, [r4, #8]
 80078ac:	4433      	add	r3, r6
 80078ae:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80078b0:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80078b2:	2c00      	cmp	r4, #0
 80078b4:	d1cf      	bne.n	8007856 <pbuf_realloc+0x3e>
 80078b6:	463b      	mov	r3, r7
 80078b8:	f240 220f 	movw	r2, #527	; 0x20f
 80078bc:	490c      	ldr	r1, [pc, #48]	; (80078f0 <pbuf_realloc+0xd8>)
 80078be:	4640      	mov	r0, r8
 80078c0:	f006 f956 	bl	800db70 <iprintf>
 80078c4:	e7c7      	b.n	8007856 <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 80078c6:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 80078c8:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80078ca:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80078cc:	b108      	cbz	r0, 80078d2 <pbuf_realloc+0xba>
    pbuf_free(q->next);
 80078ce:	f7ff fe61 	bl	8007594 <pbuf_free>
  q->next = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078da:	bf00      	nop
 80078dc:	0800ff39 	.word	0x0800ff39
 80078e0:	0800ff95 	.word	0x0800ff95
 80078e4:	0800f20f 	.word	0x0800f20f
 80078e8:	0800ffad 	.word	0x0800ffad
 80078ec:	0800fff1 	.word	0x0800fff1
 80078f0:	0800ffd9 	.word	0x0800ffd9
 80078f4:	0800ffc8 	.word	0x0800ffc8

080078f8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80078f8:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 80078fa:	2200      	movs	r2, #0
 80078fc:	b290      	uxth	r0, r2
 80078fe:	3201      	adds	r2, #1
 8007900:	b903      	cbnz	r3, 8007904 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8007902:	4770      	bx	lr
    p = p->next;
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	e7f9      	b.n	80078fc <pbuf_clen+0x4>

08007908 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8007908:	b158      	cbz	r0, 8007922 <pbuf_ref+0x1a>
    SYS_ARCH_INC(p->ref, 1);
 800790a:	89c3      	ldrh	r3, [r0, #14]
 800790c:	3301      	adds	r3, #1
 800790e:	b29b      	uxth	r3, r3
 8007910:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007912:	b933      	cbnz	r3, 8007922 <pbuf_ref+0x1a>
 8007914:	4b03      	ldr	r3, [pc, #12]	; (8007924 <pbuf_ref+0x1c>)
 8007916:	4904      	ldr	r1, [pc, #16]	; (8007928 <pbuf_ref+0x20>)
 8007918:	4804      	ldr	r0, [pc, #16]	; (800792c <pbuf_ref+0x24>)
 800791a:	f240 3239 	movw	r2, #825	; 0x339
 800791e:	f006 b927 	b.w	800db70 <iprintf>
 8007922:	4770      	bx	lr
 8007924:	0800ff39 	.word	0x0800ff39
 8007928:	0801000d 	.word	0x0801000d
 800792c:	0800f20f 	.word	0x0800f20f

08007930 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007930:	b570      	push	{r4, r5, r6, lr}
 8007932:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007934:	4604      	mov	r4, r0
 8007936:	b100      	cbz	r0, 800793a <pbuf_cat+0xa>
 8007938:	b969      	cbnz	r1, 8007956 <pbuf_cat+0x26>
 800793a:	4b15      	ldr	r3, [pc, #84]	; (8007990 <pbuf_cat+0x60>)
 800793c:	4915      	ldr	r1, [pc, #84]	; (8007994 <pbuf_cat+0x64>)
 800793e:	4816      	ldr	r0, [pc, #88]	; (8007998 <pbuf_cat+0x68>)
 8007940:	f240 324d 	movw	r2, #845	; 0x34d
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007948:	f006 b912 	b.w	800db70 <iprintf>
    p->tot_len += t->tot_len;
 800794c:	8923      	ldrh	r3, [r4, #8]
 800794e:	8929      	ldrh	r1, [r5, #8]
 8007950:	440b      	add	r3, r1
 8007952:	8123      	strh	r3, [r4, #8]
 8007954:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8007956:	6822      	ldr	r2, [r4, #0]
 8007958:	2a00      	cmp	r2, #0
 800795a:	d1f7      	bne.n	800794c <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800795c:	8922      	ldrh	r2, [r4, #8]
 800795e:	8963      	ldrh	r3, [r4, #10]
 8007960:	429a      	cmp	r2, r3
 8007962:	d006      	beq.n	8007972 <pbuf_cat+0x42>
 8007964:	4b0a      	ldr	r3, [pc, #40]	; (8007990 <pbuf_cat+0x60>)
 8007966:	490d      	ldr	r1, [pc, #52]	; (800799c <pbuf_cat+0x6c>)
 8007968:	480b      	ldr	r0, [pc, #44]	; (8007998 <pbuf_cat+0x68>)
 800796a:	f240 3255 	movw	r2, #853	; 0x355
 800796e:	f006 f8ff 	bl	800db70 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	b133      	cbz	r3, 8007984 <pbuf_cat+0x54>
 8007976:	4b06      	ldr	r3, [pc, #24]	; (8007990 <pbuf_cat+0x60>)
 8007978:	4909      	ldr	r1, [pc, #36]	; (80079a0 <pbuf_cat+0x70>)
 800797a:	4807      	ldr	r0, [pc, #28]	; (8007998 <pbuf_cat+0x68>)
 800797c:	f240 3256 	movw	r2, #854	; 0x356
 8007980:	f006 f8f6 	bl	800db70 <iprintf>
  p->tot_len += t->tot_len;
 8007984:	892a      	ldrh	r2, [r5, #8]
 8007986:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8007988:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 800798a:	4413      	add	r3, r2
 800798c:	8123      	strh	r3, [r4, #8]
  p->next = t;
 800798e:	bd70      	pop	{r4, r5, r6, pc}
 8007990:	0800ff39 	.word	0x0800ff39
 8007994:	0800fda0 	.word	0x0800fda0
 8007998:	0800f20f 	.word	0x0800f20f
 800799c:	0800fdd5 	.word	0x0800fdd5
 80079a0:	0800fe02 	.word	0x0800fe02

080079a4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80079a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a8:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80079aa:	4605      	mov	r5, r0
 80079ac:	b120      	cbz	r0, 80079b8 <pbuf_copy+0x14>
 80079ae:	b119      	cbz	r1, 80079b8 <pbuf_copy+0x14>
 80079b0:	8902      	ldrh	r2, [r0, #8]
 80079b2:	890b      	ldrh	r3, [r1, #8]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d20a      	bcs.n	80079ce <pbuf_copy+0x2a>
 80079b8:	4b38      	ldr	r3, [pc, #224]	; (8007a9c <pbuf_copy+0xf8>)
 80079ba:	4939      	ldr	r1, [pc, #228]	; (8007aa0 <pbuf_copy+0xfc>)
 80079bc:	f240 32bd 	movw	r2, #957	; 0x3bd
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80079c0:	4838      	ldr	r0, [pc, #224]	; (8007aa4 <pbuf_copy+0x100>)
 80079c2:	f006 f8d5 	bl	800db70 <iprintf>
 80079c6:	f06f 000f 	mvn.w	r0, #15
 80079ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ce:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80079d2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8007a9c <pbuf_copy+0xf8>
 80079d6:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8007ab4 <pbuf_copy+0x110>
 80079da:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8007aa4 <pbuf_copy+0x100>
 80079de:	465f      	mov	r7, fp
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80079e0:	896e      	ldrh	r6, [r5, #10]
 80079e2:	8963      	ldrh	r3, [r4, #10]
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80079e4:	6868      	ldr	r0, [r5, #4]
 80079e6:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80079e8:	1bf6      	subs	r6, r6, r7
 80079ea:	eba3 030b 	sub.w	r3, r3, fp
 80079ee:	429e      	cmp	r6, r3
      len = p_from->len - offset_from;
 80079f0:	bfac      	ite	ge
 80079f2:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 80079f4:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80079f6:	4632      	mov	r2, r6
 80079f8:	4459      	add	r1, fp
 80079fa:	4438      	add	r0, r7
 80079fc:	f005 fff9 	bl	800d9f2 <memcpy>
    offset_to += len;
 8007a00:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007a02:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 8007a04:	b2bf      	uxth	r7, r7
    offset_from += len;
 8007a06:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007a08:	42bb      	cmp	r3, r7
    offset_from += len;
 8007a0a:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007a0e:	d206      	bcs.n	8007a1e <pbuf_copy+0x7a>
 8007a10:	4643      	mov	r3, r8
 8007a12:	f240 32cd 	movw	r2, #973	; 0x3cd
 8007a16:	4651      	mov	r1, sl
 8007a18:	4648      	mov	r0, r9
 8007a1a:	f006 f8a9 	bl	800db70 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007a1e:	8963      	ldrh	r3, [r4, #10]
 8007a20:	455b      	cmp	r3, fp
 8007a22:	d206      	bcs.n	8007a32 <pbuf_copy+0x8e>
 8007a24:	4643      	mov	r3, r8
 8007a26:	f240 32ce 	movw	r2, #974	; 0x3ce
 8007a2a:	491f      	ldr	r1, [pc, #124]	; (8007aa8 <pbuf_copy+0x104>)
 8007a2c:	4648      	mov	r0, r9
 8007a2e:	f006 f89f 	bl	800db70 <iprintf>
    if (offset_from >= p_from->len) {
 8007a32:	8963      	ldrh	r3, [r4, #10]
 8007a34:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 8007a36:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8007a38:	bf9c      	itt	ls
 8007a3a:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8007a3c:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 8007a40:	42bb      	cmp	r3, r7
 8007a42:	d11e      	bne.n	8007a82 <pbuf_copy+0xde>
      p_to = p_to->next;
 8007a44:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007a46:	b9dd      	cbnz	r5, 8007a80 <pbuf_copy+0xdc>
 8007a48:	b1bc      	cbz	r4, 8007a7a <pbuf_copy+0xd6>
 8007a4a:	4b14      	ldr	r3, [pc, #80]	; (8007a9c <pbuf_copy+0xf8>)
 8007a4c:	4917      	ldr	r1, [pc, #92]	; (8007aac <pbuf_copy+0x108>)
 8007a4e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8007a52:	e7b5      	b.n	80079c0 <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007a54:	8962      	ldrh	r2, [r4, #10]
 8007a56:	8923      	ldrh	r3, [r4, #8]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d114      	bne.n	8007a86 <pbuf_copy+0xe2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	b193      	cbz	r3, 8007a86 <pbuf_copy+0xe2>
 8007a60:	4b0e      	ldr	r3, [pc, #56]	; (8007a9c <pbuf_copy+0xf8>)
 8007a62:	f240 32de 	movw	r2, #990	; 0x3de
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007a66:	4912      	ldr	r1, [pc, #72]	; (8007ab0 <pbuf_copy+0x10c>)
 8007a68:	480e      	ldr	r0, [pc, #56]	; (8007aa4 <pbuf_copy+0x100>)
 8007a6a:	f006 f881 	bl	800db70 <iprintf>
 8007a6e:	f06f 0005 	mvn.w	r0, #5
 8007a72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007a76:	2c00      	cmp	r4, #0
 8007a78:	d1b2      	bne.n	80079e0 <pbuf_copy+0x3c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 8007a80:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007a82:	2c00      	cmp	r4, #0
 8007a84:	d1e6      	bne.n	8007a54 <pbuf_copy+0xb0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007a86:	896a      	ldrh	r2, [r5, #10]
 8007a88:	892b      	ldrh	r3, [r5, #8]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d1f3      	bne.n	8007a76 <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007a8e:	682b      	ldr	r3, [r5, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d0f0      	beq.n	8007a76 <pbuf_copy+0xd2>
 8007a94:	4b01      	ldr	r3, [pc, #4]	; (8007a9c <pbuf_copy+0xf8>)
 8007a96:	f240 32e3 	movw	r2, #995	; 0x3e3
 8007a9a:	e7e4      	b.n	8007a66 <pbuf_copy+0xc2>
 8007a9c:	0800ff39 	.word	0x0800ff39
 8007aa0:	0800fe12 	.word	0x0800fe12
 8007aa4:	0800f20f 	.word	0x0800f20f
 8007aa8:	0800fe59 	.word	0x0800fe59
 8007aac:	0800fe74 	.word	0x0800fe74
 8007ab0:	0800fe81 	.word	0x0800fe81
 8007ab4:	0800fe42 	.word	0x0800fe42

08007ab8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007abc:	460f      	mov	r7, r1
 8007abe:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	b950      	cbnz	r0, 8007ada <pbuf_copy_partial+0x22>
 8007ac4:	4b1b      	ldr	r3, [pc, #108]	; (8007b34 <pbuf_copy_partial+0x7c>)
 8007ac6:	491c      	ldr	r1, [pc, #112]	; (8007b38 <pbuf_copy_partial+0x80>)
 8007ac8:	481c      	ldr	r0, [pc, #112]	; (8007b3c <pbuf_copy_partial+0x84>)
 8007aca:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007ace:	f006 f84f 	bl	800db70 <iprintf>
 8007ad2:	4635      	mov	r5, r6
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007ada:	b169      	cbz	r1, 8007af8 <pbuf_copy_partial+0x40>
 8007adc:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007ade:	f1b8 0f00 	cmp.w	r8, #0
 8007ae2:	d0f7      	beq.n	8007ad4 <pbuf_copy_partial+0x1c>
 8007ae4:	2e00      	cmp	r6, #0
 8007ae6:	d0f5      	beq.n	8007ad4 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8007ae8:	b17b      	cbz	r3, 8007b0a <pbuf_copy_partial+0x52>
 8007aea:	8971      	ldrh	r1, [r6, #10]
 8007aec:	428b      	cmp	r3, r1
 8007aee:	d30c      	bcc.n	8007b0a <pbuf_copy_partial+0x52>
      offset -= p->len;
 8007af0:	1a5b      	subs	r3, r3, r1
 8007af2:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007af4:	6836      	ldr	r6, [r6, #0]
 8007af6:	e7f2      	b.n	8007ade <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007af8:	4b0e      	ldr	r3, [pc, #56]	; (8007b34 <pbuf_copy_partial+0x7c>)
 8007afa:	4911      	ldr	r1, [pc, #68]	; (8007b40 <pbuf_copy_partial+0x88>)
 8007afc:	480f      	ldr	r0, [pc, #60]	; (8007b3c <pbuf_copy_partial+0x84>)
 8007afe:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007b02:	f006 f835 	bl	800db70 <iprintf>
 8007b06:	463d      	mov	r5, r7
 8007b08:	e7e4      	b.n	8007ad4 <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 8007b0a:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007b0c:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 8007b0e:	1ae4      	subs	r4, r4, r3
 8007b10:	b2a4      	uxth	r4, r4
 8007b12:	4544      	cmp	r4, r8
 8007b14:	bf28      	it	cs
 8007b16:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007b18:	4622      	mov	r2, r4
 8007b1a:	4419      	add	r1, r3
 8007b1c:	1978      	adds	r0, r7, r5
      copied_total += buf_copy_len;
 8007b1e:	4425      	add	r5, r4
      len -= buf_copy_len;
 8007b20:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007b24:	f005 ff65 	bl	800d9f2 <memcpy>
      copied_total += buf_copy_len;
 8007b28:	b2ad      	uxth	r5, r5
      len -= buf_copy_len;
 8007b2a:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e7e0      	b.n	8007af4 <pbuf_copy_partial+0x3c>
 8007b32:	bf00      	nop
 8007b34:	0800ff39 	.word	0x0800ff39
 8007b38:	0800feab 	.word	0x0800feab
 8007b3c:	0800f20f 	.word	0x0800f20f
 8007b40:	0800feca 	.word	0x0800feca

08007b44 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007b44:	4a11      	ldr	r2, [pc, #68]	; (8007b8c <tcp_new_port+0x48>)
 8007b46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b48:	8810      	ldrh	r0, [r2, #0]
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007b4a:	4e11      	ldr	r6, [pc, #68]	; (8007b90 <tcp_new_port+0x4c>)
{
 8007b4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8007b50:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8007b54:	42a8      	cmp	r0, r5
 8007b56:	bf1a      	itte	ne
 8007b58:	3001      	addne	r0, #1
 8007b5a:	b280      	uxthne	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007b5c:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
 8007b60:	2100      	movs	r1, #0
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007b62:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 8007b66:	6824      	ldr	r4, [r4, #0]
 8007b68:	b924      	cbnz	r4, 8007b74 <tcp_new_port+0x30>
 8007b6a:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007b6c:	2904      	cmp	r1, #4
 8007b6e:	d1f8      	bne.n	8007b62 <tcp_new_port+0x1e>
 8007b70:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8007b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pcb->local_port == tcp_port) {
 8007b74:	8ae7      	ldrh	r7, [r4, #22]
 8007b76:	4287      	cmp	r7, r0
 8007b78:	d106      	bne.n	8007b88 <tcp_new_port+0x44>
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e8      	bne.n	8007b54 <tcp_new_port+0x10>
 8007b82:	8010      	strh	r0, [r2, #0]
          return 0;
 8007b84:	4618      	mov	r0, r3
 8007b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007b88:	68e4      	ldr	r4, [r4, #12]
 8007b8a:	e7ed      	b.n	8007b68 <tcp_new_port+0x24>
 8007b8c:	200005b0 	.word	0x200005b0
 8007b90:	08010130 	.word	0x08010130

08007b94 <tcp_close_shutdown_fin>:
{
 8007b94:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007b96:	4604      	mov	r4, r0
 8007b98:	b930      	cbnz	r0, 8007ba8 <tcp_close_shutdown_fin+0x14>
 8007b9a:	4b13      	ldr	r3, [pc, #76]	; (8007be8 <tcp_close_shutdown_fin+0x54>)
 8007b9c:	4913      	ldr	r1, [pc, #76]	; (8007bec <tcp_close_shutdown_fin+0x58>)
 8007b9e:	4814      	ldr	r0, [pc, #80]	; (8007bf0 <tcp_close_shutdown_fin+0x5c>)
 8007ba0:	f240 124d 	movw	r2, #333	; 0x14d
 8007ba4:	f005 ffe4 	bl	800db70 <iprintf>
  switch (pcb->state) {
 8007ba8:	7d23      	ldrb	r3, [r4, #20]
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d003      	beq.n	8007bb6 <tcp_close_shutdown_fin+0x22>
 8007bae:	2b07      	cmp	r3, #7
 8007bb0:	d00c      	beq.n	8007bcc <tcp_close_shutdown_fin+0x38>
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d108      	bne.n	8007bc8 <tcp_close_shutdown_fin+0x34>
    err = tcp_send_fin(pcb);
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f002 fd7e 	bl	800a6b8 <tcp_send_fin>
    if (err == ERR_OK) {
 8007bbc:	b988      	cbnz	r0, 8007be2 <tcp_close_shutdown_fin+0x4e>
      pcb->state = FIN_WAIT_1;
 8007bbe:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 8007bc0:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f002 fdd0 	bl	800a768 <tcp_output>
 8007bc8:	2000      	movs	r0, #0
 8007bca:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f002 fd73 	bl	800a6b8 <tcp_send_fin>
    if (err == ERR_OK) {
 8007bd2:	b930      	cbnz	r0, 8007be2 <tcp_close_shutdown_fin+0x4e>
      pcb->state = LAST_ACK;
 8007bd4:	2309      	movs	r3, #9
 8007bd6:	e7f3      	b.n	8007bc0 <tcp_close_shutdown_fin+0x2c>
    pcb->flags |= TF_CLOSEPEND;
 8007bd8:	7ea3      	ldrb	r3, [r4, #26]
 8007bda:	f043 0308 	orr.w	r3, r3, #8
 8007bde:	76a3      	strb	r3, [r4, #26]
 8007be0:	e7f2      	b.n	8007bc8 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 8007be2:	1c43      	adds	r3, r0, #1
 8007be4:	d0f8      	beq.n	8007bd8 <tcp_close_shutdown_fin+0x44>
}
 8007be6:	bd10      	pop	{r4, pc}
 8007be8:	0801009e 	.word	0x0801009e
 8007bec:	080100cd 	.word	0x080100cd
 8007bf0:	0800f20f 	.word	0x0800f20f

08007bf4 <tcp_init>:
{
 8007bf4:	4770      	bx	lr
	...

08007bf8 <tcp_bind>:
{
 8007bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8007bfa:	4d1e      	ldr	r5, [pc, #120]	; (8007c74 <tcp_bind+0x7c>)
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8007bfc:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 8007bfe:	2900      	cmp	r1, #0
 8007c00:	bf18      	it	ne
 8007c02:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8007c04:	b140      	cbz	r0, 8007c18 <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007c06:	7d03      	ldrb	r3, [r0, #20]
 8007c08:	b14b      	cbz	r3, 8007c1e <tcp_bind+0x26>
 8007c0a:	4b1b      	ldr	r3, [pc, #108]	; (8007c78 <tcp_bind+0x80>)
 8007c0c:	491b      	ldr	r1, [pc, #108]	; (8007c7c <tcp_bind+0x84>)
 8007c0e:	481c      	ldr	r0, [pc, #112]	; (8007c80 <tcp_bind+0x88>)
 8007c10:	f44f 7211 	mov.w	r2, #580	; 0x244
 8007c14:	f005 ffac 	bl	800db70 <iprintf>
    return ERR_VAL;
 8007c18:	f06f 0005 	mvn.w	r0, #5
}
 8007c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 8007c1e:	b932      	cbnz	r2, 8007c2e <tcp_bind+0x36>
    port = tcp_new_port();
 8007c20:	f7ff ff90 	bl	8007b44 <tcp_new_port>
    if (port == 0) {
 8007c24:	4602      	mov	r2, r0
 8007c26:	b950      	cbnz	r0, 8007c3e <tcp_bind+0x46>
      return ERR_BUF;
 8007c28:	f06f 0001 	mvn.w	r0, #1
 8007c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007c2e:	4f15      	ldr	r7, [pc, #84]	; (8007c84 <tcp_bind+0x8c>)
 8007c30:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8007c34:	6808      	ldr	r0, [r1, #0]
 8007c36:	b970      	cbnz	r0, 8007c56 <tcp_bind+0x5e>
    for (i = 0; i < max_pcb_list; i++) {
 8007c38:	3301      	adds	r3, #1
 8007c3a:	2b04      	cmp	r3, #4
 8007c3c:	d1f8      	bne.n	8007c30 <tcp_bind+0x38>
  if (!ip_addr_isany(ipaddr)) {
 8007c3e:	682b      	ldr	r3, [r5, #0]
 8007c40:	b103      	cbz	r3, 8007c44 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007c42:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007c44:	4b10      	ldr	r3, [pc, #64]	; (8007c88 <tcp_bind+0x90>)
  pcb->local_port = port;
 8007c46:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	60e2      	str	r2, [r4, #12]
 8007c4c:	601c      	str	r4, [r3, #0]
 8007c4e:	f003 f8ab 	bl	800ada8 <tcp_timer_needed>
  return ERR_OK;
 8007c52:	2000      	movs	r0, #0
 8007c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 8007c56:	8ac1      	ldrh	r1, [r0, #22]
 8007c58:	4291      	cmp	r1, r2
 8007c5a:	d105      	bne.n	8007c68 <tcp_bind+0x70>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007c5c:	6806      	ldr	r6, [r0, #0]
 8007c5e:	b12e      	cbz	r6, 8007c6c <tcp_bind+0x74>
                ip_addr_isany(ipaddr) ||
 8007c60:	6829      	ldr	r1, [r5, #0]
 8007c62:	b119      	cbz	r1, 8007c6c <tcp_bind+0x74>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007c64:	428e      	cmp	r6, r1
 8007c66:	d001      	beq.n	8007c6c <tcp_bind+0x74>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007c68:	68c0      	ldr	r0, [r0, #12]
 8007c6a:	e7e4      	b.n	8007c36 <tcp_bind+0x3e>
              return ERR_USE;
 8007c6c:	f06f 0007 	mvn.w	r0, #7
 8007c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c72:	bf00      	nop
 8007c74:	0800f7f0 	.word	0x0800f7f0
 8007c78:	0801009e 	.word	0x0801009e
 8007c7c:	0801005d 	.word	0x0801005d
 8007c80:	0800f20f 	.word	0x0800f20f
 8007c84:	08010130 	.word	0x08010130
 8007c88:	20005060 	.word	0x20005060

08007c8c <tcp_listen_with_backlog_and_err>:
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007c8c:	7d03      	ldrb	r3, [r0, #20]
{
 8007c8e:	b570      	push	{r4, r5, r6, lr}
 8007c90:	4605      	mov	r5, r0
 8007c92:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007c94:	b16b      	cbz	r3, 8007cb2 <tcp_listen_with_backlog_and_err+0x26>
 8007c96:	4b23      	ldr	r3, [pc, #140]	; (8007d24 <tcp_listen_with_backlog_and_err+0x98>)
 8007c98:	4923      	ldr	r1, [pc, #140]	; (8007d28 <tcp_listen_with_backlog_and_err+0x9c>)
 8007c9a:	4824      	ldr	r0, [pc, #144]	; (8007d2c <tcp_listen_with_backlog_and_err+0xa0>)
 8007c9c:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8007ca0:	f005 ff66 	bl	800db70 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 8007ca4:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007ca6:	f06f 030e 	mvn.w	r3, #14
  if (err != NULL) {
 8007caa:	b106      	cbz	r6, 8007cae <tcp_listen_with_backlog_and_err+0x22>
    *err = res;
 8007cac:	7033      	strb	r3, [r6, #0]
}
 8007cae:	4620      	mov	r0, r4
 8007cb0:	bd70      	pop	{r4, r5, r6, pc}
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007cb2:	2002      	movs	r0, #2
 8007cb4:	f7ff faee 	bl	8007294 <memp_malloc>
  if (lpcb == NULL) {
 8007cb8:	4604      	mov	r4, r0
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	d02f      	beq.n	8007d1e <tcp_listen_with_backlog_and_err+0x92>
  lpcb->callback_arg = pcb->callback_arg;
 8007cbe:	692b      	ldr	r3, [r5, #16]
 8007cc0:	6103      	str	r3, [r0, #16]
  lpcb->state = LISTEN;
 8007cc2:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 8007cc4:	8aeb      	ldrh	r3, [r5, #22]
 8007cc6:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8007cc8:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 8007cca:	7d6a      	ldrb	r2, [r5, #21]
 8007ccc:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8007cce:	7a2a      	ldrb	r2, [r5, #8]
 8007cd0:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8007cd2:	7aaa      	ldrb	r2, [r5, #10]
 8007cd4:	7282      	strb	r2, [r0, #10]
  lpcb->tos = pcb->tos;
 8007cd6:	7a6a      	ldrb	r2, [r5, #9]
 8007cd8:	7242      	strb	r2, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007cda:	682a      	ldr	r2, [r5, #0]
 8007cdc:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8007cde:	b13b      	cbz	r3, 8007cf0 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007ce0:	4a13      	ldr	r2, [pc, #76]	; (8007d30 <tcp_listen_with_backlog_and_err+0xa4>)
 8007ce2:	6813      	ldr	r3, [r2, #0]
 8007ce4:	429d      	cmp	r5, r3
 8007ce6:	d112      	bne.n	8007d0e <tcp_listen_with_backlog_and_err+0x82>
 8007ce8:	68eb      	ldr	r3, [r5, #12]
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	2300      	movs	r3, #0
 8007cee:	60eb      	str	r3, [r5, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	f7ff faea 	bl	80072cc <memp_free>
  lpcb->accept = tcp_accept_null;
 8007cf8:	4b0e      	ldr	r3, [pc, #56]	; (8007d34 <tcp_listen_with_backlog_and_err+0xa8>)
 8007cfa:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007cfc:	4b0e      	ldr	r3, [pc, #56]	; (8007d38 <tcp_listen_with_backlog_and_err+0xac>)
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	60e2      	str	r2, [r4, #12]
 8007d02:	601c      	str	r4, [r3, #0]
 8007d04:	f003 f850 	bl	800ada8 <tcp_timer_needed>
  res = ERR_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e7ce      	b.n	8007caa <tcp_listen_with_backlog_and_err+0x1e>
 8007d0c:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0ec      	beq.n	8007cec <tcp_listen_with_backlog_and_err+0x60>
 8007d12:	68da      	ldr	r2, [r3, #12]
 8007d14:	4295      	cmp	r5, r2
 8007d16:	d1f9      	bne.n	8007d0c <tcp_listen_with_backlog_and_err+0x80>
 8007d18:	68ea      	ldr	r2, [r5, #12]
 8007d1a:	60da      	str	r2, [r3, #12]
 8007d1c:	e7e6      	b.n	8007cec <tcp_listen_with_backlog_and_err+0x60>
    res = ERR_MEM;
 8007d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d22:	e7c2      	b.n	8007caa <tcp_listen_with_backlog_and_err+0x1e>
 8007d24:	0801009e 	.word	0x0801009e
 8007d28:	0801010d 	.word	0x0801010d
 8007d2c:	0800f20f 	.word	0x0800f20f
 8007d30:	20005060 	.word	0x20005060
 8007d34:	0800876b 	.word	0x0800876b
 8007d38:	2000505c 	.word	0x2000505c

08007d3c <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f7ff bfa5 	b.w	8007c8c <tcp_listen_with_backlog_and_err>
	...

08007d44 <tcp_update_rcv_ann_wnd>:
{
 8007d44:	b538      	push	{r3, r4, r5, lr}
 8007d46:	4604      	mov	r4, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007d48:	8d01      	ldrh	r1, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007d4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007d4c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007d4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d50:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007d52:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007d56:	4428      	add	r0, r5
 8007d58:	bf94      	ite	ls
 8007d5a:	1a82      	subls	r2, r0, r2
 8007d5c:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 8007d60:	2a00      	cmp	r2, #0
 8007d62:	db01      	blt.n	8007d68 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007d64:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007d66:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007d68:	1aea      	subs	r2, r5, r3
 8007d6a:	2a00      	cmp	r2, #0
 8007d6c:	dd02      	ble.n	8007d74 <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 8007d6e:	2000      	movs	r0, #0
 8007d70:	8560      	strh	r0, [r4, #42]	; 0x2a
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007d74:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007d76:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8007d7a:	d306      	bcc.n	8007d8a <tcp_update_rcv_ann_wnd+0x46>
 8007d7c:	4b04      	ldr	r3, [pc, #16]	; (8007d90 <tcp_update_rcv_ann_wnd+0x4c>)
 8007d7e:	4905      	ldr	r1, [pc, #20]	; (8007d94 <tcp_update_rcv_ann_wnd+0x50>)
 8007d80:	4805      	ldr	r0, [pc, #20]	; (8007d98 <tcp_update_rcv_ann_wnd+0x54>)
 8007d82:	f44f 7242 	mov.w	r2, #776	; 0x308
 8007d86:	f005 fef3 	bl	800db70 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007d8a:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8007d8c:	2000      	movs	r0, #0
}
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	0801009e 	.word	0x0801009e
 8007d94:	08010394 	.word	0x08010394
 8007d98:	0800f20f 	.word	0x0800f20f

08007d9c <tcp_recved>:
{
 8007d9c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007d9e:	7d03      	ldrb	r3, [r0, #20]
 8007da0:	2b01      	cmp	r3, #1
{
 8007da2:	4604      	mov	r4, r0
 8007da4:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007da6:	d106      	bne.n	8007db6 <tcp_recved+0x1a>
 8007da8:	4b17      	ldr	r3, [pc, #92]	; (8007e08 <tcp_recved+0x6c>)
 8007daa:	4918      	ldr	r1, [pc, #96]	; (8007e0c <tcp_recved+0x70>)
 8007dac:	4818      	ldr	r0, [pc, #96]	; (8007e10 <tcp_recved+0x74>)
 8007dae:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007db2:	f005 fedd 	bl	800db70 <iprintf>
  pcb->rcv_wnd += len;
 8007db6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8007db8:	4429      	add	r1, r5
 8007dba:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8007dbc:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 8007dc0:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8007dc2:	d911      	bls.n	8007de8 <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007dc4:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8007dc8:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f7ff ffba 	bl	8007d44 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007dd0:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8007dd4:	db17      	blt.n	8007e06 <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 8007dd6:	7ea3      	ldrb	r3, [r4, #26]
 8007dd8:	f043 0302 	orr.w	r3, r3, #2
 8007ddc:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8007dde:	4620      	mov	r0, r4
}
 8007de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 8007de4:	f002 bcc0 	b.w	800a768 <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 8007de8:	2900      	cmp	r1, #0
 8007dea:	d1ee      	bne.n	8007dca <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8007dec:	7d23      	ldrb	r3, [r4, #20]
 8007dee:	2b07      	cmp	r3, #7
 8007df0:	d0e8      	beq.n	8007dc4 <tcp_recved+0x28>
 8007df2:	2b09      	cmp	r3, #9
 8007df4:	d0e6      	beq.n	8007dc4 <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8007df6:	4b04      	ldr	r3, [pc, #16]	; (8007e08 <tcp_recved+0x6c>)
 8007df8:	4906      	ldr	r1, [pc, #24]	; (8007e14 <tcp_recved+0x78>)
 8007dfa:	4805      	ldr	r0, [pc, #20]	; (8007e10 <tcp_recved+0x74>)
 8007dfc:	f240 322d 	movw	r2, #813	; 0x32d
 8007e00:	f005 feb6 	bl	800db70 <iprintf>
 8007e04:	e7e1      	b.n	8007dca <tcp_recved+0x2e>
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	0801009e 	.word	0x0801009e
 8007e0c:	080101d4 	.word	0x080101d4
 8007e10:	0800f20f 	.word	0x0800f20f
 8007e14:	080101fa 	.word	0x080101fa

08007e18 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007e18:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	b148      	cbz	r0, 8007e32 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8007e1e:	6840      	ldr	r0, [r0, #4]
 8007e20:	b108      	cbz	r0, 8007e26 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8007e22:	f7ff fbb7 	bl	8007594 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007e26:	4621      	mov	r1, r4
 8007e28:	2003      	movs	r0, #3
  }
}
 8007e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8007e2e:	f7ff ba4d 	b.w	80072cc <memp_free>
 8007e32:	bd10      	pop	{r4, pc}

08007e34 <tcp_segs_free>:
{
 8007e34:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8007e36:	b900      	cbnz	r0, 8007e3a <tcp_segs_free+0x6>
}
 8007e38:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8007e3a:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8007e3c:	f7ff ffec 	bl	8007e18 <tcp_seg_free>
    seg = next;
 8007e40:	4620      	mov	r0, r4
 8007e42:	e7f8      	b.n	8007e36 <tcp_segs_free+0x2>

08007e44 <tcp_setprio>:
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  pcb->prio = prio;
 8007e44:	7541      	strb	r1, [r0, #21]
 8007e46:	4770      	bx	lr

08007e48 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007e4c:	2003      	movs	r0, #3
 8007e4e:	f7ff fa21 	bl	8007294 <memp_malloc>
  if (cseg == NULL) {
 8007e52:	4605      	mov	r5, r0
 8007e54:	b160      	cbz	r0, 8007e70 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007e56:	4620      	mov	r0, r4
 8007e58:	462b      	mov	r3, r5
 8007e5a:	f104 0210 	add.w	r2, r4, #16
 8007e5e:	f850 1b04 	ldr.w	r1, [r0], #4
 8007e62:	f843 1b04 	str.w	r1, [r3], #4
 8007e66:	4290      	cmp	r0, r2
 8007e68:	d1f9      	bne.n	8007e5e <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 8007e6a:	6868      	ldr	r0, [r5, #4]
 8007e6c:	f7ff fd4c 	bl	8007908 <pbuf_ref>
  return cseg;
}
 8007e70:	4628      	mov	r0, r5
 8007e72:	bd38      	pop	{r3, r4, r5, pc}

08007e74 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007e74:	b100      	cbz	r0, 8007e78 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8007e76:	6101      	str	r1, [r0, #16]
 8007e78:	4770      	bx	lr
	...

08007e7c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8007e80:	4604      	mov	r4, r0
 8007e82:	b158      	cbz	r0, 8007e9c <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007e84:	7d03      	ldrb	r3, [r0, #20]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d106      	bne.n	8007e98 <tcp_recv+0x1c>
 8007e8a:	4b05      	ldr	r3, [pc, #20]	; (8007ea0 <tcp_recv+0x24>)
 8007e8c:	4905      	ldr	r1, [pc, #20]	; (8007ea4 <tcp_recv+0x28>)
 8007e8e:	4806      	ldr	r0, [pc, #24]	; (8007ea8 <tcp_recv+0x2c>)
 8007e90:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8007e94:	f005 fe6c 	bl	800db70 <iprintf>
    pcb->recv = recv;
 8007e98:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8007e9c:	bd38      	pop	{r3, r4, r5, pc}
 8007e9e:	bf00      	nop
 8007ea0:	0801009e 	.word	0x0801009e
 8007ea4:	080101ad 	.word	0x080101ad
 8007ea8:	0800f20f 	.word	0x0800f20f

08007eac <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	b150      	cbz	r0, 8007eca <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007eb4:	7d03      	ldrb	r3, [r0, #20]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d106      	bne.n	8007ec8 <tcp_sent+0x1c>
 8007eba:	4b04      	ldr	r3, [pc, #16]	; (8007ecc <tcp_sent+0x20>)
 8007ebc:	4904      	ldr	r1, [pc, #16]	; (8007ed0 <tcp_sent+0x24>)
 8007ebe:	4805      	ldr	r0, [pc, #20]	; (8007ed4 <tcp_sent+0x28>)
 8007ec0:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8007ec4:	f005 fe54 	bl	800db70 <iprintf>
    pcb->sent = sent;
 8007ec8:	67e5      	str	r5, [r4, #124]	; 0x7c
 8007eca:	bd38      	pop	{r3, r4, r5, pc}
 8007ecc:	0801009e 	.word	0x0801009e
 8007ed0:	0801021b 	.word	0x0801021b
 8007ed4:	0800f20f 	.word	0x0800f20f

08007ed8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8007edc:	4604      	mov	r4, r0
 8007ede:	b158      	cbz	r0, 8007ef8 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007ee0:	7d03      	ldrb	r3, [r0, #20]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d106      	bne.n	8007ef4 <tcp_err+0x1c>
 8007ee6:	4b05      	ldr	r3, [pc, #20]	; (8007efc <tcp_err+0x24>)
 8007ee8:	4905      	ldr	r1, [pc, #20]	; (8007f00 <tcp_err+0x28>)
 8007eea:	4806      	ldr	r0, [pc, #24]	; (8007f04 <tcp_err+0x2c>)
 8007eec:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8007ef0:	f005 fe3e 	bl	800db70 <iprintf>
    pcb->errf = err;
 8007ef4:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8007ef8:	bd38      	pop	{r3, r4, r5, pc}
 8007efa:	bf00      	nop
 8007efc:	0801009e 	.word	0x0801009e
 8007f00:	080100d9 	.word	0x080100d9
 8007f04:	0800f20f 	.word	0x0800f20f

08007f08 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007f08:	b118      	cbz	r0, 8007f12 <tcp_accept+0xa>
 8007f0a:	7d03      	ldrb	r3, [r0, #20]
 8007f0c:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 8007f0e:	bf08      	it	eq
 8007f10:	6181      	streq	r1, [r0, #24]
 8007f12:	4770      	bx	lr

08007f14 <tcp_poll>:
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007f14:	7d03      	ldrb	r3, [r0, #20]
 8007f16:	2b01      	cmp	r3, #1
{
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	460e      	mov	r6, r1
 8007f1e:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007f20:	d106      	bne.n	8007f30 <tcp_poll+0x1c>
 8007f22:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <tcp_poll+0x24>)
 8007f24:	4905      	ldr	r1, [pc, #20]	; (8007f3c <tcp_poll+0x28>)
 8007f26:	4806      	ldr	r0, [pc, #24]	; (8007f40 <tcp_poll+0x2c>)
 8007f28:	f240 7203 	movw	r2, #1795	; 0x703
 8007f2c:	f005 fe20 	bl	800db70 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007f30:	7725      	strb	r5, [r4, #28]
  pcb->poll = poll;
 8007f32:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 8007f36:	bd70      	pop	{r4, r5, r6, pc}
 8007f38:	0801009e 	.word	0x0801009e
 8007f3c:	0801018f 	.word	0x0801018f
 8007f40:	0800f20f 	.word	0x0800f20f

08007f44 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007f44:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8007f46:	7d03      	ldrb	r3, [r0, #20]
 8007f48:	2b01      	cmp	r3, #1
{
 8007f4a:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8007f4c:	d919      	bls.n	8007f82 <tcp_pcb_purge+0x3e>
 8007f4e:	2b0a      	cmp	r3, #10
 8007f50:	d017      	beq.n	8007f82 <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007f52:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8007f54:	b118      	cbz	r0, 8007f5e <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007f56:	f7ff fb1d 	bl	8007594 <pbuf_free>
      pcb->refused_data = NULL;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8007f5e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007f60:	f7ff ff68 	bl	8007e34 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007f64:	2500      	movs	r5, #0
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007f66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f6a:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007f6c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->ooseq = NULL;
 8007f6e:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 8007f70:	f7ff ff60 	bl	8007e34 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007f74:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007f76:	f7ff ff5d 	bl	8007e34 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007f7a:	66a5      	str	r5, [r4, #104]	; 0x68
 8007f7c:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007f7e:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8007f82:	bd38      	pop	{r3, r4, r5, pc}

08007f84 <tcp_slowtmr>:
{
 8007f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8007f88:	4eb0      	ldr	r6, [pc, #704]	; (800824c <tcp_slowtmr+0x2c8>)
      tcp_active_pcbs_changed = 0;
 8007f8a:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 8008280 <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 8007f8e:	6833      	ldr	r3, [r6, #0]
 8007f90:	3301      	adds	r3, #1
 8007f92:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 8007f94:	4bae      	ldr	r3, [pc, #696]	; (8008250 <tcp_slowtmr+0x2cc>)
 8007f96:	781a      	ldrb	r2, [r3, #0]
{
 8007f98:	b085      	sub	sp, #20
  ++tcp_timer_ctr;
 8007f9a:	3201      	adds	r2, #1
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	9302      	str	r3, [sp, #8]
  pcb = tcp_active_pcbs;
 8007fa0:	4fac      	ldr	r7, [pc, #688]	; (8008254 <tcp_slowtmr+0x2d0>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007fa2:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8008284 <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 8007fa6:	683c      	ldr	r4, [r7, #0]
  prev = NULL;
 8007fa8:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8007fac:	b96c      	cbnz	r4, 8007fca <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 8007fae:	4faa      	ldr	r7, [pc, #680]	; (8008258 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007fb0:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8008284 <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 8007fb4:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007fb6:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8008288 <tcp_slowtmr+0x304>
 8007fba:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8008260 <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 8007fbe:	2d00      	cmp	r5, #0
 8007fc0:	f040 8185 	bne.w	80082ce <tcp_slowtmr+0x34a>
}
 8007fc4:	b005      	add	sp, #20
 8007fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007fca:	7d23      	ldrb	r3, [r4, #20]
 8007fcc:	b933      	cbnz	r3, 8007fdc <tcp_slowtmr+0x58>
 8007fce:	464b      	mov	r3, r9
 8007fd0:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8007fd4:	49a1      	ldr	r1, [pc, #644]	; (800825c <tcp_slowtmr+0x2d8>)
 8007fd6:	48a2      	ldr	r0, [pc, #648]	; (8008260 <tcp_slowtmr+0x2dc>)
 8007fd8:	f005 fdca 	bl	800db70 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007fdc:	7d23      	ldrb	r3, [r4, #20]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d106      	bne.n	8007ff0 <tcp_slowtmr+0x6c>
 8007fe2:	464b      	mov	r3, r9
 8007fe4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8007fe8:	499e      	ldr	r1, [pc, #632]	; (8008264 <tcp_slowtmr+0x2e0>)
 8007fea:	489d      	ldr	r0, [pc, #628]	; (8008260 <tcp_slowtmr+0x2dc>)
 8007fec:	f005 fdc0 	bl	800db70 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007ff0:	7d23      	ldrb	r3, [r4, #20]
 8007ff2:	2b0a      	cmp	r3, #10
 8007ff4:	d106      	bne.n	8008004 <tcp_slowtmr+0x80>
 8007ff6:	464b      	mov	r3, r9
 8007ff8:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8007ffc:	499a      	ldr	r1, [pc, #616]	; (8008268 <tcp_slowtmr+0x2e4>)
 8007ffe:	4898      	ldr	r0, [pc, #608]	; (8008260 <tcp_slowtmr+0x2dc>)
 8008000:	f005 fdb6 	bl	800db70 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008004:	9b02      	ldr	r3, [sp, #8]
 8008006:	7f62      	ldrb	r2, [r4, #29]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d104      	bne.n	8008018 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 800800e:	68e5      	ldr	r5, [r4, #12]
 8008010:	4644      	mov	r4, r8
      continue;
 8008012:	46a0      	mov	r8, r4
 8008014:	462c      	mov	r4, r5
 8008016:	e7c9      	b.n	8007fac <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008018:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800801a:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800801c:	2902      	cmp	r1, #2
 800801e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8008022:	d102      	bne.n	800802a <tcp_slowtmr+0xa6>
 8008024:	2a05      	cmp	r2, #5
 8008026:	f200 80e6 	bhi.w	80081f6 <tcp_slowtmr+0x272>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800802a:	2a0b      	cmp	r2, #11
 800802c:	f200 80e3 	bhi.w	80081f6 <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 8008030:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8008034:	f1bb 0f00 	cmp.w	fp, #0
 8008038:	f000 80a6 	beq.w	8008188 <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800803c:	488b      	ldr	r0, [pc, #556]	; (800826c <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 800803e:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8008042:	4483      	add	fp, r0
 8008044:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 8008048:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 800804a:	bf84      	itt	hi
 800804c:	3301      	addhi	r3, #1
 800804e:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8008052:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8008056:	4293      	cmp	r3, r2
 8008058:	f080 8085 	bcs.w	8008166 <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 800805c:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 8008060:	7d23      	ldrb	r3, [r4, #20]
 8008062:	2b06      	cmp	r3, #6
 8008064:	d10b      	bne.n	800807e <tcp_slowtmr+0xfa>
      if (pcb->flags & TF_RXCLOSED) {
 8008066:	7ea2      	ldrb	r2, [r4, #26]
 8008068:	06d2      	lsls	r2, r2, #27
 800806a:	d508      	bpl.n	800807e <tcp_slowtmr+0xfa>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800806c:	6832      	ldr	r2, [r6, #0]
 800806e:	6a21      	ldr	r1, [r4, #32]
 8008070:	1a52      	subs	r2, r2, r1
 8008072:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8008074:	bf84      	itt	hi
 8008076:	f10b 0b01 	addhi.w	fp, fp, #1
 800807a:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800807e:	7a25      	ldrb	r5, [r4, #8]
 8008080:	f015 0508 	ands.w	r5, r5, #8
 8008084:	d019      	beq.n	80080ba <tcp_slowtmr+0x136>
 8008086:	2b04      	cmp	r3, #4
 8008088:	d002      	beq.n	8008090 <tcp_slowtmr+0x10c>
       ((pcb->state == ESTABLISHED) ||
 800808a:	2b07      	cmp	r3, #7
 800808c:	f040 80c8 	bne.w	8008220 <tcp_slowtmr+0x29c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008090:	6831      	ldr	r1, [r6, #0]
 8008092:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8008094:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008098:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800809a:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 800809e:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 80080a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080a6:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80080aa:	4291      	cmp	r1, r2
 80080ac:	f240 80a6 	bls.w	80081fc <tcp_slowtmr+0x278>
        ++pcb_remove;
 80080b0:	f10b 0b01 	add.w	fp, fp, #1
 80080b4:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 80080b8:	2501      	movs	r5, #1
    if (pcb->ooseq != NULL &&
 80080ba:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80080bc:	b168      	cbz	r0, 80080da <tcp_slowtmr+0x156>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80080be:	6833      	ldr	r3, [r6, #0]
 80080c0:	6a22      	ldr	r2, [r4, #32]
 80080c2:	1a9a      	subs	r2, r3, r2
 80080c4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80080c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 80080cc:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80080d0:	d303      	bcc.n	80080da <tcp_slowtmr+0x156>
      tcp_segs_free(pcb->ooseq);
 80080d2:	f7ff feaf 	bl	8007e34 <tcp_segs_free>
      pcb->ooseq = NULL;
 80080d6:	2300      	movs	r3, #0
 80080d8:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 80080da:	7d23      	ldrb	r3, [r4, #20]
 80080dc:	2b03      	cmp	r3, #3
 80080de:	f040 80a1 	bne.w	8008224 <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80080e2:	6833      	ldr	r3, [r6, #0]
 80080e4:	6a22      	ldr	r2, [r4, #32]
 80080e6:	1a9b      	subs	r3, r3, r2
 80080e8:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80080ea:	d803      	bhi.n	80080f4 <tcp_slowtmr+0x170>
    if (pcb_remove) {
 80080ec:	f1bb 0f00 	cmp.w	fp, #0
 80080f0:	f000 80cc 	beq.w	800828c <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 80080f4:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 80080f6:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 80080fa:	f7ff ff23 	bl	8007f44 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80080fe:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8008100:	f1b8 0f00 	cmp.w	r8, #0
 8008104:	f000 8096 	beq.w	8008234 <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008108:	429c      	cmp	r4, r3
 800810a:	d106      	bne.n	800811a <tcp_slowtmr+0x196>
 800810c:	464b      	mov	r3, r9
 800810e:	f240 4289 	movw	r2, #1161	; 0x489
 8008112:	4957      	ldr	r1, [pc, #348]	; (8008270 <tcp_slowtmr+0x2ec>)
 8008114:	4852      	ldr	r0, [pc, #328]	; (8008260 <tcp_slowtmr+0x2dc>)
 8008116:	f005 fd2b 	bl	800db70 <iprintf>
        prev->next = pcb->next;
 800811a:	68e3      	ldr	r3, [r4, #12]
 800811c:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 8008120:	b14d      	cbz	r5, 8008136 <tcp_slowtmr+0x1b2>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008122:	8b23      	ldrh	r3, [r4, #24]
 8008124:	9301      	str	r3, [sp, #4]
 8008126:	8ae3      	ldrh	r3, [r4, #22]
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	4622      	mov	r2, r4
 800812c:	1d23      	adds	r3, r4, #4
 800812e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008130:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008132:	f002 fc97 	bl	800aa64 <tcp_rst>
      err_arg = pcb->callback_arg;
 8008136:	6923      	ldr	r3, [r4, #16]
 8008138:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800813a:	4621      	mov	r1, r4
 800813c:	2001      	movs	r0, #1
      pcb = pcb->next;
 800813e:	68e5      	ldr	r5, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8008140:	f7ff f8c4 	bl	80072cc <memp_free>
      tcp_active_pcbs_changed = 0;
 8008144:	2200      	movs	r2, #0
 8008146:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800814a:	f1bb 0f00 	cmp.w	fp, #0
 800814e:	d004      	beq.n	800815a <tcp_slowtmr+0x1d6>
 8008150:	9b03      	ldr	r3, [sp, #12]
 8008152:	f06f 010c 	mvn.w	r1, #12
 8008156:	4618      	mov	r0, r3
 8008158:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 800815a:	f89a 3000 	ldrb.w	r3, [sl]
 800815e:	2b00      	cmp	r3, #0
 8008160:	f43f af56 	beq.w	8008010 <tcp_slowtmr+0x8c>
 8008164:	e71c      	b.n	8007fa0 <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8008166:	4620      	mov	r0, r4
 8008168:	f002 fd6c 	bl	800ac44 <tcp_zero_window_probe>
 800816c:	2800      	cmp	r0, #0
 800816e:	f47f af75 	bne.w	800805c <tcp_slowtmr+0xd8>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008172:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 8008176:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800817a:	2b06      	cmp	r3, #6
 800817c:	f63f af6e 	bhi.w	800805c <tcp_slowtmr+0xd8>
              pcb->persist_backoff++;
 8008180:	3301      	adds	r3, #1
 8008182:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8008186:	e769      	b.n	800805c <tcp_slowtmr+0xd8>
        if (pcb->rtime >= 0) {
 8008188:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800818c:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 800818e:	bfa4      	itt	ge
 8008190:	3301      	addge	r3, #1
 8008192:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8008194:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008196:	2b00      	cmp	r3, #0
 8008198:	f43f af60 	beq.w	800805c <tcp_slowtmr+0xd8>
 800819c:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 80081a0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80081a4:	4298      	cmp	r0, r3
 80081a6:	f6ff af59 	blt.w	800805c <tcp_slowtmr+0xd8>
          if (pcb->state != SYN_SENT) {
 80081aa:	2902      	cmp	r1, #2
 80081ac:	d00a      	beq.n	80081c4 <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80081ae:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 80081b2:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 80081b6:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 80081ba:	492e      	ldr	r1, [pc, #184]	; (8008274 <tcp_slowtmr+0x2f0>)
 80081bc:	5c8a      	ldrb	r2, [r1, r2]
 80081be:	4093      	lsls	r3, r2
 80081c0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 80081c4:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80081c6:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          pcb->rtime = 0;
 80081ca:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80081cc:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80081d0:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->cwnd = pcb->mss;
 80081d2:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 80081d6:	4293      	cmp	r3, r2
 80081d8:	bf28      	it	cs
 80081da:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80081dc:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 80081de:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80081e0:	b292      	uxth	r2, r2
 80081e2:	4293      	cmp	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 80081e4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 80081e8:	4620      	mov	r0, r4
            pcb->ssthresh = (pcb->mss << 1);
 80081ea:	bf38      	it	cc
 80081ec:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 80081f0:	f002 fc92 	bl	800ab18 <tcp_rexmit_rto>
 80081f4:	e734      	b.n	8008060 <tcp_slowtmr+0xdc>
      ++pcb_remove;
 80081f6:	f04f 0b01 	mov.w	fp, #1
 80081fa:	e731      	b.n	8008060 <tcp_slowtmr+0xdc>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80081fc:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8008200:	4a1d      	ldr	r2, [pc, #116]	; (8008278 <tcp_slowtmr+0x2f4>)
 8008202:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 8008206:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800820a:	4299      	cmp	r1, r3
 800820c:	d908      	bls.n	8008220 <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 800820e:	4620      	mov	r0, r4
 8008210:	f002 fcee 	bl	800abf0 <tcp_keepalive>
        if (err == ERR_OK) {
 8008214:	b920      	cbnz	r0, 8008220 <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 8008216:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800821a:	3301      	adds	r3, #1
 800821c:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8008220:	2500      	movs	r5, #0
 8008222:	e74a      	b.n	80080ba <tcp_slowtmr+0x136>
    if (pcb->state == LAST_ACK) {
 8008224:	2b09      	cmp	r3, #9
 8008226:	f47f af61 	bne.w	80080ec <tcp_slowtmr+0x168>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800822a:	6833      	ldr	r3, [r6, #0]
 800822c:	6a22      	ldr	r2, [r4, #32]
 800822e:	1a9b      	subs	r3, r3, r2
 8008230:	2bf0      	cmp	r3, #240	; 0xf0
 8008232:	e75a      	b.n	80080ea <tcp_slowtmr+0x166>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008234:	429c      	cmp	r4, r3
 8008236:	d006      	beq.n	8008246 <tcp_slowtmr+0x2c2>
 8008238:	464b      	mov	r3, r9
 800823a:	f240 428d 	movw	r2, #1165	; 0x48d
 800823e:	490f      	ldr	r1, [pc, #60]	; (800827c <tcp_slowtmr+0x2f8>)
 8008240:	4807      	ldr	r0, [pc, #28]	; (8008260 <tcp_slowtmr+0x2dc>)
 8008242:	f005 fc95 	bl	800db70 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008246:	68e3      	ldr	r3, [r4, #12]
 8008248:	603b      	str	r3, [r7, #0]
 800824a:	e769      	b.n	8008120 <tcp_slowtmr+0x19c>
 800824c:	20005058 	.word	0x20005058
 8008250:	20000d1e 	.word	0x20000d1e
 8008254:	20005054 	.word	0x20005054
 8008258:	20005064 	.word	0x20005064
 800825c:	08010242 	.word	0x08010242
 8008260:	0800f20f 	.word	0x0800f20f
 8008264:	0801026c 	.word	0x0801026c
 8008268:	08010296 	.word	0x08010296
 800826c:	08010188 	.word	0x08010188
 8008270:	080102c3 	.word	0x080102c3
 8008274:	08010050 	.word	0x08010050
 8008278:	000124f8 	.word	0x000124f8
 800827c:	080102ee 	.word	0x080102ee
 8008280:	20005050 	.word	0x20005050
 8008284:	0801009e 	.word	0x0801009e
 8008288:	08010318 	.word	0x08010318
      ++prev->polltmr;
 800828c:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800828e:	7f22      	ldrb	r2, [r4, #28]
      pcb = pcb->next;
 8008290:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8008292:	3301      	adds	r3, #1
 8008294:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8008296:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8008298:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800829a:	f63f aeba 	bhi.w	8008012 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 800829e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 80082a2:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 80082a6:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 80082aa:	b173      	cbz	r3, 80082ca <tcp_slowtmr+0x346>
 80082ac:	4621      	mov	r1, r4
 80082ae:	6920      	ldr	r0, [r4, #16]
 80082b0:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80082b2:	f89a 3000 	ldrb.w	r3, [sl]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f47f ae72 	bne.w	8007fa0 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 80082bc:	2800      	cmp	r0, #0
 80082be:	f47f aea8 	bne.w	8008012 <tcp_slowtmr+0x8e>
          tcp_output(prev);
 80082c2:	4620      	mov	r0, r4
 80082c4:	f002 fa50 	bl	800a768 <tcp_output>
 80082c8:	e6a3      	b.n	8008012 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 80082ca:	4658      	mov	r0, fp
 80082cc:	e7f1      	b.n	80082b2 <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80082ce:	7d2b      	ldrb	r3, [r5, #20]
 80082d0:	2b0a      	cmp	r3, #10
 80082d2:	d006      	beq.n	80082e2 <tcp_slowtmr+0x35e>
 80082d4:	4643      	mov	r3, r8
 80082d6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80082da:	4651      	mov	r1, sl
 80082dc:	4648      	mov	r0, r9
 80082de:	f005 fc47 	bl	800db70 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80082e2:	6833      	ldr	r3, [r6, #0]
 80082e4:	6a2a      	ldr	r2, [r5, #32]
 80082e6:	1a9b      	subs	r3, r3, r2
 80082e8:	2bf0      	cmp	r3, #240	; 0xf0
 80082ea:	d816      	bhi.n	800831a <tcp_slowtmr+0x396>
      pcb = pcb->next;
 80082ec:	462c      	mov	r4, r5
 80082ee:	68ed      	ldr	r5, [r5, #12]
 80082f0:	e665      	b.n	8007fbe <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	429d      	cmp	r5, r3
 80082f6:	d106      	bne.n	8008306 <tcp_slowtmr+0x382>
 80082f8:	4643      	mov	r3, r8
 80082fa:	f240 42cb 	movw	r2, #1227	; 0x4cb
 80082fe:	4910      	ldr	r1, [pc, #64]	; (8008340 <tcp_slowtmr+0x3bc>)
 8008300:	4648      	mov	r0, r9
 8008302:	f005 fc35 	bl	800db70 <iprintf>
        prev->next = pcb->next;
 8008306:	68eb      	ldr	r3, [r5, #12]
 8008308:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800830a:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800830e:	4629      	mov	r1, r5
 8008310:	2001      	movs	r0, #1
 8008312:	f7fe ffdb 	bl	80072cc <memp_free>
      pcb = pcb->next;
 8008316:	465d      	mov	r5, fp
 8008318:	e651      	b.n	8007fbe <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 800831a:	4628      	mov	r0, r5
 800831c:	f7ff fe12 	bl	8007f44 <tcp_pcb_purge>
      if (prev != NULL) {
 8008320:	2c00      	cmp	r4, #0
 8008322:	d1e6      	bne.n	80082f2 <tcp_slowtmr+0x36e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	429d      	cmp	r5, r3
 8008328:	d006      	beq.n	8008338 <tcp_slowtmr+0x3b4>
 800832a:	4643      	mov	r3, r8
 800832c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8008330:	4904      	ldr	r1, [pc, #16]	; (8008344 <tcp_slowtmr+0x3c0>)
 8008332:	4648      	mov	r0, r9
 8008334:	f005 fc1c 	bl	800db70 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008338:	68eb      	ldr	r3, [r5, #12]
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	e7e5      	b.n	800830a <tcp_slowtmr+0x386>
 800833e:	bf00      	nop
 8008340:	08010347 	.word	0x08010347
 8008344:	0801036e 	.word	0x0801036e

08008348 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8008348:	6803      	ldr	r3, [r0, #0]
 800834a:	428b      	cmp	r3, r1
{
 800834c:	b510      	push	{r4, lr}
 800834e:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8008350:	d137      	bne.n	80083c2 <tcp_pcb_remove+0x7a>
 8008352:	68cb      	ldr	r3, [r1, #12]
 8008354:	6003      	str	r3, [r0, #0]
 8008356:	2300      	movs	r3, #0
 8008358:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 800835a:	4620      	mov	r0, r4
 800835c:	f7ff fdf2 	bl	8007f44 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8008360:	7d23      	ldrb	r3, [r4, #20]
 8008362:	2b0a      	cmp	r3, #10
 8008364:	d00a      	beq.n	800837c <tcp_pcb_remove+0x34>
 8008366:	2b01      	cmp	r3, #1
 8008368:	d008      	beq.n	800837c <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 800836a:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 800836c:	07da      	lsls	r2, r3, #31
 800836e:	d505      	bpl.n	800837c <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 8008370:	f043 0302 	orr.w	r3, r3, #2
 8008374:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8008376:	4620      	mov	r0, r4
 8008378:	f002 f9f6 	bl	800a768 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800837c:	7d23      	ldrb	r3, [r4, #20]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d01a      	beq.n	80083b8 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008382:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008384:	b133      	cbz	r3, 8008394 <tcp_pcb_remove+0x4c>
 8008386:	4b13      	ldr	r3, [pc, #76]	; (80083d4 <tcp_pcb_remove+0x8c>)
 8008388:	4913      	ldr	r1, [pc, #76]	; (80083d8 <tcp_pcb_remove+0x90>)
 800838a:	4814      	ldr	r0, [pc, #80]	; (80083dc <tcp_pcb_remove+0x94>)
 800838c:	f240 7253 	movw	r2, #1875	; 0x753
 8008390:	f005 fbee 	bl	800db70 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008394:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008396:	b133      	cbz	r3, 80083a6 <tcp_pcb_remove+0x5e>
 8008398:	4b0e      	ldr	r3, [pc, #56]	; (80083d4 <tcp_pcb_remove+0x8c>)
 800839a:	4911      	ldr	r1, [pc, #68]	; (80083e0 <tcp_pcb_remove+0x98>)
 800839c:	480f      	ldr	r0, [pc, #60]	; (80083dc <tcp_pcb_remove+0x94>)
 800839e:	f240 7254 	movw	r2, #1876	; 0x754
 80083a2:	f005 fbe5 	bl	800db70 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80083a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80083a8:	b133      	cbz	r3, 80083b8 <tcp_pcb_remove+0x70>
 80083aa:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <tcp_pcb_remove+0x8c>)
 80083ac:	490d      	ldr	r1, [pc, #52]	; (80083e4 <tcp_pcb_remove+0x9c>)
 80083ae:	480b      	ldr	r0, [pc, #44]	; (80083dc <tcp_pcb_remove+0x94>)
 80083b0:	f240 7256 	movw	r2, #1878	; 0x756
 80083b4:	f005 fbdc 	bl	800db70 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80083b8:	2300      	movs	r3, #0
 80083ba:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80083bc:	82e3      	strh	r3, [r4, #22]
 80083be:	bd10      	pop	{r4, pc}
 80083c0:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d0c7      	beq.n	8008356 <tcp_pcb_remove+0xe>
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	4294      	cmp	r4, r2
 80083ca:	d1f9      	bne.n	80083c0 <tcp_pcb_remove+0x78>
 80083cc:	68e2      	ldr	r2, [r4, #12]
 80083ce:	60da      	str	r2, [r3, #12]
 80083d0:	e7c1      	b.n	8008356 <tcp_pcb_remove+0xe>
 80083d2:	bf00      	nop
 80083d4:	0801009e 	.word	0x0801009e
 80083d8:	08010140 	.word	0x08010140
 80083dc:	0800f20f 	.word	0x0800f20f
 80083e0:	08010158 	.word	0x08010158
 80083e4:	08010171 	.word	0x08010171

080083e8 <tcp_close_shutdown>:
{
 80083e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083ea:	7d03      	ldrb	r3, [r0, #20]
 80083ec:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80083ee:	2900      	cmp	r1, #0
 80083f0:	d049      	beq.n	8008486 <tcp_close_shutdown+0x9e>
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d001      	beq.n	80083fa <tcp_close_shutdown+0x12>
 80083f6:	2b07      	cmp	r3, #7
 80083f8:	d145      	bne.n	8008486 <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80083fa:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80083fc:	b91a      	cbnz	r2, 8008406 <tcp_close_shutdown+0x1e>
 80083fe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008400:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8008404:	d03f      	beq.n	8008486 <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008406:	7ea3      	ldrb	r3, [r4, #26]
 8008408:	06db      	lsls	r3, r3, #27
 800840a:	d406      	bmi.n	800841a <tcp_close_shutdown+0x32>
 800840c:	4b3f      	ldr	r3, [pc, #252]	; (800850c <tcp_close_shutdown+0x124>)
 800840e:	4940      	ldr	r1, [pc, #256]	; (8008510 <tcp_close_shutdown+0x128>)
 8008410:	4840      	ldr	r0, [pc, #256]	; (8008514 <tcp_close_shutdown+0x12c>)
 8008412:	f240 120f 	movw	r2, #271	; 0x10f
 8008416:	f005 fbab 	bl	800db70 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800841a:	8b23      	ldrh	r3, [r4, #24]
 800841c:	9301      	str	r3, [sp, #4]
 800841e:	8ae3      	ldrh	r3, [r4, #22]
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	4622      	mov	r2, r4
 8008424:	1d23      	adds	r3, r4, #4
 8008426:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008428:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800842a:	f002 fb1b 	bl	800aa64 <tcp_rst>
      tcp_pcb_purge(pcb);
 800842e:	4620      	mov	r0, r4
 8008430:	f7ff fd88 	bl	8007f44 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008434:	4a38      	ldr	r2, [pc, #224]	; (8008518 <tcp_close_shutdown+0x130>)
 8008436:	6813      	ldr	r3, [r2, #0]
 8008438:	429c      	cmp	r4, r3
 800843a:	d115      	bne.n	8008468 <tcp_close_shutdown+0x80>
 800843c:	68e3      	ldr	r3, [r4, #12]
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	2300      	movs	r3, #0
 8008442:	60e3      	str	r3, [r4, #12]
 8008444:	4b35      	ldr	r3, [pc, #212]	; (800851c <tcp_close_shutdown+0x134>)
 8008446:	2201      	movs	r2, #1
 8008448:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800844a:	7d23      	ldrb	r3, [r4, #20]
 800844c:	2b04      	cmp	r3, #4
 800844e:	d113      	bne.n	8008478 <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 8008450:	230a      	movs	r3, #10
 8008452:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008454:	4b32      	ldr	r3, [pc, #200]	; (8008520 <tcp_close_shutdown+0x138>)
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	60e2      	str	r2, [r4, #12]
 800845a:	601c      	str	r4, [r3, #0]
 800845c:	f002 fca4 	bl	800ada8 <tcp_timer_needed>
}
 8008460:	2000      	movs	r0, #0
 8008462:	b003      	add	sp, #12
 8008464:	bd30      	pop	{r4, r5, pc}
 8008466:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8008468:	2b00      	cmp	r3, #0
 800846a:	d0e9      	beq.n	8008440 <tcp_close_shutdown+0x58>
 800846c:	68da      	ldr	r2, [r3, #12]
 800846e:	4294      	cmp	r4, r2
 8008470:	d1f9      	bne.n	8008466 <tcp_close_shutdown+0x7e>
 8008472:	68e2      	ldr	r2, [r4, #12]
 8008474:	60da      	str	r2, [r3, #12]
 8008476:	e7e3      	b.n	8008440 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 8008478:	4b2a      	ldr	r3, [pc, #168]	; (8008524 <tcp_close_shutdown+0x13c>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	429c      	cmp	r4, r3
 800847e:	d117      	bne.n	80084b0 <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 8008480:	f001 fd06 	bl	8009e90 <tcp_trigger_input_pcb_close>
 8008484:	e7ec      	b.n	8008460 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 8008486:	2b01      	cmp	r3, #1
 8008488:	d020      	beq.n	80084cc <tcp_close_shutdown+0xe4>
 800848a:	d307      	bcc.n	800849c <tcp_close_shutdown+0xb4>
 800848c:	2b02      	cmp	r3, #2
 800848e:	d033      	beq.n	80084f8 <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 8008490:	4620      	mov	r0, r4
}
 8008492:	b003      	add	sp, #12
 8008494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 8008498:	f7ff bb7c 	b.w	8007b94 <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 800849c:	8ae3      	ldrh	r3, [r4, #22]
 800849e:	b13b      	cbz	r3, 80084b0 <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80084a0:	4a21      	ldr	r2, [pc, #132]	; (8008528 <tcp_close_shutdown+0x140>)
 80084a2:	6813      	ldr	r3, [r2, #0]
 80084a4:	429c      	cmp	r4, r3
 80084a6:	d109      	bne.n	80084bc <tcp_close_shutdown+0xd4>
 80084a8:	68e3      	ldr	r3, [r4, #12]
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	2300      	movs	r3, #0
 80084ae:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 80084b0:	4621      	mov	r1, r4
 80084b2:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 80084b4:	f7fe ff0a 	bl	80072cc <memp_free>
    break;
 80084b8:	e7d2      	b.n	8008460 <tcp_close_shutdown+0x78>
 80084ba:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d0f5      	beq.n	80084ac <tcp_close_shutdown+0xc4>
 80084c0:	68da      	ldr	r2, [r3, #12]
 80084c2:	4294      	cmp	r4, r2
 80084c4:	d1f9      	bne.n	80084ba <tcp_close_shutdown+0xd2>
 80084c6:	68e2      	ldr	r2, [r4, #12]
 80084c8:	60da      	str	r2, [r3, #12]
 80084ca:	e7ef      	b.n	80084ac <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80084cc:	4917      	ldr	r1, [pc, #92]	; (800852c <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 80084ce:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80084d0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80084d4:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80084d6:	b94a      	cbnz	r2, 80084ec <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80084d8:	3301      	adds	r3, #1
 80084da:	2b04      	cmp	r3, #4
 80084dc:	d1f8      	bne.n	80084d0 <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80084de:	4621      	mov	r1, r4
 80084e0:	4813      	ldr	r0, [pc, #76]	; (8008530 <tcp_close_shutdown+0x148>)
 80084e2:	f7ff ff31 	bl	8008348 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80084e6:	4621      	mov	r1, r4
 80084e8:	2002      	movs	r0, #2
 80084ea:	e7e3      	b.n	80084b4 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 80084ec:	6f95      	ldr	r5, [r2, #120]	; 0x78
 80084ee:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 80084f0:	bf08      	it	eq
 80084f2:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80084f4:	68d2      	ldr	r2, [r2, #12]
 80084f6:	e7ee      	b.n	80084d6 <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80084f8:	4621      	mov	r1, r4
 80084fa:	4807      	ldr	r0, [pc, #28]	; (8008518 <tcp_close_shutdown+0x130>)
 80084fc:	f7ff ff24 	bl	8008348 <tcp_pcb_remove>
 8008500:	4b06      	ldr	r3, [pc, #24]	; (800851c <tcp_close_shutdown+0x134>)
 8008502:	2001      	movs	r0, #1
 8008504:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8008506:	4621      	mov	r1, r4
 8008508:	e7d4      	b.n	80084b4 <tcp_close_shutdown+0xcc>
 800850a:	bf00      	nop
 800850c:	0801009e 	.word	0x0801009e
 8008510:	08010085 	.word	0x08010085
 8008514:	0800f20f 	.word	0x0800f20f
 8008518:	20005054 	.word	0x20005054
 800851c:	20005050 	.word	0x20005050
 8008520:	20005064 	.word	0x20005064
 8008524:	20005068 	.word	0x20005068
 8008528:	20005060 	.word	0x20005060
 800852c:	08010130 	.word	0x08010130
 8008530:	2000505c 	.word	0x2000505c

08008534 <tcp_close>:
  if (pcb->state != LISTEN) {
 8008534:	7d03      	ldrb	r3, [r0, #20]
 8008536:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 8008538:	bf1e      	ittt	ne
 800853a:	7e83      	ldrbne	r3, [r0, #26]
 800853c:	f043 0310 	orrne.w	r3, r3, #16
 8008540:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8008542:	2101      	movs	r1, #1
 8008544:	f7ff bf50 	b.w	80083e8 <tcp_close_shutdown>

08008548 <tcp_recv_null>:
{
 8008548:	b510      	push	{r4, lr}
 800854a:	4608      	mov	r0, r1
  if (p != NULL) {
 800854c:	4614      	mov	r4, r2
 800854e:	b13a      	cbz	r2, 8008560 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8008550:	8911      	ldrh	r1, [r2, #8]
 8008552:	f7ff fc23 	bl	8007d9c <tcp_recved>
    pbuf_free(p);
 8008556:	4620      	mov	r0, r4
 8008558:	f7ff f81c 	bl	8007594 <pbuf_free>
}
 800855c:	2000      	movs	r0, #0
 800855e:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1fb      	bne.n	800855c <tcp_recv_null+0x14>
}
 8008564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8008568:	f7ff bfe4 	b.w	8008534 <tcp_close>

0800856c <tcp_process_refused_data>:
{
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 800856e:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008570:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 8008574:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8008576:	2300      	movs	r3, #0
{
 8008578:	4604      	mov	r4, r0
    pcb->refused_data = NULL;
 800857a:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800857c:	b1dd      	cbz	r5, 80085b6 <tcp_process_refused_data+0x4a>
 800857e:	4601      	mov	r1, r0
 8008580:	4632      	mov	r2, r6
 8008582:	6900      	ldr	r0, [r0, #16]
 8008584:	47a8      	blx	r5
 8008586:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8008588:	b9e0      	cbnz	r0, 80085c4 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800858a:	06bb      	lsls	r3, r7, #26
 800858c:	d511      	bpl.n	80085b2 <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800858e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8008590:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008594:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8008598:	bf1c      	itt	ne
 800859a:	3301      	addne	r3, #1
 800859c:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800859e:	b146      	cbz	r6, 80085b2 <tcp_process_refused_data+0x46>
 80085a0:	2300      	movs	r3, #0
 80085a2:	461a      	mov	r2, r3
 80085a4:	4621      	mov	r1, r4
 80085a6:	6920      	ldr	r0, [r4, #16]
 80085a8:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 80085aa:	300d      	adds	r0, #13
 80085ac:	d101      	bne.n	80085b2 <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 80085ae:	f06f 050c 	mvn.w	r5, #12
}
 80085b2:	4628      	mov	r0, r5
 80085b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80085b6:	4601      	mov	r1, r0
 80085b8:	462b      	mov	r3, r5
 80085ba:	4632      	mov	r2, r6
 80085bc:	4628      	mov	r0, r5
 80085be:	f7ff ffc3 	bl	8008548 <tcp_recv_null>
 80085c2:	e7e0      	b.n	8008586 <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 80085c4:	f110 050d 	adds.w	r5, r0, #13
 80085c8:	d0f1      	beq.n	80085ae <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 80085ca:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 80085cc:	f06f 0504 	mvn.w	r5, #4
 80085d0:	e7ef      	b.n	80085b2 <tcp_process_refused_data+0x46>
	...

080085d4 <tcp_fasttmr>:
{
 80085d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 80085d8:	4d1b      	ldr	r5, [pc, #108]	; (8008648 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 80085da:	4f1c      	ldr	r7, [pc, #112]	; (800864c <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 80085dc:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 80085de:	4e1c      	ldr	r6, [pc, #112]	; (8008650 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 80085e0:	3301      	adds	r3, #1
 80085e2:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 80085e4:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 80085e6:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 80085ea:	b90c      	cbnz	r4, 80085f0 <tcp_fasttmr+0x1c>
}
 80085ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 80085f0:	782b      	ldrb	r3, [r5, #0]
 80085f2:	7f62      	ldrb	r2, [r4, #29]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d024      	beq.n	8008642 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 80085f8:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 80085fa:	7ea3      	ldrb	r3, [r4, #26]
 80085fc:	07d9      	lsls	r1, r3, #31
 80085fe:	d509      	bpl.n	8008614 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8008600:	f043 0302 	orr.w	r3, r3, #2
 8008604:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8008606:	4620      	mov	r0, r4
 8008608:	f002 f8ae 	bl	800a768 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800860c:	7ea3      	ldrb	r3, [r4, #26]
 800860e:	f023 0303 	bic.w	r3, r3, #3
 8008612:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8008614:	7ea3      	ldrb	r3, [r4, #26]
 8008616:	071a      	lsls	r2, r3, #28
 8008618:	d505      	bpl.n	8008626 <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 800861a:	f023 0308 	bic.w	r3, r3, #8
 800861e:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8008620:	4620      	mov	r0, r4
 8008622:	f7ff fab7 	bl	8007b94 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8008626:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8008628:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800862c:	b13b      	cbz	r3, 800863e <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800862e:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8008630:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8008634:	f7ff ff9a 	bl	800856c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008638:	7833      	ldrb	r3, [r6, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1d2      	bne.n	80085e4 <tcp_fasttmr+0x10>
{
 800863e:	464c      	mov	r4, r9
 8008640:	e7d3      	b.n	80085ea <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8008642:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8008646:	e7fa      	b.n	800863e <tcp_fasttmr+0x6a>
 8008648:	20000d1e 	.word	0x20000d1e
 800864c:	20005054 	.word	0x20005054
 8008650:	20005050 	.word	0x20005050

08008654 <tcp_tmr>:
{
 8008654:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8008656:	f7ff ffbd 	bl	80085d4 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800865a:	4a06      	ldr	r2, [pc, #24]	; (8008674 <tcp_tmr+0x20>)
 800865c:	7813      	ldrb	r3, [r2, #0]
 800865e:	3301      	adds	r3, #1
 8008660:	b2db      	uxtb	r3, r3
 8008662:	7013      	strb	r3, [r2, #0]
 8008664:	07db      	lsls	r3, r3, #31
 8008666:	d503      	bpl.n	8008670 <tcp_tmr+0x1c>
}
 8008668:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800866c:	f7ff bc8a 	b.w	8007f84 <tcp_slowtmr>
 8008670:	bd08      	pop	{r3, pc}
 8008672:	bf00      	nop
 8008674:	20000d1d 	.word	0x20000d1d

08008678 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008678:	7d03      	ldrb	r3, [r0, #20]
 800867a:	2b01      	cmp	r3, #1
{
 800867c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008680:	4604      	mov	r4, r0
 8008682:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008684:	d106      	bne.n	8008694 <tcp_abandon+0x1c>
 8008686:	4b30      	ldr	r3, [pc, #192]	; (8008748 <tcp_abandon+0xd0>)
 8008688:	4930      	ldr	r1, [pc, #192]	; (800874c <tcp_abandon+0xd4>)
 800868a:	4831      	ldr	r0, [pc, #196]	; (8008750 <tcp_abandon+0xd8>)
 800868c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008690:	f005 fa6e 	bl	800db70 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8008694:	7d23      	ldrb	r3, [r4, #20]
 8008696:	2b0a      	cmp	r3, #10
 8008698:	d10a      	bne.n	80086b0 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800869a:	4621      	mov	r1, r4
 800869c:	482d      	ldr	r0, [pc, #180]	; (8008754 <tcp_abandon+0xdc>)
 800869e:	f7ff fe53 	bl	8008348 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80086a2:	4621      	mov	r1, r4
 80086a4:	2001      	movs	r0, #1
}
 80086a6:	b002      	add	sp, #8
 80086a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 80086ac:	f7fe be0e 	b.w	80072cc <memp_free>
    seqno = pcb->snd_nxt;
 80086b0:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 80086b4:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 80086b8:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 80086bc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80086c0:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 80086c2:	b99b      	cbnz	r3, 80086ec <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 80086c4:	b13d      	cbz	r5, 80086d6 <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80086c6:	4a24      	ldr	r2, [pc, #144]	; (8008758 <tcp_abandon+0xe0>)
 80086c8:	6813      	ldr	r3, [r2, #0]
 80086ca:	429c      	cmp	r4, r3
 80086cc:	d106      	bne.n	80086dc <tcp_abandon+0x64>
 80086ce:	68e3      	ldr	r3, [r4, #12]
 80086d0:	6013      	str	r3, [r2, #0]
 80086d2:	2500      	movs	r5, #0
 80086d4:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 80086d6:	462e      	mov	r6, r5
 80086d8:	e00f      	b.n	80086fa <tcp_abandon+0x82>
 80086da:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0f8      	beq.n	80086d2 <tcp_abandon+0x5a>
 80086e0:	68da      	ldr	r2, [r3, #12]
 80086e2:	4294      	cmp	r4, r2
 80086e4:	d1f9      	bne.n	80086da <tcp_abandon+0x62>
 80086e6:	68e2      	ldr	r2, [r4, #12]
 80086e8:	60da      	str	r2, [r3, #12]
 80086ea:	e7f2      	b.n	80086d2 <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80086ec:	4621      	mov	r1, r4
 80086ee:	481b      	ldr	r0, [pc, #108]	; (800875c <tcp_abandon+0xe4>)
 80086f0:	f7ff fe2a 	bl	8008348 <tcp_pcb_remove>
 80086f4:	4b1a      	ldr	r3, [pc, #104]	; (8008760 <tcp_abandon+0xe8>)
 80086f6:	2201      	movs	r2, #1
 80086f8:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80086fa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80086fc:	b108      	cbz	r0, 8008702 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 80086fe:	f7ff fb99 	bl	8007e34 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8008702:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008704:	b108      	cbz	r0, 800870a <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 8008706:	f7ff fb95 	bl	8007e34 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800870a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800870c:	b108      	cbz	r0, 8008712 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 800870e:	f7ff fb91 	bl	8007e34 <tcp_segs_free>
    if (send_rst) {
 8008712:	b146      	cbz	r6, 8008726 <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008714:	8b23      	ldrh	r3, [r4, #24]
 8008716:	9301      	str	r3, [sp, #4]
 8008718:	9500      	str	r5, [sp, #0]
 800871a:	1d23      	adds	r3, r4, #4
 800871c:	4622      	mov	r2, r4
 800871e:	4651      	mov	r1, sl
 8008720:	4648      	mov	r0, r9
 8008722:	f002 f99f 	bl	800aa64 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8008726:	4621      	mov	r1, r4
 8008728:	2001      	movs	r0, #1
 800872a:	f7fe fdcf 	bl	80072cc <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800872e:	b13f      	cbz	r7, 8008740 <tcp_abandon+0xc8>
 8008730:	f06f 010c 	mvn.w	r1, #12
 8008734:	4640      	mov	r0, r8
 8008736:	463b      	mov	r3, r7
}
 8008738:	b002      	add	sp, #8
 800873a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800873e:	4718      	bx	r3
}
 8008740:	b002      	add	sp, #8
 8008742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008746:	bf00      	nop
 8008748:	0801009e 	.word	0x0801009e
 800874c:	0801001f 	.word	0x0801001f
 8008750:	0800f20f 	.word	0x0800f20f
 8008754:	20005064 	.word	0x20005064
 8008758:	20005060 	.word	0x20005060
 800875c:	20005054 	.word	0x20005054
 8008760:	20005050 	.word	0x20005050

08008764 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8008764:	2101      	movs	r1, #1
 8008766:	f7ff bf87 	b.w	8008678 <tcp_abandon>

0800876a <tcp_accept_null>:
{
 800876a:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 800876c:	4608      	mov	r0, r1
 800876e:	f7ff fff9 	bl	8008764 <tcp_abort>
}
 8008772:	f06f 000c 	mvn.w	r0, #12
 8008776:	bd08      	pop	{r3, pc}

08008778 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 800877c:	b901      	cbnz	r1, 8008780 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800877e:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008780:	680a      	ldr	r2, [r1, #0]
 8008782:	682b      	ldr	r3, [r5, #0]
 8008784:	68cc      	ldr	r4, [r1, #12]
 8008786:	429a      	cmp	r2, r3
 8008788:	d102      	bne.n	8008790 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 800878a:	4608      	mov	r0, r1
 800878c:	f7ff ffea 	bl	8008764 <tcp_abort>
      pcb = pcb->next;
 8008790:	4621      	mov	r1, r4
 8008792:	e7f3      	b.n	800877c <tcp_netif_ip_addr_changed_pcblist+0x4>

08008794 <tcp_kill_state>:
{
 8008794:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008796:	f1a0 0308 	sub.w	r3, r0, #8
 800879a:	2b01      	cmp	r3, #1
{
 800879c:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800879e:	d906      	bls.n	80087ae <tcp_kill_state+0x1a>
 80087a0:	4b0f      	ldr	r3, [pc, #60]	; (80087e0 <tcp_kill_state+0x4c>)
 80087a2:	4910      	ldr	r1, [pc, #64]	; (80087e4 <tcp_kill_state+0x50>)
 80087a4:	4810      	ldr	r0, [pc, #64]	; (80087e8 <tcp_kill_state+0x54>)
 80087a6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80087aa:	f005 f9e1 	bl	800db70 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087ae:	4b0f      	ldr	r3, [pc, #60]	; (80087ec <tcp_kill_state+0x58>)
 80087b0:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80087b2:	4b0f      	ldr	r3, [pc, #60]	; (80087f0 <tcp_kill_state+0x5c>)
  inactivity = 0;
 80087b4:	2200      	movs	r2, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80087b6:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 80087b8:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087ba:	b921      	cbnz	r1, 80087c6 <tcp_kill_state+0x32>
  if (inactive != NULL) {
 80087bc:	b170      	cbz	r0, 80087dc <tcp_kill_state+0x48>
}
 80087be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 80087c2:	f7ff bf59 	b.w	8008678 <tcp_abandon>
    if (pcb->state == state) {
 80087c6:	7d0b      	ldrb	r3, [r1, #20]
 80087c8:	42a3      	cmp	r3, r4
 80087ca:	d105      	bne.n	80087d8 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80087cc:	6a0b      	ldr	r3, [r1, #32]
 80087ce:	1aeb      	subs	r3, r5, r3
 80087d0:	429a      	cmp	r2, r3
 80087d2:	bf9c      	itt	ls
 80087d4:	461a      	movls	r2, r3
 80087d6:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087d8:	68c9      	ldr	r1, [r1, #12]
 80087da:	e7ee      	b.n	80087ba <tcp_kill_state+0x26>
 80087dc:	bd38      	pop	{r3, r4, r5, pc}
 80087de:	bf00      	nop
 80087e0:	0801009e 	.word	0x0801009e
 80087e4:	080100ff 	.word	0x080100ff
 80087e8:	0800f20f 	.word	0x0800f20f
 80087ec:	20005054 	.word	0x20005054
 80087f0:	20005058 	.word	0x20005058

080087f4 <tcp_alloc>:
{
 80087f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f6:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80087f8:	2001      	movs	r0, #1
 80087fa:	f7fe fd4b 	bl	8007294 <memp_malloc>
 80087fe:	4d3b      	ldr	r5, [pc, #236]	; (80088ec <tcp_alloc+0xf8>)
  if (pcb == NULL) {
 8008800:	4604      	mov	r4, r0
 8008802:	bb90      	cbnz	r0, 800886a <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008804:	4b3a      	ldr	r3, [pc, #232]	; (80088f0 <tcp_alloc+0xfc>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008806:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008808:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 800880a:	4621      	mov	r1, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800880c:	2b00      	cmp	r3, #0
 800880e:	d158      	bne.n	80088c2 <tcp_alloc+0xce>
  if (inactive != NULL) {
 8008810:	b114      	cbz	r4, 8008818 <tcp_alloc+0x24>
    tcp_abort(inactive);
 8008812:	4620      	mov	r0, r4
 8008814:	f7ff ffa6 	bl	8008764 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008818:	2001      	movs	r0, #1
 800881a:	f7fe fd3b 	bl	8007294 <memp_malloc>
    if (pcb == NULL) {
 800881e:	4604      	mov	r4, r0
 8008820:	bb18      	cbnz	r0, 800886a <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 8008822:	2009      	movs	r0, #9
 8008824:	f7ff ffb6 	bl	8008794 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008828:	2001      	movs	r0, #1
 800882a:	f7fe fd33 	bl	8007294 <memp_malloc>
      if (pcb == NULL) {
 800882e:	4604      	mov	r4, r0
 8008830:	b9d8      	cbnz	r0, 800886a <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 8008832:	2008      	movs	r0, #8
 8008834:	f7ff ffae 	bl	8008794 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008838:	2001      	movs	r0, #1
 800883a:	f7fe fd2b 	bl	8007294 <memp_malloc>
        if (pcb == NULL) {
 800883e:	4604      	mov	r4, r0
 8008840:	b998      	cbnz	r0, 800886a <tcp_alloc+0x76>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008842:	4b2c      	ldr	r3, [pc, #176]	; (80088f4 <tcp_alloc+0x100>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008844:	f8d5 e000 	ldr.w	lr, [r5]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008848:	681b      	ldr	r3, [r3, #0]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800884a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800884e:	bf0c      	ite	eq
 8008850:	4631      	moveq	r1, r6
 8008852:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008854:	2b00      	cmp	r3, #0
 8008856:	d13c      	bne.n	80088d2 <tcp_alloc+0xde>
  if (inactive != NULL) {
 8008858:	b114      	cbz	r4, 8008860 <tcp_alloc+0x6c>
    tcp_abort(inactive);
 800885a:	4620      	mov	r0, r4
 800885c:	f7ff ff82 	bl	8008764 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008860:	2001      	movs	r0, #1
 8008862:	f7fe fd17 	bl	8007294 <memp_malloc>
  if (pcb != NULL) {
 8008866:	4604      	mov	r4, r0
 8008868:	b348      	cbz	r0, 80088be <tcp_alloc+0xca>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800886a:	2298      	movs	r2, #152	; 0x98
 800886c:	2100      	movs	r1, #0
 800886e:	4620      	mov	r0, r4
 8008870:	f005 f8ca 	bl	800da08 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008874:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008878:	8562      	strh	r2, [r4, #42]	; 0x2a
 800887a:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800887c:	22ff      	movs	r2, #255	; 0xff
 800887e:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8008880:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008884:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008886:	2206      	movs	r2, #6
 8008888:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800888c:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 800888e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008892:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8008894:	2201      	movs	r2, #1
 8008896:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800889a:	682a      	ldr	r2, [r5, #0]
 800889c:	6222      	str	r2, [r4, #32]
    pcb->snd_buf = TCP_SND_BUF;
 800889e:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->last_timer = tcp_timer_ctr;
 80088a2:	4a15      	ldr	r2, [pc, #84]	; (80088f8 <tcp_alloc+0x104>)
    pcb->snd_buf = TCP_SND_BUF;
 80088a4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->ssthresh = TCP_SND_BUF;
 80088a8:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 80088ac:	4b13      	ldr	r3, [pc, #76]	; (80088fc <tcp_alloc+0x108>)
    pcb->last_timer = tcp_timer_ctr;
 80088ae:	7812      	ldrb	r2, [r2, #0]
    pcb->recv = tcp_recv_null;
 80088b0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80088b4:	4b12      	ldr	r3, [pc, #72]	; (8008900 <tcp_alloc+0x10c>)
    pcb->prio = prio;
 80088b6:	7566      	strb	r6, [r4, #21]
    pcb->last_timer = tcp_timer_ctr;
 80088b8:	7762      	strb	r2, [r4, #29]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80088ba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 80088be:	4620      	mov	r0, r4
 80088c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80088c2:	6a1a      	ldr	r2, [r3, #32]
 80088c4:	1a82      	subs	r2, r0, r2
 80088c6:	428a      	cmp	r2, r1
 80088c8:	bf24      	itt	cs
 80088ca:	461c      	movcs	r4, r3
 80088cc:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	e79c      	b.n	800880c <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 80088d2:	7d5f      	ldrb	r7, [r3, #21]
 80088d4:	428f      	cmp	r7, r1
 80088d6:	d807      	bhi.n	80088e8 <tcp_alloc+0xf4>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80088d8:	6a1a      	ldr	r2, [r3, #32]
 80088da:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 80088de:	4282      	cmp	r2, r0
 80088e0:	bf22      	ittt	cs
 80088e2:	4639      	movcs	r1, r7
 80088e4:	4610      	movcs	r0, r2
 80088e6:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	e7b3      	b.n	8008854 <tcp_alloc+0x60>
 80088ec:	20005058 	.word	0x20005058
 80088f0:	20005064 	.word	0x20005064
 80088f4:	20005054 	.word	0x20005054
 80088f8:	20000d1e 	.word	0x20000d1e
 80088fc:	08008549 	.word	0x08008549
 8008900:	006ddd00 	.word	0x006ddd00

08008904 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008904:	2040      	movs	r0, #64	; 0x40
 8008906:	f7ff bf75 	b.w	80087f4 <tcp_alloc>
	...

0800890c <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 800890c:	4b03      	ldr	r3, [pc, #12]	; (800891c <tcp_next_iss+0x10>)
 800890e:	4a04      	ldr	r2, [pc, #16]	; (8008920 <tcp_next_iss+0x14>)
 8008910:	6818      	ldr	r0, [r3, #0]
 8008912:	6812      	ldr	r2, [r2, #0]
 8008914:	4410      	add	r0, r2
 8008916:	6018      	str	r0, [r3, #0]
}
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	200005ac 	.word	0x200005ac
 8008920:	20005058 	.word	0x20005058

08008924 <tcp_eff_send_mss_impl>:
{
 8008924:	b510      	push	{r4, lr}
 8008926:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8008928:	4608      	mov	r0, r1
 800892a:	f7fd fd67 	bl	80063fc <ip4_route>
    if (outif == NULL) {
 800892e:	b130      	cbz	r0, 800893e <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 8008930:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 8008932:	b123      	cbz	r3, 800893e <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8008934:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008936:	b29b      	uxth	r3, r3
 8008938:	429c      	cmp	r4, r3
 800893a:	bf28      	it	cs
 800893c:	461c      	movcs	r4, r3
}
 800893e:	4620      	mov	r0, r4
 8008940:	bd10      	pop	{r4, pc}
	...

08008944 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8008948:	4604      	mov	r4, r0
 800894a:	b180      	cbz	r0, 800896e <tcp_netif_ip_addr_changed+0x2a>
 800894c:	6803      	ldr	r3, [r0, #0]
 800894e:	b173      	cbz	r3, 800896e <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008950:	4b0c      	ldr	r3, [pc, #48]	; (8008984 <tcp_netif_ip_addr_changed+0x40>)
 8008952:	6819      	ldr	r1, [r3, #0]
 8008954:	f7ff ff10 	bl	8008778 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008958:	4b0b      	ldr	r3, [pc, #44]	; (8008988 <tcp_netif_ip_addr_changed+0x44>)
 800895a:	4620      	mov	r0, r4
 800895c:	6819      	ldr	r1, [r3, #0]
 800895e:	f7ff ff0b 	bl	8008778 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008962:	b125      	cbz	r5, 800896e <tcp_netif_ip_addr_changed+0x2a>
 8008964:	682b      	ldr	r3, [r5, #0]
 8008966:	b113      	cbz	r3, 800896e <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8008968:	4b08      	ldr	r3, [pc, #32]	; (800898c <tcp_netif_ip_addr_changed+0x48>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	b903      	cbnz	r3, 8008970 <tcp_netif_ip_addr_changed+0x2c>
 800896e:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 8008974:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008976:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008978:	bf04      	itt	eq
 800897a:	6829      	ldreq	r1, [r5, #0]
 800897c:	6019      	streq	r1, [r3, #0]
{
 800897e:	4613      	mov	r3, r2
 8008980:	e7f4      	b.n	800896c <tcp_netif_ip_addr_changed+0x28>
 8008982:	bf00      	nop
 8008984:	20005054 	.word	0x20005054
 8008988:	20005060 	.word	0x20005060
 800898c:	2000505c 	.word	0x2000505c

08008990 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008994:	68c3      	ldr	r3, [r0, #12]
{
 8008996:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008998:	8998      	ldrh	r0, [r3, #12]
{
 800899a:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800899c:	f7fd f83a 	bl	8005a14 <lwip_htons>
 80089a0:	07c2      	lsls	r2, r0, #31
 80089a2:	d415      	bmi.n	80089d0 <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 80089a4:	4e18      	ldr	r6, [pc, #96]	; (8008a08 <tcp_oos_insert_segment+0x78>)
    while (next &&
 80089a6:	b1bc      	cbz	r4, 80089d8 <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80089a8:	68e7      	ldr	r7, [r4, #12]
 80089aa:	6830      	ldr	r0, [r6, #0]
 80089ac:	892b      	ldrh	r3, [r5, #8]
 80089ae:	6879      	ldr	r1, [r7, #4]
 80089b0:	8922      	ldrh	r2, [r4, #8]
 80089b2:	4403      	add	r3, r0
 80089b4:	440a      	add	r2, r1
 80089b6:	1a9a      	subs	r2, r3, r2
    while (next &&
 80089b8:	2a00      	cmp	r2, #0
 80089ba:	da10      	bge.n	80089de <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80089bc:	1a5b      	subs	r3, r3, r1
    if (next &&
 80089be:	2b00      	cmp	r3, #0
 80089c0:	dd0a      	ble.n	80089d8 <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80089c2:	1a09      	subs	r1, r1, r0
 80089c4:	b289      	uxth	r1, r1
 80089c6:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80089c8:	6868      	ldr	r0, [r5, #4]
 80089ca:	f7fe ff25 	bl	8007818 <pbuf_realloc>
 80089ce:	e003      	b.n	80089d8 <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 80089d0:	4620      	mov	r0, r4
 80089d2:	f7ff fa2f 	bl	8007e34 <tcp_segs_free>
    next = NULL;
 80089d6:	2400      	movs	r4, #0
    }
  }
  cseg->next = next;
 80089d8:	602c      	str	r4, [r5, #0]
}
 80089da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80089de:	89b8      	ldrh	r0, [r7, #12]
 80089e0:	f7fd f818 	bl	8005a14 <lwip_htons>
 80089e4:	07c3      	lsls	r3, r0, #31
 80089e6:	d509      	bpl.n	80089fc <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80089e8:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80089ec:	2001      	movs	r0, #1
 80089ee:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 80089f2:	f7fd f80f 	bl	8005a14 <lwip_htons>
 80089f6:	4338      	orrs	r0, r7
 80089f8:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 80089fc:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 80089fe:	4620      	mov	r0, r4
 8008a00:	f7ff fa0a 	bl	8007e18 <tcp_seg_free>
      next = next->next;
 8008a04:	463c      	mov	r4, r7
 8008a06:	e7ce      	b.n	80089a6 <tcp_oos_insert_segment+0x16>
 8008a08:	20000d44 	.word	0x20000d44

08008a0c <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008a0c:	7d03      	ldrb	r3, [r0, #20]
 8008a0e:	2b03      	cmp	r3, #3
{
 8008a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008a16:	d806      	bhi.n	8008a26 <tcp_receive+0x1a>
 8008a18:	4b87      	ldr	r3, [pc, #540]	; (8008c38 <tcp_receive+0x22c>)
 8008a1a:	4988      	ldr	r1, [pc, #544]	; (8008c3c <tcp_receive+0x230>)
 8008a1c:	4888      	ldr	r0, [pc, #544]	; (8008c40 <tcp_receive+0x234>)
 8008a1e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8008a22:	f005 f8a5 	bl	800db70 <iprintf>

  if (flags & TCP_ACK) {
 8008a26:	4b87      	ldr	r3, [pc, #540]	; (8008c44 <tcp_receive+0x238>)
 8008a28:	4e87      	ldr	r6, [pc, #540]	; (8008c48 <tcp_receive+0x23c>)
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	f013 0f10 	tst.w	r3, #16
 8008a30:	f000 817c 	beq.w	8008d2c <tcp_receive+0x320>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008a34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008a36:	6830      	ldr	r0, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008a38:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8008a3c:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008a3e:	1a1d      	subs	r5, r3, r0
 8008a40:	2d00      	cmp	r5, #0
 8008a42:	4d82      	ldr	r5, [pc, #520]	; (8008c4c <tcp_receive+0x240>)
 8008a44:	db0d      	blt.n	8008a62 <tcp_receive+0x56>
 8008a46:	4283      	cmp	r3, r0
 8008a48:	d103      	bne.n	8008a52 <tcp_receive+0x46>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008a4a:	682b      	ldr	r3, [r5, #0]
 8008a4c:	1acb      	subs	r3, r1, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	db07      	blt.n	8008a62 <tcp_receive+0x56>
 8008a52:	682b      	ldr	r3, [r5, #0]
 8008a54:	4299      	cmp	r1, r3
 8008a56:	d11c      	bne.n	8008a92 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008a58:	4b7d      	ldr	r3, [pc, #500]	; (8008c50 <tcp_receive+0x244>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	89db      	ldrh	r3, [r3, #14]
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d917      	bls.n	8008a92 <tcp_receive+0x86>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008a62:	4b7b      	ldr	r3, [pc, #492]	; (8008c50 <tcp_receive+0x244>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008a64:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	89df      	ldrh	r7, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 8008a6c:	6520      	str	r0, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008a6e:	45be      	cmp	lr, r7
      pcb->snd_wl2 = ackno;
 8008a70:	6828      	ldr	r0, [r5, #0]
 8008a72:	6560      	str	r0, [r4, #84]	; 0x54
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008a74:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008a78:	bf38      	it	cc
 8008a7a:	f8a4 705e 	strhcc.w	r7, [r4, #94]	; 0x5e
 8008a7e:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 8008a82:	2f00      	cmp	r7, #0
 8008a84:	d13c      	bne.n	8008b00 <tcp_receive+0xf4>
        if (pcb->persist_backoff == 0) {
 8008a86:	b920      	cbnz	r0, 8008a92 <tcp_receive+0x86>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8008a88:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 8008a8c:	2301      	movs	r3, #1
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8008a8e:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008a92:	682b      	ldr	r3, [r5, #0]
 8008a94:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 8008a98:	4f6e      	ldr	r7, [pc, #440]	; (8008c54 <tcp_receive+0x248>)
 8008a9a:	eba3 000e 	sub.w	r0, r3, lr
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	dc37      	bgt.n	8008b12 <tcp_receive+0x106>
      /* Clause 2 */
      if (tcplen == 0) {
 8008aa2:	486d      	ldr	r0, [pc, #436]	; (8008c58 <tcp_receive+0x24c>)
 8008aa4:	8800      	ldrh	r0, [r0, #0]
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	f040 846f 	bne.w	800938a <tcp_receive+0x97e>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008aac:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008aae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ab0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008ab4:	4401      	add	r1, r0
 8008ab6:	428a      	cmp	r2, r1
 8008ab8:	f040 8467 	bne.w	800938a <tcp_receive+0x97e>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008abc:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8008ac0:	2a00      	cmp	r2, #0
 8008ac2:	f2c0 8462 	blt.w	800938a <tcp_receive+0x97e>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008ac6:	4573      	cmp	r3, lr
 8008ac8:	f040 845f 	bne.w	800938a <tcp_receive+0x97e>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008acc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ad0:	1c53      	adds	r3, r2, #1
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 8008ad6:	bf38      	it	cc
 8008ad8:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008adc:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d911      	bls.n	8008b08 <tcp_receive+0xfc>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008ae4:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8008ae8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008aea:	4413      	add	r3, r2
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d201      	bcs.n	8008af6 <tcp_receive+0xea>
                  pcb->cwnd += pcb->mss;
 8008af2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008af6:	f8df a140 	ldr.w	sl, [pc, #320]	; 8008c38 <tcp_receive+0x22c>
 8008afa:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8008c40 <tcp_receive+0x234>
 8008afe:	e108      	b.n	8008d12 <tcp_receive+0x306>
      } else if (pcb->persist_backoff > 0) {
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d0c6      	beq.n	8008a92 <tcp_receive+0x86>
          pcb->persist_backoff = 0;
 8008b04:	2300      	movs	r3, #0
 8008b06:	e7c2      	b.n	8008a8e <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 8008b08:	d1f5      	bne.n	8008af6 <tcp_receive+0xea>
                tcp_rexmit_fast(pcb);
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f002 f849 	bl	800aba2 <tcp_rexmit_fast>
 8008b10:	e7f1      	b.n	8008af6 <tcp_receive+0xea>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008b12:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008b14:	1a9a      	subs	r2, r3, r2
 8008b16:	2a00      	cmp	r2, #0
 8008b18:	f300 808a 	bgt.w	8008c30 <tcp_receive+0x224>
      if (pcb->flags & TF_INFR) {
 8008b1c:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008b1e:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 8008b22:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->flags & TF_INFR) {
 8008b24:	0751      	lsls	r1, r2, #29
        pcb->flags &= ~TF_INFR;
 8008b26:	bf41      	itttt	mi
 8008b28:	f022 0204 	bicmi.w	r2, r2, #4
 8008b2c:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8008b2e:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 8008b32:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 8008b36:	7d23      	ldrb	r3, [r4, #20]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008b38:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      pcb->nrtx = 0;
 8008b3a:	2100      	movs	r1, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008b3c:	eb02 02e0 	add.w	r2, r2, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 8008b40:	2b03      	cmp	r3, #3
      pcb->nrtx = 0;
 8008b42:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008b46:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8008b4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 8008b4e:	d90f      	bls.n	8008b70 <tcp_receive+0x164>
        if (pcb->cwnd < pcb->ssthresh) {
 8008b50:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8008b54:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8008b58:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008b5a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8008b5c:	bf9c      	itt	ls
 8008b5e:	435b      	mulls	r3, r3
 8008b60:	fb93 f3f2 	sdivls	r3, r3, r2
 8008b64:	4413      	add	r3, r2
 8008b66:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8008b68:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 8008b6a:	bf38      	it	cc
 8008b6c:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008b70:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8008c38 <tcp_receive+0x22c>
 8008b74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c40 <tcp_receive+0x234>
      while (pcb->unacked != NULL &&
 8008b78:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008b7a:	b943      	cbnz	r3, 8008b8e <tcp_receive+0x182>
      if (pcb->unacked == NULL) {
 8008b7c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8008b7e:	2300      	movs	r3, #0
 8008b80:	2a00      	cmp	r2, #0
 8008b82:	d153      	bne.n	8008c2c <tcp_receive+0x220>
        pcb->rtime = -1;
 8008b84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b88:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8008b8a:	76e3      	strb	r3, [r4, #27]
 8008b8c:	e7b3      	b.n	8008af6 <tcp_receive+0xea>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	6858      	ldr	r0, [r3, #4]
 8008b92:	f7fc ff42 	bl	8005a1a <lwip_htonl>
 8008b96:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008b98:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	4683      	mov	fp, r0
 8008ba0:	8998      	ldrh	r0, [r3, #12]
 8008ba2:	f7fc ff37 	bl	8005a14 <lwip_htons>
 8008ba6:	682b      	ldr	r3, [r5, #0]
 8008ba8:	f010 0003 	ands.w	r0, r0, #3
 8008bac:	eba8 0803 	sub.w	r8, r8, r3
 8008bb0:	bf18      	it	ne
 8008bb2:	2001      	movne	r0, #1
 8008bb4:	44d8      	add	r8, fp
 8008bb6:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 8008bb8:	f1b8 0f00 	cmp.w	r8, #0
 8008bbc:	dcde      	bgt.n	8008b7c <tcp_receive+0x170>
        next = pcb->unacked;
 8008bbe:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008bc2:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 8008bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8008bca:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008bcc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008bd0:	f7fe fe92 	bl	80078f8 <pbuf_clen>
 8008bd4:	4583      	cmp	fp, r0
 8008bd6:	d206      	bcs.n	8008be6 <tcp_receive+0x1da>
 8008bd8:	464b      	mov	r3, r9
 8008bda:	f240 429e 	movw	r2, #1182	; 0x49e
 8008bde:	491f      	ldr	r1, [pc, #124]	; (8008c5c <tcp_receive+0x250>)
 8008be0:	4650      	mov	r0, sl
 8008be2:	f004 ffc5 	bl	800db70 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008be6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008bea:	f7fe fe85 	bl	80078f8 <pbuf_clen>
 8008bee:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 8008bf2:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008bf4:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 8008bf6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008bfa:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 8008bfe:	4413      	add	r3, r2
        tcp_seg_free(next);
 8008c00:	4640      	mov	r0, r8
        recv_acked += next->len;
 8008c02:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 8008c04:	f7ff f908 	bl	8007e18 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8008c08:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d0b3      	beq.n	8008b78 <tcp_receive+0x16c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8008c10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1b0      	bne.n	8008b78 <tcp_receive+0x16c>
 8008c16:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1ad      	bne.n	8008b78 <tcp_receive+0x16c>
 8008c1c:	464b      	mov	r3, r9
 8008c1e:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8008c22:	490f      	ldr	r1, [pc, #60]	; (8008c60 <tcp_receive+0x254>)
 8008c24:	4650      	mov	r0, sl
 8008c26:	f004 ffa3 	bl	800db70 <iprintf>
 8008c2a:	e7a5      	b.n	8008b78 <tcp_receive+0x16c>
        pcb->rtime = 0;
 8008c2c:	8623      	strh	r3, [r4, #48]	; 0x30
 8008c2e:	e7ac      	b.n	8008b8a <tcp_receive+0x17e>
      tcp_send_empty_ack(pcb);
 8008c30:	4620      	mov	r0, r4
 8008c32:	f001 fd63 	bl	800a6fc <tcp_send_empty_ack>
 8008c36:	e75e      	b.n	8008af6 <tcp_receive+0xea>
 8008c38:	08010564 	.word	0x08010564
 8008c3c:	08010596 	.word	0x08010596
 8008c40:	0800f20f 	.word	0x0800f20f
 8008c44:	20000d24 	.word	0x20000d24
 8008c48:	20000d44 	.word	0x20000d44
 8008c4c:	20000d20 	.word	0x20000d20
 8008c50:	20000d4c 	.word	0x20000d4c
 8008c54:	20000d38 	.word	0x20000d38
 8008c58:	20000d5a 	.word	0x20000d5a
 8008c5c:	080105af 	.word	0x080105af
 8008c60:	080105d7 	.word	0x080105d7
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008c64:	682a      	ldr	r2, [r5, #0]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	9201      	str	r2, [sp, #4]
 8008c6a:	6858      	ldr	r0, [r3, #4]
 8008c6c:	f7fc fed5 	bl	8005a1a <lwip_htonl>
 8008c70:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008c72:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	4683      	mov	fp, r0
 8008c7a:	8998      	ldrh	r0, [r3, #12]
 8008c7c:	f7fc feca 	bl	8005a14 <lwip_htons>
 8008c80:	9a01      	ldr	r2, [sp, #4]
 8008c82:	f010 0003 	ands.w	r0, r0, #3
 8008c86:	eba2 0808 	sub.w	r8, r2, r8
 8008c8a:	bf18      	it	ne
 8008c8c:	2001      	movne	r0, #1
 8008c8e:	eba8 080b 	sub.w	r8, r8, fp
 8008c92:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 8008c96:	f1b8 0f00 	cmp.w	r8, #0
 8008c9a:	db3d      	blt.n	8008d18 <tcp_receive+0x30c>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008c9c:	682b      	ldr	r3, [r5, #0]
 8008c9e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008ca0:	1a9b      	subs	r3, r3, r2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	dc38      	bgt.n	8008d18 <tcp_receive+0x30c>
      next = pcb->unsent;
 8008ca6:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8008caa:	f8d8 3000 	ldr.w	r3, [r8]
 8008cae:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8008cb0:	b90b      	cbnz	r3, 8008cb6 <tcp_receive+0x2aa>
        pcb->unsent_oversize = 0;
 8008cb2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008cb6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008cba:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 8008cbe:	f7fe fe1b 	bl	80078f8 <pbuf_clen>
 8008cc2:	4583      	cmp	fp, r0
 8008cc4:	d206      	bcs.n	8008cd4 <tcp_receive+0x2c8>
 8008cc6:	4653      	mov	r3, sl
 8008cc8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008ccc:	49ba      	ldr	r1, [pc, #744]	; (8008fb8 <tcp_receive+0x5ac>)
 8008cce:	4648      	mov	r0, r9
 8008cd0:	f004 ff4e 	bl	800db70 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008cd4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008cd8:	f7fe fe0e 	bl	80078f8 <pbuf_clen>
 8008cdc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 8008ce0:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008ce2:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8008ce4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008ce8:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 8008cec:	4413      	add	r3, r2
      tcp_seg_free(next);
 8008cee:	4640      	mov	r0, r8
      recv_acked += next->len;
 8008cf0:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 8008cf2:	f7ff f891 	bl	8007e18 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8008cf6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008cfa:	b153      	cbz	r3, 8008d12 <tcp_receive+0x306>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8008cfc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008cfe:	b943      	cbnz	r3, 8008d12 <tcp_receive+0x306>
 8008d00:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008d02:	b933      	cbnz	r3, 8008d12 <tcp_receive+0x306>
 8008d04:	4653      	mov	r3, sl
 8008d06:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8008d0a:	49ac      	ldr	r1, [pc, #688]	; (8008fbc <tcp_receive+0x5b0>)
 8008d0c:	4648      	mov	r0, r9
 8008d0e:	f004 ff2f 	bl	800db70 <iprintf>
    while (pcb->unsent != NULL &&
 8008d12:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1a5      	bne.n	8008c64 <tcp_receive+0x258>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8008d18:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8008d1c:	883a      	ldrh	r2, [r7, #0]
 8008d1e:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008d20:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 8008d22:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008d26:	2a00      	cmp	r2, #0
 8008d28:	f040 8119 	bne.w	8008f5e <tcp_receive+0x552>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008d2c:	4fa4      	ldr	r7, [pc, #656]	; (8008fc0 <tcp_receive+0x5b4>)
 8008d2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008d30:	8838      	ldrh	r0, [r7, #0]
 8008d32:	2800      	cmp	r0, #0
 8008d34:	f000 831c 	beq.w	8009370 <tcp_receive+0x964>
 8008d38:	7d23      	ldrb	r3, [r4, #20]
 8008d3a:	2b06      	cmp	r3, #6
 8008d3c:	f200 8318 	bhi.w	8009370 <tcp_receive+0x964>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008d40:	6833      	ldr	r3, [r6, #0]
 8008d42:	1ad5      	subs	r5, r2, r3
 8008d44:	2d01      	cmp	r5, #1
 8008d46:	f100 815c 	bmi.w	8009002 <tcp_receive+0x5f6>
 8008d4a:	f1c3 0101 	rsb	r1, r3, #1
 8008d4e:	1a09      	subs	r1, r1, r0
 8008d50:	4411      	add	r1, r2
 8008d52:	2900      	cmp	r1, #0
 8008d54:	f300 8155 	bgt.w	8009002 <tcp_receive+0x5f6>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008d58:	4b9a      	ldr	r3, [pc, #616]	; (8008fc4 <tcp_receive+0x5b8>)
 8008d5a:	f8d3 9004 	ldr.w	r9, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 8008d5e:	46aa      	mov	sl, r5
 8008d60:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008d62:	f1b9 0f00 	cmp.w	r9, #0
 8008d66:	d106      	bne.n	8008d76 <tcp_receive+0x36a>
 8008d68:	4b97      	ldr	r3, [pc, #604]	; (8008fc8 <tcp_receive+0x5bc>)
 8008d6a:	4998      	ldr	r1, [pc, #608]	; (8008fcc <tcp_receive+0x5c0>)
 8008d6c:	4898      	ldr	r0, [pc, #608]	; (8008fd0 <tcp_receive+0x5c4>)
 8008d6e:	f240 523c 	movw	r2, #1340	; 0x53c
 8008d72:	f004 fefd 	bl	800db70 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8008d76:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8008d7a:	429d      	cmp	r5, r3
 8008d7c:	dd06      	ble.n	8008d8c <tcp_receive+0x380>
 8008d7e:	4b92      	ldr	r3, [pc, #584]	; (8008fc8 <tcp_receive+0x5bc>)
 8008d80:	4994      	ldr	r1, [pc, #592]	; (8008fd4 <tcp_receive+0x5c8>)
 8008d82:	4893      	ldr	r0, [pc, #588]	; (8008fd0 <tcp_receive+0x5c4>)
 8008d84:	f240 523d 	movw	r2, #1341	; 0x53d
 8008d88:	f004 fef2 	bl	800db70 <iprintf>
      if (inseg.p->len < off) {
 8008d8c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008d90:	8943      	ldrh	r3, [r0, #10]
 8008d92:	429d      	cmp	r5, r3
 8008d94:	f340 812a 	ble.w	8008fec <tcp_receive+0x5e0>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008d98:	8903      	ldrh	r3, [r0, #8]
 8008d9a:	429d      	cmp	r5, r3
 8008d9c:	dd06      	ble.n	8008dac <tcp_receive+0x3a0>
 8008d9e:	4b8a      	ldr	r3, [pc, #552]	; (8008fc8 <tcp_receive+0x5bc>)
 8008da0:	498d      	ldr	r1, [pc, #564]	; (8008fd8 <tcp_receive+0x5cc>)
 8008da2:	488b      	ldr	r0, [pc, #556]	; (8008fd0 <tcp_receive+0x5c4>)
 8008da4:	f240 523f 	movw	r2, #1343	; 0x53f
 8008da8:	f004 fee2 	bl	800db70 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008dac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008db0:	8919      	ldrh	r1, [r3, #8]
 8008db2:	1b4d      	subs	r5, r1, r5
 8008db4:	b2ad      	uxth	r5, r5
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 8008db6:	2200      	movs	r2, #0
        while (p->len < off) {
 8008db8:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8008dbc:	459a      	cmp	sl, r3
 8008dbe:	f300 80f2 	bgt.w	8008fa6 <tcp_receive+0x59a>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8008dc2:	f1ca 0100 	rsb	r1, sl, #0
 8008dc6:	b209      	sxth	r1, r1
 8008dc8:	4648      	mov	r0, r9
 8008dca:	f7fe fbdd 	bl	8007588 <pbuf_header>
 8008dce:	b130      	cbz	r0, 8008dde <tcp_receive+0x3d2>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008dd0:	4b7d      	ldr	r3, [pc, #500]	; (8008fc8 <tcp_receive+0x5bc>)
 8008dd2:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008dd6:	4981      	ldr	r1, [pc, #516]	; (8008fdc <tcp_receive+0x5d0>)
 8008dd8:	487d      	ldr	r0, [pc, #500]	; (8008fd0 <tcp_receive+0x5c4>)
 8008dda:	f004 fec9 	bl	800db70 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008dde:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8008de2:	6833      	ldr	r3, [r6, #0]
 8008de4:	6a62      	ldr	r2, [r4, #36]	; 0x24
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008de6:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008de8:	440b      	add	r3, r1
 8008dea:	1a9b      	subs	r3, r3, r2
 8008dec:	f8a8 3008 	strh.w	r3, [r8, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008df0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008df4:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008df6:	6831      	ldr	r1, [r6, #0]
 8008df8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008dfa:	1a8b      	subs	r3, r1, r2
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f2c0 82b1 	blt.w	8009364 <tcp_receive+0x958>
 8008e02:	1c4b      	adds	r3, r1, #1
 8008e04:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8008e06:	1a9b      	subs	r3, r3, r2
 8008e08:	1a1b      	subs	r3, r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f300 82aa 	bgt.w	8009364 <tcp_receive+0x958>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008e10:	4291      	cmp	r1, r2
 8008e12:	f040 81c9 	bne.w	80091a8 <tcp_receive+0x79c>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008e16:	4d6b      	ldr	r5, [pc, #428]	; (8008fc4 <tcp_receive+0x5b8>)
 8008e18:	68eb      	ldr	r3, [r5, #12]
 8008e1a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8008e1e:	8998      	ldrh	r0, [r3, #12]
 8008e20:	f7fc fdf8 	bl	8005a14 <lwip_htons>
 8008e24:	f010 0003 	ands.w	r0, r0, #3
 8008e28:	bf18      	it	ne
 8008e2a:	2001      	movne	r0, #1
 8008e2c:	4440      	add	r0, r8

        if (tcplen > pcb->rcv_wnd) {
 8008e2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8008e30:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8008e32:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8008e34:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8008e36:	d242      	bcs.n	8008ebe <tcp_receive+0x4b2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008e38:	68eb      	ldr	r3, [r5, #12]
 8008e3a:	8998      	ldrh	r0, [r3, #12]
 8008e3c:	f7fc fdea 	bl	8005a14 <lwip_htons>
 8008e40:	07c2      	lsls	r2, r0, #31
 8008e42:	d510      	bpl.n	8008e66 <tcp_receive+0x45a>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008e44:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8008e48:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	f7fc fde1 	bl	8005a14 <lwip_htons>
 8008e52:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8008e56:	f7fc fddd 	bl	8005a14 <lwip_htons>
 8008e5a:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8008e5e:	ea40 0808 	orr.w	r8, r0, r8
 8008e62:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008e66:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008e68:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008e6a:	68eb      	ldr	r3, [r5, #12]
 8008e6c:	8998      	ldrh	r0, [r3, #12]
 8008e6e:	f7fc fdd1 	bl	8005a14 <lwip_htons>
 8008e72:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
 8008e74:	bf48      	it	mi
 8008e76:	892b      	ldrhmi	r3, [r5, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008e78:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 8008e7a:	bf44      	itt	mi
 8008e7c:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8008e80:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8008e82:	8929      	ldrh	r1, [r5, #8]
 8008e84:	f7fe fcc8 	bl	8007818 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008e88:	68eb      	ldr	r3, [r5, #12]
 8008e8a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8008e8e:	8998      	ldrh	r0, [r3, #12]
 8008e90:	f7fc fdc0 	bl	8005a14 <lwip_htons>
 8008e94:	f010 0003 	ands.w	r0, r0, #3
 8008e98:	bf18      	it	ne
 8008e9a:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008e9c:	6833      	ldr	r3, [r6, #0]
 8008e9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8008ea0:	4440      	add	r0, r8
 8008ea2:	b280      	uxth	r0, r0
 8008ea4:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008ea6:	4418      	add	r0, r3
 8008ea8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008eaa:	4413      	add	r3, r2
 8008eac:	4298      	cmp	r0, r3
 8008eae:	d006      	beq.n	8008ebe <tcp_receive+0x4b2>
 8008eb0:	4b45      	ldr	r3, [pc, #276]	; (8008fc8 <tcp_receive+0x5bc>)
 8008eb2:	494b      	ldr	r1, [pc, #300]	; (8008fe0 <tcp_receive+0x5d4>)
 8008eb4:	4846      	ldr	r0, [pc, #280]	; (8008fd0 <tcp_receive+0x5c4>)
 8008eb6:	f240 527f 	movw	r2, #1407	; 0x57f
 8008eba:	f004 fe59 	bl	800db70 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008ebe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 80ad 	beq.w	8009020 <tcp_receive+0x614>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008ec6:	68eb      	ldr	r3, [r5, #12]
 8008ec8:	8998      	ldrh	r0, [r3, #12]
 8008eca:	f7fc fda3 	bl	8005a14 <lwip_htons>
 8008ece:	07c0      	lsls	r0, r0, #31
 8008ed0:	f100 80a3 	bmi.w	800901a <tcp_receive+0x60e>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 8008ed4:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008ed8:	f1b8 0f00 	cmp.w	r8, #0
 8008edc:	d03c      	beq.n	8008f58 <tcp_receive+0x54c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008ede:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 8008ee2:	6830      	ldr	r0, [r6, #0]
 8008ee4:	883b      	ldrh	r3, [r7, #0]
 8008ee6:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008eea:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8008eee:	4403      	add	r3, r0
 8008ef0:	4411      	add	r1, r2
 8008ef2:	1a59      	subs	r1, r3, r1
            while (next &&
 8008ef4:	2900      	cmp	r1, #0
 8008ef6:	f280 80cf 	bge.w	8009098 <tcp_receive+0x68c>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 8008efa:	1a9b      	subs	r3, r3, r2
            if (next &&
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	dd2b      	ble.n	8008f58 <tcp_receive+0x54c>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008f00:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008f02:	1a12      	subs	r2, r2, r0
 8008f04:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008f06:	8998      	ldrh	r0, [r3, #12]
 8008f08:	f7fc fd84 	bl	8005a14 <lwip_htons>
 8008f0c:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
 8008f0e:	bf48      	it	mi
 8008f10:	892b      	ldrhmi	r3, [r5, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008f12:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 8008f14:	bf44      	itt	mi
 8008f16:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8008f1a:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8008f1c:	8929      	ldrh	r1, [r5, #8]
 8008f1e:	f7fe fc7b 	bl	8007818 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008f22:	68eb      	ldr	r3, [r5, #12]
 8008f24:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8008f28:	8998      	ldrh	r0, [r3, #12]
 8008f2a:	f7fc fd73 	bl	8005a14 <lwip_htons>
 8008f2e:	f010 0003 	ands.w	r0, r0, #3
 8008f32:	bf18      	it	ne
 8008f34:	2001      	movne	r0, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008f36:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 8008f38:	4448      	add	r0, r9
 8008f3a:	b280      	uxth	r0, r0
 8008f3c:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008f3e:	4418      	add	r0, r3
 8008f40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	4298      	cmp	r0, r3
 8008f48:	d006      	beq.n	8008f58 <tcp_receive+0x54c>
 8008f4a:	4b1f      	ldr	r3, [pc, #124]	; (8008fc8 <tcp_receive+0x5bc>)
 8008f4c:	4925      	ldr	r1, [pc, #148]	; (8008fe4 <tcp_receive+0x5d8>)
 8008f4e:	4820      	ldr	r0, [pc, #128]	; (8008fd0 <tcp_receive+0x5c4>)
 8008f50:	f240 52af 	movw	r2, #1455	; 0x5af
 8008f54:	f004 fe0c 	bl	800db70 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008f58:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 8008f5c:	e060      	b.n	8009020 <tcp_receive+0x614>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008f5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f60:	6829      	ldr	r1, [r5, #0]
 8008f62:	1a5b      	subs	r3, r3, r1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f6bf aee1 	bge.w	8008d2c <tcp_receive+0x320>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008f6a:	4b1f      	ldr	r3, [pc, #124]	; (8008fe8 <tcp_receive+0x5dc>)
      m = m - (pcb->sa >> 3);
 8008f6c:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008f70:	6819      	ldr	r1, [r3, #0]
 8008f72:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 8008f74:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
 8008f78:	b289      	uxth	r1, r1
 8008f7a:	b20b      	sxth	r3, r1
      if (m < 0) {
 8008f7c:	2b00      	cmp	r3, #0
      m = m - (pcb->sv >> 2);
 8008f7e:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa += m;
 8008f82:	4408      	add	r0, r1
        m = -m;
 8008f84:	bfbc      	itt	lt
 8008f86:	4249      	neglt	r1, r1
 8008f88:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 8008f8a:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 8008f8e:	4413      	add	r3, r2
      pcb->sa += m;
 8008f90:	b200      	sxth	r0, r0
      pcb->sv += m;
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008f96:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8008f9a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8008f9e:	2300      	movs	r3, #0
      pcb->sa += m;
 8008fa0:	87a0      	strh	r0, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 8008fa2:	6363      	str	r3, [r4, #52]	; 0x34
 8008fa4:	e6c2      	b.n	8008d2c <tcp_receive+0x320>
          p->tot_len = new_tot_len;
 8008fa6:	f8a9 5008 	strh.w	r5, [r9, #8]
          p->len = 0;
 8008faa:	f8a9 200a 	strh.w	r2, [r9, #10]
          off -= p->len;
 8008fae:	ebaa 0a03 	sub.w	sl, sl, r3
          p = p->next;
 8008fb2:	f8d9 9000 	ldr.w	r9, [r9]
 8008fb6:	e6ff      	b.n	8008db8 <tcp_receive+0x3ac>
 8008fb8:	080105af 	.word	0x080105af
 8008fbc:	080105d7 	.word	0x080105d7
 8008fc0:	20000d5a 	.word	0x20000d5a
 8008fc4:	20000d28 	.word	0x20000d28
 8008fc8:	08010564 	.word	0x08010564
 8008fcc:	080105f7 	.word	0x080105f7
 8008fd0:	0800f20f 	.word	0x0800f20f
 8008fd4:	08010607 	.word	0x08010607
 8008fd8:	08010616 	.word	0x08010616
 8008fdc:	08010626 	.word	0x08010626
 8008fe0:	08010639 	.word	0x08010639
 8008fe4:	08010670 	.word	0x08010670
 8008fe8:	20005058 	.word	0x20005058
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8008fec:	4269      	negs	r1, r5
 8008fee:	b209      	sxth	r1, r1
 8008ff0:	f7fe faca 	bl	8007588 <pbuf_header>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f43f aef2 	beq.w	8008dde <tcp_receive+0x3d2>
          LWIP_ASSERT("pbuf_header failed", 0);
 8008ffa:	4b9c      	ldr	r3, [pc, #624]	; (800926c <tcp_receive+0x860>)
 8008ffc:	f240 5251 	movw	r2, #1361	; 0x551
 8009000:	e6e9      	b.n	8008dd6 <tcp_receive+0x3ca>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009002:	1a9b      	subs	r3, r3, r2
 8009004:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8009006:	bfbe      	ittt	lt
 8009008:	7ea3      	ldrblt	r3, [r4, #26]
 800900a:	f043 0302 	orrlt.w	r3, r3, #2
 800900e:	76a3      	strblt	r3, [r4, #26]
 8009010:	e6f1      	b.n	8008df6 <tcp_receive+0x3ea>
              pcb->ooseq = pcb->ooseq->next;
 8009012:	6803      	ldr	r3, [r0, #0]
 8009014:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8009016:	f7fe feff 	bl	8007e18 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800901a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800901c:	2800      	cmp	r0, #0
 800901e:	d1f8      	bne.n	8009012 <tcp_receive+0x606>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009020:	883a      	ldrh	r2, [r7, #0]
 8009022:	6833      	ldr	r3, [r6, #0]
 8009024:	4413      	add	r3, r2
 8009026:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009028:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800902a:	4293      	cmp	r3, r2
 800902c:	d206      	bcs.n	800903c <tcp_receive+0x630>
 800902e:	4b8f      	ldr	r3, [pc, #572]	; (800926c <tcp_receive+0x860>)
 8009030:	498f      	ldr	r1, [pc, #572]	; (8009270 <tcp_receive+0x864>)
 8009032:	4890      	ldr	r0, [pc, #576]	; (8009274 <tcp_receive+0x868>)
 8009034:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009038:	f004 fd9a 	bl	800db70 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800903c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800903e:	883a      	ldrh	r2, [r7, #0]
 8009040:	1a9b      	subs	r3, r3, r2
 8009042:	8523      	strh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009044:	4620      	mov	r0, r4
 8009046:	f7fe fe7d 	bl	8007d44 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800904a:	686b      	ldr	r3, [r5, #4]
 800904c:	891a      	ldrh	r2, [r3, #8]
 800904e:	b11a      	cbz	r2, 8009058 <tcp_receive+0x64c>
          recv_data = inseg.p;
 8009050:	4a89      	ldr	r2, [pc, #548]	; (8009278 <tcp_receive+0x86c>)
 8009052:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009054:	2300      	movs	r3, #0
 8009056:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009058:	68eb      	ldr	r3, [r5, #12]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800905a:	4f84      	ldr	r7, [pc, #528]	; (800926c <tcp_receive+0x860>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800905c:	8998      	ldrh	r0, [r3, #12]
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800905e:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8009284 <tcp_receive+0x878>
 8009062:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8009274 <tcp_receive+0x868>
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009066:	f7fc fcd5 	bl	8005a14 <lwip_htons>
 800906a:	07c5      	lsls	r5, r0, #31
          recv_flags |= TF_GOT_FIN;
 800906c:	bf41      	itttt	mi
 800906e:	4a83      	ldrmi	r2, [pc, #524]	; (800927c <tcp_receive+0x870>)
 8009070:	7813      	ldrbmi	r3, [r2, #0]
 8009072:	f043 0320 	orrmi.w	r3, r3, #32
 8009076:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8009078:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800907a:	b125      	cbz	r5, 8009086 <tcp_receive+0x67a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800907c:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 800907e:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009080:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8009082:	428b      	cmp	r3, r1
 8009084:	d033      	beq.n	80090ee <tcp_receive+0x6e2>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009086:	7ea3      	ldrb	r3, [r4, #26]
 8009088:	07d9      	lsls	r1, r3, #31
 800908a:	f140 8087 	bpl.w	800919c <tcp_receive+0x790>
 800908e:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 8009092:	f043 0302 	orr.w	r3, r3, #2
 8009096:	e083      	b.n	80091a0 <tcp_receive+0x794>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009098:	f8be 000c 	ldrh.w	r0, [lr, #12]
 800909c:	f7fc fcba 	bl	8005a14 <lwip_htons>
 80090a0:	07c1      	lsls	r1, r0, #31
 80090a2:	d51d      	bpl.n	80090e0 <tcp_receive+0x6d4>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80090a4:	68eb      	ldr	r3, [r5, #12]
 80090a6:	8998      	ldrh	r0, [r3, #12]
 80090a8:	f7fc fcb4 	bl	8005a14 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80090ac:	0782      	lsls	r2, r0, #30
 80090ae:	d417      	bmi.n	80090e0 <tcp_receive+0x6d4>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80090b0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80090b4:	2001      	movs	r0, #1
 80090b6:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 80090ba:	f7fc fcab 	bl	8005a14 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 80090be:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80090c0:	ea49 0000 	orr.w	r0, r9, r0
 80090c4:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80090c8:	8998      	ldrh	r0, [r3, #12]
 80090ca:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 80090ce:	f7fc fca1 	bl	8005a14 <lwip_htons>
 80090d2:	f010 0003 	ands.w	r0, r0, #3
 80090d6:	bf18      	it	ne
 80090d8:	2001      	movne	r0, #1
 80090da:	4481      	add	r9, r0
 80090dc:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 80090e0:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 80090e4:	4640      	mov	r0, r8
 80090e6:	f7fe fe97 	bl	8007e18 <tcp_seg_free>
              next = next->next;
 80090ea:	46c8      	mov	r8, r9
 80090ec:	e6f4      	b.n	8008ed8 <tcp_receive+0x4cc>
          seqno = pcb->ooseq->tcphdr->seqno;
 80090ee:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80090f0:	8990      	ldrh	r0, [r2, #12]
 80090f2:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 80090f6:	f7fc fc8d 	bl	8005a14 <lwip_htons>
 80090fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80090fc:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009100:	f010 0003 	ands.w	r0, r0, #3
 8009104:	bf18      	it	ne
 8009106:	2001      	movne	r0, #1
 8009108:	449a      	add	sl, r3
 800910a:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800910c:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800910e:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009110:	8998      	ldrh	r0, [r3, #12]
 8009112:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
 8009116:	f7fc fc7d 	bl	8005a14 <lwip_htons>
 800911a:	f010 0003 	ands.w	r0, r0, #3
 800911e:	bf18      	it	ne
 8009120:	2001      	movne	r0, #1
 8009122:	4458      	add	r0, fp
 8009124:	4582      	cmp	sl, r0
 8009126:	d206      	bcs.n	8009136 <tcp_receive+0x72a>
 8009128:	463b      	mov	r3, r7
 800912a:	f240 52de 	movw	r2, #1502	; 0x5de
 800912e:	4641      	mov	r1, r8
 8009130:	4648      	mov	r0, r9
 8009132:	f004 fd1d 	bl	800db70 <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009136:	68eb      	ldr	r3, [r5, #12]
 8009138:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800913c:	8998      	ldrh	r0, [r3, #12]
 800913e:	f7fc fc69 	bl	8005a14 <lwip_htons>
 8009142:	f010 0003 	ands.w	r0, r0, #3
 8009146:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009148:	bf18      	it	ne
 800914a:	2001      	movne	r0, #1
 800914c:	4450      	add	r0, sl
 800914e:	1a18      	subs	r0, r3, r0
 8009150:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8009152:	4620      	mov	r0, r4
 8009154:	f7fe fdf6 	bl	8007d44 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8009158:	6869      	ldr	r1, [r5, #4]
 800915a:	890b      	ldrh	r3, [r1, #8]
 800915c:	b133      	cbz	r3, 800916c <tcp_receive+0x760>
            if (recv_data) {
 800915e:	4b46      	ldr	r3, [pc, #280]	; (8009278 <tcp_receive+0x86c>)
 8009160:	6818      	ldr	r0, [r3, #0]
 8009162:	b1c8      	cbz	r0, 8009198 <tcp_receive+0x78c>
              pbuf_cat(recv_data, cseg->p);
 8009164:	f7fe fbe4 	bl	8007930 <pbuf_cat>
            cseg->p = NULL;
 8009168:	2300      	movs	r3, #0
 800916a:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800916c:	68eb      	ldr	r3, [r5, #12]
 800916e:	8998      	ldrh	r0, [r3, #12]
 8009170:	f7fc fc50 	bl	8005a14 <lwip_htons>
 8009174:	07c0      	lsls	r0, r0, #31
 8009176:	d509      	bpl.n	800918c <tcp_receive+0x780>
            recv_flags |= TF_GOT_FIN;
 8009178:	4a40      	ldr	r2, [pc, #256]	; (800927c <tcp_receive+0x870>)
 800917a:	7813      	ldrb	r3, [r2, #0]
 800917c:	f043 0320 	orr.w	r3, r3, #32
 8009180:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009182:	7d23      	ldrb	r3, [r4, #20]
 8009184:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 8009186:	bf04      	itt	eq
 8009188:	2307      	moveq	r3, #7
 800918a:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8009190:	4628      	mov	r0, r5
 8009192:	f7fe fe41 	bl	8007e18 <tcp_seg_free>
 8009196:	e76f      	b.n	8009078 <tcp_receive+0x66c>
              recv_data = cseg->p;
 8009198:	6019      	str	r1, [r3, #0]
 800919a:	e7e5      	b.n	8009168 <tcp_receive+0x75c>
        tcp_ack(pcb);
 800919c:	f043 0301 	orr.w	r3, r3, #1
 80091a0:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 80091a2:	b003      	add	sp, #12
 80091a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 80091a8:	4620      	mov	r0, r4
 80091aa:	f001 faa7 	bl	800a6fc <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 80091ae:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80091b0:	b925      	cbnz	r5, 80091bc <tcp_receive+0x7b0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80091b2:	4833      	ldr	r0, [pc, #204]	; (8009280 <tcp_receive+0x874>)
 80091b4:	f7fe fe48 	bl	8007e48 <tcp_seg_copy>
 80091b8:	6720      	str	r0, [r4, #112]	; 0x70
 80091ba:	e7f2      	b.n	80091a2 <tcp_receive+0x796>
            if (seqno == next->tcphdr->seqno) {
 80091bc:	6833      	ldr	r3, [r6, #0]
 80091be:	f04f 0800 	mov.w	r8, #0
 80091c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80091c6:	f103 0c01 	add.w	ip, r3, #1
 80091ca:	68e8      	ldr	r0, [r5, #12]
 80091cc:	6842      	ldr	r2, [r0, #4]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d117      	bne.n	8009202 <tcp_receive+0x7f6>
              if (inseg.len > next->len) {
 80091d2:	482b      	ldr	r0, [pc, #172]	; (8009280 <tcp_receive+0x874>)
 80091d4:	892b      	ldrh	r3, [r5, #8]
 80091d6:	8902      	ldrh	r2, [r0, #8]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d9e2      	bls.n	80091a2 <tcp_receive+0x796>
                cseg = tcp_seg_copy(&inseg);
 80091dc:	f7fe fe34 	bl	8007e48 <tcp_seg_copy>
                if (cseg != NULL) {
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d0de      	beq.n	80091a2 <tcp_receive+0x796>
                  if (prev != NULL) {
 80091e4:	f1b8 0f00 	cmp.w	r8, #0
 80091e8:	d009      	beq.n	80091fe <tcp_receive+0x7f2>
                    prev->next = cseg;
 80091ea:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 80091ee:	4629      	mov	r1, r5
}
 80091f0:	b003      	add	sp, #12
 80091f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 80091f6:	f7ff bbcb 	b.w	8008990 <tcp_oos_insert_segment>
 80091fa:	460d      	mov	r5, r1
 80091fc:	e7e5      	b.n	80091ca <tcp_receive+0x7be>
                    pcb->ooseq = cseg;
 80091fe:	6720      	str	r0, [r4, #112]	; 0x70
 8009200:	e7f5      	b.n	80091ee <tcp_receive+0x7e2>
              if (prev == NULL) {
 8009202:	f1b8 0f00 	cmp.w	r8, #0
 8009206:	d109      	bne.n	800921c <tcp_receive+0x810>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009208:	1a99      	subs	r1, r3, r2
 800920a:	2900      	cmp	r1, #0
 800920c:	da3c      	bge.n	8009288 <tcp_receive+0x87c>
                  cseg = tcp_seg_copy(&inseg);
 800920e:	481c      	ldr	r0, [pc, #112]	; (8009280 <tcp_receive+0x874>)
 8009210:	f7fe fe1a 	bl	8007e48 <tcp_seg_copy>
                  if (cseg != NULL) {
 8009214:	2800      	cmp	r0, #0
 8009216:	d0c4      	beq.n	80091a2 <tcp_receive+0x796>
                    pcb->ooseq = cseg;
 8009218:	6720      	str	r0, [r4, #112]	; 0x70
 800921a:	e7e8      	b.n	80091ee <tcp_receive+0x7e2>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800921c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8009220:	6849      	ldr	r1, [r1, #4]
 8009222:	ebae 0101 	sub.w	r1, lr, r1
 8009226:	2900      	cmp	r1, #0
 8009228:	db2e      	blt.n	8009288 <tcp_receive+0x87c>
 800922a:	ebac 0102 	sub.w	r1, ip, r2
 800922e:	2900      	cmp	r1, #0
 8009230:	dc2a      	bgt.n	8009288 <tcp_receive+0x87c>
                  cseg = tcp_seg_copy(&inseg);
 8009232:	4813      	ldr	r0, [pc, #76]	; (8009280 <tcp_receive+0x874>)
 8009234:	f7fe fe08 	bl	8007e48 <tcp_seg_copy>
                  if (cseg != NULL) {
 8009238:	4604      	mov	r4, r0
 800923a:	2800      	cmp	r0, #0
 800923c:	d0b1      	beq.n	80091a2 <tcp_receive+0x796>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800923e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009242:	6831      	ldr	r1, [r6, #0]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800924a:	4413      	add	r3, r2
 800924c:	1a5b      	subs	r3, r3, r1
 800924e:	2b00      	cmp	r3, #0
 8009250:	dd07      	ble.n	8009262 <tcp_receive+0x856>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009252:	1a89      	subs	r1, r1, r2
 8009254:	b289      	uxth	r1, r1
 8009256:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800925a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800925e:	f7fe fadb 	bl	8007818 <pbuf_realloc>
                    prev->next = cseg;
 8009262:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8009266:	4629      	mov	r1, r5
 8009268:	4620      	mov	r0, r4
 800926a:	e7c1      	b.n	80091f0 <tcp_receive+0x7e4>
 800926c:	08010564 	.word	0x08010564
 8009270:	080106ab 	.word	0x080106ab
 8009274:	0800f20f 	.word	0x0800f20f
 8009278:	20000d3c 	.word	0x20000d3c
 800927c:	20000d40 	.word	0x20000d40
 8009280:	20000d28 	.word	0x20000d28
 8009284:	080106ca 	.word	0x080106ca
              if (next->next == NULL &&
 8009288:	6829      	ldr	r1, [r5, #0]
 800928a:	46a8      	mov	r8, r5
 800928c:	2900      	cmp	r1, #0
 800928e:	d1b4      	bne.n	80091fa <tcp_receive+0x7ee>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009290:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8009292:	2b00      	cmp	r3, #0
 8009294:	dd85      	ble.n	80091a2 <tcp_receive+0x796>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009296:	8980      	ldrh	r0, [r0, #12]
 8009298:	f7fc fbbc 	bl	8005a14 <lwip_htons>
 800929c:	07c2      	lsls	r2, r0, #31
 800929e:	d480      	bmi.n	80091a2 <tcp_receive+0x796>
                next->next = tcp_seg_copy(&inseg);
 80092a0:	483c      	ldr	r0, [pc, #240]	; (8009394 <tcp_receive+0x988>)
 80092a2:	f7fe fdd1 	bl	8007e48 <tcp_seg_copy>
 80092a6:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 80092a8:	2800      	cmp	r0, #0
 80092aa:	f43f af7a 	beq.w	80091a2 <tcp_receive+0x796>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80092ae:	68eb      	ldr	r3, [r5, #12]
 80092b0:	6831      	ldr	r1, [r6, #0]
 80092b2:	685a      	ldr	r2, [r3, #4]
 80092b4:	892b      	ldrh	r3, [r5, #8]
 80092b6:	4413      	add	r3, r2
 80092b8:	1a5b      	subs	r3, r3, r1
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	dd05      	ble.n	80092ca <tcp_receive+0x8be>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80092be:	1a89      	subs	r1, r1, r2
 80092c0:	b289      	uxth	r1, r1
 80092c2:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 80092c4:	6868      	ldr	r0, [r5, #4]
 80092c6:	f7fe faa7 	bl	8007818 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80092ca:	6832      	ldr	r2, [r6, #0]
 80092cc:	883b      	ldrh	r3, [r7, #0]
 80092ce:	4413      	add	r3, r2
 80092d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80092d2:	1a9b      	subs	r3, r3, r2
 80092d4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80092d6:	1a9b      	subs	r3, r3, r2
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f77f af62 	ble.w	80091a2 <tcp_receive+0x796>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80092de:	682b      	ldr	r3, [r5, #0]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	8998      	ldrh	r0, [r3, #12]
 80092e4:	f7fc fb96 	bl	8005a14 <lwip_htons>
 80092e8:	07c3      	lsls	r3, r0, #31
 80092ea:	d511      	bpl.n	8009310 <tcp_receive+0x904>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	f8d3 900c 	ldr.w	r9, [r3, #12]
 80092f2:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 80092f6:	4640      	mov	r0, r8
 80092f8:	f7fc fb8c 	bl	8005a14 <lwip_htons>
 80092fc:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8009300:	f7fc fb88 	bl	8005a14 <lwip_htons>
 8009304:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8009308:	ea40 0808 	orr.w	r8, r0, r8
 800930c:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009310:	6832      	ldr	r2, [r6, #0]
 8009312:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8009314:	682b      	ldr	r3, [r5, #0]
 8009316:	1a89      	subs	r1, r1, r2
 8009318:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 800931a:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800931c:	4411      	add	r1, r2
 800931e:	b289      	uxth	r1, r1
 8009320:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009322:	f7fe fa79 	bl	8007818 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009326:	682b      	ldr	r3, [r5, #0]
 8009328:	891d      	ldrh	r5, [r3, #8]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	8998      	ldrh	r0, [r3, #12]
 800932e:	f7fc fb71 	bl	8005a14 <lwip_htons>
 8009332:	f010 0003 	ands.w	r0, r0, #3
 8009336:	bf18      	it	ne
 8009338:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800933a:	6833      	ldr	r3, [r6, #0]
 800933c:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 800933e:	4428      	add	r0, r5
 8009340:	b280      	uxth	r0, r0
 8009342:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009344:	4418      	add	r0, r3
 8009346:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009348:	4413      	add	r3, r2
 800934a:	4298      	cmp	r0, r3
 800934c:	f43f af29 	beq.w	80091a2 <tcp_receive+0x796>
 8009350:	4b11      	ldr	r3, [pc, #68]	; (8009398 <tcp_receive+0x98c>)
 8009352:	4912      	ldr	r1, [pc, #72]	; (800939c <tcp_receive+0x990>)
 8009354:	4812      	ldr	r0, [pc, #72]	; (80093a0 <tcp_receive+0x994>)
 8009356:	f240 627b 	movw	r2, #1659	; 0x67b
}
 800935a:	b003      	add	sp, #12
 800935c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009360:	f004 bc06 	b.w	800db70 <iprintf>
      tcp_send_empty_ack(pcb);
 8009364:	4620      	mov	r0, r4
}
 8009366:	b003      	add	sp, #12
 8009368:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 800936c:	f001 b9c6 	b.w	800a6fc <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009370:	6833      	ldr	r3, [r6, #0]
 8009372:	1a99      	subs	r1, r3, r2
 8009374:	2900      	cmp	r1, #0
 8009376:	db06      	blt.n	8009386 <tcp_receive+0x97a>
 8009378:	3301      	adds	r3, #1
 800937a:	1a9b      	subs	r3, r3, r2
 800937c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800937e:	1a9b      	subs	r3, r3, r2
 8009380:	2b00      	cmp	r3, #0
 8009382:	f77f af0e 	ble.w	80091a2 <tcp_receive+0x796>
      tcp_ack_now(pcb);
 8009386:	7ea3      	ldrb	r3, [r4, #26]
 8009388:	e683      	b.n	8009092 <tcp_receive+0x686>
        pcb->dupacks = 0;
 800938a:	2300      	movs	r3, #0
 800938c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009390:	f7ff bbb1 	b.w	8008af6 <tcp_receive+0xea>
 8009394:	20000d28 	.word	0x20000d28
 8009398:	08010564 	.word	0x08010564
 800939c:	08010639 	.word	0x08010639
 80093a0:	0800f20f 	.word	0x0800f20f

080093a4 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80093a4:	4b0b      	ldr	r3, [pc, #44]	; (80093d4 <tcp_getoptbyte+0x30>)
 80093a6:	4a0c      	ldr	r2, [pc, #48]	; (80093d8 <tcp_getoptbyte+0x34>)
 80093a8:	6819      	ldr	r1, [r3, #0]
{
 80093aa:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80093ac:	b121      	cbz	r1, 80093b8 <tcp_getoptbyte+0x14>
 80093ae:	480b      	ldr	r0, [pc, #44]	; (80093dc <tcp_getoptbyte+0x38>)
 80093b0:	8813      	ldrh	r3, [r2, #0]
 80093b2:	8800      	ldrh	r0, [r0, #0]
 80093b4:	4283      	cmp	r3, r0
 80093b6:	d207      	bcs.n	80093c8 <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80093b8:	4b09      	ldr	r3, [pc, #36]	; (80093e0 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 80093ba:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80093bc:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 80093be:	440b      	add	r3, r1
 80093c0:	1c48      	adds	r0, r1, #1
 80093c2:	8010      	strh	r0, [r2, #0]
 80093c4:	7d18      	ldrb	r0, [r3, #20]
 80093c6:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80093c8:	1c5c      	adds	r4, r3, #1
 80093ca:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 80093cc:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80093ce:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 80093d0:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 80093d2:	bd10      	pop	{r4, pc}
 80093d4:	20000d54 	.word	0x20000d54
 80093d8:	20000d48 	.word	0x20000d48
 80093dc:	20000d50 	.word	0x20000d50
 80093e0:	20000d4c 	.word	0x20000d4c

080093e4 <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 80093e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80093e6:	4d19      	ldr	r5, [pc, #100]	; (800944c <tcp_parseopt.isra.1.part.2+0x68>)
 80093e8:	4e19      	ldr	r6, [pc, #100]	; (8009450 <tcp_parseopt.isra.1.part.2+0x6c>)
 80093ea:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 80093ec:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80093ee:	802b      	strh	r3, [r5, #0]
 80093f0:	8834      	ldrh	r4, [r6, #0]
 80093f2:	882b      	ldrh	r3, [r5, #0]
 80093f4:	42a3      	cmp	r3, r4
 80093f6:	d300      	bcc.n	80093fa <tcp_parseopt.isra.1.part.2+0x16>
 80093f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 80093fa:	f7ff ffd3 	bl	80093a4 <tcp_getoptbyte>
      switch (opt) {
 80093fe:	2801      	cmp	r0, #1
 8009400:	d0f6      	beq.n	80093f0 <tcp_parseopt.isra.1.part.2+0xc>
 8009402:	d3f9      	bcc.n	80093f8 <tcp_parseopt.isra.1.part.2+0x14>
 8009404:	2802      	cmp	r0, #2
 8009406:	d117      	bne.n	8009438 <tcp_parseopt.isra.1.part.2+0x54>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009408:	f7ff ffcc 	bl	80093a4 <tcp_getoptbyte>
 800940c:	2804      	cmp	r0, #4
 800940e:	d1f3      	bne.n	80093f8 <tcp_parseopt.isra.1.part.2+0x14>
 8009410:	882b      	ldrh	r3, [r5, #0]
 8009412:	3301      	adds	r3, #1
 8009414:	42a3      	cmp	r3, r4
 8009416:	daef      	bge.n	80093f8 <tcp_parseopt.isra.1.part.2+0x14>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8009418:	f7ff ffc4 	bl	80093a4 <tcp_getoptbyte>
 800941c:	0200      	lsls	r0, r0, #8
 800941e:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8009420:	f7ff ffc0 	bl	80093a4 <tcp_getoptbyte>
 8009424:	4320      	orrs	r0, r4
 8009426:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009428:	1e43      	subs	r3, r0, #1
 800942a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800942e:	bf28      	it	cs
 8009430:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8009434:	8038      	strh	r0, [r7, #0]
 8009436:	e7db      	b.n	80093f0 <tcp_parseopt.isra.1.part.2+0xc>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8009438:	f7ff ffb4 	bl	80093a4 <tcp_getoptbyte>
        if (data < 2) {
 800943c:	2801      	cmp	r0, #1
 800943e:	d9db      	bls.n	80093f8 <tcp_parseopt.isra.1.part.2+0x14>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8009440:	882b      	ldrh	r3, [r5, #0]
 8009442:	3b02      	subs	r3, #2
 8009444:	4418      	add	r0, r3
 8009446:	8028      	strh	r0, [r5, #0]
 8009448:	e7d2      	b.n	80093f0 <tcp_parseopt.isra.1.part.2+0xc>
 800944a:	bf00      	nop
 800944c:	20000d48 	.word	0x20000d48
 8009450:	20000d58 	.word	0x20000d58

08009454 <tcp_input_delayed_close>:
{
 8009454:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 8009456:	4b0d      	ldr	r3, [pc, #52]	; (800948c <tcp_input_delayed_close+0x38>)
{
 8009458:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 800945a:	7818      	ldrb	r0, [r3, #0]
 800945c:	f010 0010 	ands.w	r0, r0, #16
 8009460:	d012      	beq.n	8009488 <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009462:	7ea3      	ldrb	r3, [r4, #26]
 8009464:	06db      	lsls	r3, r3, #27
 8009466:	d406      	bmi.n	8009476 <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009468:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800946c:	b11b      	cbz	r3, 8009476 <tcp_input_delayed_close+0x22>
 800946e:	f06f 010e 	mvn.w	r1, #14
 8009472:	6920      	ldr	r0, [r4, #16]
 8009474:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009476:	4621      	mov	r1, r4
 8009478:	4805      	ldr	r0, [pc, #20]	; (8009490 <tcp_input_delayed_close+0x3c>)
 800947a:	f7fe ff65 	bl	8008348 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800947e:	2001      	movs	r0, #1
 8009480:	4621      	mov	r1, r4
 8009482:	f7fd ff23 	bl	80072cc <memp_free>
 8009486:	2001      	movs	r0, #1
}
 8009488:	bd10      	pop	{r4, pc}
 800948a:	bf00      	nop
 800948c:	20000d40 	.word	0x20000d40
 8009490:	20005054 	.word	0x20005054

08009494 <tcp_input>:
{
 8009494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 8009498:	4e9f      	ldr	r6, [pc, #636]	; (8009718 <tcp_input+0x284>)
 800949a:	6843      	ldr	r3, [r0, #4]
 800949c:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 800949e:	8943      	ldrh	r3, [r0, #10]
 80094a0:	2b13      	cmp	r3, #19
{
 80094a2:	b089      	sub	sp, #36	; 0x24
 80094a4:	4605      	mov	r5, r0
  if (p->len < TCP_HLEN) {
 80094a6:	f240 81b2 	bls.w	800980e <tcp_input+0x37a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80094aa:	4f9c      	ldr	r7, [pc, #624]	; (800971c <tcp_input+0x288>)
 80094ac:	6839      	ldr	r1, [r7, #0]
 80094ae:	6978      	ldr	r0, [r7, #20]
 80094b0:	f7fd f91b 	bl	80066ea <ip4_addr_isbroadcast_u32>
 80094b4:	46b8      	mov	r8, r7
 80094b6:	4604      	mov	r4, r0
 80094b8:	2800      	cmp	r0, #0
 80094ba:	f040 81a8 	bne.w	800980e <tcp_input+0x37a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80094c4:	2be0      	cmp	r3, #224	; 0xe0
 80094c6:	f000 81a2 	beq.w	800980e <tcp_input+0x37a>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80094ca:	6833      	ldr	r3, [r6, #0]
 80094cc:	8998      	ldrh	r0, [r3, #12]
 80094ce:	f7fc faa1 	bl	8005a14 <lwip_htons>
 80094d2:	0a81      	lsrs	r1, r0, #10
 80094d4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80094d8:	2913      	cmp	r1, #19
 80094da:	f240 8198 	bls.w	800980e <tcp_input+0x37a>
 80094de:	892b      	ldrh	r3, [r5, #8]
 80094e0:	b289      	uxth	r1, r1
 80094e2:	428b      	cmp	r3, r1
 80094e4:	f0c0 8193 	bcc.w	800980e <tcp_input+0x37a>
  if (p->len >= hdrlen_bytes) {
 80094e8:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80094ea:	4a8d      	ldr	r2, [pc, #564]	; (8009720 <tcp_input+0x28c>)
  tcphdr_opt2 = NULL;
 80094ec:	4f8d      	ldr	r7, [pc, #564]	; (8009724 <tcp_input+0x290>)
 80094ee:	9206      	str	r2, [sp, #24]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80094f0:	f1a1 0314 	sub.w	r3, r1, #20
 80094f4:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 80094f6:	4288      	cmp	r0, r1
  tcphdr_opt2 = NULL;
 80094f8:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80094fa:	8013      	strh	r3, [r2, #0]
 80094fc:	4c8a      	ldr	r4, [pc, #552]	; (8009728 <tcp_input+0x294>)
  if (p->len >= hdrlen_bytes) {
 80094fe:	d344      	bcc.n	800958a <tcp_input+0xf6>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8009500:	4249      	negs	r1, r1
 8009502:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8009504:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8009506:	f7fe f83f 	bl	8007588 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800950a:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800950c:	f8df b26c 	ldr.w	fp, [pc, #620]	; 800977c <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009510:	8820      	ldrh	r0, [r4, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009512:	4f86      	ldr	r7, [pc, #536]	; (800972c <tcp_input+0x298>)
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009514:	f7fc fa7e 	bl	8005a14 <lwip_htons>
 8009518:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800951a:	6834      	ldr	r4, [r6, #0]
 800951c:	8860      	ldrh	r0, [r4, #2]
 800951e:	f7fc fa79 	bl	8005a14 <lwip_htons>
 8009522:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009524:	6834      	ldr	r4, [r6, #0]
 8009526:	6860      	ldr	r0, [r4, #4]
 8009528:	f7fc fa77 	bl	8005a1a <lwip_htonl>
 800952c:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800952e:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009530:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009534:	68a0      	ldr	r0, [r4, #8]
 8009536:	f7fc fa70 	bl	8005a1a <lwip_htonl>
 800953a:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800953c:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800953e:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009540:	89e0      	ldrh	r0, [r4, #14]
 8009542:	f7fc fa67 	bl	8005a14 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8009546:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009548:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800954a:	8998      	ldrh	r0, [r3, #12]
 800954c:	f7fc fa62 	bl	8005a14 <lwip_htons>
 8009550:	b2c0      	uxtb	r0, r0
 8009552:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8009556:	8929      	ldrh	r1, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 8009558:	4a75      	ldr	r2, [pc, #468]	; (8009730 <tcp_input+0x29c>)
 800955a:	9203      	str	r2, [sp, #12]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800955c:	f010 0003 	ands.w	r0, r0, #3
 8009560:	bf18      	it	ne
 8009562:	2001      	movne	r0, #1
 8009564:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009566:	4973      	ldr	r1, [pc, #460]	; (8009734 <tcp_input+0x2a0>)
  flags = TCPH_FLAGS(tcphdr);
 8009568:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800956a:	4b73      	ldr	r3, [pc, #460]	; (8009738 <tcp_input+0x2a4>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800956c:	680c      	ldr	r4, [r1, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800956e:	8018      	strh	r0, [r3, #0]
  prev = NULL;
 8009570:	f04f 0a00 	mov.w	sl, #0
 8009574:	9304      	str	r3, [sp, #16]
 8009576:	4689      	mov	r9, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009578:	2c00      	cmp	r4, #0
 800957a:	d140      	bne.n	80095fe <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800957c:	4b6f      	ldr	r3, [pc, #444]	; (800973c <tcp_input+0x2a8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800957e:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8009740 <tcp_input+0x2ac>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009582:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009584:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8009780 <tcp_input+0x2ec>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009588:	e148      	b.n	800981c <tcp_input+0x388>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800958a:	682b      	ldr	r3, [r5, #0]
 800958c:	b92b      	cbnz	r3, 800959a <tcp_input+0x106>
 800958e:	4b6c      	ldr	r3, [pc, #432]	; (8009740 <tcp_input+0x2ac>)
 8009590:	496c      	ldr	r1, [pc, #432]	; (8009744 <tcp_input+0x2b0>)
 8009592:	486d      	ldr	r0, [pc, #436]	; (8009748 <tcp_input+0x2b4>)
 8009594:	22b2      	movs	r2, #178	; 0xb2
 8009596:	f004 faeb 	bl	800db70 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 800959a:	f06f 0113 	mvn.w	r1, #19
 800959e:	4628      	mov	r0, r5
 80095a0:	f7fd fff2 	bl	8007588 <pbuf_header>
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80095a4:	9b06      	ldr	r3, [sp, #24]
    tcphdr_opt1len = p->len;
 80095a6:	8969      	ldrh	r1, [r5, #10]
 80095a8:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80095aa:	881c      	ldrh	r4, [r3, #0]
 80095ac:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80095ae:	4249      	negs	r1, r1
 80095b0:	b209      	sxth	r1, r1
 80095b2:	4628      	mov	r0, r5
 80095b4:	f7fd ffe8 	bl	8007588 <pbuf_header>
    if (opt2len > p->next->len) {
 80095b8:	6828      	ldr	r0, [r5, #0]
 80095ba:	8943      	ldrh	r3, [r0, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80095bc:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 80095be:	42a3      	cmp	r3, r4
 80095c0:	f0c0 8125 	bcc.w	800980e <tcp_input+0x37a>
    pbuf_header(p->next, -(s16_t)opt2len);
 80095c4:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80095c6:	6843      	ldr	r3, [r0, #4]
 80095c8:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 80095ca:	b209      	sxth	r1, r1
 80095cc:	f7fd ffdc 	bl	8007588 <pbuf_header>
    p->tot_len -= opt2len;
 80095d0:	892b      	ldrh	r3, [r5, #8]
 80095d2:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80095d4:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 80095d6:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80095d8:	b12b      	cbz	r3, 80095e6 <tcp_input+0x152>
 80095da:	4b59      	ldr	r3, [pc, #356]	; (8009740 <tcp_input+0x2ac>)
 80095dc:	495b      	ldr	r1, [pc, #364]	; (800974c <tcp_input+0x2b8>)
 80095de:	485a      	ldr	r0, [pc, #360]	; (8009748 <tcp_input+0x2b4>)
 80095e0:	22cf      	movs	r2, #207	; 0xcf
 80095e2:	f004 fac5 	bl	800db70 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80095e6:	682b      	ldr	r3, [r5, #0]
 80095e8:	892a      	ldrh	r2, [r5, #8]
 80095ea:	891b      	ldrh	r3, [r3, #8]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d08c      	beq.n	800950a <tcp_input+0x76>
 80095f0:	4b53      	ldr	r3, [pc, #332]	; (8009740 <tcp_input+0x2ac>)
 80095f2:	4957      	ldr	r1, [pc, #348]	; (8009750 <tcp_input+0x2bc>)
 80095f4:	4854      	ldr	r0, [pc, #336]	; (8009748 <tcp_input+0x2b4>)
 80095f6:	22d0      	movs	r2, #208	; 0xd0
 80095f8:	f004 faba 	bl	800db70 <iprintf>
 80095fc:	e785      	b.n	800950a <tcp_input+0x76>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80095fe:	7d23      	ldrb	r3, [r4, #20]
 8009600:	b92b      	cbnz	r3, 800960e <tcp_input+0x17a>
 8009602:	4b4f      	ldr	r3, [pc, #316]	; (8009740 <tcp_input+0x2ac>)
 8009604:	4953      	ldr	r1, [pc, #332]	; (8009754 <tcp_input+0x2c0>)
 8009606:	4850      	ldr	r0, [pc, #320]	; (8009748 <tcp_input+0x2b4>)
 8009608:	22e2      	movs	r2, #226	; 0xe2
 800960a:	f004 fab1 	bl	800db70 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800960e:	7d23      	ldrb	r3, [r4, #20]
 8009610:	2b0a      	cmp	r3, #10
 8009612:	d105      	bne.n	8009620 <tcp_input+0x18c>
 8009614:	4b4a      	ldr	r3, [pc, #296]	; (8009740 <tcp_input+0x2ac>)
 8009616:	4950      	ldr	r1, [pc, #320]	; (8009758 <tcp_input+0x2c4>)
 8009618:	484b      	ldr	r0, [pc, #300]	; (8009748 <tcp_input+0x2b4>)
 800961a:	22e3      	movs	r2, #227	; 0xe3
 800961c:	f004 faa8 	bl	800db70 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009620:	7d23      	ldrb	r3, [r4, #20]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d105      	bne.n	8009632 <tcp_input+0x19e>
 8009626:	4b46      	ldr	r3, [pc, #280]	; (8009740 <tcp_input+0x2ac>)
 8009628:	494c      	ldr	r1, [pc, #304]	; (800975c <tcp_input+0x2c8>)
 800962a:	4847      	ldr	r0, [pc, #284]	; (8009748 <tcp_input+0x2b4>)
 800962c:	22e4      	movs	r2, #228	; 0xe4
 800962e:	f004 fa9f 	bl	800db70 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8009632:	6832      	ldr	r2, [r6, #0]
 8009634:	8b21      	ldrh	r1, [r4, #24]
 8009636:	8813      	ldrh	r3, [r2, #0]
 8009638:	4299      	cmp	r1, r3
 800963a:	68e3      	ldr	r3, [r4, #12]
 800963c:	d169      	bne.n	8009712 <tcp_input+0x27e>
 800963e:	8ae1      	ldrh	r1, [r4, #22]
 8009640:	8852      	ldrh	r2, [r2, #2]
 8009642:	4291      	cmp	r1, r2
 8009644:	d165      	bne.n	8009712 <tcp_input+0x27e>
        pcb->local_port == tcphdr->dest &&
 8009646:	6861      	ldr	r1, [r4, #4]
 8009648:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800964c:	4291      	cmp	r1, r2
 800964e:	d160      	bne.n	8009712 <tcp_input+0x27e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009650:	6821      	ldr	r1, [r4, #0]
 8009652:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8009656:	4291      	cmp	r1, r2
 8009658:	d15b      	bne.n	8009712 <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800965a:	429c      	cmp	r4, r3
 800965c:	f040 8406 	bne.w	8009e6c <tcp_input+0x9d8>
 8009660:	4b37      	ldr	r3, [pc, #220]	; (8009740 <tcp_input+0x2ac>)
 8009662:	493f      	ldr	r1, [pc, #252]	; (8009760 <tcp_input+0x2cc>)
 8009664:	4838      	ldr	r0, [pc, #224]	; (8009748 <tcp_input+0x2b4>)
 8009666:	22ec      	movs	r2, #236	; 0xec
 8009668:	f004 fa82 	bl	800db70 <iprintf>
      if (prev != NULL) {
 800966c:	f1ba 0f00 	cmp.w	sl, #0
 8009670:	d007      	beq.n	8009682 <tcp_input+0x1ee>
        prev->next = pcb->next;
 8009672:	68e3      	ldr	r3, [r4, #12]
 8009674:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 8009678:	f8d9 3000 	ldr.w	r3, [r9]
 800967c:	60e3      	str	r3, [r4, #12]
        tcp_active_pcbs = pcb;
 800967e:	f8c9 4000 	str.w	r4, [r9]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009682:	68e3      	ldr	r3, [r4, #12]
 8009684:	429c      	cmp	r4, r3
 8009686:	d105      	bne.n	8009694 <tcp_input+0x200>
 8009688:	4b2d      	ldr	r3, [pc, #180]	; (8009740 <tcp_input+0x2ac>)
 800968a:	4936      	ldr	r1, [pc, #216]	; (8009764 <tcp_input+0x2d0>)
 800968c:	482e      	ldr	r0, [pc, #184]	; (8009748 <tcp_input+0x2b4>)
 800968e:	22f4      	movs	r2, #244	; 0xf4
 8009690:	f004 fa6e 	bl	800db70 <iprintf>
    inseg.next = NULL;
 8009694:	4b34      	ldr	r3, [pc, #208]	; (8009768 <tcp_input+0x2d4>)
    inseg.len = p->tot_len;
 8009696:	8929      	ldrh	r1, [r5, #8]
 8009698:	8119      	strh	r1, [r3, #8]
    inseg.next = NULL;
 800969a:	2200      	movs	r2, #0
    inseg.tcphdr = tcphdr;
 800969c:	6831      	ldr	r1, [r6, #0]
    inseg.next = NULL;
 800969e:	601a      	str	r2, [r3, #0]
    inseg.tcphdr = tcphdr;
 80096a0:	60d9      	str	r1, [r3, #12]
    recv_flags = 0;
 80096a2:	4832      	ldr	r0, [pc, #200]	; (800976c <tcp_input+0x2d8>)
    recv_acked = 0;
 80096a4:	4932      	ldr	r1, [pc, #200]	; (8009770 <tcp_input+0x2dc>)
    inseg.p = p;
 80096a6:	605d      	str	r5, [r3, #4]
    recv_data = NULL;
 80096a8:	4b32      	ldr	r3, [pc, #200]	; (8009774 <tcp_input+0x2e0>)
    recv_flags = 0;
 80096aa:	7002      	strb	r2, [r0, #0]
    recv_data = NULL;
 80096ac:	601a      	str	r2, [r3, #0]
    recv_acked = 0;
 80096ae:	800a      	strh	r2, [r1, #0]
    if (flags & TCP_PSH) {
 80096b0:	9a03      	ldr	r2, [sp, #12]
 80096b2:	9105      	str	r1, [sp, #20]
 80096b4:	7812      	ldrb	r2, [r2, #0]
 80096b6:	f012 0f08 	tst.w	r2, #8
 80096ba:	4680      	mov	r8, r0
 80096bc:	469a      	mov	sl, r3
 80096be:	d003      	beq.n	80096c8 <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 80096c0:	7b6b      	ldrb	r3, [r5, #13]
 80096c2:	f043 0301 	orr.w	r3, r3, #1
 80096c6:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 80096c8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80096ca:	4d2b      	ldr	r5, [pc, #172]	; (8009778 <tcp_input+0x2e4>)
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f000 8137 	beq.w	8009940 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80096d2:	4620      	mov	r0, r4
 80096d4:	f7fe ff4a 	bl	800856c <tcp_process_refused_data>
 80096d8:	300d      	adds	r0, #13
 80096da:	d008      	beq.n	80096ee <tcp_input+0x25a>
 80096dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f000 812e 	beq.w	8009940 <tcp_input+0x4ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80096e4:	9b04      	ldr	r3, [sp, #16]
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 8129 	beq.w	8009940 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 80096ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80096f0:	b913      	cbnz	r3, 80096f8 <tcp_input+0x264>
          tcp_send_empty_ack(pcb);
 80096f2:	4620      	mov	r0, r4
 80096f4:	f001 f802 	bl	800a6fc <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 80096f8:	2400      	movs	r4, #0
 80096fa:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL)
 80096fc:	4d1a      	ldr	r5, [pc, #104]	; (8009768 <tcp_input+0x2d4>)
    recv_data = NULL;
 80096fe:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 8009702:	6868      	ldr	r0, [r5, #4]
 8009704:	b110      	cbz	r0, 800970c <tcp_input+0x278>
      pbuf_free(inseg.p);
 8009706:	f7fd ff45 	bl	8007594 <pbuf_free>
      inseg.p = NULL;
 800970a:	606c      	str	r4, [r5, #4]
}
 800970c:	b009      	add	sp, #36	; 0x24
 800970e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009712:	46a2      	mov	sl, r4
 8009714:	461c      	mov	r4, r3
 8009716:	e72f      	b.n	8009578 <tcp_input+0xe4>
 8009718:	20000d4c 	.word	0x20000d4c
 800971c:	20001b2c 	.word	0x20001b2c
 8009720:	20000d58 	.word	0x20000d58
 8009724:	20000d54 	.word	0x20000d54
 8009728:	20000d50 	.word	0x20000d50
 800972c:	20000d20 	.word	0x20000d20
 8009730:	20000d24 	.word	0x20000d24
 8009734:	20005054 	.word	0x20005054
 8009738:	20000d5a 	.word	0x20000d5a
 800973c:	20005064 	.word	0x20005064
 8009740:	08010564 	.word	0x08010564
 8009744:	080103ae 	.word	0x080103ae
 8009748:	0800f20f 	.word	0x0800f20f
 800974c:	080103be 	.word	0x080103be
 8009750:	080103ca 	.word	0x080103ca
 8009754:	080103e9 	.word	0x080103e9
 8009758:	08010410 	.word	0x08010410
 800975c:	0801043a 	.word	0x0801043a
 8009760:	08010461 	.word	0x08010461
 8009764:	0801048c 	.word	0x0801048c
 8009768:	20000d28 	.word	0x20000d28
 800976c:	20000d40 	.word	0x20000d40
 8009770:	20000d38 	.word	0x20000d38
 8009774:	20000d3c 	.word	0x20000d3c
 8009778:	20005068 	.word	0x20005068
 800977c:	20000d44 	.word	0x20000d44
 8009780:	080104b6 	.word	0x080104b6
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009784:	7d23      	ldrb	r3, [r4, #20]
 8009786:	2b0a      	cmp	r3, #10
 8009788:	d005      	beq.n	8009796 <tcp_input+0x302>
 800978a:	4653      	mov	r3, sl
 800978c:	22fe      	movs	r2, #254	; 0xfe
 800978e:	4649      	mov	r1, r9
 8009790:	489d      	ldr	r0, [pc, #628]	; (8009a08 <tcp_input+0x574>)
 8009792:	f004 f9ed 	bl	800db70 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8009796:	6833      	ldr	r3, [r6, #0]
 8009798:	8b22      	ldrh	r2, [r4, #24]
 800979a:	8818      	ldrh	r0, [r3, #0]
 800979c:	4290      	cmp	r0, r2
 800979e:	d13c      	bne.n	800981a <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 80097a0:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 80097a2:	885a      	ldrh	r2, [r3, #2]
 80097a4:	428a      	cmp	r2, r1
 80097a6:	d138      	bne.n	800981a <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 80097a8:	6861      	ldr	r1, [r4, #4]
 80097aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80097ae:	4299      	cmp	r1, r3
 80097b0:	d133      	bne.n	800981a <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80097b2:	6821      	ldr	r1, [r4, #0]
 80097b4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80097b8:	4299      	cmp	r1, r3
 80097ba:	d12e      	bne.n	800981a <tcp_input+0x386>
  if (flags & TCP_RST) {
 80097bc:	9b03      	ldr	r3, [sp, #12]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	0759      	lsls	r1, r3, #29
 80097c2:	d424      	bmi.n	800980e <tcp_input+0x37a>
  if (flags & TCP_SYN) {
 80097c4:	079e      	lsls	r6, r3, #30
 80097c6:	d513      	bpl.n	80097f0 <tcp_input+0x35c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80097c8:	f8db 1000 	ldr.w	r1, [fp]
 80097cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097ce:	1acb      	subs	r3, r1, r3
 80097d0:	d413      	bmi.n	80097fa <tcp_input+0x366>
 80097d2:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 80097d4:	1b9b      	subs	r3, r3, r6
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	dc0f      	bgt.n	80097fa <tcp_input+0x366>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80097da:	9b04      	ldr	r3, [sp, #16]
 80097dc:	881c      	ldrh	r4, [r3, #0]
 80097de:	9001      	str	r0, [sp, #4]
 80097e0:	9200      	str	r2, [sp, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80097e2:	4b8a      	ldr	r3, [pc, #552]	; (8009a0c <tcp_input+0x578>)
 80097e4:	4421      	add	r1, r4
 80097e6:	1d1a      	adds	r2, r3, #4
 80097e8:	6838      	ldr	r0, [r7, #0]
 80097ea:	f001 f93b 	bl	800aa64 <tcp_rst>
 80097ee:	e00e      	b.n	800980e <tcp_input+0x37a>
  } else if (flags & TCP_FIN) {
 80097f0:	07d8      	lsls	r0, r3, #31
    pcb->tmr = tcp_ticks;
 80097f2:	bf42      	ittt	mi
 80097f4:	4b86      	ldrmi	r3, [pc, #536]	; (8009a10 <tcp_input+0x57c>)
 80097f6:	681b      	ldrmi	r3, [r3, #0]
 80097f8:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 80097fa:	9b04      	ldr	r3, [sp, #16]
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	b133      	cbz	r3, 800980e <tcp_input+0x37a>
    pcb->flags |= TF_ACK_NOW;
 8009800:	7ea3      	ldrb	r3, [r4, #26]
 8009802:	f043 0302 	orr.w	r3, r3, #2
 8009806:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8009808:	4620      	mov	r0, r4
 800980a:	f000 ffad 	bl	800a768 <tcp_output>
  pbuf_free(p);
 800980e:	4628      	mov	r0, r5
}
 8009810:	b009      	add	sp, #36	; 0x24
 8009812:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8009816:	f7fd bebd 	b.w	8007594 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800981a:	68e4      	ldr	r4, [r4, #12]
 800981c:	2c00      	cmp	r4, #0
 800981e:	d1b1      	bne.n	8009784 <tcp_input+0x2f0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009820:	4b7c      	ldr	r3, [pc, #496]	; (8009a14 <tcp_input+0x580>)
      if (lpcb->local_port == tcphdr->dest) {
 8009822:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009824:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009826:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800982a:	4689      	mov	r9, r1
 800982c:	f1b9 0f00 	cmp.w	r9, #0
 8009830:	d111      	bne.n	8009856 <tcp_input+0x3c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009832:	8990      	ldrh	r0, [r2, #12]
 8009834:	f7fc f8ee 	bl	8005a14 <lwip_htons>
 8009838:	0743      	lsls	r3, r0, #29
 800983a:	d4e8      	bmi.n	800980e <tcp_input+0x37a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800983c:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800983e:	9a04      	ldr	r2, [sp, #16]
 8009840:	f8db 1000 	ldr.w	r1, [fp]
 8009844:	8810      	ldrh	r0, [r2, #0]
 8009846:	881a      	ldrh	r2, [r3, #0]
 8009848:	9201      	str	r2, [sp, #4]
 800984a:	885b      	ldrh	r3, [r3, #2]
 800984c:	9300      	str	r3, [sp, #0]
 800984e:	4b6f      	ldr	r3, [pc, #444]	; (8009a0c <tcp_input+0x578>)
 8009850:	4401      	add	r1, r0
 8009852:	1d1a      	adds	r2, r3, #4
 8009854:	e7c8      	b.n	80097e8 <tcp_input+0x354>
      if (lpcb->local_port == tcphdr->dest) {
 8009856:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 800985a:	8853      	ldrh	r3, [r2, #2]
 800985c:	4283      	cmp	r3, r0
 800985e:	d107      	bne.n	8009870 <tcp_input+0x3dc>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009860:	f8d9 3000 	ldr.w	r3, [r9]
 8009864:	4573      	cmp	r3, lr
 8009866:	f000 82dd 	beq.w	8009e24 <tcp_input+0x990>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800986a:	2b00      	cmp	r3, #0
 800986c:	f000 82da 	beq.w	8009e24 <tcp_input+0x990>
 8009870:	464c      	mov	r4, r9
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009872:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8009876:	e7d9      	b.n	800982c <tcp_input+0x398>
  } else if (flags & TCP_SYN) {
 8009878:	0798      	lsls	r0, r3, #30
 800987a:	d5c8      	bpl.n	800980e <tcp_input+0x37a>
    npcb = tcp_alloc(pcb->prio);
 800987c:	f899 0015 	ldrb.w	r0, [r9, #21]
 8009880:	f7fe ffb8 	bl	80087f4 <tcp_alloc>
    if (npcb == NULL) {
 8009884:	4604      	mov	r4, r0
 8009886:	b950      	cbnz	r0, 800989e <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009888:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d0be      	beq.n	800980e <tcp_input+0x37a>
 8009890:	4601      	mov	r1, r0
 8009892:	f04f 32ff 	mov.w	r2, #4294967295
 8009896:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800989a:	4798      	blx	r3
 800989c:	e7b7      	b.n	800980e <tcp_input+0x37a>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800989e:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 80098a2:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80098a4:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80098a6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80098aa:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 80098ac:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 80098b0:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 80098b2:	7813      	ldrb	r3, [r2, #0]
 80098b4:	7852      	ldrb	r2, [r2, #1]
 80098b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80098ba:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 80098bc:	2303      	movs	r3, #3
 80098be:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 80098c0:	f8db 3000 	ldr.w	r3, [fp]
 80098c4:	3301      	adds	r3, #1
 80098c6:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80098c8:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80098ca:	f7ff f81f 	bl	800890c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80098ce:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 80098d2:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80098d4:	3b01      	subs	r3, #1
 80098d6:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 80098d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_nxt = iss;
 80098dc:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 80098de:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 80098e0:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 80098e2:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 80098e4:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80098e8:	f899 3008 	ldrb.w	r3, [r9, #8]
 80098ec:	f003 030c 	and.w	r3, r3, #12
 80098f0:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 80098f2:	4b49      	ldr	r3, [pc, #292]	; (8009a18 <tcp_input+0x584>)
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	60e2      	str	r2, [r4, #12]
 80098f8:	601c      	str	r4, [r3, #0]
 80098fa:	f001 fa55 	bl	800ada8 <tcp_timer_needed>
 80098fe:	4b47      	ldr	r3, [pc, #284]	; (8009a1c <tcp_input+0x588>)
 8009900:	2201      	movs	r2, #1
 8009902:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 8009904:	9b06      	ldr	r3, [sp, #24]
 8009906:	881b      	ldrh	r3, [r3, #0]
 8009908:	b11b      	cbz	r3, 8009912 <tcp_input+0x47e>
 800990a:	f104 0032 	add.w	r0, r4, #50	; 0x32
 800990e:	f7ff fd69 	bl	80093e4 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 8009912:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009914:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8009916:	89db      	ldrh	r3, [r3, #14]
 8009918:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800991c:	1d21      	adds	r1, r4, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 800991e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009922:	f7fe ffff 	bl	8008924 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009926:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009928:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800992a:	4620      	mov	r0, r4
 800992c:	f000 fe2c 	bl	800a588 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8009930:	2800      	cmp	r0, #0
 8009932:	f43f af69 	beq.w	8009808 <tcp_input+0x374>
      tcp_abandon(npcb, 0);
 8009936:	2100      	movs	r1, #0
 8009938:	4620      	mov	r0, r4
 800993a:	f7fe fe9d 	bl	8008678 <tcp_abandon>
 800993e:	e766      	b.n	800980e <tcp_input+0x37a>
  if (flags & TCP_RST) {
 8009940:	9b03      	ldr	r3, [sp, #12]
    tcp_input_pcb = pcb;
 8009942:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	0759      	lsls	r1, r3, #29
 8009948:	d535      	bpl.n	80099b6 <tcp_input+0x522>
    if (pcb->state == SYN_SENT) {
 800994a:	7d21      	ldrb	r1, [r4, #20]
 800994c:	2902      	cmp	r1, #2
 800994e:	d122      	bne.n	8009996 <tcp_input+0x502>
      if (ackno == pcb->snd_nxt) {
 8009950:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	429a      	cmp	r2, r3
 8009956:	d109      	bne.n	800996c <tcp_input+0x4d8>
      recv_flags |= TF_RESET;
 8009958:	f898 3000 	ldrb.w	r3, [r8]
 800995c:	f043 0308 	orr.w	r3, r3, #8
 8009960:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 8009964:	7ea3      	ldrb	r3, [r4, #26]
 8009966:	f023 0301 	bic.w	r3, r3, #1
 800996a:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800996c:	f898 3000 	ldrb.w	r3, [r8]
 8009970:	0719      	lsls	r1, r3, #28
 8009972:	f140 81ed 	bpl.w	8009d50 <tcp_input+0x8bc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009976:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800997a:	b11b      	cbz	r3, 8009984 <tcp_input+0x4f0>
 800997c:	f06f 010d 	mvn.w	r1, #13
 8009980:	6920      	ldr	r0, [r4, #16]
 8009982:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009984:	4621      	mov	r1, r4
 8009986:	4824      	ldr	r0, [pc, #144]	; (8009a18 <tcp_input+0x584>)
 8009988:	f7fe fcde 	bl	8008348 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800998c:	4621      	mov	r1, r4
 800998e:	2001      	movs	r0, #1
 8009990:	f7fd fc9c 	bl	80072cc <memp_free>
 8009994:	e6b0      	b.n	80096f8 <tcp_input+0x264>
      if (seqno == pcb->rcv_nxt) {
 8009996:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009998:	f8db 3000 	ldr.w	r3, [fp]
 800999c:	429a      	cmp	r2, r3
 800999e:	f000 825a 	beq.w	8009e56 <tcp_input+0x9c2>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80099a2:	1a9b      	subs	r3, r3, r2
 80099a4:	d4e2      	bmi.n	800996c <tcp_input+0x4d8>
 80099a6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80099a8:	1a9b      	subs	r3, r3, r2
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	dcde      	bgt.n	800996c <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 80099ae:	7ea3      	ldrb	r3, [r4, #26]
 80099b0:	f043 0302 	orr.w	r3, r3, #2
 80099b4:	e7d9      	b.n	800996a <tcp_input+0x4d6>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80099b6:	f013 0102 	ands.w	r1, r3, #2
 80099ba:	d003      	beq.n	80099c4 <tcp_input+0x530>
 80099bc:	7d22      	ldrb	r2, [r4, #20]
 80099be:	3a02      	subs	r2, #2
 80099c0:	2a01      	cmp	r2, #1
 80099c2:	d8f4      	bhi.n	80099ae <tcp_input+0x51a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80099c4:	7ea2      	ldrb	r2, [r4, #26]
 80099c6:	06d2      	lsls	r2, r2, #27
    pcb->tmr = tcp_ticks;
 80099c8:	bf5e      	ittt	pl
 80099ca:	4a11      	ldrpl	r2, [pc, #68]	; (8009a10 <tcp_input+0x57c>)
 80099cc:	6812      	ldrpl	r2, [r2, #0]
 80099ce:	6222      	strpl	r2, [r4, #32]
  pcb->keep_cnt_sent = 0;
 80099d0:	2200      	movs	r2, #0
 80099d2:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 80099d6:	9a06      	ldr	r2, [sp, #24]
 80099d8:	8812      	ldrh	r2, [r2, #0]
 80099da:	b13a      	cbz	r2, 80099ec <tcp_input+0x558>
 80099dc:	f104 0032 	add.w	r0, r4, #50	; 0x32
 80099e0:	9107      	str	r1, [sp, #28]
 80099e2:	9306      	str	r3, [sp, #24]
 80099e4:	f7ff fcfe 	bl	80093e4 <tcp_parseopt.isra.1.part.2>
 80099e8:	9907      	ldr	r1, [sp, #28]
 80099ea:	9b06      	ldr	r3, [sp, #24]
  switch (pcb->state) {
 80099ec:	7d22      	ldrb	r2, [r4, #20]
 80099ee:	3a02      	subs	r2, #2
 80099f0:	2a07      	cmp	r2, #7
 80099f2:	d8bb      	bhi.n	800996c <tcp_input+0x4d8>
 80099f4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80099f8:	00940014 	.word	0x00940014
 80099fc:	010000fc 	.word	0x010000fc
 8009a00:	00fc014a 	.word	0x00fc014a
 8009a04:	01830164 	.word	0x01830164
 8009a08:	0800f20f 	.word	0x0800f20f
 8009a0c:	20001b3c 	.word	0x20001b3c
 8009a10:	20005058 	.word	0x20005058
 8009a14:	2000505c 	.word	0x2000505c
 8009a18:	20005054 	.word	0x20005054
 8009a1c:	20005050 	.word	0x20005050
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009a20:	f003 0212 	and.w	r2, r3, #18
 8009a24:	2a12      	cmp	r2, #18
 8009a26:	d15e      	bne.n	8009ae6 <tcp_input+0x652>
        && (ackno == pcb->lastack + 1)) {
 8009a28:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	3201      	adds	r2, #1
 8009a2e:	428a      	cmp	r2, r1
 8009a30:	d159      	bne.n	8009ae6 <tcp_input+0x652>
      pcb->rcv_nxt = seqno + 1;
 8009a32:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 8009a36:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 8009a38:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8009a3a:	6832      	ldr	r2, [r6, #0]
      pcb->rcv_nxt = seqno + 1;
 8009a3c:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009a3e:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009a40:	3b01      	subs	r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8009a42:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009a44:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8009a46:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 8009a48:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8009a4c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 8009a50:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009a52:	18e1      	adds	r1, r4, r3
 8009a54:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8009a56:	f7fe ff65 	bl	8008924 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009a5a:	f241 121c 	movw	r2, #4380	; 0x111c
 8009a5e:	0043      	lsls	r3, r0, #1
 8009a60:	4293      	cmp	r3, r2
 8009a62:	bf38      	it	cc
 8009a64:	4613      	movcc	r3, r2
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009a66:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009a68:	0080      	lsls	r0, r0, #2
 8009a6a:	4283      	cmp	r3, r0
 8009a6c:	bf28      	it	cs
 8009a6e:	4603      	movcs	r3, r0
 8009a70:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009a74:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009a78:	b933      	cbnz	r3, 8009a88 <tcp_input+0x5f4>
 8009a7a:	4bad      	ldr	r3, [pc, #692]	; (8009d30 <tcp_input+0x89c>)
 8009a7c:	49ad      	ldr	r1, [pc, #692]	; (8009d34 <tcp_input+0x8a0>)
 8009a7e:	48ae      	ldr	r0, [pc, #696]	; (8009d38 <tcp_input+0x8a4>)
 8009a80:	f240 321a 	movw	r2, #794	; 0x31a
 8009a84:	f004 f874 	bl	800db70 <iprintf>
      --pcb->snd_queuelen;
 8009a88:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 8009a8c:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 8009a94:	b9fe      	cbnz	r6, 8009ad6 <tcp_input+0x642>
        rseg = pcb->unsent;
 8009a96:	6ea6      	ldr	r6, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8009a98:	b936      	cbnz	r6, 8009aa8 <tcp_input+0x614>
 8009a9a:	4ba5      	ldr	r3, [pc, #660]	; (8009d30 <tcp_input+0x89c>)
 8009a9c:	49a7      	ldr	r1, [pc, #668]	; (8009d3c <tcp_input+0x8a8>)
 8009a9e:	48a6      	ldr	r0, [pc, #664]	; (8009d38 <tcp_input+0x8a4>)
 8009aa0:	f240 3222 	movw	r2, #802	; 0x322
 8009aa4:	f004 f864 	bl	800db70 <iprintf>
        pcb->unsent = rseg->next;
 8009aa8:	6833      	ldr	r3, [r6, #0]
 8009aaa:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8009aac:	4630      	mov	r0, r6
 8009aae:	f7fe f9b3 	bl	8007e18 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8009ab2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009ab4:	b993      	cbnz	r3, 8009adc <tcp_input+0x648>
        pcb->rtime = -1;
 8009ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009aba:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009abc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f43f af74 	beq.w	80099ae <tcp_input+0x51a>
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	4621      	mov	r1, r4
 8009aca:	6920      	ldr	r0, [r4, #16]
 8009acc:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8009ace:	300d      	adds	r0, #13
 8009ad0:	f47f af6d 	bne.w	80099ae <tcp_input+0x51a>
 8009ad4:	e610      	b.n	80096f8 <tcp_input+0x264>
        pcb->unacked = rseg->next;
 8009ad6:	6833      	ldr	r3, [r6, #0]
 8009ad8:	66e3      	str	r3, [r4, #108]	; 0x6c
 8009ada:	e7e7      	b.n	8009aac <tcp_input+0x618>
        pcb->rtime = 0;
 8009adc:	2300      	movs	r3, #0
 8009ade:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8009ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ae4:	e7ea      	b.n	8009abc <tcp_input+0x628>
    else if (flags & TCP_ACK) {
 8009ae6:	06db      	lsls	r3, r3, #27
 8009ae8:	f57f af40 	bpl.w	800996c <tcp_input+0x4d8>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009aec:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009aee:	9a04      	ldr	r2, [sp, #16]
 8009af0:	f8db 1000 	ldr.w	r1, [fp]
 8009af4:	8810      	ldrh	r0, [r2, #0]
 8009af6:	881a      	ldrh	r2, [r3, #0]
 8009af8:	9201      	str	r2, [sp, #4]
 8009afa:	885b      	ldrh	r3, [r3, #2]
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	4b90      	ldr	r3, [pc, #576]	; (8009d40 <tcp_input+0x8ac>)
 8009b00:	4401      	add	r1, r0
 8009b02:	1d1a      	adds	r2, r3, #4
 8009b04:	6838      	ldr	r0, [r7, #0]
 8009b06:	f000 ffad 	bl	800aa64 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009b0a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009b0e:	2b05      	cmp	r3, #5
 8009b10:	f63f af2c 	bhi.w	800996c <tcp_input+0x4d8>
        pcb->rtime = 0;
 8009b14:	2300      	movs	r3, #0
 8009b16:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f000 fffd 	bl	800ab18 <tcp_rexmit_rto>
 8009b1e:	e725      	b.n	800996c <tcp_input+0x4d8>
    if (flags & TCP_ACK) {
 8009b20:	06d8      	lsls	r0, r3, #27
 8009b22:	d557      	bpl.n	8009bd4 <tcp_input+0x740>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8009b24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009b26:	6838      	ldr	r0, [r7, #0]
 8009b28:	43db      	mvns	r3, r3
 8009b2a:	42c3      	cmn	r3, r0
 8009b2c:	d443      	bmi.n	8009bb6 <tcp_input+0x722>
 8009b2e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009b30:	1ac3      	subs	r3, r0, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	dc3f      	bgt.n	8009bb6 <tcp_input+0x722>
        pcb->state = ESTABLISHED;
 8009b36:	2304      	movs	r3, #4
 8009b38:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8009b3a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009b3c:	b143      	cbz	r3, 8009b50 <tcp_input+0x6bc>
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	b933      	cbnz	r3, 8009b50 <tcp_input+0x6bc>
 8009b42:	4b7b      	ldr	r3, [pc, #492]	; (8009d30 <tcp_input+0x89c>)
 8009b44:	497f      	ldr	r1, [pc, #508]	; (8009d44 <tcp_input+0x8b0>)
 8009b46:	487c      	ldr	r0, [pc, #496]	; (8009d38 <tcp_input+0x8a4>)
 8009b48:	f240 3251 	movw	r2, #849	; 0x351
 8009b4c:	f004 f810 	bl	800db70 <iprintf>
        if (pcb->listener == NULL) {
 8009b50:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009b52:	b91b      	cbnz	r3, 8009b5c <tcp_input+0x6c8>
            tcp_abort(pcb);
 8009b54:	4620      	mov	r0, r4
 8009b56:	f7fe fe05 	bl	8008764 <tcp_abort>
            goto aborted;
 8009b5a:	e5cd      	b.n	80096f8 <tcp_input+0x264>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d0f8      	beq.n	8009b54 <tcp_input+0x6c0>
 8009b62:	2200      	movs	r2, #0
 8009b64:	4621      	mov	r1, r4
 8009b66:	6920      	ldr	r0, [r4, #16]
 8009b68:	4798      	blx	r3
        if (err != ERR_OK) {
 8009b6a:	b110      	cbz	r0, 8009b72 <tcp_input+0x6de>
          if (err != ERR_ABRT) {
 8009b6c:	300d      	adds	r0, #13
 8009b6e:	d1f1      	bne.n	8009b54 <tcp_input+0x6c0>
 8009b70:	e5c2      	b.n	80096f8 <tcp_input+0x264>
        tcp_receive(pcb);
 8009b72:	4620      	mov	r0, r4
 8009b74:	f7fe ff4a 	bl	8008a0c <tcp_receive>
        if (recv_acked != 0) {
 8009b78:	9b05      	ldr	r3, [sp, #20]
 8009b7a:	881b      	ldrh	r3, [r3, #0]
 8009b7c:	b113      	cbz	r3, 8009b84 <tcp_input+0x6f0>
          recv_acked--;
 8009b7e:	9a05      	ldr	r2, [sp, #20]
 8009b80:	3b01      	subs	r3, #1
 8009b82:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009b84:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8009b86:	f241 111c 	movw	r1, #4380	; 0x111c
 8009b8a:	0053      	lsls	r3, r2, #1
 8009b8c:	428b      	cmp	r3, r1
 8009b8e:	bf38      	it	cc
 8009b90:	460b      	movcc	r3, r1
 8009b92:	0092      	lsls	r2, r2, #2
 8009b94:	4293      	cmp	r3, r2
 8009b96:	bf28      	it	cs
 8009b98:	4613      	movcs	r3, r2
 8009b9a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009b9e:	f898 3000 	ldrb.w	r3, [r8]
 8009ba2:	069a      	lsls	r2, r3, #26
 8009ba4:	f57f aee2 	bpl.w	800996c <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8009ba8:	7ea3      	ldrb	r3, [r4, #26]
 8009baa:	f043 0302 	orr.w	r3, r3, #2
 8009bae:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 8009bb0:	2307      	movs	r3, #7
        pcb->state = CLOSING;
 8009bb2:	7523      	strb	r3, [r4, #20]
 8009bb4:	e6da      	b.n	800996c <tcp_input+0x4d8>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009bb6:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bb8:	9a04      	ldr	r2, [sp, #16]
 8009bba:	f8db 1000 	ldr.w	r1, [fp]
 8009bbe:	8816      	ldrh	r6, [r2, #0]
 8009bc0:	881a      	ldrh	r2, [r3, #0]
 8009bc2:	9201      	str	r2, [sp, #4]
 8009bc4:	885b      	ldrh	r3, [r3, #2]
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	4b5d      	ldr	r3, [pc, #372]	; (8009d40 <tcp_input+0x8ac>)
 8009bca:	4431      	add	r1, r6
 8009bcc:	1d1a      	adds	r2, r3, #4
 8009bce:	f000 ff49 	bl	800aa64 <tcp_rst>
 8009bd2:	e6cb      	b.n	800996c <tcp_input+0x4d8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009bd4:	2900      	cmp	r1, #0
 8009bd6:	f43f aec9 	beq.w	800996c <tcp_input+0x4d8>
 8009bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bdc:	f8db 2000 	ldr.w	r2, [fp]
 8009be0:	3b01      	subs	r3, #1
 8009be2:	4293      	cmp	r3, r2
 8009be4:	f47f aec2 	bne.w	800996c <tcp_input+0x4d8>
      tcp_rexmit(pcb);
 8009be8:	4620      	mov	r0, r4
 8009bea:	f000 ffb1 	bl	800ab50 <tcp_rexmit>
 8009bee:	e6bd      	b.n	800996c <tcp_input+0x4d8>
    tcp_receive(pcb);
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f7fe ff0b 	bl	8008a0c <tcp_receive>
 8009bf6:	e7d2      	b.n	8009b9e <tcp_input+0x70a>
    tcp_receive(pcb);
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f7fe ff07 	bl	8008a0c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009bfe:	f898 3000 	ldrb.w	r3, [r8]
 8009c02:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c06:	9b03      	ldr	r3, [sp, #12]
 8009c08:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 8009c0a:	d031      	beq.n	8009c70 <tcp_input+0x7dc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c0c:	f013 0f10 	tst.w	r3, #16
 8009c10:	7ea3      	ldrb	r3, [r4, #26]
 8009c12:	d028      	beq.n	8009c66 <tcp_input+0x7d2>
 8009c14:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	4291      	cmp	r1, r2
 8009c1a:	d124      	bne.n	8009c66 <tcp_input+0x7d2>
 8009c1c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8009c1e:	bb12      	cbnz	r2, 8009c66 <tcp_input+0x7d2>
        tcp_ack_now(pcb);
 8009c20:	f043 0302 	orr.w	r3, r3, #2
 8009c24:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8009c26:	4620      	mov	r0, r4
 8009c28:	f7fe f98c 	bl	8007f44 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009c2c:	f8d9 3000 	ldr.w	r3, [r9]
 8009c30:	429c      	cmp	r4, r3
 8009c32:	d10a      	bne.n	8009c4a <tcp_input+0x7b6>
      TCP_RMV_ACTIVE(pcb);
 8009c34:	68e3      	ldr	r3, [r4, #12]
 8009c36:	f8c9 3000 	str.w	r3, [r9]
 8009c3a:	e008      	b.n	8009c4e <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8009c3c:	68da      	ldr	r2, [r3, #12]
 8009c3e:	4294      	cmp	r4, r2
 8009c40:	d102      	bne.n	8009c48 <tcp_input+0x7b4>
      TCP_RMV_ACTIVE(pcb);
 8009c42:	68e2      	ldr	r2, [r4, #12]
 8009c44:	60da      	str	r2, [r3, #12]
 8009c46:	e002      	b.n	8009c4e <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8009c48:	4613      	mov	r3, r2
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1f6      	bne.n	8009c3c <tcp_input+0x7a8>
      TCP_RMV_ACTIVE(pcb);
 8009c4e:	4b3e      	ldr	r3, [pc, #248]	; (8009d48 <tcp_input+0x8b4>)
 8009c50:	2201      	movs	r2, #1
 8009c52:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8009c54:	230a      	movs	r3, #10
 8009c56:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8009c58:	4b3c      	ldr	r3, [pc, #240]	; (8009d4c <tcp_input+0x8b8>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	60e2      	str	r2, [r4, #12]
 8009c5e:	601c      	str	r4, [r3, #0]
 8009c60:	f001 f8a2 	bl	800ada8 <tcp_timer_needed>
 8009c64:	e682      	b.n	800996c <tcp_input+0x4d8>
        tcp_ack_now(pcb);
 8009c66:	f043 0302 	orr.w	r3, r3, #2
 8009c6a:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8009c6c:	2308      	movs	r3, #8
 8009c6e:	e7a0      	b.n	8009bb2 <tcp_input+0x71e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c70:	06db      	lsls	r3, r3, #27
 8009c72:	f57f ae7b 	bpl.w	800996c <tcp_input+0x4d8>
 8009c76:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	f47f ae76 	bne.w	800996c <tcp_input+0x4d8>
 8009c80:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f47f ae72 	bne.w	800996c <tcp_input+0x4d8>
      pcb->state = FIN_WAIT_2;
 8009c88:	2306      	movs	r3, #6
 8009c8a:	e792      	b.n	8009bb2 <tcp_input+0x71e>
    tcp_receive(pcb);
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	f7fe febd 	bl	8008a0c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009c92:	f898 3000 	ldrb.w	r3, [r8]
 8009c96:	069f      	lsls	r7, r3, #26
 8009c98:	f57f ae68 	bpl.w	800996c <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8009c9c:	7ea3      	ldrb	r3, [r4, #26]
 8009c9e:	f043 0302 	orr.w	r3, r3, #2
 8009ca2:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f7fe f94d 	bl	8007f44 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009caa:	f8d9 3000 	ldr.w	r3, [r9]
 8009cae:	429c      	cmp	r4, r3
 8009cb0:	d0c0      	beq.n	8009c34 <tcp_input+0x7a0>
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d0cb      	beq.n	8009c4e <tcp_input+0x7ba>
 8009cb6:	68da      	ldr	r2, [r3, #12]
 8009cb8:	4294      	cmp	r4, r2
 8009cba:	d0c2      	beq.n	8009c42 <tcp_input+0x7ae>
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	e7f8      	b.n	8009cb2 <tcp_input+0x81e>
    tcp_receive(pcb);
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f7fe fea3 	bl	8008a0c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009cc6:	9b03      	ldr	r3, [sp, #12]
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	06de      	lsls	r6, r3, #27
 8009ccc:	f57f ae4e 	bpl.w	800996c <tcp_input+0x4d8>
 8009cd0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	f47f ae49 	bne.w	800996c <tcp_input+0x4d8>
 8009cda:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f47f ae45 	bne.w	800996c <tcp_input+0x4d8>
      tcp_pcb_purge(pcb);
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f7fe f92e 	bl	8007f44 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009ce8:	f8d9 3000 	ldr.w	r3, [r9]
 8009cec:	429c      	cmp	r4, r3
 8009cee:	d0a1      	beq.n	8009c34 <tcp_input+0x7a0>
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d0ac      	beq.n	8009c4e <tcp_input+0x7ba>
 8009cf4:	68da      	ldr	r2, [r3, #12]
 8009cf6:	4294      	cmp	r4, r2
 8009cf8:	d0a3      	beq.n	8009c42 <tcp_input+0x7ae>
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	e7f8      	b.n	8009cf0 <tcp_input+0x85c>
    tcp_receive(pcb);
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f7fe fe84 	bl	8008a0c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009d04:	9b03      	ldr	r3, [sp, #12]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	06d8      	lsls	r0, r3, #27
 8009d0a:	f57f ae2f 	bpl.w	800996c <tcp_input+0x4d8>
 8009d0e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	f47f ae2a 	bne.w	800996c <tcp_input+0x4d8>
 8009d18:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f47f ae26 	bne.w	800996c <tcp_input+0x4d8>
      recv_flags |= TF_CLOSED;
 8009d20:	f898 3000 	ldrb.w	r3, [r8]
 8009d24:	f043 0310 	orr.w	r3, r3, #16
 8009d28:	f888 3000 	strb.w	r3, [r8]
 8009d2c:	e61e      	b.n	800996c <tcp_input+0x4d8>
 8009d2e:	bf00      	nop
 8009d30:	08010564 	.word	0x08010564
 8009d34:	08010503 	.word	0x08010503
 8009d38:	0800f20f 	.word	0x0800f20f
 8009d3c:	08010519 	.word	0x08010519
 8009d40:	20001b3c 	.word	0x20001b3c
 8009d44:	0801052c 	.word	0x0801052c
 8009d48:	20005050 	.word	0x20005050
 8009d4c:	20005064 	.word	0x20005064
        if (recv_acked > 0) {
 8009d50:	9b05      	ldr	r3, [sp, #20]
 8009d52:	881a      	ldrh	r2, [r3, #0]
 8009d54:	b122      	cbz	r2, 8009d60 <tcp_input+0x8cc>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009d56:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8009d58:	b9eb      	cbnz	r3, 8009d96 <tcp_input+0x902>
          recv_acked = 0;
 8009d5a:	9a05      	ldr	r2, [sp, #20]
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009d60:	4620      	mov	r0, r4
 8009d62:	f7ff fb77 	bl	8009454 <tcp_input_delayed_close>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	f47f acc6 	bne.w	80096f8 <tcp_input+0x264>
        if (recv_data != NULL) {
 8009d6c:	f8da 3000 	ldr.w	r3, [sl]
 8009d70:	b33b      	cbz	r3, 8009dc2 <tcp_input+0x92e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009d72:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009d74:	b133      	cbz	r3, 8009d84 <tcp_input+0x8f0>
 8009d76:	4b40      	ldr	r3, [pc, #256]	; (8009e78 <tcp_input+0x9e4>)
 8009d78:	4940      	ldr	r1, [pc, #256]	; (8009e7c <tcp_input+0x9e8>)
 8009d7a:	4841      	ldr	r0, [pc, #260]	; (8009e80 <tcp_input+0x9ec>)
 8009d7c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8009d80:	f003 fef6 	bl	800db70 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009d84:	7ea3      	ldrb	r3, [r4, #26]
 8009d86:	f013 0310 	ands.w	r3, r3, #16
 8009d8a:	d00a      	beq.n	8009da2 <tcp_input+0x90e>
            pbuf_free(recv_data);
 8009d8c:	f8da 0000 	ldr.w	r0, [sl]
 8009d90:	f7fd fc00 	bl	8007594 <pbuf_free>
 8009d94:	e6de      	b.n	8009b54 <tcp_input+0x6c0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009d96:	4621      	mov	r1, r4
 8009d98:	6920      	ldr	r0, [r4, #16]
 8009d9a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8009d9c:	300d      	adds	r0, #13
 8009d9e:	d1dc      	bne.n	8009d5a <tcp_input+0x8c6>
 8009da0:	e4aa      	b.n	80096f8 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009da2:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8009da6:	b31e      	cbz	r6, 8009df0 <tcp_input+0x95c>
 8009da8:	f8da 2000 	ldr.w	r2, [sl]
 8009dac:	6920      	ldr	r0, [r4, #16]
 8009dae:	4621      	mov	r1, r4
 8009db0:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 8009db2:	f110 0f0d 	cmn.w	r0, #13
 8009db6:	f43f ac9f 	beq.w	80096f8 <tcp_input+0x264>
          if (err != ERR_OK) {
 8009dba:	b110      	cbz	r0, 8009dc2 <tcp_input+0x92e>
            pcb->refused_data = recv_data;
 8009dbc:	f8da 3000 	ldr.w	r3, [sl]
 8009dc0:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 8009dc2:	f898 3000 	ldrb.w	r3, [r8]
 8009dc6:	069a      	lsls	r2, r3, #26
 8009dc8:	d505      	bpl.n	8009dd6 <tcp_input+0x942>
          if (pcb->refused_data != NULL) {
 8009dca:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009dcc:	b1c3      	cbz	r3, 8009e00 <tcp_input+0x96c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009dce:	7b5a      	ldrb	r2, [r3, #13]
 8009dd0:	f042 0220 	orr.w	r2, r2, #32
 8009dd4:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8009dd6:	4b2b      	ldr	r3, [pc, #172]	; (8009e84 <tcp_input+0x9f0>)
 8009dd8:	2200      	movs	r2, #0
        if (tcp_input_delayed_close(pcb)) {
 8009dda:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8009ddc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009dde:	f7ff fb39 	bl	8009454 <tcp_input_delayed_close>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	f47f ac88 	bne.w	80096f8 <tcp_input+0x264>
        tcp_output(pcb);
 8009de8:	4620      	mov	r0, r4
 8009dea:	f000 fcbd 	bl	800a768 <tcp_output>
 8009dee:	e483      	b.n	80096f8 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009df0:	4633      	mov	r3, r6
 8009df2:	f8da 2000 	ldr.w	r2, [sl]
 8009df6:	4621      	mov	r1, r4
 8009df8:	4630      	mov	r0, r6
 8009dfa:	f7fe fba5 	bl	8008548 <tcp_recv_null>
 8009dfe:	e7d8      	b.n	8009db2 <tcp_input+0x91e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009e00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8009e02:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009e06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 8009e0a:	bf1c      	itt	ne
 8009e0c:	3301      	addne	r3, #1
 8009e0e:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8009e10:	2e00      	cmp	r6, #0
 8009e12:	d0e0      	beq.n	8009dd6 <tcp_input+0x942>
 8009e14:	2300      	movs	r3, #0
 8009e16:	461a      	mov	r2, r3
 8009e18:	4621      	mov	r1, r4
 8009e1a:	6920      	ldr	r0, [r4, #16]
 8009e1c:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 8009e1e:	300d      	adds	r0, #13
 8009e20:	d1d9      	bne.n	8009dd6 <tcp_input+0x942>
 8009e22:	e469      	b.n	80096f8 <tcp_input+0x264>
      if (prev != NULL) {
 8009e24:	b13c      	cbz	r4, 8009e36 <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009e26:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009e2a:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009e2c:	4b16      	ldr	r3, [pc, #88]	; (8009e88 <tcp_input+0x9f4>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009e2e:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009e32:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 8009e36:	9b03      	ldr	r3, [sp, #12]
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	0759      	lsls	r1, r3, #29
 8009e3c:	f53f ace7 	bmi.w	800980e <tcp_input+0x37a>
  if (flags & TCP_ACK) {
 8009e40:	06dc      	lsls	r4, r3, #27
 8009e42:	f57f ad19 	bpl.w	8009878 <tcp_input+0x3e4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e46:	9b04      	ldr	r3, [sp, #16]
 8009e48:	f8db 1000 	ldr.w	r1, [fp]
 8009e4c:	881c      	ldrh	r4, [r3, #0]
 8009e4e:	8813      	ldrh	r3, [r2, #0]
 8009e50:	e88d 0009 	stmia.w	sp, {r0, r3}
 8009e54:	e4c5      	b.n	80097e2 <tcp_input+0x34e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009e56:	2900      	cmp	r1, #0
 8009e58:	f47f ad7e 	bne.w	8009958 <tcp_input+0x4c4>
 8009e5c:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <tcp_input+0x9e4>)
 8009e5e:	490b      	ldr	r1, [pc, #44]	; (8009e8c <tcp_input+0x9f8>)
 8009e60:	4807      	ldr	r0, [pc, #28]	; (8009e80 <tcp_input+0x9ec>)
 8009e62:	f240 22e7 	movw	r2, #743	; 0x2e7
 8009e66:	f003 fe83 	bl	800db70 <iprintf>
 8009e6a:	e575      	b.n	8009958 <tcp_input+0x4c4>
      if (prev != NULL) {
 8009e6c:	f1ba 0f00 	cmp.w	sl, #0
 8009e70:	f47f abff 	bne.w	8009672 <tcp_input+0x1de>
 8009e74:	e40e      	b.n	8009694 <tcp_input+0x200>
 8009e76:	bf00      	nop
 8009e78:	08010564 	.word	0x08010564
 8009e7c:	0801054a 	.word	0x0801054a
 8009e80:	0800f20f 	.word	0x0800f20f
 8009e84:	20005068 	.word	0x20005068
 8009e88:	2000505c 	.word	0x2000505c
 8009e8c:	080104e3 	.word	0x080104e3

08009e90 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8009e90:	4a02      	ldr	r2, [pc, #8]	; (8009e9c <tcp_trigger_input_pcb_close+0xc>)
 8009e92:	7813      	ldrb	r3, [r2, #0]
 8009e94:	f043 0310 	orr.w	r3, r3, #16
 8009e98:	7013      	strb	r3, [r2, #0]
 8009e9a:	4770      	bx	lr
 8009e9c:	20000d40 	.word	0x20000d40

08009ea0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009ea0:	b570      	push	{r4, r5, r6, lr}
 8009ea2:	460c      	mov	r4, r1
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009ea4:	4294      	cmp	r4, r2
{
 8009ea6:	461e      	mov	r6, r3
 8009ea8:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8009eac:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 8009eae:	d228      	bcs.n	8009f02 <tcp_pbuf_prealloc+0x62>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009eb0:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8009eb4:	07ad      	lsls	r5, r5, #30
 8009eb6:	d407      	bmi.n	8009ec8 <tcp_pbuf_prealloc+0x28>
 8009eb8:	7e9d      	ldrb	r5, [r3, #26]
 8009eba:	066d      	lsls	r5, r5, #25
 8009ebc:	d421      	bmi.n	8009f02 <tcp_pbuf_prealloc+0x62>
        (!(pcb->flags & TF_NODELAY) &&
 8009ebe:	b119      	cbz	r1, 8009ec8 <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 8009ec0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8009ec2:	b909      	cbnz	r1, 8009ec8 <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 8009ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ec6:	b1e3      	cbz	r3, 8009f02 <tcp_pbuf_prealloc+0x62>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009ec8:	f204 231b 	addw	r3, r4, #539	; 0x21b
 8009ecc:	f023 0103 	bic.w	r1, r3, #3
 8009ed0:	428a      	cmp	r2, r1
 8009ed2:	bf28      	it	cs
 8009ed4:	460a      	movcs	r2, r1
 8009ed6:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f7fd fbbd 	bl	8007658 <pbuf_alloc>
  if (p == NULL) {
 8009ede:	4605      	mov	r5, r0
 8009ee0:	b168      	cbz	r0, 8009efe <tcp_pbuf_prealloc+0x5e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8009ee2:	6803      	ldr	r3, [r0, #0]
 8009ee4:	b133      	cbz	r3, 8009ef4 <tcp_pbuf_prealloc+0x54>
 8009ee6:	4b08      	ldr	r3, [pc, #32]	; (8009f08 <tcp_pbuf_prealloc+0x68>)
 8009ee8:	4908      	ldr	r1, [pc, #32]	; (8009f0c <tcp_pbuf_prealloc+0x6c>)
 8009eea:	4809      	ldr	r0, [pc, #36]	; (8009f10 <tcp_pbuf_prealloc+0x70>)
 8009eec:	f44f 7288 	mov.w	r2, #272	; 0x110
 8009ef0:	f003 fe3e 	bl	800db70 <iprintf>
  *oversize = p->len - length;
 8009ef4:	896b      	ldrh	r3, [r5, #10]
 8009ef6:	1b1b      	subs	r3, r3, r4
 8009ef8:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8009efa:	812c      	strh	r4, [r5, #8]
 8009efc:	816c      	strh	r4, [r5, #10]
  return p;
}
 8009efe:	4628      	mov	r0, r5
 8009f00:	bd70      	pop	{r4, r5, r6, pc}
 8009f02:	4621      	mov	r1, r4
 8009f04:	e7e8      	b.n	8009ed8 <tcp_pbuf_prealloc+0x38>
 8009f06:	bf00      	nop
 8009f08:	08010867 	.word	0x08010867
 8009f0c:	0801089a 	.word	0x0801089a
 8009f10:	0800f20f 	.word	0x0800f20f

08009f14 <tcp_create_segment>:
{
 8009f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f18:	f89d a020 	ldrb.w	sl, [sp, #32]
 8009f1c:	4680      	mov	r8, r0
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009f1e:	f01a 0f01 	tst.w	sl, #1
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009f22:	f04f 0003 	mov.w	r0, #3
{
 8009f26:	460f      	mov	r7, r1
 8009f28:	4616      	mov	r6, r2
 8009f2a:	4699      	mov	r9, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009f2c:	bf14      	ite	ne
 8009f2e:	2504      	movne	r5, #4
 8009f30:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009f32:	f7fd f9af 	bl	8007294 <memp_malloc>
 8009f36:	4604      	mov	r4, r0
 8009f38:	b928      	cbnz	r0, 8009f46 <tcp_create_segment+0x32>
    pbuf_free(p);
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	f7fd fb2a 	bl	8007594 <pbuf_free>
}
 8009f40:	4620      	mov	r0, r4
 8009f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 8009f46:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 8009f4a:	2300      	movs	r3, #0
  seg->p = p;
 8009f4c:	e880 0088 	stmia.w	r0, {r3, r7}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009f50:	893b      	ldrh	r3, [r7, #8]
 8009f52:	fa1f fa85 	uxth.w	sl, r5
 8009f56:	4553      	cmp	r3, sl
 8009f58:	d205      	bcs.n	8009f66 <tcp_create_segment+0x52>
 8009f5a:	4b1f      	ldr	r3, [pc, #124]	; (8009fd8 <tcp_create_segment+0xc4>)
 8009f5c:	491f      	ldr	r1, [pc, #124]	; (8009fdc <tcp_create_segment+0xc8>)
 8009f5e:	4820      	ldr	r0, [pc, #128]	; (8009fe0 <tcp_create_segment+0xcc>)
 8009f60:	22ba      	movs	r2, #186	; 0xba
 8009f62:	f003 fe05 	bl	800db70 <iprintf>
  seg->len = p->tot_len - optlen;
 8009f66:	893b      	ldrh	r3, [r7, #8]
 8009f68:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_header(p, TCP_HLEN)) {
 8009f6c:	4638      	mov	r0, r7
  seg->len = p->tot_len - optlen;
 8009f6e:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8009f70:	2114      	movs	r1, #20
 8009f72:	f7fd fb09 	bl	8007588 <pbuf_header>
 8009f76:	4607      	mov	r7, r0
 8009f78:	b120      	cbz	r0, 8009f84 <tcp_create_segment+0x70>
    tcp_seg_free(seg);
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f7fd ff4c 	bl	8007e18 <tcp_seg_free>
    return NULL;
 8009f80:	2400      	movs	r4, #0
 8009f82:	e7dd      	b.n	8009f40 <tcp_create_segment+0x2c>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009f84:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009f86:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009f8a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8009f8e:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009f92:	f7fb fd3f 	bl	8005a14 <lwip_htons>
 8009f96:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009f9a:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 8009f9e:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8009fa2:	f7fb fd37 	bl	8005a14 <lwip_htons>
 8009fa6:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009faa:	4648      	mov	r0, r9
 8009fac:	f8d4 800c 	ldr.w	r8, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009fb0:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009fb2:	f7fb fd32 	bl	8005a1a <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009fb6:	3505      	adds	r5, #5
 8009fb8:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009fbc:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009fc0:	b2a8      	uxth	r0, r5
 8009fc2:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8009fc6:	f7fb fd25 	bl	8005a14 <lwip_htons>
  seg->tcphdr->urgp = 0;
 8009fca:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009fcc:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 8009fd0:	749f      	strb	r7, [r3, #18]
 8009fd2:	74df      	strb	r7, [r3, #19]
  return seg;
 8009fd4:	e7b4      	b.n	8009f40 <tcp_create_segment+0x2c>
 8009fd6:	bf00      	nop
 8009fd8:	08010867 	.word	0x08010867
 8009fdc:	080106ef 	.word	0x080106ef
 8009fe0:	0800f20f 	.word	0x0800f20f

08009fe4 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009fe4:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8009fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009fe8:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8009fea:	4605      	mov	r5, r0
 8009fec:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009fee:	2001      	movs	r0, #1
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f7fd fb31 	bl	8007658 <pbuf_alloc>
  if (p != NULL) {
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	b340      	cbz	r0, 800a04c <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009ffa:	8943      	ldrh	r3, [r0, #10]
 8009ffc:	2b13      	cmp	r3, #19
 8009ffe:	dc05      	bgt.n	800a00c <tcp_output_alloc_header.constprop.0+0x28>
 800a000:	4b13      	ldr	r3, [pc, #76]	; (800a050 <tcp_output_alloc_header.constprop.0+0x6c>)
 800a002:	4914      	ldr	r1, [pc, #80]	; (800a054 <tcp_output_alloc_header.constprop.0+0x70>)
 800a004:	4814      	ldr	r0, [pc, #80]	; (800a058 <tcp_output_alloc_header.constprop.0+0x74>)
 800a006:	2273      	movs	r2, #115	; 0x73
 800a008:	f003 fdb2 	bl	800db70 <iprintf>
    tcphdr->src = lwip_htons(pcb->local_port);
 800a00c:	8ae8      	ldrh	r0, [r5, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 800a00e:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 800a010:	f7fb fd00 	bl	8005a14 <lwip_htons>
 800a014:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800a016:	8b28      	ldrh	r0, [r5, #24]
 800a018:	f7fb fcfc 	bl	8005a14 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800a01c:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800a01e:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a020:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a022:	f7fb fcfa 	bl	8005a1a <lwip_htonl>
 800a026:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800a028:	f245 0010 	movw	r0, #20496	; 0x5010
 800a02c:	f7fb fcf2 	bl	8005a14 <lwip_htons>
 800a030:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a032:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800a034:	f7fb fcee 	bl	8005a14 <lwip_htons>
    tcphdr->chksum = 0;
 800a038:	2300      	movs	r3, #0
 800a03a:	7423      	strb	r3, [r4, #16]
 800a03c:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800a03e:	74a3      	strb	r3, [r4, #18]
 800a040:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a042:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800a044:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a046:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a048:	4413      	add	r3, r2
 800a04a:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 800a04c:	4630      	mov	r0, r6
 800a04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a050:	08010867 	.word	0x08010867
 800a054:	08010839 	.word	0x08010839
 800a058:	0800f20f 	.word	0x0800f20f

0800a05c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a060:	b091      	sub	sp, #68	; 0x44
 800a062:	4605      	mov	r5, r0
 800a064:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800a06c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
{
 800a070:	9205      	str	r2, [sp, #20]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800a072:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a074:	9108      	str	r1, [sp, #32]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800a076:	085b      	lsrs	r3, r3, #1
 800a078:	4293      	cmp	r3, r2
 800a07a:	bf28      	it	cs
 800a07c:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800a07e:	2b00      	cmp	r3, #0
 800a080:	bf08      	it	eq
 800a082:	4613      	moveq	r3, r2
 800a084:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a086:	b959      	cbnz	r1, 800a0a0 <tcp_write+0x44>
 800a088:	4ba1      	ldr	r3, [pc, #644]	; (800a310 <tcp_write+0x2b4>)
 800a08a:	49a2      	ldr	r1, [pc, #648]	; (800a314 <tcp_write+0x2b8>)
 800a08c:	48a2      	ldr	r0, [pc, #648]	; (800a318 <tcp_write+0x2bc>)
 800a08e:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800a092:	f003 fd6d 	bl	800db70 <iprintf>
 800a096:	f06f 000f 	mvn.w	r0, #15
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 800a09a:	b011      	add	sp, #68	; 0x44
 800a09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->state != ESTABLISHED) &&
 800a0a0:	7d2b      	ldrb	r3, [r5, #20]
 800a0a2:	2b07      	cmp	r3, #7
 800a0a4:	d003      	beq.n	800a0ae <tcp_write+0x52>
      (pcb->state != CLOSE_WAIT) &&
 800a0a6:	3b02      	subs	r3, #2
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	f200 8254 	bhi.w	800a556 <tcp_write+0x4fa>
  } else if (len == 0) {
 800a0ae:	9b05      	ldr	r3, [sp, #20]
 800a0b0:	b1db      	cbz	r3, 800a0ea <tcp_write+0x8e>
  if (len > pcb->snd_buf) {
 800a0b2:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800a0b6:	9a05      	ldr	r2, [sp, #20]
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d206      	bcs.n	800a0ca <tcp_write+0x6e>
    pcb->flags |= TF_NAGLEMEMERR;
 800a0bc:	7eab      	ldrb	r3, [r5, #26]
 800a0be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a0c2:	76ab      	strb	r3, [r5, #26]
  return ERR_MEM;
 800a0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c8:	e7e7      	b.n	800a09a <tcp_write+0x3e>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800a0ca:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
 800a0ce:	2a08      	cmp	r2, #8
 800a0d0:	d8f4      	bhi.n	800a0bc <tcp_write+0x60>
 800a0d2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 800a0d4:	b30a      	cbz	r2, 800a11a <tcp_write+0xbe>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a0d6:	b943      	cbnz	r3, 800a0ea <tcp_write+0x8e>
 800a0d8:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800a0da:	b933      	cbnz	r3, 800a0ea <tcp_write+0x8e>
 800a0dc:	4b8c      	ldr	r3, [pc, #560]	; (800a310 <tcp_write+0x2b4>)
 800a0de:	498f      	ldr	r1, [pc, #572]	; (800a31c <tcp_write+0x2c0>)
 800a0e0:	f44f 72ab 	mov.w	r2, #342	; 0x156
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a0e4:	488c      	ldr	r0, [pc, #560]	; (800a318 <tcp_write+0x2bc>)
 800a0e6:	f003 fd43 	bl	800db70 <iprintf>
  if (pcb->unsent != NULL) {
 800a0ea:	6eac      	ldr	r4, [r5, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 800a0ec:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 800a0f0:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 800a0f2:	b9dc      	cbnz	r4, 800a12c <tcp_write+0xd0>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a0f4:	f8b5 8064 	ldrh.w	r8, [r5, #100]	; 0x64
 800a0f8:	f1b8 0f00 	cmp.w	r8, #0
 800a0fc:	f000 8103 	beq.w	800a306 <tcp_write+0x2aa>
 800a100:	4b83      	ldr	r3, [pc, #524]	; (800a310 <tcp_write+0x2b4>)
 800a102:	4987      	ldr	r1, [pc, #540]	; (800a320 <tcp_write+0x2c4>)
 800a104:	4884      	ldr	r0, [pc, #528]	; (800a318 <tcp_write+0x2bc>)
 800a106:	f240 2225 	movw	r2, #549	; 0x225
 800a10a:	f003 fd31 	bl	800db70 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a10e:	4627      	mov	r7, r4
  u16_t extendlen = 0;
 800a110:	46a2      	mov	sl, r4
  u16_t oversize_used = 0;
 800a112:	4626      	mov	r6, r4
  u16_t pos = 0; /* position in 'arg' data */
 800a114:	46a0      	mov	r8, r4
  struct pbuf *concat_p = NULL;
 800a116:	46a1      	mov	r9, r4
 800a118:	e094      	b.n	800a244 <tcp_write+0x1e8>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a11a:	b913      	cbnz	r3, 800a122 <tcp_write+0xc6>
 800a11c:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d0e3      	beq.n	800a0ea <tcp_write+0x8e>
 800a122:	4b7b      	ldr	r3, [pc, #492]	; (800a310 <tcp_write+0x2b4>)
 800a124:	497f      	ldr	r1, [pc, #508]	; (800a324 <tcp_write+0x2c8>)
 800a126:	f240 1259 	movw	r2, #345	; 0x159
 800a12a:	e7db      	b.n	800a0e4 <tcp_write+0x88>
  if (pcb->unsent != NULL) {
 800a12c:	4627      	mov	r7, r4
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a12e:	f8d7 b000 	ldr.w	fp, [r7]
 800a132:	f1bb 0f00 	cmp.w	fp, #0
 800a136:	f040 80b6 	bne.w	800a2a6 <tcp_write+0x24a>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800a13a:	7abb      	ldrb	r3, [r7, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a13c:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800a13e:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a142:	893b      	ldrh	r3, [r7, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800a144:	bf14      	ite	ne
 800a146:	2404      	movne	r4, #4
 800a148:	2400      	moveq	r4, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a14a:	4423      	add	r3, r4
 800a14c:	429a      	cmp	r2, r3
 800a14e:	da06      	bge.n	800a15e <tcp_write+0x102>
 800a150:	4b6f      	ldr	r3, [pc, #444]	; (800a310 <tcp_write+0x2b4>)
 800a152:	4975      	ldr	r1, [pc, #468]	; (800a328 <tcp_write+0x2cc>)
 800a154:	4870      	ldr	r0, [pc, #448]	; (800a318 <tcp_write+0x2bc>)
 800a156:	f240 12c7 	movw	r2, #455	; 0x1c7
 800a15a:	f003 fd09 	bl	800db70 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a15e:	f8b7 9008 	ldrh.w	r9, [r7, #8]
 800a162:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 800a164:	f8b5 6064 	ldrh.w	r6, [r5, #100]	; 0x64
 800a168:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a16c:	eba3 0909 	sub.w	r9, r3, r9
 800a170:	eba9 0904 	sub.w	r9, r9, r4
 800a174:	fa1f f989 	uxth.w	r9, r9
    if (oversize > 0) {
 800a178:	2e00      	cmp	r6, #0
 800a17a:	f000 8096 	beq.w	800a2aa <tcp_write+0x24e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a17e:	45b1      	cmp	r9, r6
 800a180:	d206      	bcs.n	800a190 <tcp_write+0x134>
 800a182:	4b63      	ldr	r3, [pc, #396]	; (800a310 <tcp_write+0x2b4>)
 800a184:	4969      	ldr	r1, [pc, #420]	; (800a32c <tcp_write+0x2d0>)
 800a186:	4864      	ldr	r0, [pc, #400]	; (800a318 <tcp_write+0x2bc>)
 800a188:	f240 12d9 	movw	r2, #473	; 0x1d9
 800a18c:	f003 fcf0 	bl	800db70 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a190:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a194:	9a05      	ldr	r2, [sp, #20]
 800a196:	429a      	cmp	r2, r3
 800a198:	bf28      	it	cs
 800a19a:	461a      	movcs	r2, r3
 800a19c:	454a      	cmp	r2, r9
 800a19e:	4616      	mov	r6, r2
 800a1a0:	bfa8      	it	ge
 800a1a2:	464e      	movge	r6, r9
      oversize -= oversize_used;
 800a1a4:	1b9b      	subs	r3, r3, r6
      space -= oversize_used;
 800a1a6:	eba9 0906 	sub.w	r9, r9, r6
      oversize -= oversize_used;
 800a1aa:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800a1ae:	fa1f f989 	uxth.w	r9, r9
 800a1b2:	463c      	mov	r4, r7
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a1b4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a1b8:	b153      	cbz	r3, 800a1d0 <tcp_write+0x174>
 800a1ba:	9b05      	ldr	r3, [sp, #20]
 800a1bc:	429e      	cmp	r6, r3
 800a1be:	f000 81cd 	beq.w	800a55c <tcp_write+0x500>
 800a1c2:	4b53      	ldr	r3, [pc, #332]	; (800a310 <tcp_write+0x2b4>)
 800a1c4:	495a      	ldr	r1, [pc, #360]	; (800a330 <tcp_write+0x2d4>)
 800a1c6:	4854      	ldr	r0, [pc, #336]	; (800a318 <tcp_write+0x2bc>)
 800a1c8:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a1cc:	f003 fcd0 	bl	800db70 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a1d0:	9b05      	ldr	r3, [sp, #20]
 800a1d2:	429e      	cmp	r6, r3
 800a1d4:	f080 81c2 	bcs.w	800a55c <tcp_write+0x500>
 800a1d8:	f1b9 0f00 	cmp.w	r9, #0
 800a1dc:	f000 808f 	beq.w	800a2fe <tcp_write+0x2a2>
 800a1e0:	f8b7 a008 	ldrh.w	sl, [r7, #8]
 800a1e4:	f1ba 0f00 	cmp.w	sl, #0
 800a1e8:	f000 808a 	beq.w	800a300 <tcp_write+0x2a4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a1ec:	1b9c      	subs	r4, r3, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a1ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a1f0:	454c      	cmp	r4, r9
 800a1f2:	bfa8      	it	ge
 800a1f4:	464c      	movge	r4, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a1f6:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a1f8:	fa1f f884 	uxth.w	r8, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a1fc:	d557      	bpl.n	800a2ae <tcp_write+0x252>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a1fe:	2301      	movs	r3, #1
 800a200:	9302      	str	r3, [sp, #8]
 800a202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a204:	9301      	str	r3, [sp, #4]
 800a206:	464a      	mov	r2, r9
 800a208:	9500      	str	r5, [sp, #0]
 800a20a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800a20e:	4641      	mov	r1, r8
 800a210:	2004      	movs	r0, #4
 800a212:	f7ff fe45 	bl	8009ea0 <tcp_pbuf_prealloc>
 800a216:	4681      	mov	r9, r0
 800a218:	2800      	cmp	r0, #0
 800a21a:	f000 8199 	beq.w	800a550 <tcp_write+0x4f4>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a21e:	9b08      	ldr	r3, [sp, #32]
 800a220:	6840      	ldr	r0, [r0, #4]
 800a222:	4642      	mov	r2, r8
 800a224:	1999      	adds	r1, r3, r6
 800a226:	f003 fbe4 	bl	800d9f2 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800a22a:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 800a22c:	f7fd fb64 	bl	80078f8 <pbuf_clen>
 800a230:	9b06      	ldr	r3, [sp, #24]
 800a232:	4403      	add	r3, r0
 800a234:	b29b      	uxth	r3, r3
 800a236:	9306      	str	r3, [sp, #24]
  u16_t extendlen = 0;
 800a238:	f04f 0a00 	mov.w	sl, #0
      pos += seglen;
 800a23c:	44b0      	add	r8, r6
 800a23e:	fa1f f888 	uxth.w	r8, r8
 800a242:	463c      	mov	r4, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a246:	f04f 0b00 	mov.w	fp, #0
 800a24a:	f003 0301 	and.w	r3, r3, #1
 800a24e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a252:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 800a254:	9b05      	ldr	r3, [sp, #20]
 800a256:	4598      	cmp	r8, r3
 800a258:	d370      	bcc.n	800a33c <tcp_write+0x2e0>
  if (oversize_used > 0) {
 800a25a:	b146      	cbz	r6, 800a26e <tcp_write+0x212>
    for (p = last_unsent->p; p; p = p->next) {
 800a25c:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800a260:	f1b8 0f00 	cmp.w	r8, #0
 800a264:	f040 8110 	bne.w	800a488 <tcp_write+0x42c>
    last_unsent->len += oversize_used;
 800a268:	893b      	ldrh	r3, [r7, #8]
 800a26a:	441e      	add	r6, r3
 800a26c:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
 800a26e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a272:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  if (concat_p != NULL) {
 800a276:	f1b9 0f00 	cmp.w	r9, #0
 800a27a:	f000 811e 	beq.w	800a4ba <tcp_write+0x45e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a27e:	b937      	cbnz	r7, 800a28e <tcp_write+0x232>
 800a280:	4b23      	ldr	r3, [pc, #140]	; (800a310 <tcp_write+0x2b4>)
 800a282:	492c      	ldr	r1, [pc, #176]	; (800a334 <tcp_write+0x2d8>)
 800a284:	4824      	ldr	r0, [pc, #144]	; (800a318 <tcp_write+0x2bc>)
 800a286:	f240 22bb 	movw	r2, #699	; 0x2bb
 800a28a:	f003 fc71 	bl	800db70 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800a28e:	4649      	mov	r1, r9
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7fd fb4d 	bl	8007930 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a296:	893b      	ldrh	r3, [r7, #8]
 800a298:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 800a29c:	4413      	add	r3, r2
 800a29e:	813b      	strh	r3, [r7, #8]
    last_unsent->next = queue;
 800a2a0:	f8c7 b000 	str.w	fp, [r7]
 800a2a4:	e12b      	b.n	800a4fe <tcp_write+0x4a2>
 800a2a6:	465f      	mov	r7, fp
 800a2a8:	e741      	b.n	800a12e <tcp_write+0xd2>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a2aa:	4634      	mov	r4, r6
 800a2ac:	e782      	b.n	800a1b4 <tcp_write+0x158>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 9000 	ldr.w	r9, [r3]
 800a2b4:	f1b9 0f00 	cmp.w	r9, #0
 800a2b8:	d112      	bne.n	800a2e0 <tcp_write+0x284>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a2ba:	7b1a      	ldrb	r2, [r3, #12]
 800a2bc:	2a01      	cmp	r2, #1
 800a2be:	d111      	bne.n	800a2e4 <tcp_write+0x288>
 800a2c0:	895a      	ldrh	r2, [r3, #10]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	9a08      	ldr	r2, [sp, #32]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d10b      	bne.n	800a2e4 <tcp_write+0x288>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a2cc:	b136      	cbz	r6, 800a2dc <tcp_write+0x280>
 800a2ce:	4b10      	ldr	r3, [pc, #64]	; (800a310 <tcp_write+0x2b4>)
 800a2d0:	4919      	ldr	r1, [pc, #100]	; (800a338 <tcp_write+0x2dc>)
 800a2d2:	4811      	ldr	r0, [pc, #68]	; (800a318 <tcp_write+0x2bc>)
 800a2d4:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800a2d8:	f003 fc4a 	bl	800db70 <iprintf>
          extendlen = seglen;
 800a2dc:	46c2      	mov	sl, r8
 800a2de:	e7ad      	b.n	800a23c <tcp_write+0x1e0>
 800a2e0:	464b      	mov	r3, r9
 800a2e2:	e7e5      	b.n	800a2b0 <tcp_write+0x254>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	4641      	mov	r1, r8
 800a2e8:	2004      	movs	r0, #4
 800a2ea:	f7fd f9b5 	bl	8007658 <pbuf_alloc>
 800a2ee:	4681      	mov	r9, r0
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	f000 812d 	beq.w	800a550 <tcp_write+0x4f4>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800a2f6:	9b08      	ldr	r3, [sp, #32]
 800a2f8:	4433      	add	r3, r6
 800a2fa:	6043      	str	r3, [r0, #4]
 800a2fc:	e796      	b.n	800a22c <tcp_write+0x1d0>
  u16_t extendlen = 0;
 800a2fe:	46ca      	mov	sl, r9
 800a300:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 800a302:	46d1      	mov	r9, sl
 800a304:	e79e      	b.n	800a244 <tcp_write+0x1e8>
  u16_t extendlen = 0;
 800a306:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 800a308:	4646      	mov	r6, r8
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a30a:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 800a30c:	46c1      	mov	r9, r8
 800a30e:	e799      	b.n	800a244 <tcp_write+0x1e8>
 800a310:	08010867 	.word	0x08010867
 800a314:	080108ae 	.word	0x080108ae
 800a318:	0800f20f 	.word	0x0800f20f
 800a31c:	080108df 	.word	0x080108df
 800a320:	080109c9 	.word	0x080109c9
 800a324:	08010919 	.word	0x08010919
 800a328:	0801094b 	.word	0x0801094b
 800a32c:	08010962 	.word	0x08010962
 800a330:	08010982 	.word	0x08010982
 800a334:	08010a55 	.word	0x08010a55
 800a338:	080109a0 	.word	0x080109a0
    u16_t left = len - pos;
 800a33c:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a33e:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 800a340:	eba3 0308 	sub.w	r3, r3, r8
    u16_t seglen = LWIP_MIN(left, max_len);
 800a344:	b29b      	uxth	r3, r3
 800a346:	4293      	cmp	r3, r2
 800a348:	bf28      	it	cs
 800a34a:	4613      	movcs	r3, r2
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a352:	b363      	cbz	r3, 800a3ae <tcp_write+0x352>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a354:	fabb f38b 	clz	r3, fp
 800a358:	095b      	lsrs	r3, r3, #5
 800a35a:	9302      	str	r3, [sp, #8]
 800a35c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a35e:	9301      	str	r3, [sp, #4]
 800a360:	9500      	str	r5, [sp, #0]
 800a362:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800a366:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a368:	2000      	movs	r0, #0
 800a36a:	f7ff fd99 	bl	8009ea0 <tcp_pbuf_prealloc>
 800a36e:	4604      	mov	r4, r0
 800a370:	2800      	cmp	r0, #0
 800a372:	d03b      	beq.n	800a3ec <tcp_write+0x390>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a374:	8943      	ldrh	r3, [r0, #10]
 800a376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a378:	4293      	cmp	r3, r2
 800a37a:	d206      	bcs.n	800a38a <tcp_write+0x32e>
 800a37c:	4b7b      	ldr	r3, [pc, #492]	; (800a56c <tcp_write+0x510>)
 800a37e:	497c      	ldr	r1, [pc, #496]	; (800a570 <tcp_write+0x514>)
 800a380:	487c      	ldr	r0, [pc, #496]	; (800a574 <tcp_write+0x518>)
 800a382:	f240 2241 	movw	r2, #577	; 0x241
 800a386:	f003 fbf3 	bl	800db70 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800a38a:	9b08      	ldr	r3, [sp, #32]
 800a38c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a38e:	6860      	ldr	r0, [r4, #4]
 800a390:	eb03 0108 	add.w	r1, r3, r8
 800a394:	f003 fb2d 	bl	800d9f2 <memcpy>
    queuelen += pbuf_clen(p);
 800a398:	4620      	mov	r0, r4
 800a39a:	f7fd faad 	bl	80078f8 <pbuf_clen>
 800a39e:	9b06      	ldr	r3, [sp, #24]
 800a3a0:	4403      	add	r3, r0
 800a3a2:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800a3a4:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 800a3a6:	9306      	str	r3, [sp, #24]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800a3a8:	d949      	bls.n	800a43e <tcp_write+0x3e2>
      pbuf_free(p);
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	e01c      	b.n	800a3e8 <tcp_write+0x38c>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a3ae:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a3b2:	b133      	cbz	r3, 800a3c2 <tcp_write+0x366>
 800a3b4:	4b6d      	ldr	r3, [pc, #436]	; (800a56c <tcp_write+0x510>)
 800a3b6:	4970      	ldr	r1, [pc, #448]	; (800a578 <tcp_write+0x51c>)
 800a3b8:	486e      	ldr	r0, [pc, #440]	; (800a574 <tcp_write+0x518>)
 800a3ba:	f240 224b 	movw	r2, #587	; 0x24b
 800a3be:	f003 fbd7 	bl	800db70 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	f7fd f946 	bl	8007658 <pbuf_alloc>
 800a3cc:	b170      	cbz	r0, 800a3ec <tcp_write+0x390>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800a3ce:	9a08      	ldr	r2, [sp, #32]
 800a3d0:	900d      	str	r0, [sp, #52]	; 0x34
 800a3d2:	4442      	add	r2, r8
 800a3d4:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	4611      	mov	r1, r2
 800a3da:	4610      	mov	r0, r2
 800a3dc:	f7fd f93c 	bl	8007658 <pbuf_alloc>
 800a3e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	bb38      	cbnz	r0, 800a436 <tcp_write+0x3da>
        pbuf_free(p2);
 800a3e6:	4618      	mov	r0, r3
      pbuf_free(p);
 800a3e8:	f7fd f8d4 	bl	8007594 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 800a3ec:	7eab      	ldrb	r3, [r5, #26]
 800a3ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a3f2:	76ab      	strb	r3, [r5, #26]
  if (concat_p != NULL) {
 800a3f4:	f1b9 0f00 	cmp.w	r9, #0
 800a3f8:	d002      	beq.n	800a400 <tcp_write+0x3a4>
    pbuf_free(concat_p);
 800a3fa:	4648      	mov	r0, r9
 800a3fc:	f7fd f8ca 	bl	8007594 <pbuf_free>
  if (queue != NULL) {
 800a400:	f1bb 0f00 	cmp.w	fp, #0
 800a404:	d002      	beq.n	800a40c <tcp_write+0x3b0>
    tcp_segs_free(queue);
 800a406:	4658      	mov	r0, fp
 800a408:	f7fd fd14 	bl	8007e34 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800a40c:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 800a410:	2b00      	cmp	r3, #0
 800a412:	f43f ae57 	beq.w	800a0c4 <tcp_write+0x68>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a416:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f47f ae53 	bne.w	800a0c4 <tcp_write+0x68>
 800a41e:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800a420:	2b00      	cmp	r3, #0
 800a422:	f47f ae4f 	bne.w	800a0c4 <tcp_write+0x68>
 800a426:	4b51      	ldr	r3, [pc, #324]	; (800a56c <tcp_write+0x510>)
 800a428:	4954      	ldr	r1, [pc, #336]	; (800a57c <tcp_write+0x520>)
 800a42a:	4852      	ldr	r0, [pc, #328]	; (800a574 <tcp_write+0x518>)
 800a42c:	f240 3202 	movw	r2, #770	; 0x302
 800a430:	f003 fb9e 	bl	800db70 <iprintf>
 800a434:	e646      	b.n	800a0c4 <tcp_write+0x68>
      pbuf_cat(p/*header*/, p2/*data*/);
 800a436:	4619      	mov	r1, r3
 800a438:	f7fd fa7a 	bl	8007930 <pbuf_cat>
 800a43c:	e7ac      	b.n	800a398 <tcp_write+0x33c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a43e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a440:	2200      	movs	r2, #0
 800a442:	4621      	mov	r1, r4
 800a444:	9200      	str	r2, [sp, #0]
 800a446:	4443      	add	r3, r8
 800a448:	4628      	mov	r0, r5
 800a44a:	f7ff fd63 	bl	8009f14 <tcp_create_segment>
 800a44e:	4604      	mov	r4, r0
 800a450:	2800      	cmp	r0, #0
 800a452:	d0cb      	beq.n	800a3ec <tcp_write+0x390>
    if (queue == NULL) {
 800a454:	f1bb 0f00 	cmp.w	fp, #0
 800a458:	d010      	beq.n	800a47c <tcp_write+0x420>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a45a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a45c:	b933      	cbnz	r3, 800a46c <tcp_write+0x410>
 800a45e:	4b43      	ldr	r3, [pc, #268]	; (800a56c <tcp_write+0x510>)
 800a460:	4947      	ldr	r1, [pc, #284]	; (800a580 <tcp_write+0x524>)
 800a462:	4844      	ldr	r0, [pc, #272]	; (800a574 <tcp_write+0x518>)
 800a464:	f240 2285 	movw	r2, #645	; 0x285
 800a468:	f003 fb82 	bl	800db70 <iprintf>
      prev_seg->next = seg;
 800a46c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a46e:	601c      	str	r4, [r3, #0]
    pos += seglen;
 800a470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a472:	940b      	str	r4, [sp, #44]	; 0x2c
 800a474:	4498      	add	r8, r3
 800a476:	fa1f f888 	uxth.w	r8, r8
 800a47a:	e6eb      	b.n	800a254 <tcp_write+0x1f8>
 800a47c:	4683      	mov	fp, r0
 800a47e:	e7f7      	b.n	800a470 <tcp_write+0x414>
  if (oversize_used > 0) {
 800a480:	f04f 0a00 	mov.w	sl, #0
 800a484:	46d1      	mov	r9, sl
 800a486:	e6e9      	b.n	800a25c <tcp_write+0x200>
      p->tot_len += oversize_used;
 800a488:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800a48c:	4433      	add	r3, r6
 800a48e:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (p->next == NULL) {
 800a492:	f8d8 3000 	ldr.w	r3, [r8]
 800a496:	b96b      	cbnz	r3, 800a4b4 <tcp_write+0x458>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a498:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a49c:	f8b8 000a 	ldrh.w	r0, [r8, #10]
 800a4a0:	9908      	ldr	r1, [sp, #32]
 800a4a2:	4418      	add	r0, r3
 800a4a4:	4632      	mov	r2, r6
 800a4a6:	f003 faa4 	bl	800d9f2 <memcpy>
        p->len += oversize_used;
 800a4aa:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800a4ae:	4433      	add	r3, r6
 800a4b0:	f8a8 300a 	strh.w	r3, [r8, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a4b4:	f8d8 8000 	ldr.w	r8, [r8]
 800a4b8:	e6d2      	b.n	800a260 <tcp_write+0x204>
  } else if (extendlen > 0) {
 800a4ba:	f1ba 0f00 	cmp.w	sl, #0
 800a4be:	d019      	beq.n	800a4f4 <tcp_write+0x498>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a4c0:	b10f      	cbz	r7, 800a4c6 <tcp_write+0x46a>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	b933      	cbnz	r3, 800a4d4 <tcp_write+0x478>
 800a4c6:	4b29      	ldr	r3, [pc, #164]	; (800a56c <tcp_write+0x510>)
 800a4c8:	492e      	ldr	r1, [pc, #184]	; (800a584 <tcp_write+0x528>)
 800a4ca:	482a      	ldr	r0, [pc, #168]	; (800a574 <tcp_write+0x518>)
 800a4cc:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a4d0:	f003 fb4e 	bl	800db70 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	891a      	ldrh	r2, [r3, #8]
 800a4d8:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 800a4da:	4452      	add	r2, sl
 800a4dc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a4de:	b939      	cbnz	r1, 800a4f0 <tcp_write+0x494>
    p->len += extendlen;
 800a4e0:	895a      	ldrh	r2, [r3, #10]
 800a4e2:	4452      	add	r2, sl
 800a4e4:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a4e6:	893b      	ldrh	r3, [r7, #8]
 800a4e8:	449a      	add	sl, r3
 800a4ea:	f8a7 a008 	strh.w	sl, [r7, #8]
 800a4ee:	e6d7      	b.n	800a2a0 <tcp_write+0x244>
      p->tot_len += extendlen;
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	e7f0      	b.n	800a4d6 <tcp_write+0x47a>
  if (last_unsent == NULL) {
 800a4f4:	2f00      	cmp	r7, #0
 800a4f6:	f47f aed3 	bne.w	800a2a0 <tcp_write+0x244>
    pcb->unsent = queue;
 800a4fa:	f8c5 b068 	str.w	fp, [r5, #104]	; 0x68
  pcb->snd_lbb += len;
 800a4fe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a500:	9a05      	ldr	r2, [sp, #20]
 800a502:	4413      	add	r3, r2
 800a504:	65ab      	str	r3, [r5, #88]	; 0x58
  pcb->snd_buf -= len;
 800a506:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800a50a:	1a9b      	subs	r3, r3, r2
 800a50c:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800a510:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800a514:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800a518:	9b06      	ldr	r3, [sp, #24]
 800a51a:	b153      	cbz	r3, 800a532 <tcp_write+0x4d6>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a51c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a51e:	b943      	cbnz	r3, 800a532 <tcp_write+0x4d6>
 800a520:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800a522:	b933      	cbnz	r3, 800a532 <tcp_write+0x4d6>
 800a524:	4b11      	ldr	r3, [pc, #68]	; (800a56c <tcp_write+0x510>)
 800a526:	4915      	ldr	r1, [pc, #84]	; (800a57c <tcp_write+0x520>)
 800a528:	4812      	ldr	r0, [pc, #72]	; (800a574 <tcp_write+0x518>)
 800a52a:	f240 22ed 	movw	r2, #749	; 0x2ed
 800a52e:	f003 fb1f 	bl	800db70 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800a532:	b15c      	cbz	r4, 800a54c <tcp_write+0x4f0>
 800a534:	68e4      	ldr	r4, [r4, #12]
 800a536:	b14c      	cbz	r4, 800a54c <tcp_write+0x4f0>
 800a538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a53a:	f013 0602 	ands.w	r6, r3, #2
 800a53e:	d105      	bne.n	800a54c <tcp_write+0x4f0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a540:	2008      	movs	r0, #8
 800a542:	89a5      	ldrh	r5, [r4, #12]
 800a544:	f7fb fa66 	bl	8005a14 <lwip_htons>
 800a548:	4328      	orrs	r0, r5
 800a54a:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
 800a54c:	2000      	movs	r0, #0
 800a54e:	e5a4      	b.n	800a09a <tcp_write+0x3e>
      p->tot_len += extendlen;
 800a550:	f04f 0900 	mov.w	r9, #0
 800a554:	e74a      	b.n	800a3ec <tcp_write+0x390>
    return ERR_CONN;
 800a556:	f06f 000a 	mvn.w	r0, #10
 800a55a:	e59e      	b.n	800a09a <tcp_write+0x3e>
  if (oversize_used > 0) {
 800a55c:	2e00      	cmp	r6, #0
 800a55e:	d18f      	bne.n	800a480 <tcp_write+0x424>
  pcb->unsent_oversize = oversize;
 800a560:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a564:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 800a568:	e69a      	b.n	800a2a0 <tcp_write+0x244>
 800a56a:	bf00      	nop
 800a56c:	08010867 	.word	0x08010867
 800a570:	080109f8 	.word	0x080109f8
 800a574:	0800f20f 	.word	0x0800f20f
 800a578:	08010a36 	.word	0x08010a36
 800a57c:	08010ac2 	.word	0x08010ac2
 800a580:	08010a44 	.word	0x08010a44
 800a584:	08010a8d 	.word	0x08010a8d

0800a588 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a588:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a58c:	f011 0803 	ands.w	r8, r1, #3
{
 800a590:	4604      	mov	r4, r0
 800a592:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a594:	d106      	bne.n	800a5a4 <tcp_enqueue_flags+0x1c>
 800a596:	4b41      	ldr	r3, [pc, #260]	; (800a69c <tcp_enqueue_flags+0x114>)
 800a598:	4941      	ldr	r1, [pc, #260]	; (800a6a0 <tcp_enqueue_flags+0x118>)
 800a59a:	4842      	ldr	r0, [pc, #264]	; (800a6a4 <tcp_enqueue_flags+0x11c>)
 800a59c:	f240 321b 	movw	r2, #795	; 0x31b
 800a5a0:	f003 fae6 	bl	800db70 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a5a4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a5a8:	2b08      	cmp	r3, #8
 800a5aa:	d90a      	bls.n	800a5c2 <tcp_enqueue_flags+0x3a>
 800a5ac:	07f1      	lsls	r1, r6, #31
 800a5ae:	d408      	bmi.n	800a5c2 <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 800a5b0:	7ea3      	ldrb	r3, [r4, #26]
 800a5b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a5b6:	76a3      	strb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a5b8:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 800a5bc:	b003      	add	sp, #12
 800a5be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5c2:	f006 0302 	and.w	r3, r6, #2
  if (flags & TCP_SYN) {
 800a5c6:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a5c8:	bf14      	ite	ne
 800a5ca:	2704      	movne	r7, #4
 800a5cc:	2700      	moveq	r7, #0
 800a5ce:	f04f 0200 	mov.w	r2, #0
 800a5d2:	4639      	mov	r1, r7
 800a5d4:	4610      	mov	r0, r2
  u8_t optflags = 0;
 800a5d6:	bf14      	ite	ne
 800a5d8:	f04f 0901 	movne.w	r9, #1
 800a5dc:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a5e0:	f7fd f83a 	bl	8007658 <pbuf_alloc>
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d0e2      	beq.n	800a5b0 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a5ea:	8943      	ldrh	r3, [r0, #10]
 800a5ec:	42bb      	cmp	r3, r7
 800a5ee:	d206      	bcs.n	800a5fe <tcp_enqueue_flags+0x76>
 800a5f0:	4b2a      	ldr	r3, [pc, #168]	; (800a69c <tcp_enqueue_flags+0x114>)
 800a5f2:	492d      	ldr	r1, [pc, #180]	; (800a6a8 <tcp_enqueue_flags+0x120>)
 800a5f4:	482b      	ldr	r0, [pc, #172]	; (800a6a4 <tcp_enqueue_flags+0x11c>)
 800a5f6:	f240 3241 	movw	r2, #833	; 0x341
 800a5fa:	f003 fab9 	bl	800db70 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a5fe:	f8cd 9000 	str.w	r9, [sp]
 800a602:	4629      	mov	r1, r5
 800a604:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a606:	4632      	mov	r2, r6
 800a608:	4620      	mov	r0, r4
 800a60a:	f7ff fc83 	bl	8009f14 <tcp_create_segment>
 800a60e:	4605      	mov	r5, r0
 800a610:	2800      	cmp	r0, #0
 800a612:	d0cd      	beq.n	800a5b0 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a614:	68c3      	ldr	r3, [r0, #12]
 800a616:	079a      	lsls	r2, r3, #30
 800a618:	d006      	beq.n	800a628 <tcp_enqueue_flags+0xa0>
 800a61a:	4b20      	ldr	r3, [pc, #128]	; (800a69c <tcp_enqueue_flags+0x114>)
 800a61c:	4923      	ldr	r1, [pc, #140]	; (800a6ac <tcp_enqueue_flags+0x124>)
 800a61e:	4821      	ldr	r0, [pc, #132]	; (800a6a4 <tcp_enqueue_flags+0x11c>)
 800a620:	f240 3249 	movw	r2, #841	; 0x349
 800a624:	f003 faa4 	bl	800db70 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a628:	892b      	ldrh	r3, [r5, #8]
 800a62a:	b133      	cbz	r3, 800a63a <tcp_enqueue_flags+0xb2>
 800a62c:	4b1b      	ldr	r3, [pc, #108]	; (800a69c <tcp_enqueue_flags+0x114>)
 800a62e:	4920      	ldr	r1, [pc, #128]	; (800a6b0 <tcp_enqueue_flags+0x128>)
 800a630:	481c      	ldr	r0, [pc, #112]	; (800a6a4 <tcp_enqueue_flags+0x11c>)
 800a632:	f240 324a 	movw	r2, #842	; 0x34a
 800a636:	f003 fa9b 	bl	800db70 <iprintf>
  if (pcb->unsent == NULL) {
 800a63a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a63c:	bb4b      	cbnz	r3, 800a692 <tcp_enqueue_flags+0x10a>
    pcb->unsent = seg;
 800a63e:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a646:	f1b8 0f00 	cmp.w	r8, #0
 800a64a:	d002      	beq.n	800a652 <tcp_enqueue_flags+0xca>
    pcb->snd_lbb++;
 800a64c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a64e:	3301      	adds	r3, #1
 800a650:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 800a652:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 800a654:	bf42      	ittt	mi
 800a656:	7ea3      	ldrbmi	r3, [r4, #26]
 800a658:	f043 0320 	orrmi.w	r3, r3, #32
 800a65c:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a65e:	6868      	ldr	r0, [r5, #4]
 800a660:	f7fd f94a 	bl	80078f8 <pbuf_clen>
 800a664:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a668:	4418      	add	r0, r3
 800a66a:	b280      	uxth	r0, r0
 800a66c:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800a670:	2800      	cmp	r0, #0
 800a672:	d0a3      	beq.n	800a5bc <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a674:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a676:	b948      	cbnz	r0, 800a68c <tcp_enqueue_flags+0x104>
 800a678:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 800a67a:	2c00      	cmp	r4, #0
 800a67c:	d19e      	bne.n	800a5bc <tcp_enqueue_flags+0x34>
 800a67e:	4b07      	ldr	r3, [pc, #28]	; (800a69c <tcp_enqueue_flags+0x114>)
 800a680:	490c      	ldr	r1, [pc, #48]	; (800a6b4 <tcp_enqueue_flags+0x12c>)
 800a682:	4808      	ldr	r0, [pc, #32]	; (800a6a4 <tcp_enqueue_flags+0x11c>)
 800a684:	f240 326d 	movw	r2, #877	; 0x36d
 800a688:	f003 fa72 	bl	800db70 <iprintf>
  return ERR_OK;
 800a68c:	2000      	movs	r0, #0
 800a68e:	e795      	b.n	800a5bc <tcp_enqueue_flags+0x34>
 800a690:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	2a00      	cmp	r2, #0
 800a696:	d1fb      	bne.n	800a690 <tcp_enqueue_flags+0x108>
    useg->next = seg;
 800a698:	601d      	str	r5, [r3, #0]
 800a69a:	e7d1      	b.n	800a640 <tcp_enqueue_flags+0xb8>
 800a69c:	08010867 	.word	0x08010867
 800a6a0:	08010704 	.word	0x08010704
 800a6a4:	0800f20f 	.word	0x0800f20f
 800a6a8:	08010759 	.word	0x08010759
 800a6ac:	08010792 	.word	0x08010792
 800a6b0:	080107aa 	.word	0x080107aa
 800a6b4:	080107d4 	.word	0x080107d4

0800a6b8 <tcp_send_fin>:
{
 800a6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 800a6ba:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 800a6bc:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 800a6be:	b934      	cbnz	r4, 800a6ce <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	2101      	movs	r1, #1
}
 800a6c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a6c8:	f7ff bf5e 	b.w	800a588 <tcp_enqueue_flags>
 800a6cc:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d1fb      	bne.n	800a6cc <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a6d4:	68e3      	ldr	r3, [r4, #12]
 800a6d6:	8998      	ldrh	r0, [r3, #12]
 800a6d8:	f7fb f99c 	bl	8005a14 <lwip_htons>
 800a6dc:	f010 0707 	ands.w	r7, r0, #7
 800a6e0:	d1ee      	bne.n	800a6c0 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a6e2:	68e6      	ldr	r6, [r4, #12]
 800a6e4:	2001      	movs	r0, #1
 800a6e6:	89b4      	ldrh	r4, [r6, #12]
 800a6e8:	f7fb f994 	bl	8005a14 <lwip_htons>
 800a6ec:	4320      	orrs	r0, r4
 800a6ee:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 800a6f0:	7eab      	ldrb	r3, [r5, #26]
 800a6f2:	f043 0320 	orr.w	r3, r3, #32
 800a6f6:	76ab      	strb	r3, [r5, #26]
}
 800a6f8:	4638      	mov	r0, r7
 800a6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a6fc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a6fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a6fe:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a700:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800a702:	f7fb f98a 	bl	8005a1a <lwip_htonl>
 800a706:	2100      	movs	r1, #0
 800a708:	4602      	mov	r2, r0
 800a70a:	4620      	mov	r0, r4
 800a70c:	f7ff fc6a 	bl	8009fe4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800a710:	4606      	mov	r6, r0
 800a712:	b940      	cbnz	r0, 800a726 <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a714:	7ea3      	ldrb	r3, [r4, #26]
 800a716:	f043 0303 	orr.w	r3, r3, #3
 800a71a:	76a3      	strb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a71c:	f06f 0501 	mvn.w	r5, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800a720:	4628      	mov	r0, r5
 800a722:	b004      	add	sp, #16
 800a724:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a726:	1d25      	adds	r5, r4, #4
 800a728:	4628      	mov	r0, r5
 800a72a:	f7fb fe67 	bl	80063fc <ip4_route>
  if (netif == NULL) {
 800a72e:	b1a0      	cbz	r0, 800a75a <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800a730:	2206      	movs	r2, #6
 800a732:	9201      	str	r2, [sp, #4]
 800a734:	7a62      	ldrb	r2, [r4, #9]
 800a736:	9002      	str	r0, [sp, #8]
 800a738:	9200      	str	r2, [sp, #0]
 800a73a:	7aa3      	ldrb	r3, [r4, #10]
 800a73c:	462a      	mov	r2, r5
 800a73e:	4621      	mov	r1, r4
 800a740:	4630      	mov	r0, r6
 800a742:	f7fb ffc1 	bl	80066c8 <ip4_output_if>
 800a746:	4605      	mov	r5, r0
  pbuf_free(p);
 800a748:	4630      	mov	r0, r6
 800a74a:	f7fc ff23 	bl	8007594 <pbuf_free>
 800a74e:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 800a750:	b135      	cbz	r5, 800a760 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a752:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a756:	76a3      	strb	r3, [r4, #26]
 800a758:	e7e2      	b.n	800a720 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 800a75a:	f06f 0503 	mvn.w	r5, #3
 800a75e:	e7f3      	b.n	800a748 <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a760:	f023 0303 	bic.w	r3, r3, #3
 800a764:	e7f7      	b.n	800a756 <tcp_send_empty_ack+0x5a>
	...

0800a768 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a76c:	7d03      	ldrb	r3, [r0, #20]
 800a76e:	2b01      	cmp	r3, #1
{
 800a770:	b087      	sub	sp, #28
 800a772:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a774:	d106      	bne.n	800a784 <tcp_output+0x1c>
 800a776:	4ba5      	ldr	r3, [pc, #660]	; (800aa0c <tcp_output+0x2a4>)
 800a778:	49a5      	ldr	r1, [pc, #660]	; (800aa10 <tcp_output+0x2a8>)
 800a77a:	48a6      	ldr	r0, [pc, #664]	; (800aa14 <tcp_output+0x2ac>)
 800a77c:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800a780:	f003 f9f6 	bl	800db70 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a784:	4ba4      	ldr	r3, [pc, #656]	; (800aa18 <tcp_output+0x2b0>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	429c      	cmp	r4, r3
 800a78a:	d052      	beq.n	800a832 <tcp_output+0xca>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a78c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800a790:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 800a794:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a796:	429f      	cmp	r7, r3
 800a798:	bf28      	it	cs
 800a79a:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800a79c:	7ea3      	ldrb	r3, [r4, #26]
 800a79e:	0799      	lsls	r1, r3, #30
 800a7a0:	d510      	bpl.n	800a7c4 <tcp_output+0x5c>
 800a7a2:	b92d      	cbnz	r5, 800a7b0 <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 800a7a4:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 800a7a6:	b007      	add	sp, #28
 800a7a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 800a7ac:	f7ff bfa6 	b.w	800a6fc <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800a7b0:	68eb      	ldr	r3, [r5, #12]
 800a7b2:	6858      	ldr	r0, [r3, #4]
 800a7b4:	f7fb f931 	bl	8005a1a <lwip_htonl>
 800a7b8:	892b      	ldrh	r3, [r5, #8]
 800a7ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a7bc:	1a9b      	subs	r3, r3, r2
 800a7be:	4418      	add	r0, r3
     (seg == NULL ||
 800a7c0:	4287      	cmp	r7, r0
 800a7c2:	d3ef      	bcc.n	800a7a4 <tcp_output+0x3c>
  useg = pcb->unacked;
 800a7c4:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 800a7c6:	2e00      	cmp	r6, #0
 800a7c8:	d136      	bne.n	800a838 <tcp_output+0xd0>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a7ca:	f104 0804 	add.w	r8, r4, #4
 800a7ce:	4640      	mov	r0, r8
 800a7d0:	f7fb fe14 	bl	80063fc <ip4_route>
  if (netif == NULL) {
 800a7d4:	4681      	mov	r9, r0
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	f000 813c 	beq.w	800aa54 <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 800a7dc:	b10c      	cbz	r4, 800a7e2 <tcp_output+0x7a>
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	b913      	cbnz	r3, 800a7e8 <tcp_output+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a7e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a7e6:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 800a7e8:	b1d5      	cbz	r5, 800a820 <tcp_output+0xb8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a7ea:	68eb      	ldr	r3, [r5, #12]
 800a7ec:	6858      	ldr	r0, [r3, #4]
 800a7ee:	f7fb f914 	bl	8005a1a <lwip_htonl>
 800a7f2:	892b      	ldrh	r3, [r5, #8]
 800a7f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a7f6:	1a9b      	subs	r3, r3, r2
 800a7f8:	4418      	add	r0, r3
  if (seg != NULL &&
 800a7fa:	4287      	cmp	r7, r0
 800a7fc:	d26f      	bcs.n	800a8de <tcp_output+0x176>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a7fe:	2f00      	cmp	r7, #0
 800a800:	d06d      	beq.n	800a8de <tcp_output+0x176>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800a802:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800a806:	429f      	cmp	r7, r3
 800a808:	d169      	bne.n	800a8de <tcp_output+0x176>
 800a80a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d166      	bne.n	800a8de <tcp_output+0x176>
    if (pcb->persist_backoff == 0) {
 800a810:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800a814:	b923      	cbnz	r3, 800a820 <tcp_output+0xb8>
      pcb->persist_cnt = 0;
 800a816:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
      pcb->persist_backoff = 1;
 800a81a:	2301      	movs	r3, #1
 800a81c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (pcb->unsent == NULL) {
 800a820:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a822:	b913      	cbnz	r3, 800a82a <tcp_output+0xc2>
    pcb->unsent_oversize = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 800a82a:	7ea3      	ldrb	r3, [r4, #26]
 800a82c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a830:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 800a832:	2000      	movs	r0, #0
 800a834:	e0e6      	b.n	800aa04 <tcp_output+0x29c>
 800a836:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 800a838:	6833      	ldr	r3, [r6, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1fb      	bne.n	800a836 <tcp_output+0xce>
 800a83e:	e7c4      	b.n	800a7ca <tcp_output+0x62>
    pcb->unsent = seg->next;
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800a844:	7d23      	ldrb	r3, [r4, #20]
 800a846:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a848:	bf1e      	ittt	ne
 800a84a:	7ea3      	ldrbne	r3, [r4, #26]
 800a84c:	f023 0303 	bicne.w	r3, r3, #3
 800a850:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a852:	68eb      	ldr	r3, [r5, #12]
 800a854:	6858      	ldr	r0, [r3, #4]
 800a856:	f7fb f8e0 	bl	8005a1a <lwip_htonl>
 800a85a:	68e9      	ldr	r1, [r5, #12]
 800a85c:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800a860:	4683      	mov	fp, r0
 800a862:	8988      	ldrh	r0, [r1, #12]
 800a864:	f7fb f8d6 	bl	8005a14 <lwip_htons>
 800a868:	f010 0003 	ands.w	r0, r0, #3
 800a86c:	eb0b 030a 	add.w	r3, fp, sl
 800a870:	bf18      	it	ne
 800a872:	2001      	movne	r0, #1
 800a874:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a876:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 800a878:	68ea      	ldr	r2, [r5, #12]
 800a87a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a87e:	1a1b      	subs	r3, r3, r0
 800a880:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 800a882:	bfb8      	it	lt
 800a884:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 800a886:	8990      	ldrh	r0, [r2, #12]
 800a888:	f7fb f8c4 	bl	8005a14 <lwip_htons>
 800a88c:	f010 0003 	ands.w	r0, r0, #3
 800a890:	bf18      	it	ne
 800a892:	2001      	movne	r0, #1
 800a894:	eb10 0f0a 	cmn.w	r0, sl
 800a898:	f000 80d8 	beq.w	800aa4c <tcp_output+0x2e4>
      seg->next = NULL;
 800a89c:	2300      	movs	r3, #0
 800a89e:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800a8a0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a8a2:	b913      	cbnz	r3, 800a8aa <tcp_output+0x142>
        pcb->unacked = seg;
 800a8a4:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 800a8a6:	462e      	mov	r6, r5
 800a8a8:	e016      	b.n	800a8d8 <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a8aa:	68eb      	ldr	r3, [r5, #12]
 800a8ac:	6858      	ldr	r0, [r3, #4]
 800a8ae:	f7fb f8b4 	bl	8005a1a <lwip_htonl>
 800a8b2:	68f2      	ldr	r2, [r6, #12]
 800a8b4:	4682      	mov	sl, r0
 800a8b6:	6850      	ldr	r0, [r2, #4]
 800a8b8:	f7fb f8af 	bl	8005a1a <lwip_htonl>
 800a8bc:	ebaa 0000 	sub.w	r0, sl, r0
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	f280 80c1 	bge.w	800aa48 <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a8c6:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	2a00      	cmp	r2, #0
 800a8ce:	f040 80a9 	bne.w	800aa24 <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800a8d6:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800a8d8:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 800a8da:	2d00      	cmp	r5, #0
 800a8dc:	d0a2      	beq.n	800a824 <tcp_output+0xbc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a8de:	68eb      	ldr	r3, [r5, #12]
 800a8e0:	6858      	ldr	r0, [r3, #4]
 800a8e2:	f7fb f89a 	bl	8005a1a <lwip_htonl>
 800a8e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a8e8:	1ac0      	subs	r0, r0, r3
 800a8ea:	892b      	ldrh	r3, [r5, #8]
 800a8ec:	4418      	add	r0, r3
  while (seg != NULL &&
 800a8ee:	4287      	cmp	r7, r0
 800a8f0:	d396      	bcc.n	800a820 <tcp_output+0xb8>
    LWIP_ASSERT("RST not expected here!",
 800a8f2:	68eb      	ldr	r3, [r5, #12]
 800a8f4:	8998      	ldrh	r0, [r3, #12]
 800a8f6:	f7fb f88d 	bl	8005a14 <lwip_htons>
 800a8fa:	0742      	lsls	r2, r0, #29
 800a8fc:	d506      	bpl.n	800a90c <tcp_output+0x1a4>
 800a8fe:	4b43      	ldr	r3, [pc, #268]	; (800aa0c <tcp_output+0x2a4>)
 800a900:	4946      	ldr	r1, [pc, #280]	; (800aa1c <tcp_output+0x2b4>)
 800a902:	4844      	ldr	r0, [pc, #272]	; (800aa14 <tcp_output+0x2ac>)
 800a904:	f240 4246 	movw	r2, #1094	; 0x446
 800a908:	f003 f932 	bl	800db70 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a90c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a90e:	b19b      	cbz	r3, 800a938 <tcp_output+0x1d0>
 800a910:	7ea2      	ldrb	r2, [r4, #26]
 800a912:	f012 0f44 	tst.w	r2, #68	; 0x44
 800a916:	d10f      	bne.n	800a938 <tcp_output+0x1d0>
 800a918:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a91a:	b12b      	cbz	r3, 800a928 <tcp_output+0x1c0>
 800a91c:	6819      	ldr	r1, [r3, #0]
 800a91e:	b959      	cbnz	r1, 800a938 <tcp_output+0x1d0>
 800a920:	8919      	ldrh	r1, [r3, #8]
 800a922:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a924:	4299      	cmp	r1, r3
 800a926:	d207      	bcs.n	800a938 <tcp_output+0x1d0>
 800a928:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800a92c:	b123      	cbz	r3, 800a938 <tcp_output+0x1d0>
 800a92e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a932:	2b08      	cmp	r3, #8
 800a934:	f240 8091 	bls.w	800aa5a <tcp_output+0x2f2>
    if (pcb->state != SYN_SENT) {
 800a938:	7d23      	ldrb	r3, [r4, #20]
 800a93a:	2b02      	cmp	r3, #2
 800a93c:	d00a      	beq.n	800a954 <tcp_output+0x1ec>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a93e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a942:	2010      	movs	r0, #16
 800a944:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 800a948:	f7fb f864 	bl	8005a14 <lwip_htons>
 800a94c:	ea4b 0000 	orr.w	r0, fp, r0
 800a950:	f8aa 000c 	strh.w	r0, [sl, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800a954:	686b      	ldr	r3, [r5, #4]
 800a956:	89db      	ldrh	r3, [r3, #14]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	f47f af71 	bne.w	800a840 <tcp_output+0xd8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a95e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a960:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a964:	f7fb f859 	bl	8005a1a <lwip_htonl>
 800a968:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a96c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800a96e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a972:	f7fb f84f 	bl	8005a14 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a976:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a978:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a97a:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a97e:	4413      	add	r3, r2
 800a980:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a982:	7aab      	ldrb	r3, [r5, #10]
 800a984:	07db      	lsls	r3, r3, #31
 800a986:	d50c      	bpl.n	800a9a2 <tcp_output+0x23a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800a988:	4641      	mov	r1, r8
 800a98a:	f44f 7006 	mov.w	r0, #536	; 0x218
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a98e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800a992:	f7fd ffc7 	bl	8008924 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a996:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800a99a:	f7fb f83e 	bl	8005a1a <lwip_htonl>
 800a99e:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a9a2:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800a9a6:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800a9a8:	bfbc      	itt	lt
 800a9aa:	2300      	movlt	r3, #0
 800a9ac:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a9ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9b0:	b93b      	cbnz	r3, 800a9c2 <tcp_output+0x25a>
    pcb->rttest = tcp_ticks;
 800a9b2:	4b1b      	ldr	r3, [pc, #108]	; (800aa20 <tcp_output+0x2b8>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a9b8:	68eb      	ldr	r3, [r5, #12]
 800a9ba:	6858      	ldr	r0, [r3, #4]
 800a9bc:	f7fb f82d 	bl	8005a1a <lwip_htonl>
 800a9c0:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a9c2:	6868      	ldr	r0, [r5, #4]
 800a9c4:	68ea      	ldr	r2, [r5, #12]
 800a9c6:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a9c8:	8941      	ldrh	r1, [r0, #10]
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 800a9ca:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800a9d0:	1ac9      	subs	r1, r1, r3
 800a9d2:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800a9d4:	8901      	ldrh	r1, [r0, #8]
 800a9d6:	1acb      	subs	r3, r1, r3
 800a9d8:	8103      	strh	r3, [r0, #8]

  seg->tcphdr->chksum = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	7413      	strb	r3, [r2, #16]
 800a9de:	7453      	strb	r3, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a9e0:	2206      	movs	r2, #6
 800a9e2:	9201      	str	r2, [sp, #4]
 800a9e4:	7a62      	ldrb	r2, [r4, #9]
 800a9e6:	9200      	str	r2, [sp, #0]
 800a9e8:	7aa3      	ldrb	r3, [r4, #10]
 800a9ea:	f8cd 9008 	str.w	r9, [sp, #8]
 800a9ee:	4642      	mov	r2, r8
 800a9f0:	4621      	mov	r1, r4
 800a9f2:	f7fb fe69 	bl	80066c8 <ip4_output_if>
    if (err != ERR_OK) {
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	f43f af22 	beq.w	800a840 <tcp_output+0xd8>
      pcb->flags |= TF_NAGLEMEMERR;
 800a9fc:	7ea3      	ldrb	r3, [r4, #26]
 800a9fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa02:	76a3      	strb	r3, [r4, #26]
}
 800aa04:	b007      	add	sp, #28
 800aa06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0a:	bf00      	nop
 800aa0c:	08010867 	.word	0x08010867
 800aa10:	080107fc 	.word	0x080107fc
 800aa14:	0800f20f 	.word	0x0800f20f
 800aa18:	20005068 	.word	0x20005068
 800aa1c:	08010822 	.word	0x08010822
 800aa20:	20005058 	.word	0x20005058
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800aa24:	68d2      	ldr	r2, [r2, #12]
 800aa26:	9305      	str	r3, [sp, #20]
 800aa28:	6850      	ldr	r0, [r2, #4]
 800aa2a:	f7fa fff6 	bl	8005a1a <lwip_htonl>
 800aa2e:	68e9      	ldr	r1, [r5, #12]
 800aa30:	4682      	mov	sl, r0
 800aa32:	6848      	ldr	r0, [r1, #4]
 800aa34:	f7fa fff1 	bl	8005a1a <lwip_htonl>
 800aa38:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	9b05      	ldr	r3, [sp, #20]
 800aa40:	f6bf af47 	bge.w	800a8d2 <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	e740      	b.n	800a8ca <tcp_output+0x162>
          useg->next = seg;
 800aa48:	6035      	str	r5, [r6, #0]
 800aa4a:	e72c      	b.n	800a8a6 <tcp_output+0x13e>
      tcp_seg_free(seg);
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	f7fd f9e3 	bl	8007e18 <tcp_seg_free>
 800aa52:	e741      	b.n	800a8d8 <tcp_output+0x170>
    return ERR_RTE;
 800aa54:	f06f 0003 	mvn.w	r0, #3
 800aa58:	e7d4      	b.n	800aa04 <tcp_output+0x29c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aa5a:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800aa5e:	f47f af6b 	bne.w	800a938 <tcp_output+0x1d0>
 800aa62:	e6dd      	b.n	800a820 <tcp_output+0xb8>

0800aa64 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800aa64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa68:	b085      	sub	sp, #20
 800aa6a:	4681      	mov	r9, r0
 800aa6c:	460e      	mov	r6, r1
 800aa6e:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800aa70:	2114      	movs	r1, #20
 800aa72:	2200      	movs	r2, #0
 800aa74:	2001      	movs	r0, #1
{
 800aa76:	461f      	mov	r7, r3
 800aa78:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 800aa7c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800aa80:	f7fc fdea 	bl	8007658 <pbuf_alloc>
  if (p == NULL) {
 800aa84:	4605      	mov	r5, r0
 800aa86:	2800      	cmp	r0, #0
 800aa88:	d03c      	beq.n	800ab04 <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800aa8a:	8943      	ldrh	r3, [r0, #10]
 800aa8c:	2b13      	cmp	r3, #19
 800aa8e:	d806      	bhi.n	800aa9e <tcp_rst+0x3a>
 800aa90:	4b1e      	ldr	r3, [pc, #120]	; (800ab0c <tcp_rst+0xa8>)
 800aa92:	491f      	ldr	r1, [pc, #124]	; (800ab10 <tcp_rst+0xac>)
 800aa94:	481f      	ldr	r0, [pc, #124]	; (800ab14 <tcp_rst+0xb0>)
 800aa96:	f240 524d 	movw	r2, #1357	; 0x54d
 800aa9a:	f003 f869 	bl	800db70 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = lwip_htons(local_port);
 800aa9e:	4658      	mov	r0, fp
  tcphdr = (struct tcp_hdr *)p->payload;
 800aaa0:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 800aaa2:	f7fa ffb7 	bl	8005a14 <lwip_htons>
 800aaa6:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800aaa8:	4650      	mov	r0, sl
 800aaaa:	f7fa ffb3 	bl	8005a14 <lwip_htons>
 800aaae:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800aab0:	4648      	mov	r0, r9
 800aab2:	f7fa ffb2 	bl	8005a1a <lwip_htonl>
 800aab6:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800aab8:	4630      	mov	r0, r6
 800aaba:	f7fa ffae 	bl	8005a1a <lwip_htonl>
 800aabe:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800aac0:	f245 0014 	movw	r0, #20500	; 0x5014
 800aac4:	f7fa ffa6 	bl	8005a14 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800aac8:	2308      	movs	r3, #8
 800aaca:	2600      	movs	r6, #0
 800aacc:	73a3      	strb	r3, [r4, #14]
 800aace:	2360      	movs	r3, #96	; 0x60
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800aad0:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800aad2:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 800aad4:	7426      	strb	r6, [r4, #16]
 800aad6:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 800aad8:	74a6      	strb	r6, [r4, #18]
 800aada:	74e6      	strb	r6, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800aadc:	4638      	mov	r0, r7
 800aade:	f7fb fc8d 	bl	80063fc <ip4_route>
  if (netif != NULL) {
 800aae2:	b148      	cbz	r0, 800aaf8 <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800aae4:	2306      	movs	r3, #6
 800aae6:	9002      	str	r0, [sp, #8]
 800aae8:	9301      	str	r3, [sp, #4]
 800aaea:	9600      	str	r6, [sp, #0]
 800aaec:	23ff      	movs	r3, #255	; 0xff
 800aaee:	463a      	mov	r2, r7
 800aaf0:	4641      	mov	r1, r8
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f7fb fde8 	bl	80066c8 <ip4_output_if>
  }
  pbuf_free(p);
 800aaf8:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800aafa:	b005      	add	sp, #20
 800aafc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800ab00:	f7fc bd48 	b.w	8007594 <pbuf_free>
}
 800ab04:	b005      	add	sp, #20
 800ab06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0a:	bf00      	nop
 800ab0c:	08010867 	.word	0x08010867
 800ab10:	08010839 	.word	0x08010839
 800ab14:	0800f20f 	.word	0x0800f20f

0800ab18 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800ab18:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 800ab1a:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 800ab1c:	b1aa      	cbz	r2, 800ab4a <tcp_rexmit_rto+0x32>
 800ab1e:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800ab20:	680b      	ldr	r3, [r1, #0]
 800ab22:	b983      	cbnz	r3, 800ab46 <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ab24:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800ab26:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ab28:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ab2a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  pcb->unsent = pcb->unacked;
 800ab2e:	6682      	str	r2, [r0, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800ab30:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800ab32:	bf1c      	itt	ne
 800ab34:	3301      	addne	r3, #1
 800ab36:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 800ab3e:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 800ab42:	f7ff be11 	b.w	800a768 <tcp_output>
 800ab46:	4619      	mov	r1, r3
 800ab48:	e7ea      	b.n	800ab20 <tcp_rexmit_rto+0x8>
}
 800ab4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ab50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800ab52:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 800ab54:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 800ab56:	b1ad      	cbz	r5, 800ab84 <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800ab58:	682b      	ldr	r3, [r5, #0]
 800ab5a:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800ab5c:	f100 0668 	add.w	r6, r0, #104	; 0x68
  while (*cur_seg &&
 800ab60:	6833      	ldr	r3, [r6, #0]
 800ab62:	b983      	cbnz	r3, 800ab86 <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 800ab64:	6833      	ldr	r3, [r6, #0]
 800ab66:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800ab68:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ab6a:	682b      	ldr	r3, [r5, #0]
 800ab6c:	b90b      	cbnz	r3, 800ab72 <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ab6e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ab72:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800ab76:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800ab78:	bf1c      	itt	ne
 800ab7a:	3301      	addne	r3, #1
 800ab7c:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ab80:	2300      	movs	r3, #0
 800ab82:	6363      	str	r3, [r4, #52]	; 0x34
 800ab84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	6858      	ldr	r0, [r3, #4]
 800ab8a:	f7fa ff46 	bl	8005a1a <lwip_htonl>
 800ab8e:	68eb      	ldr	r3, [r5, #12]
 800ab90:	4607      	mov	r7, r0
 800ab92:	6858      	ldr	r0, [r3, #4]
 800ab94:	f7fa ff41 	bl	8005a1a <lwip_htonl>
 800ab98:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	dae2      	bge.n	800ab64 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 800ab9e:	6836      	ldr	r6, [r6, #0]
 800aba0:	e7de      	b.n	800ab60 <tcp_rexmit+0x10>

0800aba2 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800aba2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 800aba4:	b510      	push	{r4, lr}
 800aba6:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800aba8:	b30b      	cbz	r3, 800abee <tcp_rexmit_fast+0x4c>
 800abaa:	7e83      	ldrb	r3, [r0, #26]
 800abac:	075b      	lsls	r3, r3, #29
 800abae:	d41e      	bmi.n	800abee <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800abb0:	f7ff ffce 	bl	800ab50 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800abb4:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800abb8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800abbc:	4293      	cmp	r3, r2
 800abbe:	bf38      	it	cc
 800abc0:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800abc2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800abc4:	bf28      	it	cs
 800abc6:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800abc8:	0059      	lsls	r1, r3, #1
 800abca:	428a      	cmp	r2, r1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800abcc:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800abd0:	bf38      	it	cc
 800abd2:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800abd6:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800abda:	440b      	add	r3, r1
 800abdc:	4413      	add	r3, r2
 800abde:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800abe2:	7ea3      	ldrb	r3, [r4, #26]
 800abe4:	f043 0304 	orr.w	r3, r3, #4
 800abe8:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800abea:	2300      	movs	r3, #0
 800abec:	8623      	strh	r3, [r4, #48]	; 0x30
 800abee:	bd10      	pop	{r4, pc}

0800abf0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800abf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800abf2:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800abf4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800abf6:	3801      	subs	r0, #1
 800abf8:	f7fa ff0f 	bl	8005a1a <lwip_htonl>
 800abfc:	2100      	movs	r1, #0
 800abfe:	4602      	mov	r2, r0
 800ac00:	4620      	mov	r0, r4
 800ac02:	f7ff f9ef 	bl	8009fe4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800ac06:	4605      	mov	r5, r0
 800ac08:	b1c8      	cbz	r0, 800ac3e <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ac0a:	1d26      	adds	r6, r4, #4
 800ac0c:	4630      	mov	r0, r6
 800ac0e:	f7fb fbf5 	bl	80063fc <ip4_route>
  if (netif == NULL) {
 800ac12:	b188      	cbz	r0, 800ac38 <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800ac14:	2100      	movs	r1, #0
 800ac16:	2206      	movs	r2, #6
 800ac18:	7aa3      	ldrb	r3, [r4, #10]
 800ac1a:	9002      	str	r0, [sp, #8]
 800ac1c:	e88d 0006 	stmia.w	sp, {r1, r2}
 800ac20:	4628      	mov	r0, r5
 800ac22:	4621      	mov	r1, r4
 800ac24:	4632      	mov	r2, r6
 800ac26:	f7fb fd4f 	bl	80066c8 <ip4_output_if>
 800ac2a:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	f7fc fcb1 	bl	8007594 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800ac32:	4620      	mov	r0, r4
 800ac34:	b004      	add	sp, #16
 800ac36:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 800ac38:	f06f 0403 	mvn.w	r4, #3
 800ac3c:	e7f6      	b.n	800ac2c <tcp_keepalive+0x3c>
    return ERR_MEM;
 800ac3e:	f04f 34ff 	mov.w	r4, #4294967295
 800ac42:	e7f6      	b.n	800ac32 <tcp_keepalive+0x42>

0800ac44 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ac44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800ac48:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 800ac4a:	4606      	mov	r6, r0

  if (seg == NULL) {
 800ac4c:	b914      	cbnz	r4, 800ac54 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 800ac4e:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 800ac50:	2c00      	cmp	r4, #0
 800ac52:	d042      	beq.n	800acda <tcp_zero_window_probe+0x96>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ac54:	68e3      	ldr	r3, [r4, #12]
 800ac56:	8998      	ldrh	r0, [r3, #12]
 800ac58:	f7fa fedc 	bl	8005a14 <lwip_htons>
 800ac5c:	f010 0501 	ands.w	r5, r0, #1
 800ac60:	bf18      	it	ne
 800ac62:	8925      	ldrhne	r5, [r4, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800ac64:	68e3      	ldr	r3, [r4, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ac66:	bf1c      	itt	ne
 800ac68:	fab5 f585 	clzne	r5, r5
 800ac6c:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800ac6e:	685a      	ldr	r2, [r3, #4]
 800ac70:	f085 0101 	eor.w	r1, r5, #1
 800ac74:	4630      	mov	r0, r6
 800ac76:	f7ff f9b5 	bl	8009fe4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800ac7a:	4607      	mov	r7, r0
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d03e      	beq.n	800acfe <tcp_zero_window_probe+0xba>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ac80:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800ac84:	b36d      	cbz	r5, 800ace2 <tcp_zero_window_probe+0x9e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ac86:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 800ac8a:	2011      	movs	r0, #17
 800ac8c:	f7fa fec2 	bl	8005a14 <lwip_htons>
 800ac90:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800ac94:	b2ad      	uxth	r5, r5
 800ac96:	4328      	orrs	r0, r5
 800ac98:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ac9c:	68e3      	ldr	r3, [r4, #12]
 800ac9e:	6858      	ldr	r0, [r3, #4]
 800aca0:	f7fa febb 	bl	8005a1a <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800aca4:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800aca6:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800aca8:	1a1b      	subs	r3, r3, r0
 800acaa:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800acac:	f106 0404 	add.w	r4, r6, #4
    pcb->snd_nxt = snd_nxt;
 800acb0:	bfb8      	it	lt
 800acb2:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800acb4:	4620      	mov	r0, r4
 800acb6:	f7fb fba1 	bl	80063fc <ip4_route>
  if (netif == NULL) {
 800acba:	b1e8      	cbz	r0, 800acf8 <tcp_zero_window_probe+0xb4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800acbc:	2100      	movs	r1, #0
 800acbe:	2206      	movs	r2, #6
 800acc0:	e88d 0006 	stmia.w	sp, {r1, r2}
 800acc4:	9002      	str	r0, [sp, #8]
 800acc6:	4622      	mov	r2, r4
 800acc8:	7ab3      	ldrb	r3, [r6, #10]
 800acca:	4631      	mov	r1, r6
 800accc:	4638      	mov	r0, r7
 800acce:	f7fb fcfb 	bl	80066c8 <ip4_output_if>
 800acd2:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800acd4:	4638      	mov	r0, r7
 800acd6:	f7fc fc5d 	bl	8007594 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800acda:	4620      	mov	r0, r4
 800acdc:	b004      	add	sp, #16
 800acde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ace2:	6860      	ldr	r0, [r4, #4]
 800ace4:	8922      	ldrh	r2, [r4, #8]
 800ace6:	8903      	ldrh	r3, [r0, #8]
 800ace8:	1a9b      	subs	r3, r3, r2
 800acea:	b29b      	uxth	r3, r3
 800acec:	2201      	movs	r2, #1
 800acee:	f108 0114 	add.w	r1, r8, #20
 800acf2:	f7fc fee1 	bl	8007ab8 <pbuf_copy_partial>
 800acf6:	e7d1      	b.n	800ac9c <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 800acf8:	f06f 0403 	mvn.w	r4, #3
 800acfc:	e7ea      	b.n	800acd4 <tcp_zero_window_probe+0x90>
    return ERR_MEM;
 800acfe:	f04f 34ff 	mov.w	r4, #4294967295
 800ad02:	e7ea      	b.n	800acda <tcp_zero_window_probe+0x96>

0800ad04 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ad04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad08:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ad0a:	2006      	movs	r0, #6
{
 800ad0c:	460f      	mov	r7, r1
 800ad0e:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ad10:	f7fc fac0 	bl	8007294 <memp_malloc>
  if (timeout == NULL) {
 800ad14:	4604      	mov	r4, r0
 800ad16:	b938      	cbnz	r0, 800ad28 <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ad18:	4b1e      	ldr	r3, [pc, #120]	; (800ad94 <sys_timeout+0x90>)
 800ad1a:	491f      	ldr	r1, [pc, #124]	; (800ad98 <sys_timeout+0x94>)
 800ad1c:	481f      	ldr	r0, [pc, #124]	; (800ad9c <sys_timeout+0x98>)
 800ad1e:	22d4      	movs	r2, #212	; 0xd4
        t->next = timeout;
        break;
      }
    }
  }
}
 800ad20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ad24:	f002 bf24 	b.w	800db70 <iprintf>
  now = sys_now();
 800ad28:	f001 f952 	bl	800bfd0 <sys_now>
  if (next_timeout == NULL) {
 800ad2c:	4a1c      	ldr	r2, [pc, #112]	; (800ada0 <sys_timeout+0x9c>)
 800ad2e:	491d      	ldr	r1, [pc, #116]	; (800ada4 <sys_timeout+0xa0>)
 800ad30:	6813      	ldr	r3, [r2, #0]
 800ad32:	b95b      	cbnz	r3, 800ad4c <sys_timeout+0x48>
    timeouts_last_time = now;
 800ad34:	6008      	str	r0, [r1, #0]
    diff = 0;
 800ad36:	4618      	mov	r0, r3
  timeout->next = NULL;
 800ad38:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 800ad3a:	4428      	add	r0, r5
  timeout->next = NULL;
 800ad3c:	6021      	str	r1, [r4, #0]
  timeout->h = handler;
 800ad3e:	60a7      	str	r7, [r4, #8]
  timeout->arg = arg;
 800ad40:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 800ad42:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 800ad44:	b92b      	cbnz	r3, 800ad52 <sys_timeout+0x4e>
    next_timeout = timeout;
 800ad46:	6014      	str	r4, [r2, #0]
 800ad48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 800ad4c:	6809      	ldr	r1, [r1, #0]
 800ad4e:	1a40      	subs	r0, r0, r1
 800ad50:	e7f2      	b.n	800ad38 <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 800ad52:	6859      	ldr	r1, [r3, #4]
 800ad54:	428d      	cmp	r5, r1
 800ad56:	d217      	bcs.n	800ad88 <sys_timeout+0x84>
    next_timeout->time -= msecs;
 800ad58:	1b4d      	subs	r5, r1, r5
 800ad5a:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	e7f2      	b.n	800ad46 <sys_timeout+0x42>
      if (t->next == NULL || t->next->time > timeout->time) {
 800ad60:	684e      	ldr	r6, [r1, #4]
 800ad62:	42b2      	cmp	r2, r6
 800ad64:	d312      	bcc.n	800ad8c <sys_timeout+0x88>
 800ad66:	4608      	mov	r0, r1
      timeout->time -= t->time;
 800ad68:	6841      	ldr	r1, [r0, #4]
 800ad6a:	6862      	ldr	r2, [r4, #4]
 800ad6c:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 800ad6e:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 800ad70:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800ad72:	2900      	cmp	r1, #0
 800ad74:	d1f4      	bne.n	800ad60 <sys_timeout+0x5c>
        } else if (timeout->time > msecs) {
 800ad76:	4295      	cmp	r5, r2
 800ad78:	d202      	bcs.n	800ad80 <sys_timeout+0x7c>
          timeout->time = msecs + next_timeout->time;
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	441d      	add	r5, r3
 800ad7e:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 800ad80:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 800ad82:	6004      	str	r4, [r0, #0]
        break;
 800ad84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	e7ed      	b.n	800ad68 <sys_timeout+0x64>
          t->next->time -= timeout->time;
 800ad8c:	1ab2      	subs	r2, r6, r2
 800ad8e:	604a      	str	r2, [r1, #4]
 800ad90:	e7f6      	b.n	800ad80 <sys_timeout+0x7c>
 800ad92:	bf00      	nop
 800ad94:	08010af8 	.word	0x08010af8
 800ad98:	08010b2c 	.word	0x08010b2c
 800ad9c:	0800f20f 	.word	0x0800f20f
 800ada0:	20000d5c 	.word	0x20000d5c
 800ada4:	20000d64 	.word	0x20000d64

0800ada8 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ada8:	4b08      	ldr	r3, [pc, #32]	; (800adcc <tcp_timer_needed+0x24>)
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	b962      	cbnz	r2, 800adc8 <tcp_timer_needed+0x20>
 800adae:	4a08      	ldr	r2, [pc, #32]	; (800add0 <tcp_timer_needed+0x28>)
 800adb0:	6812      	ldr	r2, [r2, #0]
 800adb2:	b912      	cbnz	r2, 800adba <tcp_timer_needed+0x12>
 800adb4:	4a07      	ldr	r2, [pc, #28]	; (800add4 <tcp_timer_needed+0x2c>)
 800adb6:	6812      	ldr	r2, [r2, #0]
 800adb8:	b132      	cbz	r2, 800adc8 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800adba:	2201      	movs	r2, #1
 800adbc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800adbe:	4906      	ldr	r1, [pc, #24]	; (800add8 <tcp_timer_needed+0x30>)
 800adc0:	2200      	movs	r2, #0
 800adc2:	20fa      	movs	r0, #250	; 0xfa
 800adc4:	f7ff bf9e 	b.w	800ad04 <sys_timeout>
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop
 800adcc:	20000d60 	.word	0x20000d60
 800add0:	20005054 	.word	0x20005054
 800add4:	20005064 	.word	0x20005064
 800add8:	0800addd 	.word	0x0800addd

0800addc <tcpip_tcp_timer>:
{
 800addc:	b508      	push	{r3, lr}
  tcp_tmr();
 800adde:	f7fd fc39 	bl	8008654 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ade2:	4b08      	ldr	r3, [pc, #32]	; (800ae04 <tcpip_tcp_timer+0x28>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	b913      	cbnz	r3, 800adee <tcpip_tcp_timer+0x12>
 800ade8:	4b07      	ldr	r3, [pc, #28]	; (800ae08 <tcpip_tcp_timer+0x2c>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	b133      	cbz	r3, 800adfc <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800adee:	2200      	movs	r2, #0
 800adf0:	4906      	ldr	r1, [pc, #24]	; (800ae0c <tcpip_tcp_timer+0x30>)
 800adf2:	20fa      	movs	r0, #250	; 0xfa
}
 800adf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800adf8:	f7ff bf84 	b.w	800ad04 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800adfc:	4a04      	ldr	r2, [pc, #16]	; (800ae10 <tcpip_tcp_timer+0x34>)
 800adfe:	6013      	str	r3, [r2, #0]
 800ae00:	bd08      	pop	{r3, pc}
 800ae02:	bf00      	nop
 800ae04:	20005054 	.word	0x20005054
 800ae08:	20005064 	.word	0x20005064
 800ae0c:	0800addd 	.word	0x0800addd
 800ae10:	20000d60 	.word	0x20000d60

0800ae14 <sys_timeouts_init>:
{
 800ae14:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800ae16:	4d0a      	ldr	r5, [pc, #40]	; (800ae40 <sys_timeouts_init+0x2c>)
 800ae18:	4c0a      	ldr	r4, [pc, #40]	; (800ae44 <sys_timeouts_init+0x30>)
 800ae1a:	f105 0208 	add.w	r2, r5, #8
 800ae1e:	4621      	mov	r1, r4
 800ae20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ae24:	f7ff ff6e 	bl	800ad04 <sys_timeout>
 800ae28:	f105 0210 	add.w	r2, r5, #16
 800ae2c:	4621      	mov	r1, r4
 800ae2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ae32:	f7ff ff67 	bl	800ad04 <sys_timeout>
  timeouts_last_time = sys_now();
 800ae36:	f001 f8cb 	bl	800bfd0 <sys_now>
 800ae3a:	4b03      	ldr	r3, [pc, #12]	; (800ae48 <sys_timeouts_init+0x34>)
 800ae3c:	6018      	str	r0, [r3, #0]
 800ae3e:	bd38      	pop	{r3, r4, r5, pc}
 800ae40:	08010ae0 	.word	0x08010ae0
 800ae44:	0800ae4d 	.word	0x0800ae4d
 800ae48:	20000d64 	.word	0x20000d64

0800ae4c <cyclic_timer>:
{
 800ae4c:	b510      	push	{r4, lr}
 800ae4e:	4604      	mov	r4, r0
  cyclic->handler();
 800ae50:	6843      	ldr	r3, [r0, #4]
 800ae52:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800ae54:	4622      	mov	r2, r4
 800ae56:	6820      	ldr	r0, [r4, #0]
 800ae58:	4902      	ldr	r1, [pc, #8]	; (800ae64 <cyclic_timer+0x18>)
}
 800ae5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800ae5e:	f7ff bf51 	b.w	800ad04 <sys_timeout>
 800ae62:	bf00      	nop
 800ae64:	0800ae4d 	.word	0x0800ae4d

0800ae68 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800ae68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (next_timeout) {
 800ae6c:	4d13      	ldr	r5, [pc, #76]	; (800aebc <sys_check_timeouts+0x54>)
 800ae6e:	682b      	ldr	r3, [r5, #0]
 800ae70:	b30b      	cbz	r3, 800aeb6 <sys_check_timeouts+0x4e>
    u8_t had_one;
    u32_t now;

    now = sys_now();
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800ae72:	4e13      	ldr	r6, [pc, #76]	; (800aec0 <sys_check_timeouts+0x58>)
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800ae74:	4f13      	ldr	r7, [pc, #76]	; (800aec4 <sys_check_timeouts+0x5c>)
    now = sys_now();
 800ae76:	f001 f8ab 	bl	800bfd0 <sys_now>
    diff = now - timeouts_last_time;
 800ae7a:	6834      	ldr	r4, [r6, #0]
 800ae7c:	1b04      	subs	r4, r0, r4
      PBUF_CHECK_FREE_OOSEQ();
 800ae7e:	783b      	ldrb	r3, [r7, #0]
 800ae80:	b10b      	cbz	r3, 800ae86 <sys_check_timeouts+0x1e>
 800ae82:	f7fc fb33 	bl	80074ec <pbuf_free_ooseq>
      had_one = 0;
      tmptimeout = next_timeout;
 800ae86:	6829      	ldr	r1, [r5, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800ae88:	b1a9      	cbz	r1, 800aeb6 <sys_check_timeouts+0x4e>
 800ae8a:	684b      	ldr	r3, [r1, #4]
 800ae8c:	429c      	cmp	r4, r3
 800ae8e:	d312      	bcc.n	800aeb6 <sys_check_timeouts+0x4e>
        /* timeout has expired */
        had_one = 1;
        timeouts_last_time += tmptimeout->time;
 800ae90:	6832      	ldr	r2, [r6, #0]
        diff -= tmptimeout->time;
        next_timeout = tmptimeout->next;
        handler = tmptimeout->h;
 800ae92:	f8d1 8008 	ldr.w	r8, [r1, #8]
        arg = tmptimeout->arg;
 800ae96:	f8d1 900c 	ldr.w	r9, [r1, #12]
        timeouts_last_time += tmptimeout->time;
 800ae9a:	441a      	add	r2, r3
        diff -= tmptimeout->time;
 800ae9c:	1ae4      	subs	r4, r4, r3
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ae9e:	2006      	movs	r0, #6
        next_timeout = tmptimeout->next;
 800aea0:	680b      	ldr	r3, [r1, #0]
        timeouts_last_time += tmptimeout->time;
 800aea2:	6032      	str	r2, [r6, #0]
        next_timeout = tmptimeout->next;
 800aea4:	602b      	str	r3, [r5, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800aea6:	f7fc fa11 	bl	80072cc <memp_free>
        if (handler != NULL) {
 800aeaa:	f1b8 0f00 	cmp.w	r8, #0
 800aeae:	d0e6      	beq.n	800ae7e <sys_check_timeouts+0x16>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800aeb0:	4648      	mov	r0, r9
 800aeb2:	47c0      	blx	r8
 800aeb4:	e7e3      	b.n	800ae7e <sys_check_timeouts+0x16>
 800aeb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeba:	bf00      	nop
 800aebc:	20000d5c 	.word	0x20000d5c
 800aec0:	20000d64 	.word	0x20000d64
 800aec4:	2000504c 	.word	0x2000504c

0800aec8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800aec8:	4770      	bx	lr
	...

0800aecc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800aecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800aed0:	8943      	ldrh	r3, [r0, #10]
 800aed2:	2b07      	cmp	r3, #7
{
 800aed4:	b085      	sub	sp, #20
 800aed6:	4605      	mov	r5, r0
 800aed8:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 800aeda:	d805      	bhi.n	800aee8 <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800aedc:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800aede:	b005      	add	sp, #20
 800aee0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800aee4:	f7fc bb56 	b.w	8007594 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800aee8:	4e3e      	ldr	r6, [pc, #248]	; (800afe4 <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 800aeea:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800aeec:	6831      	ldr	r1, [r6, #0]
 800aeee:	6970      	ldr	r0, [r6, #20]
 800aef0:	f7fb fbfb 	bl	80066ea <ip4_addr_isbroadcast_u32>
 800aef4:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 800aef6:	8820      	ldrh	r0, [r4, #0]
 800aef8:	f7fa fd8c 	bl	8005a14 <lwip_htons>
 800aefc:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 800aefe:	8860      	ldrh	r0, [r4, #2]
 800af00:	f7fa fd88 	bl	8005a14 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800af04:	4a38      	ldr	r2, [pc, #224]	; (800afe8 <udp_input+0x11c>)
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800af06:	6971      	ldr	r1, [r6, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800af08:	f8d6 e010 	ldr.w	lr, [r6, #16]
 800af0c:	9603      	str	r6, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 800af0e:	4682      	mov	sl, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800af10:	6810      	ldr	r0, [r2, #0]
  uncon_pcb = NULL;
 800af12:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800af14:	4603      	mov	r3, r0
  prev = NULL;
 800af16:	46a4      	mov	ip, r4
 800af18:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800af1a:	b92b      	cbnz	r3, 800af28 <udp_input+0x5c>
  if (pcb != NULL) {
 800af1c:	bb0c      	cbnz	r4, 800af62 <udp_input+0x96>
  if (for_us) {
 800af1e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800af22:	428b      	cmp	r3, r1
 800af24:	d1da      	bne.n	800aedc <udp_input+0x10>
 800af26:	e01c      	b.n	800af62 <udp_input+0x96>
    if ((pcb->local_port == dest) &&
 800af28:	8a5a      	ldrh	r2, [r3, #18]
 800af2a:	4552      	cmp	r2, sl
 800af2c:	d12b      	bne.n	800af86 <udp_input+0xba>
 800af2e:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 800af30:	b32f      	cbz	r7, 800af7e <udp_input+0xb2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800af32:	b13a      	cbz	r2, 800af44 <udp_input+0x78>
 800af34:	1c4e      	adds	r6, r1, #1
 800af36:	d005      	beq.n	800af44 <udp_input+0x78>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800af38:	404a      	eors	r2, r1
 800af3a:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800af3c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800af40:	4216      	tst	r6, r2
 800af42:	d120      	bne.n	800af86 <udp_input+0xba>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800af44:	7c1a      	ldrb	r2, [r3, #16]
 800af46:	0752      	lsls	r2, r2, #29
 800af48:	d402      	bmi.n	800af50 <udp_input+0x84>
 800af4a:	2c00      	cmp	r4, #0
 800af4c:	bf08      	it	eq
 800af4e:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 800af50:	8a9a      	ldrh	r2, [r3, #20]
 800af52:	4542      	cmp	r2, r8
 800af54:	d117      	bne.n	800af86 <udp_input+0xba>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800af56:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 800af58:	b9c2      	cbnz	r2, 800af8c <udp_input+0xc0>
        if (prev != NULL) {
 800af5a:	f1bc 0f00 	cmp.w	ip, #0
 800af5e:	d118      	bne.n	800af92 <udp_input+0xc6>
 800af60:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 800af62:	f06f 0107 	mvn.w	r1, #7
 800af66:	4628      	mov	r0, r5
 800af68:	f7fc fb0e 	bl	8007588 <pbuf_header>
 800af6c:	b1c0      	cbz	r0, 800afa0 <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800af6e:	4b1f      	ldr	r3, [pc, #124]	; (800afec <udp_input+0x120>)
 800af70:	491f      	ldr	r1, [pc, #124]	; (800aff0 <udp_input+0x124>)
 800af72:	4820      	ldr	r0, [pc, #128]	; (800aff4 <udp_input+0x128>)
 800af74:	f240 1255 	movw	r2, #341	; 0x155
 800af78:	f002 fdfa 	bl	800db70 <iprintf>
 800af7c:	e7ae      	b.n	800aedc <udp_input+0x10>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800af7e:	2a00      	cmp	r2, #0
 800af80:	d0e0      	beq.n	800af44 <udp_input+0x78>
 800af82:	428a      	cmp	r2, r1
 800af84:	d0de      	beq.n	800af44 <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800af86:	469c      	mov	ip, r3
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	e7c6      	b.n	800af1a <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800af8c:	4572      	cmp	r2, lr
 800af8e:	d1fa      	bne.n	800af86 <udp_input+0xba>
 800af90:	e7e3      	b.n	800af5a <udp_input+0x8e>
          prev->next = pcb->next;
 800af92:	68da      	ldr	r2, [r3, #12]
 800af94:	f8cc 200c 	str.w	r2, [ip, #12]
          udp_pcbs = pcb;
 800af98:	f8cb 3000 	str.w	r3, [fp]
          pcb->next = udp_pcbs;
 800af9c:	60d8      	str	r0, [r3, #12]
 800af9e:	e7df      	b.n	800af60 <udp_input+0x94>
    if (pcb != NULL) {
 800afa0:	b164      	cbz	r4, 800afbc <udp_input+0xf0>
      if (pcb->recv != NULL) {
 800afa2:	69a6      	ldr	r6, [r4, #24]
 800afa4:	2e00      	cmp	r6, #0
 800afa6:	d099      	beq.n	800aedc <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800afa8:	f8cd 8000 	str.w	r8, [sp]
 800afac:	4b12      	ldr	r3, [pc, #72]	; (800aff8 <udp_input+0x12c>)
 800afae:	69e0      	ldr	r0, [r4, #28]
 800afb0:	462a      	mov	r2, r5
 800afb2:	4621      	mov	r1, r4
 800afb4:	47b0      	blx	r6
}
 800afb6:	b005      	add	sp, #20
 800afb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800afbc:	2f00      	cmp	r7, #0
 800afbe:	d18d      	bne.n	800aedc <udp_input+0x10>
 800afc0:	9b03      	ldr	r3, [sp, #12]
 800afc2:	695b      	ldr	r3, [r3, #20]
 800afc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800afc8:	2be0      	cmp	r3, #224	; 0xe0
 800afca:	d087      	beq.n	800aedc <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800afcc:	9b03      	ldr	r3, [sp, #12]
 800afce:	8999      	ldrh	r1, [r3, #12]
 800afd0:	3108      	adds	r1, #8
 800afd2:	b209      	sxth	r1, r1
 800afd4:	4628      	mov	r0, r5
 800afd6:	f7fc fada 	bl	800758e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800afda:	2103      	movs	r1, #3
 800afdc:	4628      	mov	r0, r5
 800afde:	f7fb fa03 	bl	80063e8 <icmp_dest_unreach>
 800afe2:	e77b      	b.n	800aedc <udp_input+0x10>
 800afe4:	20001b2c 	.word	0x20001b2c
 800afe8:	2000506c 	.word	0x2000506c
 800afec:	08010b69 	.word	0x08010b69
 800aff0:	08010b98 	.word	0x08010b98
 800aff4:	0800f20f 	.word	0x0800f20f
 800aff8:	20001b3c 	.word	0x20001b3c

0800affc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800affc:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800affe:	b138      	cbz	r0, 800b010 <udp_netif_ip_addr_changed+0x14>
 800b000:	6803      	ldr	r3, [r0, #0]
 800b002:	b12b      	cbz	r3, 800b010 <udp_netif_ip_addr_changed+0x14>
 800b004:	b121      	cbz	r1, 800b010 <udp_netif_ip_addr_changed+0x14>
 800b006:	680b      	ldr	r3, [r1, #0]
 800b008:	b113      	cbz	r3, 800b010 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b00a:	4b06      	ldr	r3, [pc, #24]	; (800b024 <udp_netif_ip_addr_changed+0x28>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	b903      	cbnz	r3, 800b012 <udp_netif_ip_addr_changed+0x16>
 800b010:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b012:	681c      	ldr	r4, [r3, #0]
 800b014:	6802      	ldr	r2, [r0, #0]
 800b016:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b018:	bf04      	itt	eq
 800b01a:	680a      	ldreq	r2, [r1, #0]
 800b01c:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	e7f5      	b.n	800b00e <udp_netif_ip_addr_changed+0x12>
 800b022:	bf00      	nop
 800b024:	2000506c 	.word	0x2000506c

0800b028 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800b028:	8943      	ldrh	r3, [r0, #10]
 800b02a:	2b0e      	cmp	r3, #14
{
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	4604      	mov	r4, r0
 800b030:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800b032:	d914      	bls.n	800b05e <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800b034:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800b036:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800b038:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800b03a:	07d9      	lsls	r1, r3, #31
 800b03c:	d50a      	bpl.n	800b054 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d111      	bne.n	800b066 <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b042:	7843      	ldrb	r3, [r0, #1]
 800b044:	b933      	cbnz	r3, 800b054 <ethernet_input+0x2c>
 800b046:	7883      	ldrb	r3, [r0, #2]
 800b048:	2b5e      	cmp	r3, #94	; 0x5e
 800b04a:	d103      	bne.n	800b054 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800b04c:	7b63      	ldrb	r3, [r4, #13]
 800b04e:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800b052:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800b054:	2e08      	cmp	r6, #8
 800b056:	d010      	beq.n	800b07a <ethernet_input+0x52>
 800b058:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800b05c:	d01e      	beq.n	800b09c <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800b05e:	4620      	mov	r0, r4
 800b060:	f7fc fa98 	bl	8007594 <pbuf_free>
  return ERR_OK;
 800b064:	e018      	b.n	800b098 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800b066:	2206      	movs	r2, #6
 800b068:	4914      	ldr	r1, [pc, #80]	; (800b0bc <ethernet_input+0x94>)
 800b06a:	f002 fcb3 	bl	800d9d4 <memcmp>
 800b06e:	2800      	cmp	r0, #0
 800b070:	d1f0      	bne.n	800b054 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 800b072:	7b63      	ldrb	r3, [r4, #13]
 800b074:	f043 0308 	orr.w	r3, r3, #8
 800b078:	e7eb      	b.n	800b052 <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b07a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800b07e:	071a      	lsls	r2, r3, #28
 800b080:	d5ed      	bpl.n	800b05e <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800b082:	f06f 010d 	mvn.w	r1, #13
 800b086:	4620      	mov	r0, r4
 800b088:	f7fc fa7e 	bl	8007588 <pbuf_header>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d1e6      	bne.n	800b05e <ethernet_input+0x36>
        ip4_input(p, netif);
 800b090:	4629      	mov	r1, r5
 800b092:	4620      	mov	r0, r4
 800b094:	f7fb f9de 	bl	8006454 <ip4_input>
}
 800b098:	2000      	movs	r0, #0
 800b09a:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b09c:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800b0a0:	071b      	lsls	r3, r3, #28
 800b0a2:	d5dc      	bpl.n	800b05e <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800b0a4:	f06f 010d 	mvn.w	r1, #13
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f7fc fa6d 	bl	8007588 <pbuf_header>
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	d1d5      	bne.n	800b05e <ethernet_input+0x36>
        etharp_input(p, netif);
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f7fa fe3f 	bl	8005d38 <etharp_input>
      break;
 800b0ba:	e7ed      	b.n	800b098 <ethernet_input+0x70>
 800b0bc:	08010bac 	.word	0x08010bac

0800b0c0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800b0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c4:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800b0c6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 800b0ca:	460d      	mov	r5, r1
 800b0cc:	4616      	mov	r6, r2
 800b0ce:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800b0d0:	f7fa fca0 	bl	8005a14 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800b0d4:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800b0d6:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800b0d8:	4628      	mov	r0, r5
 800b0da:	f7fc fa55 	bl	8007588 <pbuf_header>
 800b0de:	b9e0      	cbnz	r0, 800b11a <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800b0e0:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800b0e2:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	600b      	str	r3, [r1, #0]
 800b0ea:	88bb      	ldrh	r3, [r7, #4]
 800b0ec:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800b0ee:	6833      	ldr	r3, [r6, #0]
 800b0f0:	f8c1 3006 	str.w	r3, [r1, #6]
 800b0f4:	88b3      	ldrh	r3, [r6, #4]
 800b0f6:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800b0f8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800b0fc:	2b06      	cmp	r3, #6
 800b0fe:	d006      	beq.n	800b10e <ethernet_output+0x4e>
 800b100:	4b08      	ldr	r3, [pc, #32]	; (800b124 <ethernet_output+0x64>)
 800b102:	4909      	ldr	r1, [pc, #36]	; (800b128 <ethernet_output+0x68>)
 800b104:	4809      	ldr	r0, [pc, #36]	; (800b12c <ethernet_output+0x6c>)
 800b106:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b10a:	f002 fd31 	bl	800db70 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800b10e:	69a3      	ldr	r3, [r4, #24]
 800b110:	4629      	mov	r1, r5
 800b112:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800b114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800b118:	4718      	bx	r3
}
 800b11a:	f06f 0001 	mvn.w	r0, #1
 800b11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b122:	bf00      	nop
 800b124:	08010bb2 	.word	0x08010bb2
 800b128:	08010be7 	.word	0x08010be7
 800b12c:	0800f20f 	.word	0x0800f20f

0800b130 <bum_notify_recv>:

uint8_t radio_log[ RADIO_LOG_SIZE ];

void bum_notify_recv( uint8_t c )
{
  xbee_notify_recv( c );
 800b130:	f002 b97e 	b.w	800d430 <xbee_notify_recv>

0800b134 <bum_process>:
}

void bum_process( int ms )
{
	xbee_process( ms );
 800b134:	f002 bb74 	b.w	800d820 <xbee_process>

0800b138 <bum_init_player>:

static BumperStatePlayer bumper_state;


void bum_init_player( BumperProtocolPlayer *p )
{
 800b138:	b510      	push	{r4, lr}
  xbee_init( 0, p->error );
 800b13a:	6901      	ldr	r1, [r0, #16]
{
 800b13c:	4604      	mov	r4, r0
  xbee_init( 0, p->error );
 800b13e:	2000      	movs	r0, #0
 800b140:	f002 fa96 	bl	800d670 <xbee_init>

  bumper_state.unit_addr = xbee_api_read_unique_id();
 800b144:	f002 faec 	bl	800d720 <xbee_api_read_unique_id>
 800b148:	4b04      	ldr	r3, [pc, #16]	; (800b15c <bum_init_player+0x24>)
 800b14a:	e9c3 0100 	strd	r0, r1, [r3]

  // At startup, we don't know the referee address, so let's broadcast by default
  bumper_state.referee_addr = XBEE_BROADCAST;
 800b14e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b152:	2100      	movs	r1, #0
 800b154:	e9c3 0104 	strd	r0, r1, [r3, #16]

  bumper_state.player = p;
 800b158:	609c      	str	r4, [r3, #8]
 800b15a:	bd10      	pop	{r4, pc}
 800b15c:	20000d68 	.word	0x20000d68

0800b160 <bum_game_register>:
}


// name : only 5 first chars are taken into account
int bum_game_register( const char *name )
{
 800b160:	b507      	push	{r0, r1, r2, lr}
	int i;
	// We send a broadcast to try to find a referee

	uint8_t frame[ BUM_GAME_REGISTER_LEN ];
	frame[ 0 ] = BUM_GAME_REGISTER_TYPE;
 800b162:	aa02      	add	r2, sp, #8
 800b164:	2301      	movs	r3, #1
 800b166:	f802 3d08 	strb.w	r3, [r2, #-8]!
	for ( i = 0 ; ( i < PLAYER_NAME_SIZE ) && name[ i ] ; i++ ) frame[ i + 1 ] = name[ i ];
 800b16a:	2300      	movs	r3, #0
 800b16c:	5cc1      	ldrb	r1, [r0, r3]
 800b16e:	b961      	cbnz	r1, 800b18a <bum_game_register+0x2a>
	for ( ; ( i < PLAYER_NAME_SIZE + 1 ) ; i++ ) frame[ i + 1 ] = 0;
 800b170:	3301      	adds	r3, #1
 800b172:	2b06      	cmp	r3, #6
 800b174:	54d1      	strb	r1, [r2, r3]
 800b176:	d1fb      	bne.n	800b170 <bum_game_register+0x10>

	return xbee_api_send_to( bumper_state.referee_addr, frame, BUM_GAME_REGISTER_LEN );
 800b178:	4908      	ldr	r1, [pc, #32]	; (800b19c <bum_game_register+0x3c>)
 800b17a:	2307      	movs	r3, #7
 800b17c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b180:	f002 f9e2 	bl	800d548 <xbee_api_send_to>
}
 800b184:	b003      	add	sp, #12
 800b186:	f85d fb04 	ldr.w	pc, [sp], #4
	for ( i = 0 ; ( i < PLAYER_NAME_SIZE ) && name[ i ] ; i++ ) frame[ i + 1 ] = name[ i ];
 800b18a:	3301      	adds	r3, #1
 800b18c:	2b05      	cmp	r3, #5
 800b18e:	54d1      	strb	r1, [r2, r3]
 800b190:	d1ec      	bne.n	800b16c <bum_game_register+0xc>
	for ( ; ( i < PLAYER_NAME_SIZE + 1 ) ; i++ ) frame[ i + 1 ] = 0;
 800b192:	2300      	movs	r3, #0
 800b194:	f88d 3006 	strb.w	r3, [sp, #6]
 800b198:	e7ee      	b.n	800b178 <bum_game_register+0x18>
 800b19a:	bf00      	nop
 800b19c:	20000d68 	.word	0x20000d68

0800b1a0 <bum_game_acceleration>:
// ax, ay, az: acceleration between -100 to 100
// ax: negative = toward left
// ay: negative = toward top
// az: negative = toward floor
int bum_game_acceleration( int8_t ax, int8_t ay, int8_t az )
{
 800b1a0:	b507      	push	{r0, r1, r2, lr}
 800b1a2:	2864      	cmp	r0, #100	; 0x64
 800b1a4:	bfa8      	it	ge
 800b1a6:	2064      	movge	r0, #100	; 0x64

	if ( az < -100 ) az = -100;
	else if ( az > 100 ) az = 100;

	uint8_t frame[ BUM_GAME_ACCELERATION_LEN ];
	frame[ 0 ] = BUM_GAME_ACCELERATION_TYPE;
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	2964      	cmp	r1, #100	; 0x64
 800b1ac:	bfa8      	it	ge
 800b1ae:	2164      	movge	r1, #100	; 0x64
 800b1b0:	f88d 3004 	strb.w	r3, [sp, #4]
 800b1b4:	2a64      	cmp	r2, #100	; 0x64
	frame[ 1 ] = ax + 100;
 800b1b6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b1ba:	bfa8      	it	ge
 800b1bc:	2264      	movge	r2, #100	; 0x64
 800b1be:	4298      	cmp	r0, r3
 800b1c0:	bfb8      	it	lt
 800b1c2:	4618      	movlt	r0, r3
	frame[ 2 ] = ay + 100;
 800b1c4:	4299      	cmp	r1, r3
 800b1c6:	bfb8      	it	lt
 800b1c8:	4619      	movlt	r1, r3
 800b1ca:	3164      	adds	r1, #100	; 0x64
	frame[ 3 ] = az + 100;
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	bfb8      	it	lt
 800b1d0:	461a      	movlt	r2, r3
	frame[ 2 ] = ay + 100;
 800b1d2:	f88d 1006 	strb.w	r1, [sp, #6]

	return xbee_api_send_to( bumper_state.referee_addr, frame, BUM_GAME_ACCELERATION_LEN );
 800b1d6:	4908      	ldr	r1, [pc, #32]	; (800b1f8 <bum_game_acceleration+0x58>)
 800b1d8:	2304      	movs	r3, #4
	frame[ 1 ] = ax + 100;
 800b1da:	3064      	adds	r0, #100	; 0x64
	frame[ 3 ] = az + 100;
 800b1dc:	3264      	adds	r2, #100	; 0x64
	frame[ 1 ] = ax + 100;
 800b1de:	f88d 0005 	strb.w	r0, [sp, #5]
	frame[ 3 ] = az + 100;
 800b1e2:	f88d 2007 	strb.w	r2, [sp, #7]
	return xbee_api_send_to( bumper_state.referee_addr, frame, BUM_GAME_ACCELERATION_LEN );
 800b1e6:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b1ea:	eb0d 0203 	add.w	r2, sp, r3
 800b1ee:	f002 f9ab 	bl	800d548 <xbee_api_send_to>
}
 800b1f2:	b003      	add	sp, #12
 800b1f4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1f8:	20000d68 	.word	0x20000d68

0800b1fc <bum_process_player>:
// ----------------------------------------------------------------------------------------------
// COMMON
#define DATA_SIZE 100

void bum_process_player()
{
 800b1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1fe:	b085      	sub	sp, #20
  static uint8_t data[ DATA_SIZE ];
  uint16_t len;

  if ( !event_check( xbee_get_recv_event() ) ) return;
 800b200:	f001 fff8 	bl	800d1f4 <xbee_get_recv_event>
 800b204:	f000 feec 	bl	800bfe0 <event_check>
 800b208:	b150      	cbz	r0, 800b220 <bum_process_player+0x24>

  len = DATA_SIZE;
 800b20a:	2364      	movs	r3, #100	; 0x64
 800b20c:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch ( xbee_recv_get_frame_type() )
 800b210:	f002 f808 	bl	800d224 <xbee_recv_get_frame_type>
 800b214:	288b      	cmp	r0, #139	; 0x8b
 800b216:	d003      	beq.n	800b220 <bum_process_player+0x24>
 800b218:	2890      	cmp	r0, #144	; 0x90
 800b21a:	d003      	beq.n	800b224 <bum_process_player+0x28>
 800b21c:	2888      	cmp	r0, #136	; 0x88
 800b21e:	d158      	bne.n	800b2d2 <bum_process_player+0xd6>
	  {
		xbee_recv_full( data, &len );
		break;
	  }
  }
}
 800b220:	b005      	add	sp, #20
 800b222:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( xbee_recv( &from, data, &len ) && ( len > 0 ) )
 800b224:	f10d 0206 	add.w	r2, sp, #6
 800b228:	492d      	ldr	r1, [pc, #180]	; (800b2e0 <bum_process_player+0xe4>)
 800b22a:	a802      	add	r0, sp, #8
 800b22c:	f002 f8bc 	bl	800d3a8 <xbee_recv>
 800b230:	2800      	cmp	r0, #0
 800b232:	d0f5      	beq.n	800b220 <bum_process_player+0x24>
 800b234:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d0f1      	beq.n	800b220 <bum_process_player+0x24>
			if ( bumper_state.referee_addr == XBEE_BROADCAST )
 800b23c:	4c29      	ldr	r4, [pc, #164]	; (800b2e4 <bum_process_player+0xe8>)
 800b23e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800b242:	2700      	movs	r7, #0
 800b244:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800b248:	42b9      	cmp	r1, r7
 800b24a:	bf08      	it	eq
 800b24c:	42b0      	cmpeq	r0, r6
 800b24e:	d103      	bne.n	800b258 <bum_process_player+0x5c>
				bumper_state.referee_addr = from;
 800b250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b254:	e9c4 0104 	strd	r0, r1, [r4, #16]
			switch ( data[ 0 ] )
 800b258:	4821      	ldr	r0, [pc, #132]	; (800b2e0 <bum_process_player+0xe4>)
 800b25a:	7802      	ldrb	r2, [r0, #0]
 800b25c:	3a81      	subs	r2, #129	; 0x81
 800b25e:	2a03      	cmp	r2, #3
 800b260:	d8de      	bhi.n	800b220 <bum_process_player+0x24>
 800b262:	e8df f002 	tbb	[pc, r2]
 800b266:	0a02      	.short	0x0a02
 800b268:	2f1c      	.short	0x2f1c
				if ( len != BUM_GAME_REGISTER_LEN ) return;
 800b26a:	2b07      	cmp	r3, #7
 800b26c:	d1d8      	bne.n	800b220 <bum_process_player+0x24>
				bumper_state.player->game_step( data[ 1 ], data[ 2 ] );
 800b26e:	68a3      	ldr	r3, [r4, #8]
 800b270:	7881      	ldrb	r1, [r0, #2]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	7840      	ldrb	r0, [r0, #1]
 800b276:	4798      	blx	r3
				break;
 800b278:	e7d2      	b.n	800b220 <bum_process_player+0x24>
				if ( len != BUM_GAME_NEWPLAYER_LEN ) return;
 800b27a:	2b0c      	cmp	r3, #12
 800b27c:	d1d0      	bne.n	800b220 <bum_process_player+0x24>
				uint32_t color = ( data[ 2 ] << 24 ) | ( data[ 3 ] << 16 ) | ( data[ 4 ] << 8 ) | data[ 5 ];
 800b27e:	78c3      	ldrb	r3, [r0, #3]
 800b280:	7882      	ldrb	r2, [r0, #2]
				bumper_state.player->game_new_player( data[ 1 ], ( const char * )data + 6, color );
 800b282:	68a1      	ldr	r1, [r4, #8]
				uint32_t color = ( data[ 2 ] << 24 ) | ( data[ 3 ] << 16 ) | ( data[ 4 ] << 8 ) | data[ 5 ];
 800b284:	041b      	lsls	r3, r3, #16
 800b286:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b28a:	7942      	ldrb	r2, [r0, #5]
				bumper_state.player->game_new_player( data[ 1 ], ( const char * )data + 6, color );
 800b28c:	684c      	ldr	r4, [r1, #4]
 800b28e:	4916      	ldr	r1, [pc, #88]	; (800b2e8 <bum_process_player+0xec>)
				uint32_t color = ( data[ 2 ] << 24 ) | ( data[ 3 ] << 16 ) | ( data[ 4 ] << 8 ) | data[ 5 ];
 800b290:	4313      	orrs	r3, r2
 800b292:	7902      	ldrb	r2, [r0, #4]
				bumper_state.player->game_new_player( data[ 1 ], ( const char * )data + 6, color );
 800b294:	7840      	ldrb	r0, [r0, #1]
 800b296:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800b29a:	47a0      	blx	r4
				break;
 800b29c:	e7c0      	b.n	800b220 <bum_process_player+0x24>
				if ( len != BUM_GAME_PLAYERMOVE_LEN ) return;
 800b29e:	2b08      	cmp	r3, #8
 800b2a0:	d1be      	bne.n	800b220 <bum_process_player+0x24>
				uint16_t s = ( ((uint16_t)data[ 6 ]) << 8 ) | data[ 7 ];
 800b2a2:	7987      	ldrb	r7, [r0, #6]
				uint16_t y = ( ((uint16_t)data[ 4 ]) << 8 ) | data[ 5 ];
 800b2a4:	7906      	ldrb	r6, [r0, #4]
				uint16_t x = ( ((uint16_t)data[ 2 ]) << 8 ) | data[ 3 ];
 800b2a6:	7885      	ldrb	r5, [r0, #2]
				uint16_t s = ( ((uint16_t)data[ 6 ]) << 8 ) | data[ 7 ];
 800b2a8:	79c3      	ldrb	r3, [r0, #7]
				uint16_t y = ( ((uint16_t)data[ 4 ]) << 8 ) | data[ 5 ];
 800b2aa:	7942      	ldrb	r2, [r0, #5]
				uint16_t x = ( ((uint16_t)data[ 2 ]) << 8 ) | data[ 3 ];
 800b2ac:	78c1      	ldrb	r1, [r0, #3]
				bumper_state.player->game_player_move( data[ 1 ], x, y, s );
 800b2ae:	68a4      	ldr	r4, [r4, #8]
 800b2b0:	7840      	ldrb	r0, [r0, #1]
 800b2b2:	68a4      	ldr	r4, [r4, #8]
 800b2b4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800b2b8:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 800b2bc:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800b2c0:	47a0      	blx	r4
				break;
 800b2c2:	e7ad      	b.n	800b220 <bum_process_player+0x24>
				if ( len != BUM_GAME_PRINT_LEN ) return;
 800b2c4:	2b16      	cmp	r3, #22
 800b2c6:	d1ab      	bne.n	800b220 <bum_process_player+0x24>
				bumper_state.player->game_print( ( const char * )data + 1 );
 800b2c8:	68a3      	ldr	r3, [r4, #8]
 800b2ca:	4808      	ldr	r0, [pc, #32]	; (800b2ec <bum_process_player+0xf0>)
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	4798      	blx	r3
				break;
 800b2d0:	e7a6      	b.n	800b220 <bum_process_player+0x24>
		xbee_recv_full( data, &len );
 800b2d2:	f10d 0106 	add.w	r1, sp, #6
 800b2d6:	4802      	ldr	r0, [pc, #8]	; (800b2e0 <bum_process_player+0xe4>)
 800b2d8:	f002 f836 	bl	800d348 <xbee_recv_full>
		break;
 800b2dc:	e7a0      	b.n	800b220 <bum_process_player+0x24>
 800b2de:	bf00      	nop
 800b2e0:	20000d80 	.word	0x20000d80
 800b2e4:	20000d68 	.word	0x20000d68
 800b2e8:	20000d86 	.word	0x20000d86
 800b2ec:	20000d81 	.word	0x20000d81

0800b2f0 <bum_api_send_to>:
  0x00FFF8DC,

};

static void bum_api_send_to( uint64_t to, uint8_t *data, uint16_t len )
{
 800b2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ( to == BUM_TO_ALL )
 800b2f4:	1c4d      	adds	r5, r1, #1
 800b2f6:	bf08      	it	eq
 800b2f8:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
 800b2fc:	4616      	mov	r6, r2
 800b2fe:	461f      	mov	r7, r3
	if ( to == BUM_TO_ALL )
 800b300:	d111      	bne.n	800b326 <bum_api_send_to+0x36>
	{
		for ( int i = 0 ; i < referee_state.n_players ; i++ )
 800b302:	4d0b      	ldr	r5, [pc, #44]	; (800b330 <bum_api_send_to+0x40>)
 800b304:	2400      	movs	r4, #0
 800b306:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 800b30a:	429c      	cmp	r4, r3
 800b30c:	db01      	blt.n	800b312 <bum_api_send_to+0x22>
 800b30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			xbee_api_send_to( referee_state.player_data[ i ].addr, data, len );
 800b312:	eb05 1184 	add.w	r1, r5, r4, lsl #6
 800b316:	463b      	mov	r3, r7
 800b318:	4632      	mov	r2, r6
 800b31a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b31e:	f002 f913 	bl	800d548 <xbee_api_send_to>
		for ( int i = 0 ; i < referee_state.n_players ; i++ )
 800b322:	3401      	adds	r4, #1
 800b324:	e7ef      	b.n	800b306 <bum_api_send_to+0x16>
	}
	else
	{
		xbee_api_send_to( to, data, len );
	}
}
 800b326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		xbee_api_send_to( to, data, len );
 800b32a:	f002 b90d 	b.w	800d548 <xbee_api_send_to>
 800b32e:	bf00      	nop
 800b330:	200063f8 	.word	0x200063f8

0800b334 <bumper_start_location_calc>:
{
 800b334:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  bumper_state.referee->utility_random( &random, N_STARTING_BOXES - referee_state.n_players );
 800b338:	4b1a      	ldr	r3, [pc, #104]	; (800b3a4 <bumper_start_location_calc+0x70>)
 800b33a:	4c1b      	ldr	r4, [pc, #108]	; (800b3a8 <bumper_start_location_calc+0x74>)
 800b33c:	689b      	ldr	r3, [r3, #8]
{
 800b33e:	460f      	mov	r7, r1
  bumper_state.referee->utility_random( &random, N_STARTING_BOXES - referee_state.n_players );
 800b340:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
 800b344:	689b      	ldr	r3, [r3, #8]
{
 800b346:	4680      	mov	r8, r0
  bumper_state.referee->utility_random( &random, N_STARTING_BOXES - referee_state.n_players );
 800b348:	f1c1 0119 	rsb	r1, r1, #25
 800b34c:	a801      	add	r0, sp, #4
 800b34e:	4798      	blx	r3
  int i = random;
 800b350:	9a01      	ldr	r2, [sp, #4]
 800b352:	4623      	mov	r3, r4
{
 800b354:	4614      	mov	r4, r2
 800b356:	e004      	b.n	800b362 <bumper_start_location_calc+0x2e>
    i++;
 800b358:	3401      	adds	r4, #1
    if ( i == N_STARTING_BOXES ) i = 0;
 800b35a:	2c19      	cmp	r4, #25
 800b35c:	f04f 0200 	mov.w	r2, #0
 800b360:	d0f8      	beq.n	800b354 <bumper_start_location_calc+0x20>
  while ( referee_state.start_location[ i ] )
 800b362:	191a      	adds	r2, r3, r4
 800b364:	f892 1504 	ldrb.w	r1, [r2, #1284]	; 0x504
 800b368:	2900      	cmp	r1, #0
 800b36a:	d1f5      	bne.n	800b358 <bumper_start_location_calc+0x24>
  *x = ( X * ( BOARD_W / 5 ) ) + ( BOARD_W / 10 );
 800b36c:	26c8      	movs	r6, #200	; 0xc8
  referee_state.start_location[ i ] = 1;
 800b36e:	2301      	movs	r3, #1
  int X = i / 5;
 800b370:	2505      	movs	r5, #5
 800b372:	fb94 f5f5 	sdiv	r5, r4, r5
  *x = ( X * ( BOARD_W / 5 ) ) + ( BOARD_W / 10 );
 800b376:	fb06 f005 	mul.w	r0, r6, r5
  referee_state.start_location[ i ] = 1;
 800b37a:	f882 3504 	strb.w	r3, [r2, #1284]	; 0x504
  *x = ( X * ( BOARD_W / 5 ) ) + ( BOARD_W / 10 );
 800b37e:	3064      	adds	r0, #100	; 0x64
 800b380:	f7f5 f8e0 	bl	8000544 <__aeabi_i2d>
  int Y = i % 5;
 800b384:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800b388:	1b64      	subs	r4, r4, r5
  *y = ( Y * ( BOARD_H / 5 ) ) + ( BOARD_H / 10 );
 800b38a:	4374      	muls	r4, r6
  *x = ( X * ( BOARD_W / 5 ) ) + ( BOARD_W / 10 );
 800b38c:	e9c8 0100 	strd	r0, r1, [r8]
  *y = ( Y * ( BOARD_H / 5 ) ) + ( BOARD_H / 10 );
 800b390:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800b394:	f7f5 f8d6 	bl	8000544 <__aeabi_i2d>
 800b398:	e9c7 0100 	strd	r0, r1, [r7]
}
 800b39c:	b002      	add	sp, #8
 800b39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3a2:	bf00      	nop
 800b3a4:	20000de8 	.word	0x20000de8
 800b3a8:	200063f8 	.word	0x200063f8

0800b3ac <find_player_addr>:
	  if ( referee_state.player_data[ i ].id == id ) return referee_state.player_data + i;
  }
  return 0;
}
PlayerData *find_player_addr( uint64_t addr )
{
 800b3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ae:	460f      	mov	r7, r1
  for ( int i = 0 ; i < referee_state.n_players ; i++ )
 800b3b0:	490a      	ldr	r1, [pc, #40]	; (800b3dc <find_player_addr+0x30>)
{
 800b3b2:	4606      	mov	r6, r0
  for ( int i = 0 ; i < referee_state.n_players ; i++ )
 800b3b4:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	4282      	cmp	r2, r0
 800b3bc:	db01      	blt.n	800b3c2 <find_player_addr+0x16>
  {
	  if ( referee_state.player_data[ i ].addr == addr ) return referee_state.player_data + i;
  }
  return 0;
 800b3be:	2000      	movs	r0, #0
}
 800b3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  if ( referee_state.player_data[ i ].addr == addr ) return referee_state.player_data + i;
 800b3c2:	eb01 1382 	add.w	r3, r1, r2, lsl #6
 800b3c6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b3ca:	42bd      	cmp	r5, r7
 800b3cc:	bf08      	it	eq
 800b3ce:	42b4      	cmpeq	r4, r6
 800b3d0:	d101      	bne.n	800b3d6 <find_player_addr+0x2a>
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for ( int i = 0 ; i < referee_state.n_players ; i++ )
 800b3d6:	3201      	adds	r2, #1
 800b3d8:	e7ef      	b.n	800b3ba <find_player_addr+0xe>
 800b3da:	bf00      	nop
 800b3dc:	200063f8 	.word	0x200063f8

0800b3e0 <add_player>:

PlayerData *add_player( uint64_t addr, const char *name )
{
 800b3e0:	b570      	push	{r4, r5, r6, lr}
  PlayerData *d = referee_state.player_data + referee_state.n_players;
 800b3e2:	4d1b      	ldr	r5, [pc, #108]	; (800b450 <add_player+0x70>)
 800b3e4:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 800b3e8:	eb05 1483 	add.w	r4, r5, r3, lsl #6
{
 800b3ec:	4616      	mov	r6, r2

  d->addr = addr;
 800b3ee:	e9c4 0100 	strd	r0, r1, [r4]
  d->id = referee_state.n_players;
 800b3f2:	7223      	strb	r3, [r4, #8]

  strncpy( d->name, name, PLAYER_NAME_SIZE );
 800b3f4:	2205      	movs	r2, #5
 800b3f6:	4631      	mov	r1, r6
 800b3f8:	f104 0009 	add.w	r0, r4, #9
  d->name[ PLAYER_NAME_SIZE ] = 0;
 800b3fc:	2600      	movs	r6, #0
  strncpy( d->name, name, PLAYER_NAME_SIZE );
 800b3fe:	f002 fc3a 	bl	800dc76 <strncpy>

  bumper_start_location_calc( &d->Px, &d->Py );
 800b402:	f104 0118 	add.w	r1, r4, #24
 800b406:	f104 0010 	add.w	r0, r4, #16
  d->name[ PLAYER_NAME_SIZE ] = 0;
 800b40a:	73a6      	strb	r6, [r4, #14]
  bumper_start_location_calc( &d->Px, &d->Py );
 800b40c:	f7ff ff92 	bl	800b334 <bumper_start_location_calc>
  d->r = BUM_DEFAULT_BALL_SIZE;
 800b410:	2328      	movs	r3, #40	; 0x28
 800b412:	8663      	strh	r3, [r4, #50]	; 0x32

  d->s = 1000; // No scaling
 800b414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b418:	8623      	strh	r3, [r4, #48]	; 0x30

  d->color = bum_colors[ referee_state.n_players ];
 800b41a:	4a0e      	ldr	r2, [pc, #56]	; (800b454 <add_player+0x74>)
 800b41c:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
  // Current speed
  d->Vx = 0;
  d->Vy = 0;

  // Current acceleration (-100 to 100)
  d->ax = 0;
 800b420:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
  d->color = bum_colors[ referee_state.n_players ];
 800b424:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b428:	63a2      	str	r2, [r4, #56]	; 0x38
  d->ay = 0;
  d->az = 0;

  // 1 if the player is living in the game
  d->playing = 1;
 800b42a:	2201      	movs	r2, #1
  d->Vx = 0;
 800b42c:	2000      	movs	r0, #0
 800b42e:	2100      	movs	r1, #0
  d->ay = 0;
 800b430:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
  d->az = 0;
 800b434:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
  d->playing = 1;
 800b438:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c


  referee_state.n_players++;
 800b43c:	4413      	add	r3, r2
  d->Vx = 0;
 800b43e:	e9c4 0108 	strd	r0, r1, [r4, #32]
  d->Vy = 0;
 800b442:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
  referee_state.n_players++;
 800b446:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

  return d;
}
 800b44a:	4620      	mov	r0, r4
 800b44c:	bd70      	pop	{r4, r5, r6, pc}
 800b44e:	bf00      	nop
 800b450:	200063f8 	.word	0x200063f8
 800b454:	08010c20 	.word	0x08010c20

0800b458 <bums_referee_reset>:

void bums_referee_reset()
{
  referee_state.game_started = 0;
 800b458:	4a06      	ldr	r2, [pc, #24]	; (800b474 <bums_referee_reset+0x1c>)
 800b45a:	2300      	movs	r3, #0
 800b45c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
  referee_state.n_players = 0;
 800b460:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

  for ( int i = 0 ; i < N_STARTING_BOXES ; i++ )
  {
	referee_state.start_location[ i ] = 0;
 800b464:	4618      	mov	r0, r3
 800b466:	18d1      	adds	r1, r2, r3
  for ( int i = 0 ; i < N_STARTING_BOXES ; i++ )
 800b468:	3301      	adds	r3, #1
 800b46a:	2b19      	cmp	r3, #25
	referee_state.start_location[ i ] = 0;
 800b46c:	f881 0504 	strb.w	r0, [r1, #1284]	; 0x504
  for ( int i = 0 ; i < N_STARTING_BOXES ; i++ )
 800b470:	d1f9      	bne.n	800b466 <bums_referee_reset+0xe>
  }
}
 800b472:	4770      	bx	lr
 800b474:	200063f8 	.word	0x200063f8

0800b478 <bum_init_referee>:

void bum_init_referee( BumperProtocolReferee *p )
{
 800b478:	b510      	push	{r4, lr}
  xbee_init( 1, p->error );
 800b47a:	68c1      	ldr	r1, [r0, #12]
{
 800b47c:	4604      	mov	r4, r0
  xbee_init( 1, p->error );
 800b47e:	2001      	movs	r0, #1
 800b480:	f002 f8f6 	bl	800d670 <xbee_init>

  bumper_state.unit_addr = xbee_api_read_unique_id();
 800b484:	f002 f94c 	bl	800d720 <xbee_api_read_unique_id>
 800b488:	4b06      	ldr	r3, [pc, #24]	; (800b4a4 <bum_init_referee+0x2c>)
 800b48a:	e9c3 0100 	strd	r0, r1, [r3]

  bumper_state.referee = p;

  radio_log[ 0 ] = 0;
 800b48e:	4806      	ldr	r0, [pc, #24]	; (800b4a8 <bum_init_referee+0x30>)
  bumper_state.referee = p;
 800b490:	609c      	str	r4, [r3, #8]
  strcat( ( char * )radio_log, "Starting Referee<br/>");
 800b492:	4906      	ldr	r1, [pc, #24]	; (800b4ac <bum_init_referee+0x34>)
  radio_log[ 0 ] = 0;
 800b494:	2300      	movs	r3, #0
 800b496:	7003      	strb	r3, [r0, #0]
  strcat( ( char * )radio_log, "Starting Referee<br/>");
 800b498:	f002 fbb6 	bl	800dc08 <strcat>

  bums_referee_reset();
}
 800b49c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  bums_referee_reset();
 800b4a0:	f7ff bfda 	b.w	800b458 <bums_referee_reset>
 800b4a4:	20000de8 	.word	0x20000de8
 800b4a8:	20005070 	.word	0x20005070
 800b4ac:	08010c70 	.word	0x08010c70

0800b4b0 <bum_game_step>:

int bum_game_step( uint64_t to, uint8_t step, uint8_t param )
{
 800b4b0:	b513      	push	{r0, r1, r4, lr}
	uint8_t frame[ BUM_GAME_STEP_LEN ];
	frame[ 0 ] = BUM_GAME_STEP_TYPE;
 800b4b2:	2481      	movs	r4, #129	; 0x81
	frame[ 1 ] = step;
 800b4b4:	f88d 2005 	strb.w	r2, [sp, #5]
	frame[ 2 ] = param;
 800b4b8:	f88d 3006 	strb.w	r3, [sp, #6]

	bum_api_send_to( to, frame, BUM_GAME_STEP_LEN );
 800b4bc:	aa01      	add	r2, sp, #4
 800b4be:	2303      	movs	r3, #3
	frame[ 0 ] = BUM_GAME_STEP_TYPE;
 800b4c0:	f88d 4004 	strb.w	r4, [sp, #4]
	bum_api_send_to( to, frame, BUM_GAME_STEP_LEN );
 800b4c4:	f7ff ff14 	bl	800b2f0 <bum_api_send_to>
	return 1;
}
 800b4c8:	2001      	movs	r0, #1
 800b4ca:	b002      	add	sp, #8
 800b4cc:	bd10      	pop	{r4, pc}

0800b4ce <bum_game_new_player>:

int bum_game_new_player( uint64_t to, uint8_t id, const char *name, uint32_t color )
{
 800b4ce:	b530      	push	{r4, r5, lr}
 800b4d0:	b085      	sub	sp, #20
 800b4d2:	460d      	mov	r5, r1
 800b4d4:	9908      	ldr	r1, [sp, #32]
	int i;
	uint8_t frame[ BUM_GAME_NEWPLAYER_LEN ];
	frame[ 0 ] = BUM_GAME_NEWPLAYER_TYPE;
	frame[ 1 ] = id;
 800b4d6:	f88d 2005 	strb.w	r2, [sp, #5]

	frame[ 2 ] = ( color >> 24 ) & 0xFF;
 800b4da:	0e0a      	lsrs	r2, r1, #24
 800b4dc:	f88d 2006 	strb.w	r2, [sp, #6]
	frame[ 3 ] = ( color >> 16 ) & 0xFF;
 800b4e0:	0c0a      	lsrs	r2, r1, #16
{
 800b4e2:	4604      	mov	r4, r0
	frame[ 3 ] = ( color >> 16 ) & 0xFF;
 800b4e4:	f88d 2007 	strb.w	r2, [sp, #7]
	frame[ 0 ] = BUM_GAME_NEWPLAYER_TYPE;
 800b4e8:	2082      	movs	r0, #130	; 0x82
	frame[ 4 ] = ( color >> 8 ) & 0xFF;
 800b4ea:	0a0a      	lsrs	r2, r1, #8
 800b4ec:	f88d 2008 	strb.w	r2, [sp, #8]
	frame[ 0 ] = BUM_GAME_NEWPLAYER_TYPE;
 800b4f0:	f88d 0004 	strb.w	r0, [sp, #4]
	frame[ 5 ] = ( color ) & 0xFF;
 800b4f4:	f88d 1009 	strb.w	r1, [sp, #9]

	for ( i = 0 ; ( i < PLAYER_NAME_SIZE ) && name[ i ] ; i++ ) frame[ i + 6 ] = name[ i ];
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	5c99      	ldrb	r1, [r3, r2]
 800b4fc:	b971      	cbnz	r1, 800b51c <bum_game_new_player+0x4e>
	for ( ; ( i < PLAYER_NAME_SIZE + 1 ) ; i++ ) frame[ i + 6 ] = 0;
 800b4fe:	ab01      	add	r3, sp, #4
 800b500:	4413      	add	r3, r2
 800b502:	3201      	adds	r2, #1
 800b504:	2a06      	cmp	r2, #6
 800b506:	7199      	strb	r1, [r3, #6]
 800b508:	d1f9      	bne.n	800b4fe <bum_game_new_player+0x30>

	bum_api_send_to( to, frame, BUM_GAME_NEWPLAYER_LEN );
 800b50a:	4620      	mov	r0, r4
 800b50c:	230c      	movs	r3, #12
 800b50e:	aa01      	add	r2, sp, #4
 800b510:	4629      	mov	r1, r5
 800b512:	f7ff feed 	bl	800b2f0 <bum_api_send_to>
	return 1;
}
 800b516:	2001      	movs	r0, #1
 800b518:	b005      	add	sp, #20
 800b51a:	bd30      	pop	{r4, r5, pc}
	for ( i = 0 ; ( i < PLAYER_NAME_SIZE ) && name[ i ] ; i++ ) frame[ i + 6 ] = name[ i ];
 800b51c:	a801      	add	r0, sp, #4
 800b51e:	4410      	add	r0, r2
 800b520:	3201      	adds	r2, #1
 800b522:	2a05      	cmp	r2, #5
 800b524:	7181      	strb	r1, [r0, #6]
 800b526:	d1e8      	bne.n	800b4fa <bum_game_new_player+0x2c>
	for ( ; ( i < PLAYER_NAME_SIZE + 1 ) ; i++ ) frame[ i + 6 ] = 0;
 800b528:	2300      	movs	r3, #0
 800b52a:	f88d 300f 	strb.w	r3, [sp, #15]
 800b52e:	e7ec      	b.n	800b50a <bum_game_new_player+0x3c>

0800b530 <bum_game_player_move>:

int bum_game_player_move( uint64_t to, uint8_t id, uint16_t x, uint16_t y, uint16_t s )
{
 800b530:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b532:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 800b536:	f8bd 401c 	ldrh.w	r4, [sp, #28]
	uint8_t frame[ BUM_GAME_PLAYERMOVE_LEN ];
	frame[ 0 ] = BUM_GAME_PLAYERMOVE_TYPE;
	frame[ 1 ] = id;
 800b53a:	f88d 2001 	strb.w	r2, [sp, #1]
	frame[ 2 ] = ( x >> 8 ) & 0xFF;
	frame[ 3 ] = ( x ) & 0xFF;
 800b53e:	f88d 3003 	strb.w	r3, [sp, #3]
	frame[ 2 ] = ( x >> 8 ) & 0xFF;
 800b542:	0a1a      	lsrs	r2, r3, #8
	frame[ 4 ] = ( y >> 8 ) & 0xFF;
 800b544:	0a2b      	lsrs	r3, r5, #8
 800b546:	f88d 3004 	strb.w	r3, [sp, #4]
	frame[ 5 ] = ( y ) & 0xFF;
	frame[ 6 ] = ( s >> 8 ) & 0xFF;
 800b54a:	0a23      	lsrs	r3, r4, #8
	frame[ 2 ] = ( x >> 8 ) & 0xFF;
 800b54c:	f88d 2002 	strb.w	r2, [sp, #2]
	frame[ 6 ] = ( s >> 8 ) & 0xFF;
 800b550:	f88d 3006 	strb.w	r3, [sp, #6]
	frame[ 0 ] = BUM_GAME_PLAYERMOVE_TYPE;
 800b554:	2683      	movs	r6, #131	; 0x83
	frame[ 7 ] = ( s ) & 0xFF;



	bum_api_send_to( to, frame, BUM_GAME_PLAYERMOVE_LEN );
 800b556:	2308      	movs	r3, #8
 800b558:	466a      	mov	r2, sp
	frame[ 0 ] = BUM_GAME_PLAYERMOVE_TYPE;
 800b55a:	f88d 6000 	strb.w	r6, [sp]
	frame[ 5 ] = ( y ) & 0xFF;
 800b55e:	f88d 5005 	strb.w	r5, [sp, #5]
	frame[ 7 ] = ( s ) & 0xFF;
 800b562:	f88d 4007 	strb.w	r4, [sp, #7]
	bum_api_send_to( to, frame, BUM_GAME_PLAYERMOVE_LEN );
 800b566:	f7ff fec3 	bl	800b2f0 <bum_api_send_to>
	return 1;
}
 800b56a:	2001      	movs	r0, #1
 800b56c:	b002      	add	sp, #8
 800b56e:	bd70      	pop	{r4, r5, r6, pc}

0800b570 <bum_game_print>:

int bum_game_print( uint64_t to, const char *msg )
{
 800b570:	b530      	push	{r4, r5, lr}
 800b572:	b087      	sub	sp, #28
 800b574:	4604      	mov	r4, r0
 800b576:	4610      	mov	r0, r2
	int i;
	uint8_t frame[ BUM_GAME_PRINT_LEN ];
	frame[ 0 ] = BUM_GAME_PRINT_TYPE;
 800b578:	aa06      	add	r2, sp, #24
 800b57a:	2384      	movs	r3, #132	; 0x84
 800b57c:	f802 3d18 	strb.w	r3, [r2, #-24]!
{
 800b580:	460d      	mov	r5, r1
	for ( i = 0 ; ( i < BUM_MSG_SIZE ) && msg[ i ] ; i++ ) frame[ i + 1 ] = msg[ i ];
 800b582:	2300      	movs	r3, #0
 800b584:	5cc1      	ldrb	r1, [r0, r3]
 800b586:	b959      	cbnz	r1, 800b5a0 <bum_game_print+0x30>
	for ( ; ( i < BUM_MSG_SIZE + 1 ) ; i++ ) frame[ i + 1 ] = 0;
 800b588:	3301      	adds	r3, #1
 800b58a:	2b15      	cmp	r3, #21
 800b58c:	54d1      	strb	r1, [r2, r3]
 800b58e:	d1fb      	bne.n	800b588 <bum_game_print+0x18>
	bum_api_send_to( to, frame, BUM_GAME_PRINT_LEN );
 800b590:	4620      	mov	r0, r4
 800b592:	2316      	movs	r3, #22
 800b594:	4629      	mov	r1, r5
 800b596:	f7ff feab 	bl	800b2f0 <bum_api_send_to>
	return 1;
}
 800b59a:	2001      	movs	r0, #1
 800b59c:	b007      	add	sp, #28
 800b59e:	bd30      	pop	{r4, r5, pc}
	for ( i = 0 ; ( i < BUM_MSG_SIZE ) && msg[ i ] ; i++ ) frame[ i + 1 ] = msg[ i ];
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	2b14      	cmp	r3, #20
 800b5a4:	54d1      	strb	r1, [r2, r3]
 800b5a6:	d1ed      	bne.n	800b584 <bum_game_print+0x14>
	for ( ; ( i < BUM_MSG_SIZE + 1 ) ; i++ ) frame[ i + 1 ] = 0;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	f88d 3015 	strb.w	r3, [sp, #21]
 800b5ae:	e7ef      	b.n	800b590 <bum_game_print+0x20>

0800b5b0 <bum_process_referee>:

#define DATA_SIZE 100


void bum_process_referee()
{
 800b5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b4:	b089      	sub	sp, #36	; 0x24
  static uint8_t data[ DATA_SIZE ];
  uint16_t len;

  if ( !event_check( xbee_get_recv_event() ) ) return;
 800b5b6:	f001 fe1d 	bl	800d1f4 <xbee_get_recv_event>
 800b5ba:	f000 fd11 	bl	800bfe0 <event_check>
 800b5be:	b158      	cbz	r0, 800b5d8 <bum_process_referee+0x28>

  len = DATA_SIZE;
 800b5c0:	2364      	movs	r3, #100	; 0x64
 800b5c2:	f8ad 3016 	strh.w	r3, [sp, #22]
  switch ( xbee_recv_get_frame_type() )
 800b5c6:	f001 fe2d 	bl	800d224 <xbee_recv_get_frame_type>
 800b5ca:	288b      	cmp	r0, #139	; 0x8b
 800b5cc:	d004      	beq.n	800b5d8 <bum_process_referee+0x28>
 800b5ce:	2890      	cmp	r0, #144	; 0x90
 800b5d0:	d005      	beq.n	800b5de <bum_process_referee+0x2e>
 800b5d2:	2888      	cmp	r0, #136	; 0x88
 800b5d4:	f040 80c6 	bne.w	800b764 <bum_process_referee+0x1b4>
		break;
	  }

  }

}
 800b5d8:	b009      	add	sp, #36	; 0x24
 800b5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ( xbee_recv( &from, data, &len ) && ( len > 0 ) )
 800b5de:	4c64      	ldr	r4, [pc, #400]	; (800b770 <bum_process_referee+0x1c0>)
 800b5e0:	f10d 0216 	add.w	r2, sp, #22
 800b5e4:	4621      	mov	r1, r4
 800b5e6:	a806      	add	r0, sp, #24
 800b5e8:	f001 fede 	bl	800d3a8 <xbee_recv>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	d0f3      	beq.n	800b5d8 <bum_process_referee+0x28>
 800b5f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d0ef      	beq.n	800b5d8 <bum_process_referee+0x28>
			switch ( data[ 0 ] )
 800b5f8:	7822      	ldrb	r2, [r4, #0]
 800b5fa:	2a01      	cmp	r2, #1
 800b5fc:	d01e      	beq.n	800b63c <bum_process_referee+0x8c>
 800b5fe:	2a02      	cmp	r2, #2
 800b600:	d1ea      	bne.n	800b5d8 <bum_process_referee+0x28>
				  if ( len != BUM_GAME_ACCELERATION_LEN ) return;
 800b602:	2b04      	cmp	r3, #4
 800b604:	d1e8      	bne.n	800b5d8 <bum_process_referee+0x28>
				  PlayerData *d = find_player_addr( from );
 800b606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b60a:	f7ff fecf 	bl	800b3ac <find_player_addr>
				  if ( d )
 800b60e:	2800      	cmp	r0, #0
 800b610:	d0e2      	beq.n	800b5d8 <bum_process_referee+0x28>
					d->ax = data[ 1 ] - 100;
 800b612:	7861      	ldrb	r1, [r4, #1]
 800b614:	3964      	subs	r1, #100	; 0x64
 800b616:	b249      	sxtb	r1, r1
 800b618:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
					d->ay = data[ 2 ] - 100;
 800b61c:	78a2      	ldrb	r2, [r4, #2]
 800b61e:	3a64      	subs	r2, #100	; 0x64
 800b620:	b252      	sxtb	r2, r2
 800b622:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
					d->az = data[ 3 ] - 100;
 800b626:	78e3      	ldrb	r3, [r4, #3]
					bumper_state.referee->game_acceleration( d->id, d->ax, d->ay, d->az );
 800b628:	4c52      	ldr	r4, [pc, #328]	; (800b774 <bum_process_referee+0x1c4>)
					d->az = data[ 3 ] - 100;
 800b62a:	3b64      	subs	r3, #100	; 0x64
 800b62c:	b25b      	sxtb	r3, r3
					bumper_state.referee->game_acceleration( d->id, d->ax, d->ay, d->az );
 800b62e:	68a4      	ldr	r4, [r4, #8]
					d->az = data[ 3 ] - 100;
 800b630:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
					bumper_state.referee->game_acceleration( d->id, d->ax, d->ay, d->az );
 800b634:	6864      	ldr	r4, [r4, #4]
 800b636:	7a00      	ldrb	r0, [r0, #8]
 800b638:	47a0      	blx	r4
 800b63a:	e7cd      	b.n	800b5d8 <bum_process_referee+0x28>
				if ( len != BUM_GAME_REGISTER_LEN ) return;
 800b63c:	2b07      	cmp	r3, #7
 800b63e:	d1cb      	bne.n	800b5d8 <bum_process_referee+0x28>
				if ( referee_state.game_started )
 800b640:	4e4d      	ldr	r6, [pc, #308]	; (800b778 <bum_process_referee+0x1c8>)
 800b642:	f8d6 4520 	ldr.w	r4, [r6, #1312]	; 0x520
 800b646:	2c00      	cmp	r4, #0
 800b648:	d13b      	bne.n	800b6c2 <bum_process_referee+0x112>
				else if ( referee_state.n_players == MAX_PLAYERS )
 800b64a:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 800b64e:	2b14      	cmp	r3, #20
 800b650:	d03a      	beq.n	800b6c8 <bum_process_referee+0x118>
				  d = find_player_addr( from );
 800b652:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800b656:	4640      	mov	r0, r8
 800b658:	4649      	mov	r1, r9
 800b65a:	f7ff fea7 	bl	800b3ac <find_player_addr>
				  if ( d )
 800b65e:	4604      	mov	r4, r0
 800b660:	2800      	cmp	r0, #0
 800b662:	d133      	bne.n	800b6cc <bum_process_referee+0x11c>
					d = add_player( from, ( const char * )data + 1 );
 800b664:	4a45      	ldr	r2, [pc, #276]	; (800b77c <bum_process_referee+0x1cc>)
 800b666:	4640      	mov	r0, r8
 800b668:	4649      	mov	r1, r9
 800b66a:	f7ff feb9 	bl	800b3e0 <add_player>
				{ result = 4; }
 800b66e:	1c05      	adds	r5, r0, #0
					if ( d ) { result = 1; }
 800b670:	4604      	mov	r4, r0
				{ result = 4; }
 800b672:	bf18      	it	ne
 800b674:	2501      	movne	r5, #1
				bum_game_step( from, BUM_STEP_REGISTERED, result );
 800b676:	462b      	mov	r3, r5
 800b678:	2200      	movs	r2, #0
 800b67a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b67e:	f7ff ff17 	bl	800b4b0 <bum_game_step>
				if ( result == 1 )
 800b682:	2d01      	cmp	r5, #1
 800b684:	d1a8      	bne.n	800b5d8 <bum_process_referee+0x28>
					bum_game_print( from, "WAIT..." );
 800b686:	4a3e      	ldr	r2, [pc, #248]	; (800b780 <bum_process_referee+0x1d0>)
 800b688:	4d3e      	ldr	r5, [pc, #248]	; (800b784 <bum_process_referee+0x1d4>)
 800b68a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b68e:	f7ff ff6f 	bl	800b570 <bum_game_print>
					for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b692:	2700      	movs	r7, #0
 800b694:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 800b698:	429f      	cmp	r7, r3
 800b69a:	db19      	blt.n	800b6d0 <bum_process_referee+0x120>
 800b69c:	4d36      	ldr	r5, [pc, #216]	; (800b778 <bum_process_referee+0x1c8>)
 800b69e:	2700      	movs	r7, #0
 800b6a0:	f104 0a09 	add.w	sl, r4, #9
					for ( i = 0 ; i < referee_state.n_players - 1 ; i++ )
 800b6a4:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 800b6a8:	7a22      	ldrb	r2, [r4, #8]
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	429f      	cmp	r7, r3
 800b6ae:	f105 0540 	add.w	r5, r5, #64	; 0x40
 800b6b2:	db36      	blt.n	800b722 <bum_process_referee+0x172>
					bumper_state.referee->game_register( d->id, d->name );
 800b6b4:	4b2f      	ldr	r3, [pc, #188]	; (800b774 <bum_process_referee+0x1c4>)
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	4651      	mov	r1, sl
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4610      	mov	r0, r2
 800b6be:	4798      	blx	r3
 800b6c0:	e78a      	b.n	800b5d8 <bum_process_referee+0x28>
				PlayerData *d = 0;
 800b6c2:	2400      	movs	r4, #0
				{ result = 4; }
 800b6c4:	2504      	movs	r5, #4
 800b6c6:	e7d6      	b.n	800b676 <bum_process_referee+0xc6>
				{ result = 3; }
 800b6c8:	2503      	movs	r5, #3
 800b6ca:	e7d4      	b.n	800b676 <bum_process_referee+0xc6>
				  { result = 2; }
 800b6cc:	2502      	movs	r5, #2
 800b6ce:	e7d2      	b.n	800b676 <bum_process_referee+0xc6>
						bum_game_new_player( from, referee_state.player_data[ i ].id, referee_state.player_data[ i ].name, referee_state.player_data[ i ].color );
 800b6d0:	f8d5 302f 	ldr.w	r3, [r5, #47]	; 0x2f
 800b6d4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6de:	462b      	mov	r3, r5
 800b6e0:	f7ff fef5 	bl	800b4ce <bum_game_new_player>
						bum_game_player_move( from, referee_state.player_data[ i ].id, ( uint16_t )referee_state.player_data[ i ].Px, ( uint16_t )referee_state.player_data[ i ].Py, referee_state.player_data[ i ].s );
 800b6e4:	1deb      	adds	r3, r5, #7
 800b6e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6ea:	f7f5 fa53 	bl	8000b94 <__aeabi_d2uiz>
 800b6ee:	f8b5 3027 	ldrh.w	r3, [r5, #39]	; 0x27
 800b6f2:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 800b6f6:	9301      	str	r3, [sp, #4]
 800b6f8:	f105 030f 	add.w	r3, r5, #15
 800b6fc:	fa1f fb80 	uxth.w	fp, r0
 800b700:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b704:	f7f5 fa46 	bl	8000b94 <__aeabi_d2uiz>
 800b708:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800b70c:	b280      	uxth	r0, r0
 800b70e:	9000      	str	r0, [sp, #0]
 800b710:	465b      	mov	r3, fp
 800b712:	4652      	mov	r2, sl
 800b714:	4640      	mov	r0, r8
 800b716:	4649      	mov	r1, r9
 800b718:	f7ff ff0a 	bl	800b530 <bum_game_player_move>
					for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b71c:	3701      	adds	r7, #1
 800b71e:	3540      	adds	r5, #64	; 0x40
 800b720:	e7b8      	b.n	800b694 <bum_process_referee+0xe4>
						bum_game_new_player( referee_state.player_data[ i ].addr, d->id, d->name, d->color );
 800b722:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	e955 0110 	ldrd	r0, r1, [r5, #-64]	; 0x40
 800b72a:	4653      	mov	r3, sl
 800b72c:	f7ff fecf 	bl	800b4ce <bum_game_new_player>
						bum_game_player_move( referee_state.player_data[ i ].addr, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800b730:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800b734:	f7f5 fa2e 	bl	8000b94 <__aeabi_d2uiz>
 800b738:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 800b73a:	f894 b008 	ldrb.w	fp, [r4, #8]
 800b73e:	e955 8910 	ldrd	r8, r9, [r5, #-64]	; 0x40
 800b742:	9201      	str	r2, [sp, #4]
 800b744:	b283      	uxth	r3, r0
 800b746:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 800b74a:	9303      	str	r3, [sp, #12]
 800b74c:	f7f5 fa22 	bl	8000b94 <__aeabi_d2uiz>
 800b750:	b280      	uxth	r0, r0
 800b752:	9000      	str	r0, [sp, #0]
 800b754:	9b03      	ldr	r3, [sp, #12]
 800b756:	465a      	mov	r2, fp
 800b758:	4640      	mov	r0, r8
 800b75a:	4649      	mov	r1, r9
 800b75c:	f7ff fee8 	bl	800b530 <bum_game_player_move>
					for ( i = 0 ; i < referee_state.n_players - 1 ; i++ )
 800b760:	3701      	adds	r7, #1
 800b762:	e79f      	b.n	800b6a4 <bum_process_referee+0xf4>
		xbee_recv_full( data, &len );
 800b764:	f10d 0116 	add.w	r1, sp, #22
 800b768:	4801      	ldr	r0, [pc, #4]	; (800b770 <bum_process_referee+0x1c0>)
 800b76a:	f001 fded 	bl	800d348 <xbee_recv_full>
		break;
 800b76e:	e733      	b.n	800b5d8 <bum_process_referee+0x28>
 800b770:	20000df8 	.word	0x20000df8
 800b774:	20000de8 	.word	0x20000de8
 800b778:	200063f8 	.word	0x200063f8
 800b77c:	20000df9 	.word	0x20000df9
 800b780:	08010c86 	.word	0x08010c86
 800b784:	20006401 	.word	0x20006401

0800b788 <bum_referee_calculate>:

void bum_referee_calculate( uint16_t dt )
{
 800b788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( !referee_state.game_started ) return;
 800b78c:	4b76      	ldr	r3, [pc, #472]	; (800b968 <bum_referee_calculate+0x1e0>)
{
 800b78e:	b0a7      	sub	sp, #156	; 0x9c
  if ( !referee_state.game_started ) return;
 800b790:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
{
 800b794:	9025      	str	r0, [sp, #148]	; 0x94
 800b796:	9311      	str	r3, [sp, #68]	; 0x44
  if ( !referee_state.game_started ) return;
 800b798:	2a00      	cmp	r2, #0
 800b79a:	f000 8225 	beq.w	800bbe8 <bum_referee_calculate+0x460>

  int i, j;
  PlayerData *d;

  int n_playing = 0;
  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b79e:	f04f 0b00 	mov.w	fp, #0
 800b7a2:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 800b7a6:	465b      	mov	r3, fp
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	db23      	blt.n	800b7f4 <bum_referee_calculate+0x6c>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 800b968 <bum_referee_calculate+0x1e0>
 800b7b2:	9309      	str	r3, [sp, #36]	; 0x24
	d = referee_state.player_data + i;

	if ( d->playing ) n_playing++;
  }

  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b7b4:	4b6c      	ldr	r3, [pc, #432]	; (800b968 <bum_referee_calculate+0x1e0>)
 800b7b6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800b7ba:	9324      	str	r3, [sp, #144]	; 0x90
 800b7bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	db21      	blt.n	800b808 <bum_referee_calculate+0x80>
	}

  }


  if ( n_playing == 0 )
 800b7c4:	f1bb 0f00 	cmp.w	fp, #0
 800b7c8:	f040 820e 	bne.w	800bbe8 <bum_referee_calculate+0x460>
  {
	  // No winner
	  bum_game_print( BUM_TO_ALL, "No Winner..." );
 800b7cc:	4a67      	ldr	r2, [pc, #412]	; (800b96c <bum_referee_calculate+0x1e4>)
 800b7ce:	f04f 31ff 	mov.w	r1, #4294967295
 800b7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d6:	f7ff fecb 	bl	800b570 <bum_game_print>
	  bum_game_step( BUM_TO_ALL, BUM_STEP_END, 0 );
 800b7da:	465b      	mov	r3, fp
 800b7dc:	2203      	movs	r2, #3
 800b7de:	f04f 31ff 	mov.w	r1, #4294967295
 800b7e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e6:	f7ff fe63 	bl	800b4b0 <bum_game_step>

    bums_referee_reset();
#endif
  }

}
 800b7ea:	b027      	add	sp, #156	; 0x9c
 800b7ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      bums_referee_reset();
 800b7f0:	f7ff be32 	b.w	800b458 <bums_referee_reset>
	if ( d->playing ) n_playing++;
 800b7f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b7f6:	eb01 1183 	add.w	r1, r1, r3, lsl #6
 800b7fa:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 800b7fe:	b109      	cbz	r1, 800b804 <bum_referee_calculate+0x7c>
 800b800:	f10b 0b01 	add.w	fp, fp, #1
  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b804:	3301      	adds	r3, #1
 800b806:	e7cf      	b.n	800b7a8 <bum_referee_calculate+0x20>
	if ( !d->playing ) continue;
 800b808:	f89a 303c 	ldrb.w	r3, [sl, #60]	; 0x3c
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f000 8097 	beq.w	800b940 <bum_referee_calculate+0x1b8>
	double sdt = ( ( double )dt );
 800b812:	9825      	ldr	r0, [sp, #148]	; 0x94
 800b814:	f7f4 fe86 	bl	8000524 <__aeabi_ui2d>
 800b818:	4604      	mov	r4, r0
 800b81a:	460d      	mov	r5, r1
	d->Vx += ( ( double )d->ax ) * sdt * Vfactor;
 800b81c:	f99a 0034 	ldrsb.w	r0, [sl, #52]	; 0x34
 800b820:	f7f4 fe90 	bl	8000544 <__aeabi_i2d>
 800b824:	4622      	mov	r2, r4
 800b826:	462b      	mov	r3, r5
 800b828:	f7f4 fef2 	bl	8000610 <__aeabi_dmul>
 800b82c:	a348      	add	r3, pc, #288	; (adr r3, 800b950 <bum_referee_calculate+0x1c8>)
 800b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b832:	f7f4 feed 	bl	8000610 <__aeabi_dmul>
 800b836:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 800b83a:	f7f4 fd37 	bl	80002ac <__adddf3>
 800b83e:	4680      	mov	r8, r0
 800b840:	4689      	mov	r9, r1
 800b842:	e9ca 8908 	strd	r8, r9, [sl, #32]
	d->Vy += ( ( double )d->ay ) * sdt * Vfactor;
 800b846:	f99a 0035 	ldrsb.w	r0, [sl, #53]	; 0x35
 800b84a:	f7f4 fe7b 	bl	8000544 <__aeabi_i2d>
 800b84e:	4622      	mov	r2, r4
 800b850:	462b      	mov	r3, r5
 800b852:	f7f4 fedd 	bl	8000610 <__aeabi_dmul>
 800b856:	a33e      	add	r3, pc, #248	; (adr r3, 800b950 <bum_referee_calculate+0x1c8>)
 800b858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85c:	f7f4 fed8 	bl	8000610 <__aeabi_dmul>
 800b860:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 800b864:	f7f4 fd22 	bl	80002ac <__adddf3>
 800b868:	4606      	mov	r6, r0
 800b86a:	460f      	mov	r7, r1
	d->Px += d->Vx * sdt * Pfactor;
 800b86c:	4642      	mov	r2, r8
 800b86e:	464b      	mov	r3, r9
	d->Vy += ( ( double )d->ay ) * sdt * Vfactor;
 800b870:	e9ca 670a 	strd	r6, r7, [sl, #40]	; 0x28
	d->Px += d->Vx * sdt * Pfactor;
 800b874:	4620      	mov	r0, r4
 800b876:	4629      	mov	r1, r5
 800b878:	f7f4 feca 	bl	8000610 <__aeabi_dmul>
 800b87c:	a336      	add	r3, pc, #216	; (adr r3, 800b958 <bum_referee_calculate+0x1d0>)
 800b87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b882:	f7f4 fec5 	bl	8000610 <__aeabi_dmul>
 800b886:	e9da 2304 	ldrd	r2, r3, [sl, #16]
 800b88a:	f7f4 fd0f 	bl	80002ac <__adddf3>
	d->Py += d->Vy * sdt * Pfactor;
 800b88e:	4632      	mov	r2, r6
	d->Px += d->Vx * sdt * Pfactor;
 800b890:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b894:	e9ca 0104 	strd	r0, r1, [sl, #16]
	d->Py += d->Vy * sdt * Pfactor;
 800b898:	463b      	mov	r3, r7
 800b89a:	4620      	mov	r0, r4
 800b89c:	4629      	mov	r1, r5
 800b89e:	f7f4 feb7 	bl	8000610 <__aeabi_dmul>
 800b8a2:	a32d      	add	r3, pc, #180	; (adr r3, 800b958 <bum_referee_calculate+0x1d0>)
 800b8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a8:	f7f4 feb2 	bl	8000610 <__aeabi_dmul>
 800b8ac:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 800b8b0:	f7f4 fcfc 	bl	80002ac <__adddf3>
	if ( ( d->Px < 0 ) || ( d->Px > BOARD_W ) || ( d->Py < 0 ) || ( d->Py > BOARD_H ) )
 800b8b4:	2200      	movs	r2, #0
	d->Py += d->Vy * sdt * Pfactor;
 800b8b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b8ba:	e9ca 0106 	strd	r0, r1, [sl, #24]
	if ( ( d->Px < 0 ) || ( d->Px > BOARD_W ) || ( d->Py < 0 ) || ( d->Py > BOARD_H ) )
 800b8be:	2300      	movs	r3, #0
 800b8c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8c4:	f7f5 f916 	bl	8000af4 <__aeabi_dcmplt>
 800b8c8:	b9b0      	cbnz	r0, 800b8f8 <bum_referee_calculate+0x170>
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	4b28      	ldr	r3, [pc, #160]	; (800b970 <bum_referee_calculate+0x1e8>)
 800b8ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8d2:	f7f5 f92d 	bl	8000b30 <__aeabi_dcmpgt>
 800b8d6:	b978      	cbnz	r0, 800b8f8 <bum_referee_calculate+0x170>
 800b8d8:	2200      	movs	r2, #0
 800b8da:	2300      	movs	r3, #0
 800b8dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8e0:	f7f5 f908 	bl	8000af4 <__aeabi_dcmplt>
 800b8e4:	b940      	cbnz	r0, 800b8f8 <bum_referee_calculate+0x170>
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	4b21      	ldr	r3, [pc, #132]	; (800b970 <bum_referee_calculate+0x1e8>)
 800b8ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8ee:	f7f5 f91f 	bl	8000b30 <__aeabi_dcmpgt>
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	f000 8175 	beq.w	800bbe2 <bum_referee_calculate+0x45a>
		d->Py = 50 + ( n_playing * d->r );
 800b8f8:	f8ba 5032 	ldrh.w	r5, [sl, #50]	; 0x32
		d->Px = 0; // - d->r / 2;
 800b8fc:	ed9f 7b18 	vldr	d7, [pc, #96]	; 800b960 <bum_referee_calculate+0x1d8>
		d->Py = 50 + ( n_playing * d->r );
 800b900:	fb0b f405 	mul.w	r4, fp, r5
		d->playing = 0;
 800b904:	2600      	movs	r6, #0
		d->Py = 50 + ( n_playing * d->r );
 800b906:	3432      	adds	r4, #50	; 0x32
 800b908:	4620      	mov	r0, r4
		d->playing = 0;
 800b90a:	f88a 603c 	strb.w	r6, [sl, #60]	; 0x3c
		d->Px = 0; // - d->r / 2;
 800b90e:	ed8a 7b04 	vstr	d7, [sl, #16]
		d->Py = 50 + ( n_playing * d->r );
 800b912:	f7f4 fe17 	bl	8000544 <__aeabi_i2d>
 800b916:	e9ca 0106 	strd	r0, r1, [sl, #24]
		d->s = 400;
 800b91a:	f44f 73c8 	mov.w	r3, #400	; 0x190
		d->r /= 2;
 800b91e:	086d      	lsrs	r5, r5, #1
        bum_game_player_move( BUM_TO_ALL, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800b920:	b2a4      	uxth	r4, r4
 800b922:	f89a 2008 	ldrb.w	r2, [sl, #8]
		d->s = 400;
 800b926:	f8aa 3030 	strh.w	r3, [sl, #48]	; 0x30
        bum_game_player_move( BUM_TO_ALL, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800b92a:	9301      	str	r3, [sp, #4]
		d->r /= 2;
 800b92c:	f8aa 5032 	strh.w	r5, [sl, #50]	; 0x32
        bum_game_player_move( BUM_TO_ALL, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800b930:	9400      	str	r4, [sp, #0]
 800b932:	4633      	mov	r3, r6
	      bum_game_player_move( BUM_TO_ALL, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800b934:	f04f 30ff 	mov.w	r0, #4294967295
 800b938:	f04f 31ff 	mov.w	r1, #4294967295
 800b93c:	f7ff fdf8 	bl	800b530 <bum_game_player_move>
  for ( i = 0 ; i < referee_state.n_players ; i++ )
 800b940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b942:	3301      	adds	r3, #1
 800b944:	9309      	str	r3, [sp, #36]	; 0x24
 800b946:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
 800b94a:	e733      	b.n	800b7b4 <bum_referee_calculate+0x2c>
 800b94c:	f3af 8000 	nop.w
 800b950:	d2f1a9fc 	.word	0xd2f1a9fc
 800b954:	3f30624d 	.word	0x3f30624d
 800b958:	d2f1a9fc 	.word	0xd2f1a9fc
 800b95c:	3f50624d 	.word	0x3f50624d
	...
 800b968:	200063f8 	.word	0x200063f8
 800b96c:	08010c8e 	.word	0x08010c8e
 800b970:	408f4000 	.word	0x408f4000
			  if ( i == j ) continue;
 800b974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b976:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b978:	4293      	cmp	r3, r2
 800b97a:	f000 8116 	beq.w	800bbaa <bum_referee_calculate+0x422>
  			  if ( !e->playing ) continue;
 800b97e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b982:	2b00      	cmp	r3, #0
 800b984:	f000 8111 	beq.w	800bbaa <bum_referee_calculate+0x422>
  			  int16_t dx = d->Px - e->Px;
 800b988:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800b98c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b990:	f7f4 fc8a 	bl	80002a8 <__aeabi_dsub>
 800b994:	f7f5 f8d6 	bl	8000b44 <__aeabi_d2iz>
  			  int16_t dy = d->Py - e->Py;
 800b998:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
  			  int16_t dx = d->Px - e->Px;
 800b99c:	b206      	sxth	r6, r0
  			  int16_t dy = d->Py - e->Py;
 800b99e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9a2:	f7f4 fc81 	bl	80002a8 <__aeabi_dsub>
 800b9a6:	f7f5 f8cd 	bl	8000b44 <__aeabi_d2iz>
  			  int32_t DR = d->r + e->r;
 800b9aa:	f8ba 3032 	ldrh.w	r3, [sl, #50]	; 0x32
 800b9ae:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  			  int16_t dy = d->Py - e->Py;
 800b9b0:	b200      	sxth	r0, r0
  			  int32_t D = dx * dx + dy * dy;
 800b9b2:	fb06 f806 	mul.w	r8, r6, r6
 800b9b6:	fb00 f900 	mul.w	r9, r0, r0
  			  int32_t DR = d->r + e->r;
 800b9ba:	4413      	add	r3, r2
  			  int32_t D = dx * dx + dy * dy;
 800b9bc:	eb08 0509 	add.w	r5, r8, r9
  			  DR = DR * DR;
 800b9c0:	435b      	muls	r3, r3
  			  if ( D <= DR )
 800b9c2:	429d      	cmp	r5, r3
 800b9c4:	f300 80f1 	bgt.w	800bbaa <bum_referee_calculate+0x422>
  				double x1 = (yi2*b1*a1 - yi1*b1*a1 + b1*b1*xi1 + a1*a1*xi2)/(D);
 800b9c8:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
  				  if ( D == 0 ) D = 1;
 800b9cc:	2d00      	cmp	r5, #0
 800b9ce:	bf08      	it	eq
 800b9d0:	2501      	moveq	r5, #1
  				double x1 = (yi2*b1*a1 - yi1*b1*a1 + b1*b1*xi1 + a1*a1*xi2)/(D);
 800b9d2:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800b9d6:	f7f4 fdb5 	bl	8000544 <__aeabi_i2d>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	460b      	mov	r3, r1
 800b9de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9e2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800b9e6:	f7f4 fe13 	bl	8000610 <__aeabi_dmul>
 800b9ea:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	f7f4 fda8 	bl	8000544 <__aeabi_i2d>
 800b9f4:	4606      	mov	r6, r0
 800b9f6:	460f      	mov	r7, r1
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800ba00:	f7f4 fe06 	bl	8000610 <__aeabi_dmul>
 800ba04:	ed9a 7b0a 	vldr	d7, [sl, #40]	; 0x28
 800ba08:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 800ba0c:	ec53 2b17 	vmov	r2, r3, d7
 800ba10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba14:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800ba18:	f7f4 fdfa 	bl	8000610 <__aeabi_dmul>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	460b      	mov	r3, r1
 800ba20:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800ba24:	4630      	mov	r0, r6
 800ba26:	4639      	mov	r1, r7
 800ba28:	f7f4 fdf2 	bl	8000610 <__aeabi_dmul>
 800ba2c:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 800ba30:	4648      	mov	r0, r9
 800ba32:	f7f4 fd87 	bl	8000544 <__aeabi_i2d>
 800ba36:	ed9a 7b08 	vldr	d7, [sl, #32]
 800ba3a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 800ba3e:	4640      	mov	r0, r8
 800ba40:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ba44:	f7f4 fd7e 	bl	8000544 <__aeabi_i2d>
 800ba48:	ed94 7b08 	vldr	d7, [r4, #32]
 800ba4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ba50:	4628      	mov	r0, r5
 800ba52:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800ba56:	f7f4 fd75 	bl	8000544 <__aeabi_i2d>
  				double y1 = (yi2*b1*b1 + b1*xi2*a1 - a1*xi1*b1 + a1*a1*yi1)/(D);
 800ba5a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  				double x1 = (yi2*b1*a1 - yi1*b1*a1 + b1*b1*xi1 + a1*a1*xi2)/(D);
 800ba5e:	4680      	mov	r8, r0
 800ba60:	4689      	mov	r9, r1
  				double y1 = (yi2*b1*b1 + b1*xi2*a1 - a1*xi1*b1 + a1*a1*yi1)/(D);
 800ba62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba66:	f7f4 fdd3 	bl	8000610 <__aeabi_dmul>
 800ba6a:	4632      	mov	r2, r6
 800ba6c:	463b      	mov	r3, r7
 800ba6e:	f7f4 fdcf 	bl	8000610 <__aeabi_dmul>
 800ba72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ba76:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 800ba7a:	4630      	mov	r0, r6
 800ba7c:	4639      	mov	r1, r7
 800ba7e:	f7f4 fdc7 	bl	8000610 <__aeabi_dmul>
 800ba82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba86:	f7f4 fdc3 	bl	8000610 <__aeabi_dmul>
  				double x1 = (yi2*b1*a1 - yi1*b1*a1 + b1*b1*xi1 + a1*a1*xi2)/(D);
 800ba8a:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  				double y1 = (yi2*b1*b1 + b1*xi2*a1 - a1*xi1*b1 + a1*a1*yi1)/(D);
 800ba8e:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
  				double x1 = (yi2*b1*a1 - yi1*b1*a1 + b1*b1*xi1 + a1*a1*xi2)/(D);
 800ba92:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800ba96:	f7f4 fc07 	bl	80002a8 <__aeabi_dsub>
 800ba9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ba9e:	4606      	mov	r6, r0
 800baa0:	460f      	mov	r7, r1
 800baa2:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800baa6:	f7f4 fdb3 	bl	8000610 <__aeabi_dmul>
 800baaa:	4602      	mov	r2, r0
 800baac:	460b      	mov	r3, r1
 800baae:	4630      	mov	r0, r6
 800bab0:	4639      	mov	r1, r7
 800bab2:	f7f4 fbfb 	bl	80002ac <__adddf3>
 800bab6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800baba:	4606      	mov	r6, r0
 800babc:	460f      	mov	r7, r1
 800babe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bac2:	f7f4 fda5 	bl	8000610 <__aeabi_dmul>
 800bac6:	4602      	mov	r2, r0
 800bac8:	460b      	mov	r3, r1
 800baca:	4630      	mov	r0, r6
 800bacc:	4639      	mov	r1, r7
 800bace:	f7f4 fbed 	bl	80002ac <__adddf3>
 800bad2:	4642      	mov	r2, r8
 800bad4:	464b      	mov	r3, r9
 800bad6:	f7f4 fec5 	bl	8000864 <__aeabi_ddiv>
  				double y1 = (yi2*b1*b1 + b1*xi2*a1 - a1*xi1*b1 + a1*a1*yi1)/(D);
 800bada:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
				d->Vx = x1;
 800bade:	e9ca 0108 	strd	r0, r1, [sl, #32]
  				double y1 = (yi2*b1*b1 + b1*xi2*a1 - a1*xi1*b1 + a1*a1*yi1)/(D);
 800bae2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bae6:	f7f4 fd93 	bl	8000610 <__aeabi_dmul>
 800baea:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800baee:	f7f4 fbdd 	bl	80002ac <__adddf3>
 800baf2:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800baf6:	f7f4 fbd7 	bl	80002a8 <__aeabi_dsub>
 800bafa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bafe:	4606      	mov	r6, r0
 800bb00:	460f      	mov	r7, r1
 800bb02:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800bb06:	f7f4 fd83 	bl	8000610 <__aeabi_dmul>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	4630      	mov	r0, r6
 800bb10:	4639      	mov	r1, r7
 800bb12:	f7f4 fbcb 	bl	80002ac <__adddf3>
 800bb16:	4642      	mov	r2, r8
 800bb18:	464b      	mov	r3, r9
 800bb1a:	f7f4 fea3 	bl	8000864 <__aeabi_ddiv>
  				double x2 = (a1*a1*xi1 - yi2*b1*a1 + yi1*b1*a1 + b1*b1*xi2)/(D);
 800bb1e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
				d->Vy = y1;
 800bb22:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
  				double x2 = (a1*a1*xi1 - yi2*b1*a1 + yi1*b1*a1 + b1*b1*xi2)/(D);
 800bb26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bb2a:	f7f4 fd71 	bl	8000610 <__aeabi_dmul>
 800bb2e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800bb32:	f7f4 fbb9 	bl	80002a8 <__aeabi_dsub>
 800bb36:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800bb3a:	f7f4 fbb7 	bl	80002ac <__adddf3>
 800bb3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bb42:	4606      	mov	r6, r0
 800bb44:	460f      	mov	r7, r1
 800bb46:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800bb4a:	f7f4 fd61 	bl	8000610 <__aeabi_dmul>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	460b      	mov	r3, r1
 800bb52:	4630      	mov	r0, r6
 800bb54:	4639      	mov	r1, r7
 800bb56:	f7f4 fba9 	bl	80002ac <__adddf3>
 800bb5a:	4642      	mov	r2, r8
 800bb5c:	464b      	mov	r3, r9
 800bb5e:	f7f4 fe81 	bl	8000864 <__aeabi_ddiv>
  				double y2 = (a1*xi1*b1 + yi1*b1*b1 - b1*xi2*a1 + a1*a1*yi2)/(D);
 800bb62:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
				e->Vx = x2;
 800bb66:	e9c4 0108 	strd	r0, r1, [r4, #32]
  				double y2 = (a1*xi1*b1 + yi1*b1*b1 - b1*xi2*a1 + a1*a1*yi2)/(D);
 800bb6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb6e:	f7f4 fd4f 	bl	8000610 <__aeabi_dmul>
 800bb72:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800bb76:	f7f4 fb99 	bl	80002ac <__adddf3>
 800bb7a:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800bb7e:	f7f4 fb93 	bl	80002a8 <__aeabi_dsub>
 800bb82:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bb86:	4606      	mov	r6, r0
 800bb88:	460f      	mov	r7, r1
 800bb8a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800bb8e:	f7f4 fd3f 	bl	8000610 <__aeabi_dmul>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	4630      	mov	r0, r6
 800bb98:	4639      	mov	r1, r7
 800bb9a:	f7f4 fb87 	bl	80002ac <__adddf3>
 800bb9e:	4642      	mov	r2, r8
 800bba0:	464b      	mov	r3, r9
 800bba2:	f7f4 fe5f 	bl	8000864 <__aeabi_ddiv>
				e->Vy = y2;
 800bba6:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
		  for ( j = 0 ; j < referee_state.n_players ; j++ )
 800bbaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bbac:	3301      	adds	r3, #1
 800bbae:	9310      	str	r3, [sp, #64]	; 0x40
 800bbb0:	3440      	adds	r4, #64	; 0x40
 800bbb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bbb4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	f47f aedc 	bne.w	800b974 <bum_referee_calculate+0x1ec>
	      bum_game_player_move( BUM_TO_ALL, d->id, ( uint16_t )d->Px, ( uint16_t )d->Py, d->s );
 800bbbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbc0:	f7f4 ffe8 	bl	8000b94 <__aeabi_d2uiz>
 800bbc4:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 800bbc8:	9301      	str	r3, [sp, #4]
 800bbca:	b285      	uxth	r5, r0
 800bbcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbd0:	f7f4 ffe0 	bl	8000b94 <__aeabi_d2uiz>
 800bbd4:	f89a 4008 	ldrb.w	r4, [sl, #8]
 800bbd8:	b280      	uxth	r0, r0
 800bbda:	9000      	str	r0, [sp, #0]
 800bbdc:	462b      	mov	r3, r5
 800bbde:	4622      	mov	r2, r4
 800bbe0:	e6a8      	b.n	800b934 <bum_referee_calculate+0x1ac>
 800bbe2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800bbe4:	9010      	str	r0, [sp, #64]	; 0x40
 800bbe6:	e7e4      	b.n	800bbb2 <bum_referee_calculate+0x42a>
}
 800bbe8:	b027      	add	sp, #156	; 0x9c
 800bbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbee:	bf00      	nop

0800bbf0 <bum_referee_start_game>:

void bum_referee_start_game()
{
  if ( referee_state.game_started ) return;
 800bbf0:	4b0c      	ldr	r3, [pc, #48]	; (800bc24 <bum_referee_start_game+0x34>)
{
 800bbf2:	b570      	push	{r4, r5, r6, lr}
  if ( referee_state.game_started ) return;
 800bbf4:	f8d3 5520 	ldr.w	r5, [r3, #1312]	; 0x520
 800bbf8:	b99d      	cbnz	r5, 800bc22 <bum_referee_start_game+0x32>

  referee_state.game_started = 1;
 800bbfa:	2401      	movs	r4, #1

  bum_game_print( BUM_TO_ALL, "START !" );
 800bbfc:	4a0a      	ldr	r2, [pc, #40]	; (800bc28 <bum_referee_start_game+0x38>)
  referee_state.game_started = 1;
 800bbfe:	f8c3 4520 	str.w	r4, [r3, #1312]	; 0x520
  bum_game_print( BUM_TO_ALL, "START !" );
 800bc02:	f04f 31ff 	mov.w	r1, #4294967295
 800bc06:	f04f 30ff 	mov.w	r0, #4294967295
 800bc0a:	f7ff fcb1 	bl	800b570 <bum_game_print>

  bum_game_step( BUM_TO_ALL, BUM_STEP_START, 0 );
 800bc0e:	462b      	mov	r3, r5
 800bc10:	4622      	mov	r2, r4
 800bc12:	f04f 30ff 	mov.w	r0, #4294967295
 800bc16:	f04f 31ff 	mov.w	r1, #4294967295
}
 800bc1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  bum_game_step( BUM_TO_ALL, BUM_STEP_START, 0 );
 800bc1e:	f7ff bc47 	b.w	800b4b0 <bum_game_step>
 800bc22:	bd70      	pop	{r4, r5, r6, pc}
 800bc24:	200063f8 	.word	0x200063f8
 800bc28:	08010c9b 	.word	0x08010c9b

0800bc2c <bum_referee_get_n_players>:

int bum_referee_get_n_players()
{
	return referee_state.n_players;
}
 800bc2c:	4b01      	ldr	r3, [pc, #4]	; (800bc34 <bum_referee_get_n_players+0x8>)
 800bc2e:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800bc32:	4770      	bx	lr
 800bc34:	200063f8 	.word	0x200063f8

0800bc38 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bc38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800bc3c:	4a25      	ldr	r2, [pc, #148]	; (800bcd4 <low_level_output+0x9c>)
 800bc3e:	9200      	str	r2, [sp, #0]
 800bc40:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800bc42:	f04f 0800 	mov.w	r8, #0
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800bc46:	68ab      	ldr	r3, [r5, #8]
{
 800bc48:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 800bc4a:	4647      	mov	r7, r8
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bc4c:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  for(q = p; q != NULL; q = q->next)
 800bc50:	b92c      	cbnz	r4, 800bc5e <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800bc52:	4639      	mov	r1, r7
 800bc54:	481f      	ldr	r0, [pc, #124]	; (800bcd4 <low_level_output+0x9c>)
 800bc56:	f7f5 fd67 	bl	8001728 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	e004      	b.n	800bc68 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bc5e:	682a      	ldr	r2, [r5, #0]
 800bc60:	2a00      	cmp	r2, #0
 800bc62:	da11      	bge.n	800bc88 <low_level_output+0x50>
        errval = ERR_USE;
 800bc64:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800bc68:	9b00      	ldr	r3, [sp, #0]
 800bc6a:	f241 0214 	movw	r2, #4116	; 0x1014
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	5899      	ldr	r1, [r3, r2]
 800bc72:	0689      	lsls	r1, r1, #26
 800bc74:	d505      	bpl.n	800bc82 <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800bc76:	2120      	movs	r1, #32
 800bc78:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800bc7a:	f241 0204 	movw	r2, #4100	; 0x1004
 800bc7e:	2100      	movs	r1, #0
 800bc80:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800bc82:	b003      	add	sp, #12
 800bc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 800bc88:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bc8c:	4646      	mov	r6, r8
      payloadoffset = 0;
 800bc8e:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bc92:	eb06 0809 	add.w	r8, r6, r9
 800bc96:	45d8      	cmp	r8, fp
 800bc98:	eb03 0006 	add.w	r0, r3, r6
 800bc9c:	6861      	ldr	r1, [r4, #4]
 800bc9e:	d808      	bhi.n	800bcb2 <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800bca0:	464a      	mov	r2, r9
 800bca2:	4451      	add	r1, sl
 800bca4:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800bca6:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800bca8:	f001 fea3 	bl	800d9f2 <memcpy>
  for(q = p; q != NULL; q = q->next)
 800bcac:	6824      	ldr	r4, [r4, #0]
 800bcae:	9b01      	ldr	r3, [sp, #4]
 800bcb0:	e7ce      	b.n	800bc50 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800bcb2:	ebab 0606 	sub.w	r6, fp, r6
 800bcb6:	4632      	mov	r2, r6
 800bcb8:	4451      	add	r1, sl
 800bcba:	f001 fe9a 	bl	800d9f2 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800bcbe:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bcc0:	682b      	ldr	r3, [r5, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	dbce      	blt.n	800bc64 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800bcc6:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800bcc8:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800bcca:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800bccc:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 800bcd0:	2600      	movs	r6, #0
 800bcd2:	e7de      	b.n	800bc92 <low_level_output+0x5a>
 800bcd4:	200081f0 	.word	0x200081f0

0800bcd8 <HAL_ETH_MspInit>:
{
 800bcd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcda:	4604      	mov	r4, r0
 800bcdc:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bcde:	2214      	movs	r2, #20
 800bce0:	2100      	movs	r1, #0
 800bce2:	a807      	add	r0, sp, #28
 800bce4:	f001 fe90 	bl	800da08 <memset>
  if(ethHandle->Instance==ETH)
 800bce8:	6822      	ldr	r2, [r4, #0]
 800bcea:	4b32      	ldr	r3, [pc, #200]	; (800bdb4 <HAL_ETH_MspInit+0xdc>)
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d15f      	bne.n	800bdb0 <HAL_ETH_MspInit+0xd8>
    __HAL_RCC_ETH_CLK_ENABLE();
 800bcf0:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800bcf4:	2400      	movs	r4, #0
 800bcf6:	9401      	str	r4, [sp, #4]
 800bcf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bcfa:	482f      	ldr	r0, [pc, #188]	; (800bdb8 <HAL_ETH_MspInit+0xe0>)
    __HAL_RCC_ETH_CLK_ENABLE();
 800bcfc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800bd00:	631a      	str	r2, [r3, #48]	; 0x30
 800bd02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd04:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800bd08:	9201      	str	r2, [sp, #4]
 800bd0a:	9a01      	ldr	r2, [sp, #4]
 800bd0c:	9402      	str	r4, [sp, #8]
 800bd0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd10:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800bd14:	631a      	str	r2, [r3, #48]	; 0x30
 800bd16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd18:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800bd1c:	9202      	str	r2, [sp, #8]
 800bd1e:	9a02      	ldr	r2, [sp, #8]
 800bd20:	9403      	str	r4, [sp, #12]
 800bd22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd24:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800bd28:	631a      	str	r2, [r3, #48]	; 0x30
 800bd2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd2c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800bd30:	9203      	str	r2, [sp, #12]
 800bd32:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bd34:	9404      	str	r4, [sp, #16]
 800bd36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd38:	f042 0204 	orr.w	r2, r2, #4
 800bd3c:	631a      	str	r2, [r3, #48]	; 0x30
 800bd3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd40:	f002 0204 	and.w	r2, r2, #4
 800bd44:	9204      	str	r2, [sp, #16]
 800bd46:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd48:	9405      	str	r4, [sp, #20]
 800bd4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd4c:	f042 0201 	orr.w	r2, r2, #1
 800bd50:	631a      	str	r2, [r3, #48]	; 0x30
 800bd52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd54:	f002 0201 	and.w	r2, r2, #1
 800bd58:	9205      	str	r2, [sp, #20]
 800bd5a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bd5c:	9406      	str	r4, [sp, #24]
 800bd5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd60:	f042 0202 	orr.w	r2, r2, #2
 800bd64:	631a      	str	r2, [r3, #48]	; 0x30
 800bd66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd68:	f003 0302 	and.w	r3, r3, #2
 800bd6c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd6e:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd70:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd72:	250b      	movs	r5, #11
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bd74:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd76:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800bd78:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bd7a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800bd7c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd7e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd80:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bd82:	f7f5 ff2d 	bl	8001be0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800bd86:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd88:	a907      	add	r1, sp, #28
 800bd8a:	480c      	ldr	r0, [pc, #48]	; (800bdbc <HAL_ETH_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800bd8c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd8e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd90:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd92:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd94:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd96:	f7f5 ff23 	bl	8001be0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800bd9a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd9e:	a907      	add	r1, sp, #28
 800bda0:	4807      	ldr	r0, [pc, #28]	; (800bdc0 <HAL_ETH_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800bda2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bda4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bda6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bda8:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bdaa:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bdac:	f7f5 ff18 	bl	8001be0 <HAL_GPIO_Init>
}
 800bdb0:	b00d      	add	sp, #52	; 0x34
 800bdb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdb4:	40028000 	.word	0x40028000
 800bdb8:	40020800 	.word	0x40020800
 800bdbc:	40020000 	.word	0x40020000
 800bdc0:	40020400 	.word	0x40020400

0800bdc4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800bdc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800bdc8:	4c35      	ldr	r4, [pc, #212]	; (800bea0 <ethernetif_input+0xdc>)
{
 800bdca:	9001      	str	r0, [sp, #4]
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800bdcc:	4620      	mov	r0, r4
 800bdce:	f7f5 fd1f 	bl	8001810 <HAL_ETH_GetReceivedFrame>
 800bdd2:	4605      	mov	r5, r0
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d160      	bne.n	800be9a <ethernetif_input+0xd6>
  len = heth.RxFrameInfos.length;
 800bdd8:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800bdda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bddc:	9300      	str	r3, [sp, #0]
  if (len > 0)
 800bdde:	bb19      	cbnz	r1, 800be28 <ethernetif_input+0x64>
  struct pbuf *p = NULL;
 800bde0:	2700      	movs	r7, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800bde2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800bde4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800bde6:	2200      	movs	r2, #0
 800bde8:	4282      	cmp	r2, r0
 800bdea:	d14f      	bne.n	800be8c <ethernetif_input+0xc8>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800bdec:	f241 0114 	movw	r1, #4116	; 0x1014
 800bdf0:	6823      	ldr	r3, [r4, #0]
 800bdf2:	5858      	ldr	r0, [r3, r1]
 800bdf4:	0600      	lsls	r0, r0, #24
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800bdf6:	bf42      	ittt	mi
 800bdf8:	2080      	movmi	r0, #128	; 0x80
 800bdfa:	5058      	strmi	r0, [r3, r1]
    heth.Instance->DMARPDR = 0;
 800bdfc:	f241 0108 	movwmi	r1, #4104	; 0x1008
    heth.RxFrameInfos.SegCount =0;  
 800be00:	f04f 0200 	mov.w	r2, #0
 800be04:	63a2      	str	r2, [r4, #56]	; 0x38
    heth.Instance->DMARPDR = 0;
 800be06:	bf48      	it	mi
 800be08:	505a      	strmi	r2, [r3, r1]

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800be0a:	2f00      	cmp	r7, #0
 800be0c:	d045      	beq.n	800be9a <ethernetif_input+0xd6>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800be0e:	9b01      	ldr	r3, [sp, #4]
 800be10:	9901      	ldr	r1, [sp, #4]
 800be12:	691b      	ldr	r3, [r3, #16]
 800be14:	4638      	mov	r0, r7
 800be16:	4798      	blx	r3
    
  if (err != ERR_OK)
 800be18:	2800      	cmp	r0, #0
 800be1a:	d03e      	beq.n	800be9a <ethernetif_input+0xd6>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800be1c:	4638      	mov	r0, r7
    p = NULL;    
  }
}
 800be1e:	b003      	add	sp, #12
 800be20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 800be24:	f7fb bbb6 	b.w	8007594 <pbuf_free>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800be28:	2203      	movs	r2, #3
 800be2a:	2004      	movs	r0, #4
 800be2c:	f7fb fc14 	bl	8007658 <pbuf_alloc>
  if (p != NULL)
 800be30:	4607      	mov	r7, r0
 800be32:	2800      	cmp	r0, #0
 800be34:	d0d4      	beq.n	800bde0 <ethernetif_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800be36:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800be3a:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800be3c:	f240 5bf4 	movw	fp, #1524	; 0x5f4
      byteslefttocopy = q->len;
 800be40:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800be44:	462e      	mov	r6, r5
      payloadoffset = 0;
 800be46:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800be4a:	18b5      	adds	r5, r6, r2
 800be4c:	9b00      	ldr	r3, [sp, #0]
 800be4e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800be52:	455d      	cmp	r5, fp
 800be54:	eb03 0106 	add.w	r1, r3, r6
 800be58:	d808      	bhi.n	800be6c <ethernetif_input+0xa8>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800be5a:	4448      	add	r0, r9
 800be5c:	f001 fdc9 	bl	800d9f2 <memcpy>
    for(q = p; q != NULL; q = q->next)
 800be60:	f8d8 8000 	ldr.w	r8, [r8]
 800be64:	f1b8 0f00 	cmp.w	r8, #0
 800be68:	d1ea      	bne.n	800be40 <ethernetif_input+0x7c>
 800be6a:	e7ba      	b.n	800bde2 <ethernetif_input+0x1e>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800be6c:	ebab 0606 	sub.w	r6, fp, r6
 800be70:	4632      	mov	r2, r6
 800be72:	4448      	add	r0, r9
 800be74:	f001 fdbd 	bl	800d9f2 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800be78:	f8da a00c 	ldr.w	sl, [sl, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800be7c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800be80:	9300      	str	r3, [sp, #0]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800be82:	44b1      	add	r9, r6
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800be84:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        bufferoffset = 0;
 800be88:	2600      	movs	r6, #0
 800be8a:	e7de      	b.n	800be4a <ethernetif_input+0x86>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800be8c:	6819      	ldr	r1, [r3, #0]
 800be8e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800be92:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800be94:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800be96:	3201      	adds	r2, #1
 800be98:	e7a6      	b.n	800bde8 <ethernetif_input+0x24>
}
 800be9a:	b003      	add	sp, #12
 800be9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea0:	200081f0 	.word	0x200081f0

0800bea4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800bea4:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800bea6:	4604      	mov	r4, r0
{
 800bea8:	b085      	sub	sp, #20
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800beaa:	b930      	cbnz	r0, 800beba <ethernetif_init+0x16>
 800beac:	4b3d      	ldr	r3, [pc, #244]	; (800bfa4 <ethernetif_init+0x100>)
 800beae:	493e      	ldr	r1, [pc, #248]	; (800bfa8 <ethernetif_init+0x104>)
 800beb0:	483e      	ldr	r0, [pc, #248]	; (800bfac <ethernetif_init+0x108>)
 800beb2:	f240 2206 	movw	r2, #518	; 0x206
 800beb6:	f001 fe5b 	bl	800db70 <iprintf>
  heth.Instance = ETH;
 800beba:	4d3d      	ldr	r5, [pc, #244]	; (800bfb0 <ethernetif_init+0x10c>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800bebc:	493d      	ldr	r1, [pc, #244]	; (800bfb4 <ethernetif_init+0x110>)
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800bebe:	2373      	movs	r3, #115	; 0x73
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800bec0:	2201      	movs	r2, #1
  netif->name[0] = IFNAME0;
 800bec2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800bec6:	2374      	movs	r3, #116	; 0x74
 800bec8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800becc:	e885 0006 	stmia.w	r5, {r1, r2}
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800bed0:	4b39      	ldr	r3, [pc, #228]	; (800bfb8 <ethernetif_init+0x114>)
 800bed2:	6163      	str	r3, [r4, #20]
  MACAddr[1] = 0x80;
 800bed4:	2280      	movs	r2, #128	; 0x80
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800bed6:	4b39      	ldr	r3, [pc, #228]	; (800bfbc <ethernetif_init+0x118>)
  MACAddr[1] = 0x80;
 800bed8:	f88d 2009 	strb.w	r2, [sp, #9]
  MACAddr[2] = 0xE1;
 800bedc:	22e1      	movs	r2, #225	; 0xe1
  netif->linkoutput = low_level_output;
 800bede:	61a3      	str	r3, [r4, #24]
  MACAddr[2] = 0xE1;
 800bee0:	f88d 200a 	strb.w	r2, [sp, #10]
  uint32_t regvalue = 0;
 800bee4:	2300      	movs	r3, #0
  MACAddr[5] = 0xFF;
 800bee6:	22ff      	movs	r2, #255	; 0xff
  uint32_t regvalue = 0;
 800bee8:	9301      	str	r3, [sp, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800beea:	822b      	strh	r3, [r5, #16]
  MACAddr[0] = 0x00;
 800beec:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[3] = 0x00;
 800bef0:	f88d 300b 	strb.w	r3, [sp, #11]
  MACAddr[4] = 0x00;
 800bef4:	f88d 300c 	strb.w	r3, [sp, #12]
  MACAddr[5] = 0xFF;
 800bef8:	f88d 200d 	strb.w	r2, [sp, #13]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800befc:	61ab      	str	r3, [r5, #24]
  heth.Init.MACAddr = &MACAddr[0];
 800befe:	aa02      	add	r2, sp, #8
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800bf00:	61eb      	str	r3, [r5, #28]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bf02:	4628      	mov	r0, r5
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800bf04:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.MACAddr = &MACAddr[0];
 800bf08:	616a      	str	r2, [r5, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800bf0a:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bf0c:	f7f5 fd30 	bl	8001970 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800bf10:	b928      	cbnz	r0, 800bf1e <ethernetif_init+0x7a>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800bf12:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800bf16:	f043 0304 	orr.w	r3, r3, #4
 800bf1a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800bf1e:	2304      	movs	r3, #4
 800bf20:	4a27      	ldr	r2, [pc, #156]	; (800bfc0 <ethernetif_init+0x11c>)
 800bf22:	4928      	ldr	r1, [pc, #160]	; (800bfc4 <ethernetif_init+0x120>)
 800bf24:	4822      	ldr	r0, [pc, #136]	; (800bfb0 <ethernetif_init+0x10c>)
 800bf26:	f7f5 fb85 	bl	8001634 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800bf2a:	4927      	ldr	r1, [pc, #156]	; (800bfc8 <ethernetif_init+0x124>)
 800bf2c:	4a27      	ldr	r2, [pc, #156]	; (800bfcc <ethernetif_init+0x128>)
 800bf2e:	4820      	ldr	r0, [pc, #128]	; (800bfb0 <ethernetif_init+0x10c>)
 800bf30:	2304      	movs	r3, #4
 800bf32:	f7f5 fbbc 	bl	80016ae <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bf36:	2306      	movs	r3, #6
 800bf38:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bf3c:	696b      	ldr	r3, [r5, #20]
  HAL_ETH_Start(&heth);
 800bf3e:	481c      	ldr	r0, [pc, #112]	; (800bfb0 <ethernetif_init+0x10c>)
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bf40:	781a      	ldrb	r2, [r3, #0]
 800bf42:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bf46:	785a      	ldrb	r2, [r3, #1]
 800bf48:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bf4c:	789a      	ldrb	r2, [r3, #2]
 800bf4e:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bf52:	78da      	ldrb	r2, [r3, #3]
 800bf54:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bf58:	791a      	ldrb	r2, [r3, #4]
 800bf5a:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bf5e:	795b      	ldrb	r3, [r3, #5]
 800bf60:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 800bf64:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800bf68:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bf6a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800bf6e:	f043 030a 	orr.w	r3, r3, #10
 800bf72:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_Start(&heth);
 800bf76:	f7f5 fdf7 	bl	8001b68 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800bf7a:	aa01      	add	r2, sp, #4
 800bf7c:	211d      	movs	r1, #29
 800bf7e:	480c      	ldr	r0, [pc, #48]	; (800bfb0 <ethernetif_init+0x10c>)
 800bf80:	f7f5 fc85 	bl	800188e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800bf84:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800bf86:	480a      	ldr	r0, [pc, #40]	; (800bfb0 <ethernetif_init+0x10c>)
  regvalue |= (PHY_ISFR_INT4);
 800bf88:	f042 020b 	orr.w	r2, r2, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800bf8c:	211d      	movs	r1, #29
  regvalue |= (PHY_ISFR_INT4);
 800bf8e:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800bf90:	f7f5 fcb7 	bl	8001902 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800bf94:	aa01      	add	r2, sp, #4
 800bf96:	211d      	movs	r1, #29
 800bf98:	4805      	ldr	r0, [pc, #20]	; (800bfb0 <ethernetif_init+0x10c>)
 800bf9a:	f7f5 fc78 	bl	800188e <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	b005      	add	sp, #20
 800bfa2:	bd30      	pop	{r4, r5, pc}
 800bfa4:	080121a0 	.word	0x080121a0
 800bfa8:	0800f638 	.word	0x0800f638
 800bfac:	0800f20f 	.word	0x0800f20f
 800bfb0:	200081f0 	.word	0x200081f0
 800bfb4:	40028000 	.word	0x40028000
 800bfb8:	080060fd 	.word	0x080060fd
 800bfbc:	0800bc39 	.word	0x0800bc39
 800bfc0:	20008238 	.word	0x20008238
 800bfc4:	20006920 	.word	0x20006920
 800bfc8:	20008170 	.word	0x20008170
 800bfcc:	200069a0 	.word	0x200069a0

0800bfd0 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 800bfd0:	f7f4 bfd2 	b.w	8000f78 <HAL_GetTick>

0800bfd4 <event_init>:
#include <event.h>

void event_init( event *e )
{ *e = 0; }
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	7003      	strb	r3, [r0, #0]
 800bfd8:	4770      	bx	lr

0800bfda <event_trigger>:

void event_trigger( event *e )
{ *e = 1; }
 800bfda:	2301      	movs	r3, #1
 800bfdc:	7003      	strb	r3, [r0, #0]
 800bfde:	4770      	bx	lr

0800bfe0 <event_check>:

int event_check( event *e )
{
  if ( *e )
 800bfe0:	7803      	ldrb	r3, [r0, #0]
 800bfe2:	b11b      	cbz	r3, 800bfec <event_check+0xc>
  {
    *e = 0;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	7003      	strb	r3, [r0, #0]
	return 1;
 800bfe8:	2001      	movs	r0, #1
 800bfea:	4770      	bx	lr
  }

  return 0;
 800bfec:	4618      	mov	r0, r3
}
 800bfee:	4770      	bx	lr

0800bff0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800bff0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800bff2:	4f2d      	ldr	r7, [pc, #180]	; (800c0a8 <MX_LWIP_Init+0xb8>)
  IP_ADDRESS[1] = 168;
  IP_ADDRESS[2] = 1;
  IP_ADDRESS[3] = 250;
  NETMASK_ADDRESS[0] = 255;
 800bff4:	4e2d      	ldr	r6, [pc, #180]	; (800c0ac <MX_LWIP_Init+0xbc>)
  NETMASK_ADDRESS[1] = 255;
  NETMASK_ADDRESS[2] = 255;
  NETMASK_ADDRESS[3] = 0;
  GATEWAY_ADDRESS[0] = 192;
 800bff6:	4d2e      	ldr	r5, [pc, #184]	; (800c0b0 <MX_LWIP_Init+0xc0>)
  IP_ADDRESS[3] = 250;
 800bff8:	23fa      	movs	r3, #250	; 0xfa
 800bffa:	70fb      	strb	r3, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 800bffc:	23ff      	movs	r3, #255	; 0xff
{
 800bffe:	b085      	sub	sp, #20
  IP_ADDRESS[0] = 192;
 800c000:	20c0      	movs	r0, #192	; 0xc0
  IP_ADDRESS[1] = 168;
 800c002:	21a8      	movs	r1, #168	; 0xa8
  IP_ADDRESS[2] = 1;
 800c004:	2201      	movs	r2, #1
  NETMASK_ADDRESS[0] = 255;
 800c006:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 800c008:	7073      	strb	r3, [r6, #1]
  NETMASK_ADDRESS[2] = 255;
 800c00a:	70b3      	strb	r3, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 800c00c:	2400      	movs	r4, #0
  GATEWAY_ADDRESS[1] = 168;
  GATEWAY_ADDRESS[2] = 1;
  GATEWAY_ADDRESS[3] = 254;
 800c00e:	23fe      	movs	r3, #254	; 0xfe
  GATEWAY_ADDRESS[0] = 192;
 800c010:	7028      	strb	r0, [r5, #0]
  GATEWAY_ADDRESS[1] = 168;
 800c012:	7069      	strb	r1, [r5, #1]
  GATEWAY_ADDRESS[2] = 1;
 800c014:	70aa      	strb	r2, [r5, #2]
  GATEWAY_ADDRESS[3] = 254;
 800c016:	70eb      	strb	r3, [r5, #3]
  IP_ADDRESS[0] = 192;
 800c018:	7038      	strb	r0, [r7, #0]
  IP_ADDRESS[1] = 168;
 800c01a:	7079      	strb	r1, [r7, #1]
  IP_ADDRESS[2] = 1;
 800c01c:	70ba      	strb	r2, [r7, #2]
  NETMASK_ADDRESS[3] = 0;
 800c01e:	70f4      	strb	r4, [r6, #3]
  
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800c020:	f7f9 fd5c 	bl	8005adc <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c024:	787b      	ldrb	r3, [r7, #1]
 800c026:	783a      	ldrb	r2, [r7, #0]
 800c028:	4922      	ldr	r1, [pc, #136]	; (800c0b4 <MX_LWIP_Init+0xc4>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c02a:	7868      	ldrb	r0, [r5, #1]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c02c:	041b      	lsls	r3, r3, #16
 800c02e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c032:	78fa      	ldrb	r2, [r7, #3]
 800c034:	4313      	orrs	r3, r2
 800c036:	78ba      	ldrb	r2, [r7, #2]
 800c038:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c03c:	ba1b      	rev	r3, r3
 800c03e:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800c040:	7873      	ldrb	r3, [r6, #1]
 800c042:	7832      	ldrb	r2, [r6, #0]
 800c044:	041b      	lsls	r3, r3, #16
 800c046:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c04a:	78f2      	ldrb	r2, [r6, #3]
 800c04c:	4313      	orrs	r3, r2
 800c04e:	78b2      	ldrb	r2, [r6, #2]
 800c050:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c054:	4a18      	ldr	r2, [pc, #96]	; (800c0b8 <MX_LWIP_Init+0xc8>)
 800c056:	ba1b      	rev	r3, r3
 800c058:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c05a:	782b      	ldrb	r3, [r5, #0]
 800c05c:	0400      	lsls	r0, r0, #16
 800c05e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800c062:	78eb      	ldrb	r3, [r5, #3]
 800c064:	4318      	orrs	r0, r3
 800c066:	78ab      	ldrb	r3, [r5, #2]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800c068:	4d14      	ldr	r5, [pc, #80]	; (800c0bc <MX_LWIP_Init+0xcc>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c06a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800c06e:	4b14      	ldr	r3, [pc, #80]	; (800c0c0 <MX_LWIP_Init+0xd0>)
 800c070:	ba00      	rev	r0, r0
 800c072:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800c074:	4813      	ldr	r0, [pc, #76]	; (800c0c4 <MX_LWIP_Init+0xd4>)
 800c076:	9002      	str	r0, [sp, #8]
 800c078:	4813      	ldr	r0, [pc, #76]	; (800c0c8 <MX_LWIP_Init+0xd8>)
 800c07a:	9001      	str	r0, [sp, #4]
 800c07c:	9400      	str	r4, [sp, #0]
 800c07e:	4628      	mov	r0, r5
 800c080:	f7fb f986 	bl	8007390 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c084:	4628      	mov	r0, r5
 800c086:	f7fb f9c1 	bl	800740c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800c08a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800c08e:	075b      	lsls	r3, r3, #29
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800c090:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 800c092:	d504      	bpl.n	800c09e <MX_LWIP_Init+0xae>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c094:	b005      	add	sp, #20
 800c096:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 800c09a:	f7fb b9bd 	b.w	8007418 <netif_set_up>
}
 800c09e:	b005      	add	sp, #20
 800c0a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 800c0a4:	f7fb b9c7 	b.w	8007436 <netif_set_down>
 800c0a8:	20009a44 	.word	0x20009a44
 800c0ac:	20009a40 	.word	0x20009a40
 800c0b0:	20009a08 	.word	0x20009a08
 800c0b4:	20009a3c 	.word	0x20009a3c
 800c0b8:	20009a48 	.word	0x20009a48
 800c0bc:	20009a0c 	.word	0x20009a0c
 800c0c0:	20009a4c 	.word	0x20009a4c
 800c0c4:	0800b029 	.word	0x0800b029
 800c0c8:	0800bea5 	.word	0x0800bea5

0800c0cc <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 800c0cc:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800c0ce:	4803      	ldr	r0, [pc, #12]	; (800c0dc <MX_LWIP_Process+0x10>)
 800c0d0:	f7ff fe78 	bl	800bdc4 <ethernetif_input>
  /* Handle timeouts */
  sys_check_timeouts();

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800c0d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_check_timeouts();
 800c0d8:	f7fe bec6 	b.w	800ae68 <sys_check_timeouts>
 800c0dc:	20009a0c 	.word	0x20009a0c

0800c0e0 <bumper_game_register>:

#if 1
int bumper_game_register( uint8_t id, const char *name )
{
	return 1;
}
 800c0e0:	2001      	movs	r0, #1
 800c0e2:	4770      	bx	lr

0800c0e4 <bumper_game_acceleration>:

int bumper_game_acceleration( uint8_t id, int8_t ax, int8_t ay, int8_t az )
{
	return 1;
}
 800c0e4:	2001      	movs	r0, #1
 800c0e6:	4770      	bx	lr

0800c0e8 <bumper_signal_error>:
{
 800c0e8:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin( LD3_GPIO_Port, LD5_Pin, 1 ); // RED
 800c0ea:	2201      	movs	r2, #1
{
 800c0ec:	4604      	mov	r4, r0
	HAL_GPIO_WritePin( LD3_GPIO_Port, LD5_Pin, 1 ); // RED
 800c0ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c0f2:	4805      	ldr	r0, [pc, #20]	; (800c108 <bumper_signal_error+0x20>)
 800c0f4:	f7f5 fe54 	bl	8001da0 <HAL_GPIO_WritePin>
	sprintf( ( char * )radio_log, "ERROR %d", x );
 800c0f8:	4622      	mov	r2, r4
 800c0fa:	4904      	ldr	r1, [pc, #16]	; (800c10c <bumper_signal_error+0x24>)
 800c0fc:	4804      	ldr	r0, [pc, #16]	; (800c110 <bumper_signal_error+0x28>)
}
 800c0fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sprintf( ( char * )radio_log, "ERROR %d", x );
 800c102:	f001 bd5d 	b.w	800dbc0 <siprintf>
 800c106:	bf00      	nop
 800c108:	40020c00 	.word	0x40020c00
 800c10c:	08012742 	.word	0x08012742
 800c110:	20005070 	.word	0x20005070

0800c114 <bumper_game_new_player>:
{
 800c114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int len = strlen( json_orders );
 800c116:	4c0b      	ldr	r4, [pc, #44]	; (800c144 <bumper_game_new_player+0x30>)
{
 800c118:	4605      	mov	r5, r0
	int len = strlen( json_orders );
 800c11a:	4620      	mov	r0, r4
{
 800c11c:	460e      	mov	r6, r1
 800c11e:	4617      	mov	r7, r2
	int len = strlen( json_orders );
 800c120:	f7f4 f860 	bl	80001e4 <strlen>
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c124:	f5b0 7fe1 	cmp.w	r0, #450	; 0x1c2
 800c128:	dc09      	bgt.n	800c13e <bumper_game_new_player+0x2a>
	sprintf( json_orders + len, "{\"new_player\":[{\"i\":%d,\"name\":\"%s\",\"color\": \"#%06X\"}]},", ( unsigned int )id, name, ( unsigned int )color );
 800c12a:	9700      	str	r7, [sp, #0]
 800c12c:	4633      	mov	r3, r6
 800c12e:	462a      	mov	r2, r5
 800c130:	4905      	ldr	r1, [pc, #20]	; (800c148 <bumper_game_new_player+0x34>)
 800c132:	4420      	add	r0, r4
 800c134:	f001 fd44 	bl	800dbc0 <siprintf>
	return 1;
 800c138:	2001      	movs	r0, #1
}
 800c13a:	b003      	add	sp, #12
 800c13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c13e:	2000      	movs	r0, #0
 800c140:	e7fb      	b.n	800c13a <bumper_game_new_player+0x26>
 800c142:	bf00      	nop
 800c144:	20009b6c 	.word	0x20009b6c
 800c148:	080125e4 	.word	0x080125e4

0800c14c <bumper_game_player_move>:
{
 800c14c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int len = strlen( json_orders );
 800c150:	4d0f      	ldr	r5, [pc, #60]	; (800c190 <bumper_game_player_move+0x44>)
{
 800c152:	b085      	sub	sp, #20
 800c154:	4606      	mov	r6, r0
	int len = strlen( json_orders );
 800c156:	4628      	mov	r0, r5
{
 800c158:	460f      	mov	r7, r1
 800c15a:	4690      	mov	r8, r2
 800c15c:	4699      	mov	r9, r3
	int len = strlen( json_orders );
 800c15e:	f7f4 f841 	bl	80001e4 <strlen>
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c162:	f5b0 7fe1 	cmp.w	r0, #450	; 0x1c2
 800c166:	f04f 0400 	mov.w	r4, #0
 800c16a:	dc0e      	bgt.n	800c18a <bumper_game_player_move+0x3e>
	sprintf( json_orders + len, "{\"move\":[{\"i\":%d,\"x\":%d,\"y\":%d,\"a\":%d,\"s\":%d}]},", ( unsigned int )id, ( unsigned int )x, ( unsigned int )y, 0, ( unsigned int )s );
 800c16c:	f8cd 9008 	str.w	r9, [sp, #8]
 800c170:	9401      	str	r4, [sp, #4]
 800c172:	f8cd 8000 	str.w	r8, [sp]
 800c176:	463b      	mov	r3, r7
 800c178:	4632      	mov	r2, r6
 800c17a:	4906      	ldr	r1, [pc, #24]	; (800c194 <bumper_game_player_move+0x48>)
 800c17c:	4428      	add	r0, r5
 800c17e:	f001 fd1f 	bl	800dbc0 <siprintf>
	return 1;
 800c182:	2001      	movs	r0, #1
}
 800c184:	b005      	add	sp, #20
 800c186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c18a:	4620      	mov	r0, r4
 800c18c:	e7fa      	b.n	800c184 <bumper_game_player_move+0x38>
 800c18e:	bf00      	nop
 800c190:	20009b6c 	.word	0x20009b6c
 800c194:	0801261c 	.word	0x0801261c

0800c198 <bumper_game_print>:
{
 800c198:	b538      	push	{r3, r4, r5, lr}
	int len = strlen( json_orders );
 800c19a:	4c08      	ldr	r4, [pc, #32]	; (800c1bc <bumper_game_print+0x24>)
{
 800c19c:	4605      	mov	r5, r0
	int len = strlen( json_orders );
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f7f4 f820 	bl	80001e4 <strlen>
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c1a4:	f5b0 7fe1 	cmp.w	r0, #450	; 0x1c2
 800c1a8:	dc06      	bgt.n	800c1b8 <bumper_game_print+0x20>
	sprintf( json_orders + len, "{\"display\":[{\"id\":\"score\",\"x\":10,\"y\":-10,\"content\":\"%s\"}]},", msg );
 800c1aa:	462a      	mov	r2, r5
 800c1ac:	4904      	ldr	r1, [pc, #16]	; (800c1c0 <bumper_game_print+0x28>)
 800c1ae:	4420      	add	r0, r4
 800c1b0:	f001 fd06 	bl	800dbc0 <siprintf>
	return 1;
 800c1b4:	2001      	movs	r0, #1
 800c1b6:	bd38      	pop	{r3, r4, r5, pc}
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c1b8:	2000      	movs	r0, #0
}
 800c1ba:	bd38      	pop	{r3, r4, r5, pc}
 800c1bc:	20009b6c 	.word	0x20009b6c
 800c1c0:	0801264d 	.word	0x0801264d

0800c1c4 <bumper_game_step>:
{
 800c1c4:	b570      	push	{r4, r5, r6, lr}
 800c1c6:	4606      	mov	r6, r0
 800c1c8:	b086      	sub	sp, #24
	int len = strlen( json_orders );
 800c1ca:	481e      	ldr	r0, [pc, #120]	; (800c244 <bumper_game_step+0x80>)
{
 800c1cc:	460c      	mov	r4, r1
	int len = strlen( json_orders );
 800c1ce:	f7f4 f809 	bl	80001e4 <strlen>
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c1d2:	f5b0 7fe1 	cmp.w	r0, #450	; 0x1c2
	int len = strlen( json_orders );
 800c1d6:	4605      	mov	r5, r0
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c1d8:	dc31      	bgt.n	800c23e <bumper_game_step+0x7a>
	switch ( step )
 800c1da:	2e03      	cmp	r6, #3
 800c1dc:	d82d      	bhi.n	800c23a <bumper_game_step+0x76>
 800c1de:	e8df f006 	tbb	[pc, r6]
 800c1e2:	0d02      	.short	0x0d02
 800c1e4:	2a1c      	.short	0x2a1c
		switch ( param )
 800c1e6:	2c04      	cmp	r4, #4
 800c1e8:	d815      	bhi.n	800c216 <bumper_game_step+0x52>
 800c1ea:	e8df f004 	tbb	[pc, r4]
 800c1ee:	0c03      	.short	0x0c03
 800c1f0:	100e      	.short	0x100e
 800c1f2:	12          	.byte	0x12
 800c1f3:	00          	.byte	0x00
			strcpy( msg, "Internal Error" ); break;
 800c1f4:	4914      	ldr	r1, [pc, #80]	; (800c248 <bumper_game_step+0x84>)
			strcpy( msg, "param ???" ); break;
 800c1f6:	a801      	add	r0, sp, #4
 800c1f8:	f001 fd23 	bl	800dc42 <strcpy>
		strcpy( msg, "Game Started !" ); break;
 800c1fc:	4913      	ldr	r1, [pc, #76]	; (800c24c <bumper_game_step+0x88>)
		strcpy( msg, "step ???" ); break;
 800c1fe:	a801      	add	r0, sp, #4
 800c200:	f001 fd1f 	bl	800dc42 <strcpy>
 800c204:	e00e      	b.n	800c224 <bumper_game_step+0x60>
			strcpy( msg, "OK registered" ); break;
 800c206:	4912      	ldr	r1, [pc, #72]	; (800c250 <bumper_game_step+0x8c>)
 800c208:	e7f5      	b.n	800c1f6 <bumper_game_step+0x32>
			strcpy( msg, "OK already" ); break;
 800c20a:	4912      	ldr	r1, [pc, #72]	; (800c254 <bumper_game_step+0x90>)
 800c20c:	e7f3      	b.n	800c1f6 <bumper_game_step+0x32>
			strcpy( msg, "Too many players" ); break;
 800c20e:	4912      	ldr	r1, [pc, #72]	; (800c258 <bumper_game_step+0x94>)
 800c210:	e7f1      	b.n	800c1f6 <bumper_game_step+0x32>
			strcpy( msg, "Too late" ); break;
 800c212:	4912      	ldr	r1, [pc, #72]	; (800c25c <bumper_game_step+0x98>)
 800c214:	e7ef      	b.n	800c1f6 <bumper_game_step+0x32>
			strcpy( msg, "param ???" ); break;
 800c216:	4912      	ldr	r1, [pc, #72]	; (800c260 <bumper_game_step+0x9c>)
 800c218:	e7ed      	b.n	800c1f6 <bumper_game_step+0x32>
		sprintf( msg, "The winner is %d", param ); break;
 800c21a:	4622      	mov	r2, r4
 800c21c:	4911      	ldr	r1, [pc, #68]	; (800c264 <bumper_game_step+0xa0>)
 800c21e:	a801      	add	r0, sp, #4
 800c220:	f001 fcce 	bl	800dbc0 <siprintf>
	sprintf( json_orders + len, "{\"display\":[{\"id\":\"step\",\"x\":10,\"y\":-5,\"content\":\"%s\"}]},", msg );
 800c224:	4807      	ldr	r0, [pc, #28]	; (800c244 <bumper_game_step+0x80>)
 800c226:	4910      	ldr	r1, [pc, #64]	; (800c268 <bumper_game_step+0xa4>)
 800c228:	aa01      	add	r2, sp, #4
 800c22a:	4428      	add	r0, r5
 800c22c:	f001 fcc8 	bl	800dbc0 <siprintf>
	return 1;
 800c230:	2001      	movs	r0, #1
}
 800c232:	b006      	add	sp, #24
 800c234:	bd70      	pop	{r4, r5, r6, pc}
		strcpy( msg, "Game Over" ); break;
 800c236:	490d      	ldr	r1, [pc, #52]	; (800c26c <bumper_game_step+0xa8>)
 800c238:	e7e1      	b.n	800c1fe <bumper_game_step+0x3a>
		strcpy( msg, "step ???" ); break;
 800c23a:	490d      	ldr	r1, [pc, #52]	; (800c270 <bumper_game_step+0xac>)
 800c23c:	e7df      	b.n	800c1fe <bumper_game_step+0x3a>
	if ( len > JSON_ORDERS_SIZE - 50 ) return 0;
 800c23e:	2000      	movs	r0, #0
 800c240:	e7f7      	b.n	800c232 <bumper_game_step+0x6e>
 800c242:	bf00      	nop
 800c244:	20009b6c 	.word	0x20009b6c
 800c248:	08012689 	.word	0x08012689
 800c24c:	080126d5 	.word	0x080126d5
 800c250:	08012698 	.word	0x08012698
 800c254:	080126a6 	.word	0x080126a6
 800c258:	080126b1 	.word	0x080126b1
 800c25c:	080126c2 	.word	0x080126c2
 800c260:	080126cb 	.word	0x080126cb
 800c264:	080126e4 	.word	0x080126e4
 800c268:	08012708 	.word	0x08012708
 800c26c:	080126f5 	.word	0x080126f5
 800c270:	080126ff 	.word	0x080126ff

0800c274 <bumper_utility_random>:
#endif


int bumper_utility_random( uint32_t *value, uint32_t max )
{
 800c274:	b538      	push	{r3, r4, r5, lr}
 800c276:	4604      	mov	r4, r0
 800c278:	460d      	mov	r5, r1
  if ( HAL_RNG_GenerateRandomNumber( &hrng, value ) != HAL_OK ) return 0;
 800c27a:	4601      	mov	r1, r0
 800c27c:	4806      	ldr	r0, [pc, #24]	; (800c298 <bumper_utility_random+0x24>)
 800c27e:	f7f6 fd15 	bl	8002cac <HAL_RNG_GenerateRandomNumber>
 800c282:	b938      	cbnz	r0, 800c294 <bumper_utility_random+0x20>

#if 0
  uint32_t zones = 0xFFFFFFFF / max;
  *value /= zones;
#else
  *value %= max;
 800c284:	6823      	ldr	r3, [r4, #0]
 800c286:	fbb3 f1f5 	udiv	r1, r3, r5
 800c28a:	fb05 3111 	mls	r1, r5, r1, r3
 800c28e:	6021      	str	r1, [r4, #0]
#endif

  return 1;
 800c290:	2001      	movs	r0, #1
 800c292:	bd38      	pop	{r3, r4, r5, pc}
  if ( HAL_RNG_GenerateRandomNumber( &hrng, value ) != HAL_OK ) return 0;
 800c294:	2000      	movs	r0, #0
}
 800c296:	bd38      	pop	{r3, r4, r5, pc}
 800c298:	20009dc8 	.word	0x20009dc8

0800c29c <HAL_UART_RxCpltCallback>:
  if ( huart->Instance == USART6 )
 800c29c:	6803      	ldr	r3, [r0, #0]
 800c29e:	4a15      	ldr	r2, [pc, #84]	; (800c2f4 <HAL_UART_RxCpltCallback+0x58>)
 800c2a0:	4293      	cmp	r3, r2
{
 800c2a2:	b510      	push	{r4, lr}
  if ( huart->Instance == USART6 )
 800c2a4:	d11a      	bne.n	800c2dc <HAL_UART_RxCpltCallback+0x40>
	  switch ( recv6_car )
 800c2a6:	4b14      	ldr	r3, [pc, #80]	; (800c2f8 <HAL_UART_RxCpltCallback+0x5c>)
 800c2a8:	781a      	ldrb	r2, [r3, #0]
 800c2aa:	4b14      	ldr	r3, [pc, #80]	; (800c2fc <HAL_UART_RxCpltCallback+0x60>)
 800c2ac:	2a71      	cmp	r2, #113	; 0x71
 800c2ae:	d00b      	beq.n	800c2c8 <HAL_UART_RxCpltCallback+0x2c>
 800c2b0:	2a73      	cmp	r2, #115	; 0x73
 800c2b2:	d00f      	beq.n	800c2d4 <HAL_UART_RxCpltCallback+0x38>
	  __HAL_TIM_SET_COUNTER( &htim2, 0 );
 800c2b4:	681b      	ldr	r3, [r3, #0]
	  HAL_UART_Receive_IT( &huart6, &recv6_car, 1 );
 800c2b6:	4910      	ldr	r1, [pc, #64]	; (800c2f8 <HAL_UART_RxCpltCallback+0x5c>)
 800c2b8:	4811      	ldr	r0, [pc, #68]	; (800c300 <HAL_UART_RxCpltCallback+0x64>)
	  __HAL_TIM_SET_COUNTER( &htim2, 0 );
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_UART_Receive_IT( &huart6, &recv6_car, 1 );
 800c2be:	2201      	movs	r2, #1
}
 800c2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Receive_IT( &huart3, &recv3_car, 1 );
 800c2c4:	f7f7 ba71 	b.w	80037aa <HAL_UART_Receive_IT>
			__HAL_TIM_SET_AUTORELOAD( &htim2, 499 );
 800c2c8:	6819      	ldr	r1, [r3, #0]
 800c2ca:	f240 12f3 	movw	r2, #499	; 0x1f3
			__HAL_TIM_SET_AUTORELOAD( &htim2, 4999 );
 800c2ce:	62ca      	str	r2, [r1, #44]	; 0x2c
 800c2d0:	60da      	str	r2, [r3, #12]
		  break;
 800c2d2:	e7ef      	b.n	800c2b4 <HAL_UART_RxCpltCallback+0x18>
			__HAL_TIM_SET_AUTORELOAD( &htim2, 4999 );
 800c2d4:	6819      	ldr	r1, [r3, #0]
 800c2d6:	f241 3287 	movw	r2, #4999	; 0x1387
 800c2da:	e7f8      	b.n	800c2ce <HAL_UART_RxCpltCallback+0x32>
  else if ( huart->Instance == USART3 )
 800c2dc:	4a09      	ldr	r2, [pc, #36]	; (800c304 <HAL_UART_RxCpltCallback+0x68>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d107      	bne.n	800c2f2 <HAL_UART_RxCpltCallback+0x56>
    bum_notify_recv( recv3_car );
 800c2e2:	4c09      	ldr	r4, [pc, #36]	; (800c308 <HAL_UART_RxCpltCallback+0x6c>)
 800c2e4:	7820      	ldrb	r0, [r4, #0]
 800c2e6:	f7fe ff23 	bl	800b130 <bum_notify_recv>
    HAL_UART_Receive_IT( &huart3, &recv3_car, 1 );
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	4621      	mov	r1, r4
 800c2ee:	4807      	ldr	r0, [pc, #28]	; (800c30c <HAL_UART_RxCpltCallback+0x70>)
 800c2f0:	e7e6      	b.n	800c2c0 <HAL_UART_RxCpltCallback+0x24>
 800c2f2:	bd10      	pop	{r4, pc}
 800c2f4:	40011400 	.word	0x40011400
 800c2f8:	20000e65 	.word	0x20000e65
 800c2fc:	20009e18 	.word	0x20009e18
 800c300:	20009dd8 	.word	0x20009dd8
 800c304:	40004800 	.word	0x40004800
 800c308:	20000e64 	.word	0x20000e64
 800c30c:	20009a50 	.word	0x20009a50

0800c310 <_write>:
{
 800c310:	b510      	push	{r4, lr}
  HAL_UART_Transmit( &huart6, ( uint8_t * )ptr, len, 1000 );
 800c312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 800c316:	4614      	mov	r4, r2
  HAL_UART_Transmit( &huart6, ( uint8_t * )ptr, len, 1000 );
 800c318:	4802      	ldr	r0, [pc, #8]	; (800c324 <_write+0x14>)
 800c31a:	b292      	uxth	r2, r2
 800c31c:	f7f7 f9e8 	bl	80036f0 <HAL_UART_Transmit>
}
 800c320:	4620      	mov	r0, r4
 800c322:	bd10      	pop	{r4, pc}
 800c324:	20009dd8 	.word	0x20009dd8

0800c328 <bumper_init_player>:
  bum_player.game_step = bumper_game_step;
 800c328:	4806      	ldr	r0, [pc, #24]	; (800c344 <bumper_init_player+0x1c>)
 800c32a:	4b07      	ldr	r3, [pc, #28]	; (800c348 <bumper_init_player+0x20>)
 800c32c:	6003      	str	r3, [r0, #0]
  bum_player.game_new_player = bumper_game_new_player;
 800c32e:	4b07      	ldr	r3, [pc, #28]	; (800c34c <bumper_init_player+0x24>)
 800c330:	6043      	str	r3, [r0, #4]
  bum_player.game_player_move = bumper_game_player_move;
 800c332:	4b07      	ldr	r3, [pc, #28]	; (800c350 <bumper_init_player+0x28>)
 800c334:	6083      	str	r3, [r0, #8]
  bum_player.game_print = bumper_game_print;
 800c336:	4b07      	ldr	r3, [pc, #28]	; (800c354 <bumper_init_player+0x2c>)
 800c338:	60c3      	str	r3, [r0, #12]
  bum_player.error = bumper_signal_error;
 800c33a:	4b07      	ldr	r3, [pc, #28]	; (800c358 <bumper_init_player+0x30>)
 800c33c:	6103      	str	r3, [r0, #16]
  bum_init_player( &bum_player );
 800c33e:	f7fe befb 	b.w	800b138 <bum_init_player>
 800c342:	bf00      	nop
 800c344:	20009e58 	.word	0x20009e58
 800c348:	0800c1c5 	.word	0x0800c1c5
 800c34c:	0800c115 	.word	0x0800c115
 800c350:	0800c14d 	.word	0x0800c14d
 800c354:	0800c199 	.word	0x0800c199
 800c358:	0800c0e9 	.word	0x0800c0e9

0800c35c <bumper_init_referee>:


void bumper_init_referee()
{
#if 1
  bum_referee.game_register = bumper_game_register;
 800c35c:	4805      	ldr	r0, [pc, #20]	; (800c374 <bumper_init_referee+0x18>)
 800c35e:	4b06      	ldr	r3, [pc, #24]	; (800c378 <bumper_init_referee+0x1c>)
 800c360:	6003      	str	r3, [r0, #0]
  bum_referee.game_acceleration = bumper_game_acceleration;
 800c362:	4b06      	ldr	r3, [pc, #24]	; (800c37c <bumper_init_referee+0x20>)
 800c364:	6043      	str	r3, [r0, #4]

  bum_referee.utility_random = bumper_utility_random;
 800c366:	4b06      	ldr	r3, [pc, #24]	; (800c380 <bumper_init_referee+0x24>)
 800c368:	6083      	str	r3, [r0, #8]
#endif
  bum_referee.error = bumper_signal_error;
 800c36a:	4b06      	ldr	r3, [pc, #24]	; (800c384 <bumper_init_referee+0x28>)
 800c36c:	60c3      	str	r3, [r0, #12]

  bum_init_referee( &bum_referee );
 800c36e:	f7ff b883 	b.w	800b478 <bum_init_referee>
 800c372:	bf00      	nop
 800c374:	20009d78 	.word	0x20009d78
 800c378:	0800c0e1 	.word	0x0800c0e1
 800c37c:	0800c0e5 	.word	0x0800c0e5
 800c380:	0800c275 	.word	0x0800c275
 800c384:	0800c0e9 	.word	0x0800c0e9

0800c388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c388:	b530      	push	{r4, r5, lr}
 800c38a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c38c:	2230      	movs	r2, #48	; 0x30
 800c38e:	2100      	movs	r1, #0
 800c390:	a808      	add	r0, sp, #32
 800c392:	f001 fb39 	bl	800da08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c396:	2100      	movs	r1, #0
 800c398:	2214      	movs	r2, #20
 800c39a:	a803      	add	r0, sp, #12
 800c39c:	f001 fb34 	bl	800da08 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c3a0:	2400      	movs	r4, #0
 800c3a2:	4b1d      	ldr	r3, [pc, #116]	; (800c418 <SystemClock_Config+0x90>)
 800c3a4:	9401      	str	r4, [sp, #4]
 800c3a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c3a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c3ac:	641a      	str	r2, [r3, #64]	; 0x40
 800c3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3b4:	9301      	str	r3, [sp, #4]
 800c3b6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c3b8:	4b18      	ldr	r3, [pc, #96]	; (800c41c <SystemClock_Config+0x94>)
 800c3ba:	9402      	str	r4, [sp, #8]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3c2:	601a      	str	r2, [r3, #0]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3ca:	9302      	str	r3, [sp, #8]
 800c3cc:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c3d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c3d6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c3d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c3dc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800c3de:	2308      	movs	r3, #8
 800c3e0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800c3e2:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c3e6:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 800c3e8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c3ea:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800c3ec:	2307      	movs	r3, #7
 800c3ee:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c3f0:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c3f2:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c3f4:	f7f6 f9d2 	bl	800279c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c3f8:	230f      	movs	r3, #15
 800c3fa:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c3fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c400:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c402:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c408:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c40a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c40c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c40e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c410:	f7f6 fb74 	bl	8002afc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800c414:	b015      	add	sp, #84	; 0x54
 800c416:	bd30      	pop	{r4, r5, pc}
 800c418:	40023800 	.word	0x40023800
 800c41c:	40007000 	.word	0x40007000

0800c420 <main>:
{
 800c420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  radio_log[ 0 ] = 0;
 800c424:	4bb0      	ldr	r3, [pc, #704]	; (800c6e8 <main+0x2c8>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c426:	4fb1      	ldr	r7, [pc, #708]	; (800c6ec <main+0x2cc>)
  hdac.Instance = DAC;
 800c428:	f8df a300 	ldr.w	sl, [pc, #768]	; 800c72c <main+0x30c>
{
 800c42c:	b095      	sub	sp, #84	; 0x54
  radio_log[ 0 ] = 0;
 800c42e:	2400      	movs	r4, #0
 800c430:	701c      	strb	r4, [r3, #0]
  HAL_Init();
 800c432:	f7f4 fd7b 	bl	8000f2c <HAL_Init>
  SystemClock_Config();
 800c436:	f7ff ffa7 	bl	800c388 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c43a:	2214      	movs	r2, #20
 800c43c:	4621      	mov	r1, r4
 800c43e:	a80d      	add	r0, sp, #52	; 0x34
 800c440:	f001 fae2 	bl	800da08 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c444:	4baa      	ldr	r3, [pc, #680]	; (800c6f0 <main+0x2d0>)
 800c446:	9403      	str	r4, [sp, #12]
 800c448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800c44a:	48aa      	ldr	r0, [pc, #680]	; (800c6f4 <main+0x2d4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c44c:	f042 0210 	orr.w	r2, r2, #16
 800c450:	631a      	str	r2, [r3, #48]	; 0x30
 800c452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c454:	f002 0210 	and.w	r2, r2, #16
 800c458:	9203      	str	r2, [sp, #12]
 800c45a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c45c:	9404      	str	r4, [sp, #16]
 800c45e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c460:	f042 0204 	orr.w	r2, r2, #4
 800c464:	631a      	str	r2, [r3, #48]	; 0x30
 800c466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c468:	f002 0204 	and.w	r2, r2, #4
 800c46c:	9204      	str	r2, [sp, #16]
 800c46e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c470:	9405      	str	r4, [sp, #20]
 800c472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c474:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c478:	631a      	str	r2, [r3, #48]	; 0x30
 800c47a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c47c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c480:	9205      	str	r2, [sp, #20]
 800c482:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c484:	9406      	str	r4, [sp, #24]
 800c486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c488:	f042 0201 	orr.w	r2, r2, #1
 800c48c:	631a      	str	r2, [r3, #48]	; 0x30
 800c48e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c490:	f002 0201 	and.w	r2, r2, #1
 800c494:	9206      	str	r2, [sp, #24]
 800c496:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c498:	9407      	str	r4, [sp, #28]
 800c49a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c49c:	f042 0202 	orr.w	r2, r2, #2
 800c4a0:	631a      	str	r2, [r3, #48]	; 0x30
 800c4a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4a4:	f002 0202 	and.w	r2, r2, #2
 800c4a8:	9207      	str	r2, [sp, #28]
 800c4aa:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c4ac:	9408      	str	r4, [sp, #32]
 800c4ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4b0:	f042 0208 	orr.w	r2, r2, #8
 800c4b4:	631a      	str	r2, [r3, #48]	; 0x30
 800c4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b8:	f003 0308 	and.w	r3, r3, #8
 800c4bc:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800c4be:	4622      	mov	r2, r4
 800c4c0:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c4c2:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800c4c4:	f7f5 fc6c 	bl	8001da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	4611      	mov	r1, r2
 800c4cc:	488a      	ldr	r0, [pc, #552]	; (800c6f8 <main+0x2d8>)
 800c4ce:	f7f5 fc67 	bl	8001da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800c4d2:	4622      	mov	r2, r4
 800c4d4:	f24f 0110 	movw	r1, #61456	; 0xf010
 800c4d8:	4888      	ldr	r0, [pc, #544]	; (800c6fc <main+0x2dc>)
 800c4da:	f7f5 fc61 	bl	8001da0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c4de:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800c4e2:	2508      	movs	r5, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800c4e4:	a90d      	add	r1, sp, #52	; 0x34
 800c4e6:	4883      	ldr	r0, [pc, #524]	; (800c6f4 <main+0x2d4>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800c4e8:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c4ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4ee:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c4f0:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800c4f2:	f7f5 fb75 	bl	8001be0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B_COORDINATOR_Pin;
 800c4f6:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(B_COORDINATOR_GPIO_Port, &GPIO_InitStruct);
 800c4f8:	a90d      	add	r1, sp, #52	; 0x34
 800c4fa:	487e      	ldr	r0, [pc, #504]	; (800c6f4 <main+0x2d4>)
  GPIO_InitStruct.Pin = B_COORDINATOR_Pin;
 800c4fc:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c4fe:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c500:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(B_COORDINATOR_GPIO_Port, &GPIO_InitStruct);
 800c502:	f7f5 fb6d 	bl	8001be0 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800c506:	a90d      	add	r1, sp, #52	; 0x34
 800c508:	487b      	ldr	r0, [pc, #492]	; (800c6f8 <main+0x2d8>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800c50a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c50e:	2605      	movs	r6, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c510:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c514:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c516:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800c518:	f7f5 fb62 	bl	8001be0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800c51c:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800c51e:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c520:	2502      	movs	r5, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800c522:	4875      	ldr	r0, [pc, #468]	; (800c6f8 <main+0x2d8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c524:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c526:	9611      	str	r6, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c528:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c52a:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800c52c:	f7f5 fb58 	bl	8001be0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800c530:	a90d      	add	r1, sp, #52	; 0x34
 800c532:	4873      	ldr	r0, [pc, #460]	; (800c700 <main+0x2e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c534:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = B1_Pin;
 800c536:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c53a:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800c53c:	f7f5 fb50 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin;
 800c540:	2360      	movs	r3, #96	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c542:	a90d      	add	r1, sp, #52	; 0x34
 800c544:	486e      	ldr	r0, [pc, #440]	; (800c700 <main+0x2e0>)
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin;
 800c546:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c548:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c54a:	9611      	str	r6, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c54c:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c54e:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c550:	f7f5 fb46 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800c554:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800c556:	a90d      	add	r1, sp, #52	; 0x34
 800c558:	486a      	ldr	r0, [pc, #424]	; (800c704 <main+0x2e4>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800c55a:	930d      	str	r3, [sp, #52]	; 0x34

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800c55c:	f44f 6980 	mov.w	r9, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c560:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c562:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800c564:	f7f5 fb3c 	bl	8001be0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800c568:	a90d      	add	r1, sp, #52	; 0x34
 800c56a:	4866      	ldr	r0, [pc, #408]	; (800c704 <main+0x2e4>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800c56c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c570:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c572:	9611      	str	r6, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c574:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c576:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800c578:	f7f5 fb32 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800c57c:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c580:	a90d      	add	r1, sp, #52	; 0x34
 800c582:	485e      	ldr	r0, [pc, #376]	; (800c6fc <main+0x2dc>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800c584:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c586:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c58a:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c58c:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c58e:	f7f5 fb27 	bl	8001be0 <HAL_GPIO_Init>
  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800c592:	2306      	movs	r3, #6
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 800c594:	a90d      	add	r1, sp, #52	; 0x34
 800c596:	4858      	ldr	r0, [pc, #352]	; (800c6f8 <main+0x2d8>)
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
 800c598:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c59c:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800c59e:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5a0:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c5a2:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 800c5a4:	f7f5 fb1c 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800c5a8:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800c5aa:	a90d      	add	r1, sp, #52	; 0x34
 800c5ac:	4853      	ldr	r0, [pc, #332]	; (800c6fc <main+0x2dc>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800c5ae:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c5b0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5b2:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800c5b4:	f7f5 fb14 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800c5b8:	a90d      	add	r1, sp, #52	; 0x34
 800c5ba:	484e      	ldr	r0, [pc, #312]	; (800c6f4 <main+0x2d4>)
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800c5bc:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c5be:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5c0:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800c5c2:	f7f5 fb0d 	bl	8001be0 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 800c5c6:	4850      	ldr	r0, [pc, #320]	; (800c708 <main+0x2e8>)
  hi2c1.Init.ClockSpeed = 100000;
 800c5c8:	4950      	ldr	r1, [pc, #320]	; (800c70c <main+0x2ec>)
 800c5ca:	4b51      	ldr	r3, [pc, #324]	; (800c710 <main+0x2f0>)
  htim2.Instance = TIM2;
 800c5cc:	4f51      	ldr	r7, [pc, #324]	; (800c714 <main+0x2f4>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800c5ce:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 800c5d0:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c5d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c5d8:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 800c5da:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c5dc:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800c5de:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c5e0:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c5e2:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c5e4:	f7f6 f836 	bl	8002654 <HAL_I2C_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c5e8:	2210      	movs	r2, #16
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	a80d      	add	r0, sp, #52	; 0x34
 800c5ee:	f001 fa0b 	bl	800da08 <memset>
  htim2.Init.Prescaler = 8399;
 800c5f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c5f6:	f242 03cf 	movw	r3, #8399	; 0x20cf
 800c5fa:	e887 0009 	stmia.w	r7, {r0, r3}
  htim2.Init.Period = 4999;
 800c5fe:	f241 3387 	movw	r3, #4999	; 0x1387
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c602:	4638      	mov	r0, r7
  htim2.Init.Period = 4999;
 800c604:	60fb      	str	r3, [r7, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c606:	9409      	str	r4, [sp, #36]	; 0x24
 800c608:	940a      	str	r4, [sp, #40]	; 0x28
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c60a:	60bc      	str	r4, [r7, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c60c:	613c      	str	r4, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c60e:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c610:	f7f6 fd38 	bl	8003084 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c618:	a90d      	add	r1, sp, #52	; 0x34
 800c61a:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c61c:	930d      	str	r3, [sp, #52]	; 0x34
 800c61e:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c620:	f7f6 fe06 	bl	8003230 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c624:	a909      	add	r1, sp, #36	; 0x24
 800c626:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c628:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c62a:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c62c:	f7f6 fec2 	bl	80033b4 <HAL_TIMEx_MasterConfigSynchronization>
  __HAL_TIM_SET_AUTORELOAD( &htim2, ( TIM2_MS * 10 ) - 1 );
 800c630:	6839      	ldr	r1, [r7, #0]
  huart6.Instance = USART6;
 800c632:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800c730 <main+0x310>
  hadc1.Instance = ADC1;
 800c636:	4d38      	ldr	r5, [pc, #224]	; (800c718 <main+0x2f8>)
  __HAL_TIM_SET_AUTORELOAD( &htim2, ( TIM2_MS * 10 ) - 1 );
 800c638:	2263      	movs	r2, #99	; 0x63
 800c63a:	62ca      	str	r2, [r1, #44]	; 0x2c
 800c63c:	60fa      	str	r2, [r7, #12]
  MX_USB_HOST_Init();
 800c63e:	f000 fc01 	bl	800ce44 <MX_USB_HOST_Init>
  huart6.Init.BaudRate = 115200;
 800c642:	4a36      	ldr	r2, [pc, #216]	; (800c71c <main+0x2fc>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800c644:	f8c9 4008 	str.w	r4, [r9, #8]
  huart6.Init.BaudRate = 115200;
 800c648:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c64c:	f04f 0b0c 	mov.w	fp, #12
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800c650:	4648      	mov	r0, r9
  huart6.Init.BaudRate = 115200;
 800c652:	e889 000c 	stmia.w	r9, {r2, r3}
  huart6.Init.StopBits = UART_STOPBITS_1;
 800c656:	f8c9 400c 	str.w	r4, [r9, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800c65a:	f8c9 4010 	str.w	r4, [r9, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c65e:	f8c9 b014 	str.w	fp, [r9, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c662:	f8c9 4018 	str.w	r4, [r9, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800c666:	f8c9 401c 	str.w	r4, [r9, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800c66a:	f7f7 f813 	bl	8003694 <HAL_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 800c66e:	4621      	mov	r1, r4
 800c670:	2210      	movs	r2, #16
 800c672:	a80d      	add	r0, sp, #52	; 0x34
 800c674:	f001 f9c8 	bl	800da08 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c678:	4a29      	ldr	r2, [pc, #164]	; (800c720 <main+0x300>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c67a:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c67c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800c680:	e885 0044 	stmia.w	r5, {r2, r6}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c684:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c686:	4a27      	ldr	r2, [pc, #156]	; (800c724 <main+0x304>)
 800c688:	62aa      	str	r2, [r5, #40]	; 0x28
  hadc1.Init.ScanConvMode = DISABLE;
 800c68a:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800c68c:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c68e:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c692:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c694:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 800c696:	f8c5 801c 	str.w	r8, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800c69a:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c69e:	f8c5 8014 	str.w	r8, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c6a2:	f7f4 fc95 	bl	8000fd0 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_9;
 800c6a6:	2209      	movs	r2, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c6a8:	a90d      	add	r1, sp, #52	; 0x34
 800c6aa:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_9;
 800c6ac:	920d      	str	r2, [sp, #52]	; 0x34
  sConfig.Rank = 1;
 800c6ae:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800c6b2:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c6b4:	f7f4 fda8 	bl	8001208 <HAL_ADC_ConfigChannel>
  hdac.Instance = DAC;
 800c6b8:	4a1b      	ldr	r2, [pc, #108]	; (800c728 <main+0x308>)
 800c6ba:	f8ca 2000 	str.w	r2, [sl]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800c6be:	4650      	mov	r0, sl
  DAC_ChannelConfTypeDef sConfig = {0};
 800c6c0:	940d      	str	r4, [sp, #52]	; 0x34
 800c6c2:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800c6c4:	f7f4 fea0 	bl	8001408 <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800c6c8:	4622      	mov	r2, r4
 800c6ca:	a90d      	add	r1, sp, #52	; 0x34
 800c6cc:	4650      	mov	r0, sl
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800c6ce:	940d      	str	r4, [sp, #52]	; 0x34
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800c6d0:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800c6d2:	f7f4 feda 	bl	800148a <HAL_DAC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c6d6:	2210      	movs	r2, #16
 800c6d8:	4621      	mov	r1, r4
 800c6da:	a809      	add	r0, sp, #36	; 0x24
 800c6dc:	f001 f994 	bl	800da08 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c6e0:	4621      	mov	r1, r4
 800c6e2:	221c      	movs	r2, #28
 800c6e4:	e026      	b.n	800c734 <main+0x314>
 800c6e6:	bf00      	nop
 800c6e8:	20005070 	.word	0x20005070
 800c6ec:	10120000 	.word	0x10120000
 800c6f0:	40023800 	.word	0x40023800
 800c6f4:	40021000 	.word	0x40021000
 800c6f8:	40020800 	.word	0x40020800
 800c6fc:	40020c00 	.word	0x40020c00
 800c700:	40020000 	.word	0x40020000
 800c704:	40020400 	.word	0x40020400
 800c708:	20009a90 	.word	0x20009a90
 800c70c:	40005400 	.word	0x40005400
 800c710:	000186a0 	.word	0x000186a0
 800c714:	20009e18 	.word	0x20009e18
 800c718:	20009b24 	.word	0x20009b24
 800c71c:	40011400 	.word	0x40011400
 800c720:	40012000 	.word	0x40012000
 800c724:	0f000001 	.word	0x0f000001
 800c728:	40007400 	.word	0x40007400
 800c72c:	20009d64 	.word	0x20009d64
 800c730:	20009dd8 	.word	0x20009dd8
 800c734:	a80d      	add	r0, sp, #52	; 0x34
  htim9.Instance = TIM9;
 800c736:	4e6a      	ldr	r6, [pc, #424]	; (800c8e0 <main+0x4c0>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c738:	f001 f966 	bl	800da08 <memset>
  htim9.Init.Prescaler = 1679;
 800c73c:	4a69      	ldr	r2, [pc, #420]	; (800c8e4 <main+0x4c4>)
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c73e:	60b4      	str	r4, [r6, #8]
  htim9.Init.Prescaler = 1679;
 800c740:	f240 6e8f 	movw	lr, #1679	; 0x68f
 800c744:	e886 4004 	stmia.w	r6, {r2, lr}
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800c748:	4630      	mov	r0, r6
  htim9.Init.Period = 2150;
 800c74a:	f640 0266 	movw	r2, #2150	; 0x866
 800c74e:	60f2      	str	r2, [r6, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c750:	6134      	str	r4, [r6, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c752:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800c754:	f7f6 fc96 	bl	8003084 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c758:	9b01      	ldr	r3, [sp, #4]
 800c75a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800c75c:	a909      	add	r1, sp, #36	; 0x24
 800c75e:	4630      	mov	r0, r6
 800c760:	f7f6 fd66 	bl	8003230 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800c764:	4630      	mov	r0, r6
 800c766:	f7f6 fca7 	bl	80030b8 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c76a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c76c:	4622      	mov	r2, r4
 800c76e:	a90d      	add	r1, sp, #52	; 0x34
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c770:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c772:	4630      	mov	r0, r6
  sConfigOC.Pulse = 150;
 800c774:	2396      	movs	r3, #150	; 0x96
 800c776:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c778:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c77a:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c77c:	f7f6 fcec 	bl	8003158 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim9);
 800c780:	4630      	mov	r0, r6
 800c782:	f000 f9db 	bl	800cb3c <HAL_TIM_MspPostInit>
  hrng.Instance = RNG;
 800c786:	4858      	ldr	r0, [pc, #352]	; (800c8e8 <main+0x4c8>)
 800c788:	4b58      	ldr	r3, [pc, #352]	; (800c8ec <main+0x4cc>)
 800c78a:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800c78c:	f7f6 fa76 	bl	8002c7c <HAL_RNG_Init>
  huart5.Instance = UART5;
 800c790:	4857      	ldr	r0, [pc, #348]	; (800c8f0 <main+0x4d0>)
  huart5.Init.BaudRate = 115200;
 800c792:	4b58      	ldr	r3, [pc, #352]	; (800c8f4 <main+0x4d4>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800c794:	6084      	str	r4, [r0, #8]
  huart5.Init.BaudRate = 115200;
 800c796:	f44f 3ce1 	mov.w	ip, #115200	; 0x1c200
 800c79a:	e880 1008 	stmia.w	r0, {r3, ip}
  huart5.Init.StopBits = UART_STOPBITS_1;
 800c79e:	60c4      	str	r4, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800c7a0:	6104      	str	r4, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800c7a2:	f8c0 b014 	str.w	fp, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c7a6:	6184      	str	r4, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800c7a8:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800c7aa:	f7f6 ff73 	bl	8003694 <HAL_UART_Init>
  huart3.Instance = USART3;
 800c7ae:	4b52      	ldr	r3, [pc, #328]	; (800c8f8 <main+0x4d8>)
  huart3.Init.BaudRate = 9600;
 800c7b0:	4952      	ldr	r1, [pc, #328]	; (800c8fc <main+0x4dc>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c7b2:	609c      	str	r4, [r3, #8]
  huart3.Init.BaudRate = 9600;
 800c7b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c7b8:	4618      	mov	r0, r3
  huart3.Init.BaudRate = 9600;
 800c7ba:	e883 0006 	stmia.w	r3, {r1, r2}
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c7be:	60dc      	str	r4, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800c7c0:	611c      	str	r4, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c7c2:	f8c3 b014 	str.w	fp, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c7c6:	619c      	str	r4, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c7c8:	61dc      	str	r4, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c7ca:	9301      	str	r3, [sp, #4]
 800c7cc:	f7f6 ff62 	bl	8003694 <HAL_UART_Init>
  MX_LWIP_Init();
 800c7d0:	f7ff fc0e 	bl	800bff0 <MX_LWIP_Init>
  HAL_TIM_Base_Start_IT( &htim2 );
 800c7d4:	4638      	mov	r0, r7
 800c7d6:	f7f6 fb37 	bl	8002e48 <HAL_TIM_Base_Start_IT>
  event_init( &e );
 800c7da:	4849      	ldr	r0, [pc, #292]	; (800c900 <main+0x4e0>)
 800c7dc:	f7ff fbfa 	bl	800bfd4 <event_init>
  HAL_UART_Receive_IT( &huart6, &recv6_car, 1 );
 800c7e0:	4642      	mov	r2, r8
 800c7e2:	4948      	ldr	r1, [pc, #288]	; (800c904 <main+0x4e4>)
 800c7e4:	4648      	mov	r0, r9
 800c7e6:	f7f6 ffe0 	bl	80037aa <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT( &huart3, &recv3_car, 1 );
 800c7ea:	9b01      	ldr	r3, [sp, #4]
 800c7ec:	4946      	ldr	r1, [pc, #280]	; (800c908 <main+0x4e8>)
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	4642      	mov	r2, r8
 800c7f2:	f7f6 ffda 	bl	80037aa <HAL_UART_Receive_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800c7f6:	4621      	mov	r1, r4
 800c7f8:	4650      	mov	r0, sl
 800c7fa:	f7f4 fe18 	bl	800142e <HAL_DAC_Start>
  HAL_ADC_Start( &hadc1 );
 800c7fe:	4628      	mov	r0, r5
 800c800:	f7f4 fc8c 	bl	800111c <HAL_ADC_Start>
  HAL_TIM_Base_Start( &htim9 );
 800c804:	4630      	mov	r0, r6
 800c806:	f7f6 fb0d 	bl	8002e24 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start( &htim9, TIM_CHANNEL_1 );
 800c80a:	4621      	mov	r1, r4
 800c80c:	4630      	mov	r0, r6
 800c80e:	f7f6 fdb1 	bl	8003374 <HAL_TIM_PWM_Start>
  httpd_init();
 800c812:	f7f9 f8bf 	bl	8005994 <httpd_init>
  UID[0] = HAL_GetUIDw0();
 800c816:	f7f4 fbc9 	bl	8000fac <HAL_GetUIDw0>
 800c81a:	4606      	mov	r6, r0
  UID[1] = HAL_GetUIDw1();
 800c81c:	f7f4 fbcc 	bl	8000fb8 <HAL_GetUIDw1>
 800c820:	4605      	mov	r5, r0
  UID[2] = HAL_GetUIDw2();
 800c822:	f7f4 fbcf 	bl	8000fc4 <HAL_GetUIDw2>
  int referee = ( UID[0] == UID_COORDINATOR[0] ) && ( UID[1] == UID_COORDINATOR[1] ) && ( UID[2] == UID_COORDINATOR[2] ) ? 1 : 0;
 800c826:	4b39      	ldr	r3, [pc, #228]	; (800c90c <main+0x4ec>)
 800c828:	429e      	cmp	r6, r3
 800c82a:	d106      	bne.n	800c83a <main+0x41a>
 800c82c:	4b38      	ldr	r3, [pc, #224]	; (800c910 <main+0x4f0>)
 800c82e:	429d      	cmp	r5, r3
 800c830:	d103      	bne.n	800c83a <main+0x41a>
 800c832:	4c38      	ldr	r4, [pc, #224]	; (800c914 <main+0x4f4>)
 800c834:	1b02      	subs	r2, r0, r4
 800c836:	4254      	negs	r4, r2
 800c838:	4154      	adcs	r4, r2
  if ( referee )
 800c83a:	f1c4 0501 	rsb	r5, r4, #1
 800c83e:	bb3c      	cbnz	r4, 800c890 <main+0x470>
    bumper_init_referee();
 800c840:	f7ff fd8c 	bl	800c35c <bumper_init_referee>
  strcpy( json_orders, "{\"L\":[" );
 800c844:	4934      	ldr	r1, [pc, #208]	; (800c918 <main+0x4f8>)
 800c846:	4835      	ldr	r0, [pc, #212]	; (800c91c <main+0x4fc>)
  	  if ( !pushed && ( ( B1_GPIO_Port->IDR & B1_Pin ) == 1 ) )
 800c848:	4f35      	ldr	r7, [pc, #212]	; (800c920 <main+0x500>)
    if ( event_check( &e ) ) // If the event has been triggered
 800c84a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800c900 <main+0x4e0>
		N_BUMPER_DT_MS += TIM2_MS;
 800c84e:	4c35      	ldr	r4, [pc, #212]	; (800c924 <main+0x504>)
  strcpy( json_orders, "{\"L\":[" );
 800c850:	f001 f9f7 	bl	800dc42 <strcpy>
  int pushed = 0;
 800c854:	2600      	movs	r6, #0
    MX_USB_HOST_Process();
 800c856:	f000 fb15 	bl	800ce84 <MX_USB_HOST_Process>
    MX_LWIP_Process();
 800c85a:	f7ff fc37 	bl	800c0cc <MX_LWIP_Process>
    if ( referee )
 800c85e:	b1d5      	cbz	r5, 800c896 <main+0x476>
      bum_process_referee();
 800c860:	f7fe fea6 	bl	800b5b0 <bum_process_referee>
  	  if ( !pushed && ( ( B1_GPIO_Port->IDR & B1_Pin ) == 1 ) )
 800c864:	b1d6      	cbz	r6, 800c89c <main+0x47c>
    if ( event_check( &e ) ) // If the event has been triggered
 800c866:	4640      	mov	r0, r8
 800c868:	f7ff fbba 	bl	800bfe0 <event_check>
 800c86c:	2800      	cmp	r0, #0
 800c86e:	d0f2      	beq.n	800c856 <main+0x436>
		bum_process( TIM2_MS );
 800c870:	200a      	movs	r0, #10
 800c872:	f7fe fc5f 	bl	800b134 <bum_process>
		N_BUMPER_DT_MS += TIM2_MS;
 800c876:	6823      	ldr	r3, [r4, #0]
 800c878:	330a      	adds	r3, #10
        if ( N_BUMPER_DT_MS >= BUMPER_DT_MS )
 800c87a:	2bc7      	cmp	r3, #199	; 0xc7
 800c87c:	dc15      	bgt.n	800c8aa <main+0x48a>
		N_BUMPER_DT_MS += TIM2_MS;
 800c87e:	6023      	str	r3, [r4, #0]
	  N500 += TIM2_MS;
 800c880:	4a29      	ldr	r2, [pc, #164]	; (800c928 <main+0x508>)
 800c882:	6813      	ldr	r3, [r2, #0]
 800c884:	330a      	adds	r3, #10
	  if ( N500 >= 500 )
 800c886:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c88a:	da20      	bge.n	800c8ce <main+0x4ae>
	  N500 += TIM2_MS;
 800c88c:	6013      	str	r3, [r2, #0]
 800c88e:	e7e2      	b.n	800c856 <main+0x436>
	bumper_init_player();
 800c890:	f7ff fd4a 	bl	800c328 <bumper_init_player>
 800c894:	e7d6      	b.n	800c844 <main+0x424>
      bum_process_player();
 800c896:	f7fe fcb1 	bl	800b1fc <bum_process_player>
 800c89a:	e7e4      	b.n	800c866 <main+0x446>
  	  if ( !pushed && ( ( B1_GPIO_Port->IDR & B1_Pin ) == 1 ) )
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	07db      	lsls	r3, r3, #31
 800c8a0:	d5e1      	bpl.n	800c866 <main+0x446>
  		  bum_referee_start_game();
 800c8a2:	f7ff f9a5 	bl	800bbf0 <bum_referee_start_game>
  		  pushed = 1;
 800c8a6:	462e      	mov	r6, r5
 800c8a8:	e7dd      	b.n	800c866 <main+0x446>
          N_BUMPER_DT_MS = 0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	6023      	str	r3, [r4, #0]
		  if ( referee )
 800c8ae:	2d00      	cmp	r5, #0
 800c8b0:	d0e6      	beq.n	800c880 <main+0x460>
			bum_referee_calculate( BUMPER_DT_MS );
 800c8b2:	20c8      	movs	r0, #200	; 0xc8
 800c8b4:	f7fe ff68 	bl	800b788 <bum_referee_calculate>
			if ( bum_referee_get_n_players() )
 800c8b8:	f7ff f9b8 	bl	800bc2c <bum_referee_get_n_players>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	b100      	cbz	r0, 800c8c2 <main+0x4a2>
				HAL_GPIO_WritePin( LD3_GPIO_Port, LD6_Pin, GPIO_PIN_SET ); // BLUE
 800c8c0:	2201      	movs	r2, #1
				HAL_GPIO_WritePin( LD3_GPIO_Port, LD6_Pin, GPIO_PIN_RESET ); // BLUE
 800c8c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c8c6:	4819      	ldr	r0, [pc, #100]	; (800c92c <main+0x50c>)
 800c8c8:	f7f5 fa6a 	bl	8001da0 <HAL_GPIO_WritePin>
 800c8cc:	e7d8      	b.n	800c880 <main+0x460>
		N500 = 0;
 800c8ce:	2300      	movs	r3, #0
		HAL_GPIO_TogglePin( LD3_GPIO_Port, LD3_Pin ); // ORANGE
 800c8d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c8d4:	4815      	ldr	r0, [pc, #84]	; (800c92c <main+0x50c>)
		N500 = 0;
 800c8d6:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin( LD3_GPIO_Port, LD3_Pin ); // ORANGE
 800c8d8:	f7f5 fa67 	bl	8001daa <HAL_GPIO_TogglePin>
 800c8dc:	e7bb      	b.n	800c856 <main+0x436>
 800c8de:	bf00      	nop
 800c8e0:	20009d88 	.word	0x20009d88
 800c8e4:	40014000 	.word	0x40014000
 800c8e8:	20009dc8 	.word	0x20009dc8
 800c8ec:	50060800 	.word	0x50060800
 800c8f0:	20009ae4 	.word	0x20009ae4
 800c8f4:	40005000 	.word	0x40005000
 800c8f8:	20009a50 	.word	0x20009a50
 800c8fc:	40004800 	.word	0x40004800
 800c900:	20009e6c 	.word	0x20009e6c
 800c904:	20000e65 	.word	0x20000e65
 800c908:	20000e64 	.word	0x20000e64
 800c90c:	002d0025 	.word	0x002d0025
 800c910:	3137470f 	.word	0x3137470f
 800c914:	30373234 	.word	0x30373234
 800c918:	0800edfb 	.word	0x0800edfb
 800c91c:	20009b6c 	.word	0x20009b6c
 800c920:	40020000 	.word	0x40020000
 800c924:	20000e60 	.word	0x20000e60
 800c928:	20000e5c 	.word	0x20000e5c
 800c92c:	40020c00 	.word	0x40020c00

0800c930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c930:	4770      	bx	lr

0800c932 <httpd_post_begin>:
err_t httpd_post_begin(void *connection, const char *uri, const char *http_request,
                       u16_t http_request_len, int content_len, char *response_uri,
                       u16_t response_uri_len, u8_t *post_auto_wnd)
{
	return ERR_OK;
}
 800c932:	2000      	movs	r0, #0
 800c934:	4770      	bx	lr

0800c936 <httpd_post_receive_data>:

err_t httpd_post_receive_data(void *connection, struct pbuf *p)
{
	return ERR_OK;
}
 800c936:	2000      	movs	r0, #0
 800c938:	4770      	bx	lr

0800c93a <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{
 800c93a:	4770      	bx	lr

0800c93c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c93c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c93e:	4b0c      	ldr	r3, [pc, #48]	; (800c970 <HAL_MspInit+0x34>)
 800c940:	2100      	movs	r1, #0
 800c942:	9100      	str	r1, [sp, #0]
 800c944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c94a:	645a      	str	r2, [r3, #68]	; 0x44
 800c94c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c94e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800c952:	9200      	str	r2, [sp, #0]
 800c954:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c956:	9101      	str	r1, [sp, #4]
 800c958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c95a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c95e:	641a      	str	r2, [r3, #64]	; 0x40
 800c960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c966:	9301      	str	r3, [sp, #4]
 800c968:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c96a:	b002      	add	sp, #8
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop
 800c970:	40023800 	.word	0x40023800

0800c974 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c974:	b510      	push	{r4, lr}
 800c976:	4604      	mov	r4, r0
 800c978:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c97a:	2214      	movs	r2, #20
 800c97c:	2100      	movs	r1, #0
 800c97e:	a803      	add	r0, sp, #12
 800c980:	f001 f842 	bl	800da08 <memset>
  if(hadc->Instance==ADC1)
 800c984:	6822      	ldr	r2, [r4, #0]
 800c986:	4b12      	ldr	r3, [pc, #72]	; (800c9d0 <HAL_ADC_MspInit+0x5c>)
 800c988:	429a      	cmp	r2, r3
 800c98a:	d11e      	bne.n	800c9ca <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c98c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800c990:	2100      	movs	r1, #0
 800c992:	9101      	str	r1, [sp, #4]
 800c994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = AI_PB1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(AI_PB1_GPIO_Port, &GPIO_InitStruct);
 800c996:	480f      	ldr	r0, [pc, #60]	; (800c9d4 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c99c:	645a      	str	r2, [r3, #68]	; 0x44
 800c99e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9a0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800c9a4:	9201      	str	r2, [sp, #4]
 800c9a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9a8:	9102      	str	r1, [sp, #8]
 800c9aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9ac:	f042 0202 	orr.w	r2, r2, #2
 800c9b0:	631a      	str	r2, [r3, #48]	; 0x30
 800c9b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b4:	f003 0302 	and.w	r3, r3, #2
 800c9b8:	9302      	str	r3, [sp, #8]
 800c9ba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AI_PB1_Pin;
 800c9bc:	2302      	movs	r3, #2
 800c9be:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(AI_PB1_GPIO_Port, &GPIO_InitStruct);
 800c9c0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c9c2:	2303      	movs	r3, #3
 800c9c4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(AI_PB1_GPIO_Port, &GPIO_InitStruct);
 800c9c6:	f7f5 f90b 	bl	8001be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800c9ca:	b008      	add	sp, #32
 800c9cc:	bd10      	pop	{r4, pc}
 800c9ce:	bf00      	nop
 800c9d0:	40012000 	.word	0x40012000
 800c9d4:	40020400 	.word	0x40020400

0800c9d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800c9d8:	b510      	push	{r4, lr}
 800c9da:	4604      	mov	r4, r0
 800c9dc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9de:	2214      	movs	r2, #20
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	a803      	add	r0, sp, #12
 800c9e4:	f001 f810 	bl	800da08 <memset>
  if(hdac->Instance==DAC)
 800c9e8:	6822      	ldr	r2, [r4, #0]
 800c9ea:	4b12      	ldr	r3, [pc, #72]	; (800ca34 <HAL_DAC_MspInit+0x5c>)
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d11e      	bne.n	800ca2e <HAL_DAC_MspInit+0x56>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800c9f0:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	9101      	str	r1, [sp, #4]
 800c9f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = AO_PA4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(AO_PA4_GPIO_Port, &GPIO_InitStruct);
 800c9fa:	480f      	ldr	r0, [pc, #60]	; (800ca38 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 800c9fc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800ca00:	641a      	str	r2, [r3, #64]	; 0x40
 800ca02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ca04:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800ca08:	9201      	str	r2, [sp, #4]
 800ca0a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca0c:	9102      	str	r1, [sp, #8]
 800ca0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca10:	f042 0201 	orr.w	r2, r2, #1
 800ca14:	631a      	str	r2, [r3, #48]	; 0x30
 800ca16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca18:	f003 0301 	and.w	r3, r3, #1
 800ca1c:	9302      	str	r3, [sp, #8]
 800ca1e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AO_PA4_Pin;
 800ca20:	2310      	movs	r3, #16
 800ca22:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(AO_PA4_GPIO_Port, &GPIO_InitStruct);
 800ca24:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ca26:	2303      	movs	r3, #3
 800ca28:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(AO_PA4_GPIO_Port, &GPIO_InitStruct);
 800ca2a:	f7f5 f8d9 	bl	8001be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800ca2e:	b008      	add	sp, #32
 800ca30:	bd10      	pop	{r4, pc}
 800ca32:	bf00      	nop
 800ca34:	40007400 	.word	0x40007400
 800ca38:	40020000 	.word	0x40020000

0800ca3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ca3c:	b530      	push	{r4, r5, lr}
 800ca3e:	4604      	mov	r4, r0
 800ca40:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca42:	2214      	movs	r2, #20
 800ca44:	2100      	movs	r1, #0
 800ca46:	a803      	add	r0, sp, #12
 800ca48:	f000 ffde 	bl	800da08 <memset>
  if(hi2c->Instance==I2C1)
 800ca4c:	6822      	ldr	r2, [r4, #0]
 800ca4e:	4b14      	ldr	r3, [pc, #80]	; (800caa0 <HAL_I2C_MspInit+0x64>)
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d122      	bne.n	800ca9a <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca54:	4c13      	ldr	r4, [pc, #76]	; (800caa4 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca56:	4814      	ldr	r0, [pc, #80]	; (800caa8 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca58:	2500      	movs	r5, #0
 800ca5a:	9501      	str	r5, [sp, #4]
 800ca5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ca5e:	f043 0302 	orr.w	r3, r3, #2
 800ca62:	6323      	str	r3, [r4, #48]	; 0x30
 800ca64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ca66:	f003 0302 	and.w	r3, r3, #2
 800ca6a:	9301      	str	r3, [sp, #4]
 800ca6c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800ca6e:	f44f 7310 	mov.w	r3, #576	; 0x240
 800ca72:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ca74:	2312      	movs	r3, #18
 800ca76:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca7c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ca7e:	2304      	movs	r3, #4
 800ca80:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca82:	f7f5 f8ad 	bl	8001be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ca86:	9502      	str	r5, [sp, #8]
 800ca88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ca8e:	6423      	str	r3, [r4, #64]	; 0x40
 800ca90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca96:	9302      	str	r3, [sp, #8]
 800ca98:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800ca9a:	b009      	add	sp, #36	; 0x24
 800ca9c:	bd30      	pop	{r4, r5, pc}
 800ca9e:	bf00      	nop
 800caa0:	40005400 	.word	0x40005400
 800caa4:	40023800 	.word	0x40023800
 800caa8:	40020400 	.word	0x40020400

0800caac <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 800caac:	6802      	ldr	r2, [r0, #0]
 800caae:	4b09      	ldr	r3, [pc, #36]	; (800cad4 <HAL_RNG_MspInit+0x28>)
 800cab0:	429a      	cmp	r2, r3
{
 800cab2:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 800cab4:	d10b      	bne.n	800cace <HAL_RNG_MspInit+0x22>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800cab6:	2300      	movs	r3, #0
 800cab8:	9301      	str	r3, [sp, #4]
 800caba:	4b07      	ldr	r3, [pc, #28]	; (800cad8 <HAL_RNG_MspInit+0x2c>)
 800cabc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cabe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cac2:	635a      	str	r2, [r3, #52]	; 0x34
 800cac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caca:	9301      	str	r3, [sp, #4]
 800cacc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800cace:	b002      	add	sp, #8
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop
 800cad4:	50060800 	.word	0x50060800
 800cad8:	40023800 	.word	0x40023800

0800cadc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800cadc:	6803      	ldr	r3, [r0, #0]
 800cade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800cae2:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 800cae4:	d116      	bne.n	800cb14 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800cae6:	2200      	movs	r2, #0
 800cae8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800caec:	9200      	str	r2, [sp, #0]
 800caee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800caf0:	f041 0101 	orr.w	r1, r1, #1
 800caf4:	6419      	str	r1, [r3, #64]	; 0x40
 800caf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caf8:	f003 0301 	and.w	r3, r3, #1
 800cafc:	9300      	str	r3, [sp, #0]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800cafe:	201c      	movs	r0, #28
 800cb00:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800cb02:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800cb04:	f7f4 fc28 	bl	8001358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800cb08:	201c      	movs	r0, #28
 800cb0a:	f7f4 fc59 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800cb0e:	b003      	add	sp, #12
 800cb10:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM9)
 800cb14:	4a07      	ldr	r2, [pc, #28]	; (800cb34 <HAL_TIM_Base_MspInit+0x58>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d1f9      	bne.n	800cb0e <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	9301      	str	r3, [sp, #4]
 800cb1e:	4b06      	ldr	r3, [pc, #24]	; (800cb38 <HAL_TIM_Base_MspInit+0x5c>)
 800cb20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cb26:	645a      	str	r2, [r3, #68]	; 0x44
 800cb28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb2e:	9301      	str	r3, [sp, #4]
 800cb30:	9b01      	ldr	r3, [sp, #4]
}
 800cb32:	e7ec      	b.n	800cb0e <HAL_TIM_Base_MspInit+0x32>
 800cb34:	40014000 	.word	0x40014000
 800cb38:	40023800 	.word	0x40023800

0800cb3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800cb3c:	b510      	push	{r4, lr}
 800cb3e:	4604      	mov	r4, r0
 800cb40:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb42:	2214      	movs	r2, #20
 800cb44:	2100      	movs	r1, #0
 800cb46:	a801      	add	r0, sp, #4
 800cb48:	f000 ff5e 	bl	800da08 <memset>
  if(htim->Instance==TIM9)
 800cb4c:	6822      	ldr	r2, [r4, #0]
 800cb4e:	4b0d      	ldr	r3, [pc, #52]	; (800cb84 <HAL_TIM_MspPostInit+0x48>)
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d115      	bne.n	800cb80 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800cb54:	2300      	movs	r3, #0
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	4b0b      	ldr	r3, [pc, #44]	; (800cb88 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cb5a:	480c      	ldr	r0, [pc, #48]	; (800cb8c <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800cb5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb5e:	f042 0210 	orr.w	r2, r2, #16
 800cb62:	631a      	str	r2, [r3, #48]	; 0x30
 800cb64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb66:	f003 0310 	and.w	r3, r3, #16
 800cb6a:	9300      	str	r3, [sp, #0]
 800cb6c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800cb6e:	2320      	movs	r3, #32
 800cb70:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb72:	2302      	movs	r3, #2
 800cb74:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cb76:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800cb78:	2303      	movs	r3, #3
 800cb7a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cb7c:	f7f5 f830 	bl	8001be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800cb80:	b006      	add	sp, #24
 800cb82:	bd10      	pop	{r4, pc}
 800cb84:	40014000 	.word	0x40014000
 800cb88:	40023800 	.word	0x40023800
 800cb8c:	40021000 	.word	0x40021000

0800cb90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb94:	4604      	mov	r4, r0
 800cb96:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb98:	2214      	movs	r2, #20
 800cb9a:	2100      	movs	r1, #0
 800cb9c:	a807      	add	r0, sp, #28
 800cb9e:	f000 ff33 	bl	800da08 <memset>
  if(huart->Instance==UART5)
 800cba2:	6823      	ldr	r3, [r4, #0]
 800cba4:	4a53      	ldr	r2, [pc, #332]	; (800ccf4 <HAL_UART_MspInit+0x164>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d146      	bne.n	800cc38 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800cbaa:	4b53      	ldr	r3, [pc, #332]	; (800ccf8 <HAL_UART_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cbac:	4853      	ldr	r0, [pc, #332]	; (800ccfc <HAL_UART_MspInit+0x16c>)
    __HAL_RCC_UART5_CLK_ENABLE();
 800cbae:	2400      	movs	r4, #0
 800cbb0:	9400      	str	r4, [sp, #0]
 800cbb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbb4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cbb8:	641a      	str	r2, [r3, #64]	; 0x40
 800cbba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbbc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800cbc0:	9200      	str	r2, [sp, #0]
 800cbc2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cbc4:	9401      	str	r4, [sp, #4]
 800cbc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbc8:	f042 0204 	orr.w	r2, r2, #4
 800cbcc:	631a      	str	r2, [r3, #48]	; 0x30
 800cbce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbd0:	f002 0204 	and.w	r2, r2, #4
 800cbd4:	9201      	str	r2, [sp, #4]
 800cbd6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cbd8:	9402      	str	r4, [sp, #8]
 800cbda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbdc:	f042 0208 	orr.w	r2, r2, #8
 800cbe0:	631a      	str	r2, [r3, #48]	; 0x30
 800cbe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbe4:	f003 0308 	and.w	r3, r3, #8
 800cbe8:	9302      	str	r3, [sp, #8]
 800cbea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbec:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800cbf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cbf4:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbf6:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800cbf8:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cbfa:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800cbfc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbfe:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc02:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc04:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800cc06:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc08:	f7f4 ffea 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800cc0c:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cc0e:	a907      	add	r1, sp, #28
 800cc10:	483b      	ldr	r0, [pc, #236]	; (800cd00 <HAL_UART_MspInit+0x170>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800cc12:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc14:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc18:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc1a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800cc1c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cc1e:	f7f4 ffdf 	bl	8001be0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800cc22:	2035      	movs	r0, #53	; 0x35
 800cc24:	4622      	mov	r2, r4
 800cc26:	4621      	mov	r1, r4
 800cc28:	f7f4 fb96 	bl	8001358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800cc2c:	2035      	movs	r0, #53	; 0x35
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800cc2e:	f7f4 fbc7 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800cc32:	b00c      	add	sp, #48	; 0x30
 800cc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(huart->Instance==USART3)
 800cc38:	4a32      	ldr	r2, [pc, #200]	; (800cd04 <HAL_UART_MspInit+0x174>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d12b      	bne.n	800cc96 <HAL_UART_MspInit+0x106>
    __HAL_RCC_USART3_CLK_ENABLE();
 800cc3e:	4b2e      	ldr	r3, [pc, #184]	; (800ccf8 <HAL_UART_MspInit+0x168>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cc40:	482f      	ldr	r0, [pc, #188]	; (800cd00 <HAL_UART_MspInit+0x170>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800cc42:	2400      	movs	r4, #0
 800cc44:	9403      	str	r4, [sp, #12]
 800cc46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc48:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800cc4c:	641a      	str	r2, [r3, #64]	; 0x40
 800cc4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc50:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800cc54:	9203      	str	r2, [sp, #12]
 800cc56:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cc58:	9404      	str	r4, [sp, #16]
 800cc5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc5c:	f042 0208 	orr.w	r2, r2, #8
 800cc60:	631a      	str	r2, [r3, #48]	; 0x30
 800cc62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc64:	f003 0308 	and.w	r3, r3, #8
 800cc68:	9304      	str	r3, [sp, #16]
 800cc6a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800cc6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cc70:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc72:	2302      	movs	r3, #2
 800cc74:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc76:	2301      	movs	r3, #1
 800cc78:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc7a:	2303      	movs	r3, #3
 800cc7c:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cc7e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800cc80:	2307      	movs	r3, #7
 800cc82:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cc84:	f7f4 ffac 	bl	8001be0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800cc88:	2027      	movs	r0, #39	; 0x27
 800cc8a:	4622      	mov	r2, r4
 800cc8c:	4621      	mov	r1, r4
 800cc8e:	f7f4 fb63 	bl	8001358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800cc92:	2027      	movs	r0, #39	; 0x27
 800cc94:	e7cb      	b.n	800cc2e <HAL_UART_MspInit+0x9e>
  else if(huart->Instance==USART6)
 800cc96:	4a1c      	ldr	r2, [pc, #112]	; (800cd08 <HAL_UART_MspInit+0x178>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d1ca      	bne.n	800cc32 <HAL_UART_MspInit+0xa2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800cc9c:	4b16      	ldr	r3, [pc, #88]	; (800ccf8 <HAL_UART_MspInit+0x168>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc9e:	4817      	ldr	r0, [pc, #92]	; (800ccfc <HAL_UART_MspInit+0x16c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800cca0:	2400      	movs	r4, #0
 800cca2:	9405      	str	r4, [sp, #20]
 800cca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cca6:	f042 0220 	orr.w	r2, r2, #32
 800ccaa:	645a      	str	r2, [r3, #68]	; 0x44
 800ccac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccae:	f002 0220 	and.w	r2, r2, #32
 800ccb2:	9205      	str	r2, [sp, #20]
 800ccb4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ccb6:	9406      	str	r4, [sp, #24]
 800ccb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccba:	f042 0204 	orr.w	r2, r2, #4
 800ccbe:	631a      	str	r2, [r3, #48]	; 0x30
 800ccc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccc2:	f003 0304 	and.w	r3, r3, #4
 800ccc6:	9306      	str	r3, [sp, #24]
 800ccc8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ccca:	23c0      	movs	r3, #192	; 0xc0
 800cccc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccce:	2302      	movs	r3, #2
 800ccd0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ccd6:	2303      	movs	r3, #3
 800ccd8:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ccda:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800ccdc:	2308      	movs	r3, #8
 800ccde:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cce0:	f7f4 ff7e 	bl	8001be0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800cce4:	2047      	movs	r0, #71	; 0x47
 800cce6:	4622      	mov	r2, r4
 800cce8:	4621      	mov	r1, r4
 800ccea:	f7f4 fb35 	bl	8001358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800ccee:	2047      	movs	r0, #71	; 0x47
 800ccf0:	e79d      	b.n	800cc2e <HAL_UART_MspInit+0x9e>
 800ccf2:	bf00      	nop
 800ccf4:	40005000 	.word	0x40005000
 800ccf8:	40023800 	.word	0x40023800
 800ccfc:	40020800 	.word	0x40020800
 800cd00:	40020c00 	.word	0x40020c00
 800cd04:	40004800 	.word	0x40004800
 800cd08:	40011400 	.word	0x40011400

0800cd0c <NMI_Handler>:
 800cd0c:	4770      	bx	lr

0800cd0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cd0e:	e7fe      	b.n	800cd0e <HardFault_Handler>

0800cd10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cd10:	e7fe      	b.n	800cd10 <MemManage_Handler>

0800cd12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800cd12:	e7fe      	b.n	800cd12 <BusFault_Handler>

0800cd14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800cd14:	e7fe      	b.n	800cd14 <UsageFault_Handler>

0800cd16 <SVC_Handler>:
 800cd16:	4770      	bx	lr

0800cd18 <DebugMon_Handler>:
 800cd18:	4770      	bx	lr

0800cd1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800cd1a:	4770      	bx	lr

0800cd1c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cd1c:	f7f4 b920 	b.w	8000f60 <HAL_IncTick>

0800cd20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800cd20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  event_trigger( &e );
 800cd22:	4804      	ldr	r0, [pc, #16]	; (800cd34 <TIM2_IRQHandler+0x14>)
 800cd24:	f7ff f959 	bl	800bfda <event_trigger>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800cd28:	4803      	ldr	r0, [pc, #12]	; (800cd38 <TIM2_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800cd2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim2);
 800cd2e:	f7f6 b8a1 	b.w	8002e74 <HAL_TIM_IRQHandler>
 800cd32:	bf00      	nop
 800cd34:	20009e6c 	.word	0x20009e6c
 800cd38:	20009e18 	.word	0x20009e18

0800cd3c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800cd3c:	4801      	ldr	r0, [pc, #4]	; (800cd44 <USART3_IRQHandler+0x8>)
 800cd3e:	f7f6 bd9b 	b.w	8003878 <HAL_UART_IRQHandler>
 800cd42:	bf00      	nop
 800cd44:	20009a50 	.word	0x20009a50

0800cd48 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800cd48:	4801      	ldr	r0, [pc, #4]	; (800cd50 <UART5_IRQHandler+0x8>)
 800cd4a:	f7f6 bd95 	b.w	8003878 <HAL_UART_IRQHandler>
 800cd4e:	bf00      	nop
 800cd50:	20009ae4 	.word	0x20009ae4

0800cd54 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800cd54:	4801      	ldr	r0, [pc, #4]	; (800cd5c <OTG_FS_IRQHandler+0x8>)
 800cd56:	f7f5 b925 	b.w	8001fa4 <HAL_HCD_IRQHandler>
 800cd5a:	bf00      	nop
 800cd5c:	2000a23c 	.word	0x2000a23c

0800cd60 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800cd60:	4801      	ldr	r0, [pc, #4]	; (800cd68 <USART6_IRQHandler+0x8>)
 800cd62:	f7f6 bd89 	b.w	8003878 <HAL_UART_IRQHandler>
 800cd66:	bf00      	nop
 800cd68:	20009dd8 	.word	0x20009dd8

0800cd6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cd6c:	b570      	push	{r4, r5, r6, lr}
 800cd6e:	460e      	mov	r6, r1
 800cd70:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cd72:	460c      	mov	r4, r1
 800cd74:	1ba3      	subs	r3, r4, r6
 800cd76:	429d      	cmp	r5, r3
 800cd78:	dc01      	bgt.n	800cd7e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800cd7e:	f3af 8000 	nop.w
 800cd82:	f804 0b01 	strb.w	r0, [r4], #1
 800cd86:	e7f5      	b.n	800cd74 <_read+0x8>

0800cd88 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800cd88:	4b09      	ldr	r3, [pc, #36]	; (800cdb0 <_sbrk+0x28>)
 800cd8a:	6819      	ldr	r1, [r3, #0]
{
 800cd8c:	4602      	mov	r2, r0
	if (heap_end == 0)
 800cd8e:	b909      	cbnz	r1, 800cd94 <_sbrk+0xc>
		heap_end = &end;
 800cd90:	4908      	ldr	r1, [pc, #32]	; (800cdb4 <_sbrk+0x2c>)
 800cd92:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800cd94:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800cd96:	4669      	mov	r1, sp
 800cd98:	4402      	add	r2, r0
 800cd9a:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800cd9c:	bf89      	itett	hi
 800cd9e:	4b06      	ldrhi	r3, [pc, #24]	; (800cdb8 <_sbrk+0x30>)
		return (caddr_t) -1;
	}

	heap_end += incr;
 800cda0:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 800cda2:	220c      	movhi	r2, #12
		return (caddr_t) -1;
 800cda4:	f04f 30ff 	movhi.w	r0, #4294967295
		errno = ENOMEM;
 800cda8:	bf88      	it	hi
 800cdaa:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800cdac:	4770      	bx	lr
 800cdae:	bf00      	nop
 800cdb0:	20000e68 	.word	0x20000e68
 800cdb4:	2000a50c 	.word	0x2000a50c
 800cdb8:	2000a508 	.word	0x2000a508

0800cdbc <_close>:

int _close(int file)
{
	return -1;
}
 800cdbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc0:	4770      	bx	lr

0800cdc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800cdc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cdc6:	604b      	str	r3, [r1, #4]
	return 0;
}
 800cdc8:	2000      	movs	r0, #0
 800cdca:	4770      	bx	lr

0800cdcc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800cdcc:	2001      	movs	r0, #1
 800cdce:	4770      	bx	lr

0800cdd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800cdd0:	2000      	movs	r0, #0
 800cdd2:	4770      	bx	lr

0800cdd4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cdd4:	490f      	ldr	r1, [pc, #60]	; (800ce14 <SystemInit+0x40>)
 800cdd6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800cdda:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cdde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800cde2:	4b0d      	ldr	r3, [pc, #52]	; (800ce18 <SystemInit+0x44>)
 800cde4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800cde6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800cde8:	f042 0201 	orr.w	r2, r2, #1
 800cdec:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800cdee:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800cdf6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cdfa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800cdfc:	4a07      	ldr	r2, [pc, #28]	; (800ce1c <SystemInit+0x48>)
 800cdfe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ce06:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ce08:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ce0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ce0e:	608b      	str	r3, [r1, #8]
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	e000ed00 	.word	0xe000ed00
 800ce18:	40023800 	.word	0x40023800
 800ce1c:	24003010 	.word	0x24003010

0800ce20 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ce20:	2904      	cmp	r1, #4
 800ce22:	d00a      	beq.n	800ce3a <USBH_UserProcess+0x1a>
 800ce24:	2905      	cmp	r1, #5
 800ce26:	d004      	beq.n	800ce32 <USBH_UserProcess+0x12>
 800ce28:	2902      	cmp	r1, #2
 800ce2a:	d105      	bne.n	800ce38 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ce2c:	4b04      	ldr	r3, [pc, #16]	; (800ce40 <USBH_UserProcess+0x20>)
 800ce2e:	7019      	strb	r1, [r3, #0]
  break;
 800ce30:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800ce32:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ce34:	4b02      	ldr	r3, [pc, #8]	; (800ce40 <USBH_UserProcess+0x20>)
 800ce36:	701a      	strb	r2, [r3, #0]
 800ce38:	4770      	bx	lr
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	e7fa      	b.n	800ce34 <USBH_UserProcess+0x14>
 800ce3e:	bf00      	nop
 800ce40:	20000e6c 	.word	0x20000e6c

0800ce44 <MX_USB_HOST_Init>:
{
 800ce44:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ce46:	2201      	movs	r2, #1
 800ce48:	490b      	ldr	r1, [pc, #44]	; (800ce78 <MX_USB_HOST_Init+0x34>)
 800ce4a:	480c      	ldr	r0, [pc, #48]	; (800ce7c <MX_USB_HOST_Init+0x38>)
 800ce4c:	f7f7 faf4 	bl	8004438 <USBH_Init>
 800ce50:	b108      	cbz	r0, 800ce56 <MX_USB_HOST_Init+0x12>
    Error_Handler();
 800ce52:	f7ff fd6d 	bl	800c930 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ce56:	490a      	ldr	r1, [pc, #40]	; (800ce80 <MX_USB_HOST_Init+0x3c>)
 800ce58:	4808      	ldr	r0, [pc, #32]	; (800ce7c <MX_USB_HOST_Init+0x38>)
 800ce5a:	f7f7 fb04 	bl	8004466 <USBH_RegisterClass>
 800ce5e:	b108      	cbz	r0, 800ce64 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 800ce60:	f7ff fd66 	bl	800c930 <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ce64:	4805      	ldr	r0, [pc, #20]	; (800ce7c <MX_USB_HOST_Init+0x38>)
 800ce66:	f7f7 fb31 	bl	80044cc <USBH_Start>
 800ce6a:	b118      	cbz	r0, 800ce74 <MX_USB_HOST_Init+0x30>
}
 800ce6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800ce70:	f7ff bd5e 	b.w	800c930 <Error_Handler>
 800ce74:	bd08      	pop	{r3, pc}
 800ce76:	bf00      	nop
 800ce78:	0800ce21 	.word	0x0800ce21
 800ce7c:	20009e70 	.word	0x20009e70
 800ce80:	20000008 	.word	0x20000008

0800ce84 <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 800ce84:	4801      	ldr	r0, [pc, #4]	; (800ce8c <MX_USB_HOST_Process+0x8>)
 800ce86:	f7f7 bb2b 	b.w	80044e0 <USBH_Process>
 800ce8a:	bf00      	nop
 800ce8c:	20009e70 	.word	0x20009e70

0800ce90 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ce90:	b530      	push	{r4, r5, lr}
 800ce92:	4604      	mov	r4, r0
 800ce94:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce96:	2214      	movs	r2, #20
 800ce98:	2100      	movs	r1, #0
 800ce9a:	a803      	add	r0, sp, #12
 800ce9c:	f000 fdb4 	bl	800da08 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800cea0:	6823      	ldr	r3, [r4, #0]
 800cea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cea6:	d135      	bne.n	800cf14 <HAL_HCD_MspInit+0x84>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cea8:	4c1b      	ldr	r4, [pc, #108]	; (800cf18 <HAL_HCD_MspInit+0x88>)
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ceaa:	481c      	ldr	r0, [pc, #112]	; (800cf1c <HAL_HCD_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ceac:	2500      	movs	r5, #0
 800ceae:	9501      	str	r5, [sp, #4]
 800ceb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ceb2:	f043 0301 	orr.w	r3, r3, #1
 800ceb6:	6323      	str	r3, [r4, #48]	; 0x30
 800ceb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ceba:	f003 0301 	and.w	r3, r3, #1
 800cebe:	9301      	str	r3, [sp, #4]
 800cec0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800cec2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800cec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cec8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ceca:	f7f4 fe89 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800cece:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ced2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ced4:	2302      	movs	r3, #2
 800ced6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ced8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ceda:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cedc:	480f      	ldr	r0, [pc, #60]	; (800cf1c <HAL_HCD_MspInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cede:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cee0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cee2:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cee4:	f7f4 fe7c 	bl	8001be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cee8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ceea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceee:	6363      	str	r3, [r4, #52]	; 0x34
 800cef0:	9502      	str	r5, [sp, #8]
 800cef2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cef8:	6463      	str	r3, [r4, #68]	; 0x44
 800cefa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cefc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf00:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cf02:	2043      	movs	r0, #67	; 0x43
 800cf04:	462a      	mov	r2, r5
 800cf06:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cf08:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cf0a:	f7f4 fa25 	bl	8001358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cf0e:	2043      	movs	r0, #67	; 0x43
 800cf10:	f7f4 fa56 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cf14:	b009      	add	sp, #36	; 0x24
 800cf16:	bd30      	pop	{r4, r5, pc}
 800cf18:	40023800 	.word	0x40023800
 800cf1c:	40020000 	.word	0x40020000

0800cf20 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 800cf20:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800cf24:	f7f7 bc24 	b.w	8004770 <USBH_LL_IncTimer>

0800cf28 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 800cf28:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800cf2c:	f7f7 bc36 	b.w	800479c <USBH_LL_Connect>

0800cf30 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 800cf30:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800cf34:	f7f7 bc46 	b.w	80047c4 <USBH_LL_Disconnect>

0800cf38 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cf38:	4770      	bx	lr

0800cf3a <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 800cf3a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800cf3e:	f7f7 bc25 	b.w	800478c <USBH_LL_PortEnabled>

0800cf42 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 800cf42:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800cf46:	f7f7 bc25 	b.w	8004794 <USBH_LL_PortDisabled>
	...

0800cf4c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cf4c:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800cf4e:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800cf52:	2b01      	cmp	r3, #1
{
 800cf54:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 800cf56:	d11b      	bne.n	800cf90 <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800cf58:	480e      	ldr	r0, [pc, #56]	; (800cf94 <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_FS;
 800cf5a:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cf5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cf62:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800cf64:	2208      	movs	r2, #8
 800cf66:	6082      	str	r2, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800cf68:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800cf6a:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cf6c:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 800cf6e:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cf72:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800cf74:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cf76:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800cf78:	f7f4 ff68 	bl	8001e4c <HAL_HCD_Init>
 800cf7c:	b108      	cbz	r0, 800cf82 <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 800cf7e:	f7ff fcd7 	bl	800c930 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800cf82:	4804      	ldr	r0, [pc, #16]	; (800cf94 <USBH_LL_Init+0x48>)
 800cf84:	f7f5 fb60 	bl	8002648 <HAL_HCD_GetCurrentFrame>
 800cf88:	4601      	mov	r1, r0
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f7f7 fbed 	bl	800476a <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 800cf90:	2000      	movs	r0, #0
 800cf92:	bd10      	pop	{r4, pc}
 800cf94:	2000a23c 	.word	0x2000a23c

0800cf98 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cf98:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 800cf9a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800cf9e:	f7f5 fb1d 	bl	80025dc <HAL_HCD_Start>
 800cfa2:	2803      	cmp	r0, #3
 800cfa4:	bf9a      	itte	ls
 800cfa6:	4b02      	ldrls	r3, [pc, #8]	; (800cfb0 <USBH_LL_Start+0x18>)
 800cfa8:	5c18      	ldrbls	r0, [r3, r0]
 800cfaa:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800cfac:	bd08      	pop	{r3, pc}
 800cfae:	bf00      	nop
 800cfb0:	08012766 	.word	0x08012766

0800cfb4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cfb4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 800cfb6:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800cfba:	f7f5 fb25 	bl	8002608 <HAL_HCD_Stop>
 800cfbe:	2803      	cmp	r0, #3
 800cfc0:	bf9a      	itte	ls
 800cfc2:	4b02      	ldrls	r3, [pc, #8]	; (800cfcc <USBH_LL_Stop+0x18>)
 800cfc4:	5c18      	ldrbls	r0, [r3, r0]
 800cfc6:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 800cfc8:	bd08      	pop	{r3, pc}
 800cfca:	bf00      	nop
 800cfcc:	08012766 	.word	0x08012766

0800cfd0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cfd0:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cfd2:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800cfd6:	f7f5 fb3a 	bl	800264e <HAL_HCD_GetCurrentSpeed>
 800cfda:	2802      	cmp	r0, #2
 800cfdc:	bf9a      	itte	ls
 800cfde:	4b02      	ldrls	r3, [pc, #8]	; (800cfe8 <USBH_LL_GetSpeed+0x18>)
 800cfe0:	5c18      	ldrbls	r0, [r3, r0]
 800cfe2:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 800cfe4:	bd08      	pop	{r3, pc}
 800cfe6:	bf00      	nop
 800cfe8:	08012763 	.word	0x08012763

0800cfec <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cfec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cfee:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800cff2:	f7f5 fb1b 	bl	800262c <HAL_HCD_ResetPort>
 800cff6:	2803      	cmp	r0, #3
 800cff8:	bf9a      	itte	ls
 800cffa:	4b02      	ldrls	r3, [pc, #8]	; (800d004 <USBH_LL_ResetPort+0x18>)
 800cffc:	5c18      	ldrbls	r0, [r3, r0]
 800cffe:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800d000:	bd08      	pop	{r3, pc}
 800d002:	bf00      	nop
 800d004:	08012766 	.word	0x08012766

0800d008 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d008:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d00c:	f7f5 bb17 	b.w	800263e <HAL_HCD_HC_GetXferCount>

0800d010 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d012:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800d016:	9402      	str	r4, [sp, #8]
 800d018:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800d01c:	9401      	str	r4, [sp, #4]
 800d01e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800d022:	9400      	str	r4, [sp, #0]
 800d024:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d028:	f7f4 fec6 	bl	8001db8 <HAL_HCD_HC_Init>
 800d02c:	2803      	cmp	r0, #3
 800d02e:	bf9a      	itte	ls
 800d030:	4b02      	ldrls	r3, [pc, #8]	; (800d03c <USBH_LL_OpenPipe+0x2c>)
 800d032:	5c18      	ldrbls	r0, [r3, r0]
 800d034:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800d036:	b004      	add	sp, #16
 800d038:	bd10      	pop	{r4, pc}
 800d03a:	bf00      	nop
 800d03c:	08012766 	.word	0x08012766

0800d040 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d040:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d042:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d046:	f7f4 feef 	bl	8001e28 <HAL_HCD_HC_Halt>
 800d04a:	2803      	cmp	r0, #3
 800d04c:	bf9a      	itte	ls
 800d04e:	4b02      	ldrls	r3, [pc, #8]	; (800d058 <USBH_LL_ClosePipe+0x18>)
 800d050:	5c18      	ldrbls	r0, [r3, r0]
 800d052:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800d054:	bd08      	pop	{r3, pc}
 800d056:	bf00      	nop
 800d058:	08012766 	.word	0x08012766

0800d05c <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d05c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d05e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800d062:	9403      	str	r4, [sp, #12]
 800d064:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800d068:	9402      	str	r4, [sp, #8]
 800d06a:	9c07      	ldr	r4, [sp, #28]
 800d06c:	9401      	str	r4, [sp, #4]
 800d06e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800d072:	9400      	str	r4, [sp, #0]
 800d074:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d078:	f7f4 ff32 	bl	8001ee0 <HAL_HCD_HC_SubmitRequest>
 800d07c:	2803      	cmp	r0, #3
 800d07e:	bf9a      	itte	ls
 800d080:	4b02      	ldrls	r3, [pc, #8]	; (800d08c <USBH_LL_SubmitURB+0x30>)
 800d082:	5c18      	ldrbls	r0, [r3, r0]
 800d084:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800d086:	b004      	add	sp, #16
 800d088:	bd10      	pop	{r4, pc}
 800d08a:	bf00      	nop
 800d08c:	08012766 	.word	0x08012766

0800d090 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d090:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800d094:	f7f5 bacd 	b.w	8002632 <HAL_HCD_HC_GetURBState>

0800d098 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d098:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 800d09a:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d102      	bne.n	800d0a8 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 800d0a2:	4608      	mov	r0, r1
 800d0a4:	f000 f816 	bl	800d0d4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d0a8:	20c8      	movs	r0, #200	; 0xc8
 800d0aa:	f7f3 ff6b 	bl	8000f84 <HAL_Delay>
  return USBH_OK;
}
 800d0ae:	2000      	movs	r0, #0
 800d0b0:	bd08      	pop	{r3, pc}

0800d0b2 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d0b2:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 800d0b6:	2328      	movs	r3, #40	; 0x28
 800d0b8:	fb03 0101 	mla	r1, r3, r1, r0
 800d0bc:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800d0c0:	b11b      	cbz	r3, 800d0ca <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d0c2:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 800d0ca:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 800d0ce:	e7fa      	b.n	800d0c6 <USBH_LL_SetToggle+0x14>

0800d0d0 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800d0d0:	f7f3 bf58 	b.w	8000f84 <HAL_Delay>

0800d0d4 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800d0d4:	fab0 f280 	clz	r2, r0
 800d0d8:	0952      	lsrs	r2, r2, #5
 800d0da:	2101      	movs	r1, #1
 800d0dc:	4801      	ldr	r0, [pc, #4]	; (800d0e4 <MX_DriverVbusFS+0x10>)
 800d0de:	f7f4 be5f 	b.w	8001da0 <HAL_GPIO_WritePin>
 800d0e2:	bf00      	nop
 800d0e4:	40020800 	.word	0x40020800

0800d0e8 <xbee_frames_copy>:
#define xbee_frames_pop_head() xbee_frames_pop( 0 )

void xbee_frames_copy( int target_rank, int source_rank )
{
	int i;
	for ( i = 0 ; i < xbee_frames[ source_rank ].len ; i++ )
 800d0e8:	4b0a      	ldr	r3, [pc, #40]	; (800d114 <xbee_frames_copy+0x2c>)
 800d0ea:	2266      	movs	r2, #102	; 0x66
 800d0ec:	fb02 3101 	mla	r1, r2, r1, r3
{
 800d0f0:	b570      	push	{r4, r5, r6, lr}
	for ( i = 0 ; i < xbee_frames[ source_rank ].len ; i++ )
 800d0f2:	f8b1 5064 	ldrh.w	r5, [r1, #100]	; 0x64
 800d0f6:	fb02 3400 	mla	r4, r2, r0, r3
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	42aa      	cmp	r2, r5
 800d0fe:	db05      	blt.n	800d10c <xbee_frames_copy+0x24>
	{
		xbee_frames[ target_rank ].rx[ i ] = xbee_frames[ source_rank ].rx[ i ];
	}

	xbee_frames[ target_rank ].len = xbee_frames[ source_rank ].len;
 800d100:	2266      	movs	r2, #102	; 0x66
 800d102:	fb02 3300 	mla	r3, r2, r0, r3
 800d106:	f8a3 5064 	strh.w	r5, [r3, #100]	; 0x64
 800d10a:	bd70      	pop	{r4, r5, r6, pc}
		xbee_frames[ target_rank ].rx[ i ] = xbee_frames[ source_rank ].rx[ i ];
 800d10c:	5c8e      	ldrb	r6, [r1, r2]
 800d10e:	54a6      	strb	r6, [r4, r2]
	for ( i = 0 ; i < xbee_frames[ source_rank ].len ; i++ )
 800d110:	3201      	adds	r2, #1
 800d112:	e7f3      	b.n	800d0fc <xbee_frames_copy+0x14>
 800d114:	20000ed6 	.word	0x20000ed6

0800d118 <xbee_frames_pop>:
}

void xbee_frames_pop( int rank )
{
 800d118:	b570      	push	{r4, r5, r6, lr}
	if ( xbee_n_frames > 0 )
 800d11a:	4d0d      	ldr	r5, [pc, #52]	; (800d150 <xbee_frames_pop+0x38>)
 800d11c:	782c      	ldrb	r4, [r5, #0]
 800d11e:	b184      	cbz	r4, 800d142 <xbee_frames_pop+0x2a>
	{
		int i;
		for ( i = rank ; i < xbee_n_frames - 1 ; i++ )
 800d120:	3c01      	subs	r4, #1
 800d122:	42a0      	cmp	r0, r4
 800d124:	db07      	blt.n	800d136 <xbee_frames_pop+0x1e>
		{
			xbee_frames_copy( i, i + 1 );
		}
		xbee_n_frames--;
 800d126:	b2e4      	uxtb	r4, r4
 800d128:	702c      	strb	r4, [r5, #0]

		if ( xbee_n_frames ) { event_trigger( &xbee_evt ); }
 800d12a:	b184      	cbz	r4, 800d14e <xbee_frames_pop+0x36>
 800d12c:	4809      	ldr	r0, [pc, #36]	; (800d154 <xbee_frames_pop+0x3c>)
	}
	else
	{
		xbee_signal_error( __LINE__ );
	}
}
 800d12e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if ( xbee_n_frames ) { event_trigger( &xbee_evt ); }
 800d132:	f7fe bf52 	b.w	800bfda <event_trigger>
			xbee_frames_copy( i, i + 1 );
 800d136:	1c46      	adds	r6, r0, #1
 800d138:	4631      	mov	r1, r6
 800d13a:	f7ff ffd5 	bl	800d0e8 <xbee_frames_copy>
		for ( i = rank ; i < xbee_n_frames - 1 ; i++ )
 800d13e:	4630      	mov	r0, r6
 800d140:	e7ef      	b.n	800d122 <xbee_frames_pop+0xa>
		xbee_signal_error( __LINE__ );
 800d142:	4b05      	ldr	r3, [pc, #20]	; (800d158 <xbee_frames_pop+0x40>)
 800d144:	205d      	movs	r0, #93	; 0x5d
 800d146:	681b      	ldr	r3, [r3, #0]
}
 800d148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		xbee_signal_error( __LINE__ );
 800d14c:	4718      	bx	r3
 800d14e:	bd70      	pop	{r4, r5, r6, pc}
 800d150:	200016cf 	.word	0x200016cf
 800d154:	2000a504 	.word	0x2000a504
 800d158:	2000a500 	.word	0x2000a500

0800d15c <xbee_frames_push>:

void xbee_frames_push( uint8_t *data, uint16_t len )
{
 800d15c:	b4f0      	push	{r4, r5, r6, r7}
	if ( xbee_n_frames >= XBEE_N_FRAMES_MAX )
 800d15e:	4c15      	ldr	r4, [pc, #84]	; (800d1b4 <xbee_frames_push+0x58>)
 800d160:	7823      	ldrb	r3, [r4, #0]
 800d162:	2b13      	cmp	r3, #19
 800d164:	d904      	bls.n	800d170 <xbee_frames_push+0x14>
	{
		xbee_signal_error( __LINE__ );
 800d166:	4b14      	ldr	r3, [pc, #80]	; (800d1b8 <xbee_frames_push+0x5c>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2065      	movs	r0, #101	; 0x65
	xbee_frames[ xbee_n_frames ].len = len;

	xbee_n_frames++;

	event_trigger( &xbee_evt );
}
 800d16c:	bcf0      	pop	{r4, r5, r6, r7}
		xbee_signal_error( __LINE__ );
 800d16e:	4718      	bx	r3
	if ( len >= FRAME_LEN )
 800d170:	2963      	cmp	r1, #99	; 0x63
 800d172:	d903      	bls.n	800d17c <xbee_frames_push+0x20>
		xbee_signal_error( __LINE__ );
 800d174:	4b10      	ldr	r3, [pc, #64]	; (800d1b8 <xbee_frames_push+0x5c>)
 800d176:	206b      	movs	r0, #107	; 0x6b
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	e7f7      	b.n	800d16c <xbee_frames_push+0x10>
	if ( len < 4 )
 800d17c:	2903      	cmp	r1, #3
 800d17e:	d911      	bls.n	800d1a4 <xbee_frames_push+0x48>
 800d180:	4d0e      	ldr	r5, [pc, #56]	; (800d1bc <xbee_frames_push+0x60>)
 800d182:	2666      	movs	r6, #102	; 0x66
 800d184:	fb03 5606 	mla	r6, r3, r6, r5
 800d188:	2200      	movs	r2, #0
	for ( i = 0 ; i < len ; i++ )
 800d18a:	428a      	cmp	r2, r1
 800d18c:	db0e      	blt.n	800d1ac <xbee_frames_push+0x50>
	xbee_frames[ xbee_n_frames ].len = len;
 800d18e:	2266      	movs	r2, #102	; 0x66
 800d190:	fb02 5503 	mla	r5, r2, r3, r5
	xbee_n_frames++;
 800d194:	3301      	adds	r3, #1
	xbee_frames[ xbee_n_frames ].len = len;
 800d196:	f8a5 1064 	strh.w	r1, [r5, #100]	; 0x64
	xbee_n_frames++;
 800d19a:	7023      	strb	r3, [r4, #0]
	event_trigger( &xbee_evt );
 800d19c:	4808      	ldr	r0, [pc, #32]	; (800d1c0 <xbee_frames_push+0x64>)
}
 800d19e:	bcf0      	pop	{r4, r5, r6, r7}
	event_trigger( &xbee_evt );
 800d1a0:	f7fe bf1b 	b.w	800bfda <event_trigger>
		xbee_signal_error( __LINE__ );
 800d1a4:	4b04      	ldr	r3, [pc, #16]	; (800d1b8 <xbee_frames_push+0x5c>)
 800d1a6:	2072      	movs	r0, #114	; 0x72
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	e7df      	b.n	800d16c <xbee_frames_push+0x10>
		xbee_frames[ xbee_n_frames ].rx[ i ] = data[ i ];
 800d1ac:	5c87      	ldrb	r7, [r0, r2]
 800d1ae:	54b7      	strb	r7, [r6, r2]
	for ( i = 0 ; i < len ; i++ )
 800d1b0:	3201      	adds	r2, #1
 800d1b2:	e7ea      	b.n	800d18a <xbee_frames_push+0x2e>
 800d1b4:	200016cf 	.word	0x200016cf
 800d1b8:	2000a500 	.word	0x2000a500
 800d1bc:	20000ed6 	.word	0x20000ed6
 800d1c0:	2000a504 	.word	0x2000a504

0800d1c4 <xbee_frames_find>:

int xbee_frames_find( uint8_t *rank, uint8_t type )
{
 800d1c4:	b570      	push	{r4, r5, r6, lr}
	int k;
	for ( k = 0 ; k < xbee_n_frames ; k++ )
 800d1c6:	4b09      	ldr	r3, [pc, #36]	; (800d1ec <xbee_frames_find+0x28>)
	{
		if ( xbee_frames[ k ].rx[ 3 ] == type )
 800d1c8:	4c09      	ldr	r4, [pc, #36]	; (800d1f0 <xbee_frames_find+0x2c>)
	for ( k = 0 ; k < xbee_n_frames ; k++ )
 800d1ca:	781a      	ldrb	r2, [r3, #0]
		if ( xbee_frames[ k ].rx[ 3 ] == type )
 800d1cc:	2566      	movs	r5, #102	; 0x66
	for ( k = 0 ; k < xbee_n_frames ; k++ )
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	db01      	blt.n	800d1d8 <xbee_frames_find+0x14>
			*rank = k;
			return 1;
		}
	}

  return 0;
 800d1d4:	2000      	movs	r0, #0
}
 800d1d6:	bd70      	pop	{r4, r5, r6, pc}
		if ( xbee_frames[ k ].rx[ 3 ] == type )
 800d1d8:	fb05 4603 	mla	r6, r5, r3, r4
 800d1dc:	78f6      	ldrb	r6, [r6, #3]
 800d1de:	428e      	cmp	r6, r1
 800d1e0:	d102      	bne.n	800d1e8 <xbee_frames_find+0x24>
			*rank = k;
 800d1e2:	7003      	strb	r3, [r0, #0]
			return 1;
 800d1e4:	2001      	movs	r0, #1
 800d1e6:	bd70      	pop	{r4, r5, r6, pc}
	for ( k = 0 ; k < xbee_n_frames ; k++ )
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	e7f1      	b.n	800d1d0 <xbee_frames_find+0xc>
 800d1ec:	200016cf 	.word	0x200016cf
 800d1f0:	20000ed6 	.word	0x20000ed6

0800d1f4 <xbee_get_recv_event>:
	xbee_frame_len = 0; \
}
// ...........................................................................

// ...........................................................................
event *xbee_get_recv_event() { return &xbee_evt; }
 800d1f4:	4800      	ldr	r0, [pc, #0]	; (800d1f8 <xbee_get_recv_event+0x4>)
 800d1f6:	4770      	bx	lr
 800d1f8:	2000a504 	.word	0x2000a504

0800d1fc <xbee_wait_recv>:

int xbee_wait_recv( uint16_t timeout_ms )
{
 800d1fc:	b538      	push	{r3, r4, r5, lr}
	while ( !event_check( &xbee_evt ) )
 800d1fe:	4d08      	ldr	r5, [pc, #32]	; (800d220 <xbee_wait_recv+0x24>)
{
 800d200:	4604      	mov	r4, r0
	while ( !event_check( &xbee_evt ) )
 800d202:	4628      	mov	r0, r5
 800d204:	f7fe feec 	bl	800bfe0 <event_check>
 800d208:	b108      	cbz	r0, 800d20e <xbee_wait_recv+0x12>
		else
		{
			return 0;
		}
	}
	return 1;
 800d20a:	2001      	movs	r0, #1
}
 800d20c:	bd38      	pop	{r3, r4, r5, pc}
		if ( timeout_ms )
 800d20e:	2c00      	cmp	r4, #0
 800d210:	d0fc      	beq.n	800d20c <xbee_wait_recv+0x10>
		  timeout_ms--;
 800d212:	3c01      	subs	r4, #1
		  HAL_Delay( 1 );
 800d214:	2001      	movs	r0, #1
		  timeout_ms--;
 800d216:	b2a4      	uxth	r4, r4
		  HAL_Delay( 1 );
 800d218:	f7f3 feb4 	bl	8000f84 <HAL_Delay>
 800d21c:	e7f1      	b.n	800d202 <xbee_wait_recv+0x6>
 800d21e:	bf00      	nop
 800d220:	2000a504 	.word	0x2000a504

0800d224 <xbee_recv_get_frame_type>:
// ...........................................................................

// ...........................................................................
uint8_t xbee_recv_get_frame_type()
{
  if ( xbee_n_frames ) return xbee_frames_head.rx[ 3 ];
 800d224:	4b02      	ldr	r3, [pc, #8]	; (800d230 <xbee_recv_get_frame_type+0xc>)
 800d226:	7818      	ldrb	r0, [r3, #0]
 800d228:	b108      	cbz	r0, 800d22e <xbee_recv_get_frame_type+0xa>
 800d22a:	4b02      	ldr	r3, [pc, #8]	; (800d234 <xbee_recv_get_frame_type+0x10>)
 800d22c:	78d8      	ldrb	r0, [r3, #3]

  return 0;
}
 800d22e:	4770      	bx	lr
 800d230:	200016cf 	.word	0x200016cf
 800d234:	20000ed6 	.word	0x20000ed6

0800d238 <xbee_checksum>:
// ...........................................................................

// ...........................................................................
uint8_t xbee_checksum( uint8_t *data, uint16_t len )
{
 800d238:	b510      	push	{r4, lr}
  uint8_t crc = 0;
  for ( int i = 0 ; i < len ; i++ ) crc += data[ i ];
 800d23a:	4602      	mov	r2, r0
  uint8_t crc = 0;
 800d23c:	2300      	movs	r3, #0
  for ( int i = 0 ; i < len ; i++ ) crc += data[ i ];
 800d23e:	1a14      	subs	r4, r2, r0
 800d240:	42a1      	cmp	r1, r4
 800d242:	dc02      	bgt.n	800d24a <xbee_checksum+0x12>
  return 0xFF - crc;
 800d244:	43d8      	mvns	r0, r3
}
 800d246:	b2c0      	uxtb	r0, r0
 800d248:	bd10      	pop	{r4, pc}
  for ( int i = 0 ; i < len ; i++ ) crc += data[ i ];
 800d24a:	f812 4b01 	ldrb.w	r4, [r2], #1
 800d24e:	4423      	add	r3, r4
 800d250:	b2db      	uxtb	r3, r3
 800d252:	e7f4      	b.n	800d23e <xbee_checksum+0x6>

0800d254 <xbee_pull_expected>:
// 0 1 2 3 4 5
// E E              xbee_frame_len = 2
// r r R R R        xbee_rx_len = 5
void xbee_pull_expected()
{
	if ( xbee_rx_len < xbee_frame_len )
 800d254:	4a0d      	ldr	r2, [pc, #52]	; (800d28c <xbee_pull_expected+0x38>)
 800d256:	480e      	ldr	r0, [pc, #56]	; (800d290 <xbee_pull_expected+0x3c>)
{
 800d258:	b4f0      	push	{r4, r5, r6, r7}
	if ( xbee_rx_len < xbee_frame_len )
 800d25a:	8803      	ldrh	r3, [r0, #0]
 800d25c:	8814      	ldrh	r4, [r2, #0]
 800d25e:	42a3      	cmp	r3, r4
 800d260:	4611      	mov	r1, r2
 800d262:	d204      	bcs.n	800d26e <xbee_pull_expected+0x1a>
	{
	  xbee_signal_error( __LINE__ );
 800d264:	4b0b      	ldr	r3, [pc, #44]	; (800d294 <xbee_pull_expected+0x40>)
 800d266:	20fc      	movs	r0, #252	; 0xfc
 800d268:	681b      	ldr	r3, [r3, #0]
	{
		xbee_rx[ k ] = xbee_rx[ i ];
	}
	xbee_rx_len -= xbee_frame_len;
	xbee_frame_len = 0;
}
 800d26a:	bcf0      	pop	{r4, r5, r6, r7}
	  xbee_signal_error( __LINE__ );
 800d26c:	4718      	bx	r3
		xbee_rx[ k ] = xbee_rx[ i ];
 800d26e:	4d0a      	ldr	r5, [pc, #40]	; (800d298 <xbee_pull_expected+0x44>)
	for ( k = 0, i = xbee_frame_len ; i < xbee_rx_len ; i++, k++ )
 800d270:	4622      	mov	r2, r4
		xbee_rx[ k ] = xbee_rx[ i ];
 800d272:	1b2e      	subs	r6, r5, r4
	for ( k = 0, i = xbee_frame_len ; i < xbee_rx_len ; i++, k++ )
 800d274:	429a      	cmp	r2, r3
 800d276:	db05      	blt.n	800d284 <xbee_pull_expected+0x30>
	xbee_rx_len -= xbee_frame_len;
 800d278:	1b1b      	subs	r3, r3, r4
 800d27a:	8003      	strh	r3, [r0, #0]
	xbee_frame_len = 0;
 800d27c:	2300      	movs	r3, #0
 800d27e:	800b      	strh	r3, [r1, #0]
}
 800d280:	bcf0      	pop	{r4, r5, r6, r7}
 800d282:	4770      	bx	lr
		xbee_rx[ k ] = xbee_rx[ i ];
 800d284:	5d57      	ldrb	r7, [r2, r5]
 800d286:	54b7      	strb	r7, [r6, r2]
	for ( k = 0, i = xbee_frame_len ; i < xbee_rx_len ; i++, k++ )
 800d288:	3201      	adds	r2, #1
 800d28a:	e7f3      	b.n	800d274 <xbee_pull_expected+0x20>
 800d28c:	20000ed4 	.word	0x20000ed4
 800d290:	20001ab8 	.word	0x20001ab8
 800d294:	2000a500 	.word	0x2000a500
 800d298:	200016d0 	.word	0x200016d0

0800d29c <xbee_analyse_resp>:
// ...........................................................................

// ...........................................................................
void xbee_analyse_resp()
{
 800d29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	do
	{
      go = 0;

      if ( xbee_rx_len >= 1 )
 800d2a0:	4e25      	ldr	r6, [pc, #148]	; (800d338 <xbee_analyse_resp+0x9c>)
 800d2a2:	4d26      	ldr	r5, [pc, #152]	; (800d33c <xbee_analyse_resp+0xa0>)
 800d2a4:	4637      	mov	r7, r6
 800d2a6:	8833      	ldrh	r3, [r6, #0]
 800d2a8:	b15b      	cbz	r3, 800d2c2 <xbee_analyse_resp+0x26>
	  {
		  if ( xbee_rx[ 0 ] != 0x7E )
 800d2aa:	4b25      	ldr	r3, [pc, #148]	; (800d340 <xbee_analyse_resp+0xa4>)
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	2b7e      	cmp	r3, #126	; 0x7e
 800d2b0:	d007      	beq.n	800d2c2 <xbee_analyse_resp+0x26>
		  {
			  xbee_recv_clear();
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	8033      	strh	r3, [r6, #0]
 800d2b6:	802b      	strh	r3, [r5, #0]
			  xbee_signal_error( __LINE__ );
 800d2b8:	4b22      	ldr	r3, [pc, #136]	; (800d344 <xbee_analyse_resp+0xa8>)
 800d2ba:	f44f 708c 	mov.w	r0, #280	; 0x118
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4798      	blx	r3
		  }
	  }

	  if ( ( xbee_frame_len == 0 ) && ( xbee_rx_len >= 3 ) )
 800d2c2:	882c      	ldrh	r4, [r5, #0]
 800d2c4:	b9a4      	cbnz	r4, 800d2f0 <xbee_analyse_resp+0x54>
 800d2c6:	883b      	ldrh	r3, [r7, #0]
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	d933      	bls.n	800d334 <xbee_analyse_resp+0x98>
	  {
		xbee_frame_len = xbee_rx[ 1 ];
 800d2cc:	4a1c      	ldr	r2, [pc, #112]	; (800d340 <xbee_analyse_resp+0xa4>)
 800d2ce:	7851      	ldrb	r1, [r2, #1]
		xbee_frame_len <<= 8;
		xbee_frame_len |= xbee_rx[ 2 ];
 800d2d0:	7893      	ldrb	r3, [r2, #2]
 800d2d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		xbee_frame_len += 4;
 800d2d6:	3304      	adds	r3, #4
 800d2d8:	b29b      	uxth	r3, r3

		if ( xbee_frame_len > BUFFER_LEN )
 800d2da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		xbee_frame_len += 4;
 800d2de:	802b      	strh	r3, [r5, #0]
		if ( xbee_frame_len > BUFFER_LEN )
 800d2e0:	d904      	bls.n	800d2ec <xbee_analyse_resp+0x50>
		{
		  xbee_signal_error( __LINE__ );
 800d2e2:	4b18      	ldr	r3, [pc, #96]	; (800d344 <xbee_analyse_resp+0xa8>)
 800d2e4:	f240 1025 	movw	r0, #293	; 0x125
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4798      	blx	r3
		}
	  }

	  if ( xbee_frame_len && ( xbee_rx_len >= xbee_frame_len ) )
 800d2ec:	882c      	ldrh	r4, [r5, #0]
 800d2ee:	b30c      	cbz	r4, 800d334 <xbee_analyse_resp+0x98>
 800d2f0:	883b      	ldrh	r3, [r7, #0]
 800d2f2:	42a3      	cmp	r3, r4
 800d2f4:	d31e      	bcc.n	800d334 <xbee_analyse_resp+0x98>
	  {
		uint8_t crc = xbee_checksum( xbee_rx + 3, xbee_frame_len - 4 );
 800d2f6:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800d340 <xbee_analyse_resp+0xa4>
 800d2fa:	1f21      	subs	r1, r4, #4
 800d2fc:	b289      	uxth	r1, r1
 800d2fe:	f108 0003 	add.w	r0, r8, #3
 800d302:	f7ff ff99 	bl	800d238 <xbee_checksum>

		if ( crc != xbee_rx[ xbee_frame_len - 1 ] )
 800d306:	eb08 0304 	add.w	r3, r8, r4
 800d30a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d30e:	4283      	cmp	r3, r0
 800d310:	d009      	beq.n	800d326 <xbee_analyse_resp+0x8a>
		{
			xbee_recv_clear();
 800d312:	2300      	movs	r3, #0
 800d314:	803b      	strh	r3, [r7, #0]
 800d316:	802b      	strh	r3, [r5, #0]
			xbee_signal_error( __LINE__ );
 800d318:	4b0a      	ldr	r3, [pc, #40]	; (800d344 <xbee_analyse_resp+0xa8>)
 800d31a:	f44f 7098 	mov.w	r0, #304	; 0x130
 800d31e:	681b      	ldr	r3, [r3, #0]
		  // Remove the frame
		  xbee_pull_expected();
		}
	  }
	} while ( go );
}
 800d320:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			xbee_signal_error( __LINE__ );
 800d324:	4718      	bx	r3
		  xbee_frames_push( xbee_rx, xbee_frame_len );
 800d326:	4621      	mov	r1, r4
 800d328:	4640      	mov	r0, r8
 800d32a:	f7ff ff17 	bl	800d15c <xbee_frames_push>
		  xbee_pull_expected();
 800d32e:	f7ff ff91 	bl	800d254 <xbee_pull_expected>
 800d332:	e7b8      	b.n	800d2a6 <xbee_analyse_resp+0xa>
 800d334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d338:	20001ab8 	.word	0x20001ab8
 800d33c:	20000ed4 	.word	0x20000ed4
 800d340:	200016d0 	.word	0x200016d0
 800d344:	2000a500 	.word	0x2000a500

0800d348 <xbee_recv_full>:
// ...........................................................................


// ...........................................................................
int xbee_recv_full( uint8_t *data, uint16_t *len )
{
 800d348:	b538      	push	{r3, r4, r5, lr}
  uint16_t recvlen = xbee_frames_head.len - 4;
 800d34a:	4d11      	ldr	r5, [pc, #68]	; (800d390 <xbee_recv_full+0x48>)

  //sprintf( radio_log, "RECVFULL %d", xbee_rx_len );

  // Check if data has enough space to hold the frame
  if ( *len < recvlen )
 800d34c:	880c      	ldrh	r4, [r1, #0]
  uint16_t recvlen = xbee_frames_head.len - 4;
 800d34e:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 800d352:	3a04      	subs	r2, #4
 800d354:	b292      	uxth	r2, r2
  if ( *len < recvlen )
 800d356:	4294      	cmp	r4, r2
 800d358:	f04f 0400 	mov.w	r4, #0
 800d35c:	d207      	bcs.n	800d36e <xbee_recv_full+0x26>
  {
	  *len = 0;
	  xbee_signal_error( __LINE__ );
 800d35e:	4b0d      	ldr	r3, [pc, #52]	; (800d394 <xbee_recv_full+0x4c>)
	  *len = 0;
 800d360:	800c      	strh	r4, [r1, #0]
	  xbee_signal_error( __LINE__ );
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f240 1051 	movw	r0, #337	; 0x151
 800d368:	4798      	blx	r3
 800d36a:	4620      	mov	r0, r4
 800d36c:	bd38      	pop	{r3, r4, r5, pc}
	  return 0;
  }

  //sprintf( radio_log, "RECVFULL-- %d", xbee_rx_len );

  *len = recvlen;
 800d36e:	800a      	strh	r2, [r1, #0]

  for ( int i = 0 ; i < recvlen ; i++ ) data[ i ] = xbee_frames_head.rx[ i + 3 ];
 800d370:	4623      	mov	r3, r4
 800d372:	4293      	cmp	r3, r2
 800d374:	db06      	blt.n	800d384 <xbee_recv_full+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d376:	b672      	cpsid	i

  XBEE_UART_IT_DISABLE();
  xbee_frames_pop_head();
 800d378:	2000      	movs	r0, #0
 800d37a:	f7ff fecd 	bl	800d118 <xbee_frames_pop>
  __ASM volatile ("cpsie i" : : : "memory");
 800d37e:	b662      	cpsie	i
  XBEE_UART_IT_ENABLE();
  return 1;
 800d380:	2001      	movs	r0, #1
}
 800d382:	bd38      	pop	{r3, r4, r5, pc}
  for ( int i = 0 ; i < recvlen ; i++ ) data[ i ] = xbee_frames_head.rx[ i + 3 ];
 800d384:	18e9      	adds	r1, r5, r3
 800d386:	78c9      	ldrb	r1, [r1, #3]
 800d388:	54c1      	strb	r1, [r0, r3]
 800d38a:	3301      	adds	r3, #1
 800d38c:	e7f1      	b.n	800d372 <xbee_recv_full+0x2a>
 800d38e:	bf00      	nop
 800d390:	20000ed6 	.word	0x20000ed6
 800d394:	2000a500 	.word	0x2000a500

0800d398 <xbee_recv_discard>:
// ...........................................................................

// ...........................................................................
int xbee_recv_discard()
{
 800d398:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 800d39a:	b672      	cpsid	i
	  XBEE_UART_IT_DISABLE();
	  xbee_frames_pop_head();
 800d39c:	2000      	movs	r0, #0
 800d39e:	f7ff febb 	bl	800d118 <xbee_frames_pop>
  __ASM volatile ("cpsie i" : : : "memory");
 800d3a2:	b662      	cpsie	i
	  XBEE_UART_IT_ENABLE();
	  return 1;
}
 800d3a4:	2001      	movs	r0, #1
 800d3a6:	bd08      	pop	{r3, pc}

0800d3a8 <xbee_recv>:
// ...........................................................................

// ...........................................................................
int xbee_recv( uint64_t *from, uint8_t *data, uint16_t *len )
{
 800d3a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i;
  uint16_t recvlen = xbee_frames_head.len - 16;
 800d3ac:	4e1e      	ldr	r6, [pc, #120]	; (800d428 <xbee_recv+0x80>)

  //sprintf( radio_log, "RECV %d (%d - %d)", (int)xbee_rx_len, (int)(*len), (int)recvlen );

  // Check if data has enough space to hold the frame
  if ( *len < recvlen )
 800d3ae:	8814      	ldrh	r4, [r2, #0]
  uint16_t recvlen = xbee_frames_head.len - 16;
 800d3b0:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 800d3b4:	3b10      	subs	r3, #16
 800d3b6:	b29b      	uxth	r3, r3
  if ( *len < recvlen )
 800d3b8:	429c      	cmp	r4, r3
 800d3ba:	d209      	bcs.n	800d3d0 <xbee_recv+0x28>
  {
	  *len = 0;
	  xbee_signal_error( __LINE__ );
 800d3bc:	4b1b      	ldr	r3, [pc, #108]	; (800d42c <xbee_recv+0x84>)
	  *len = 0;
 800d3be:	2400      	movs	r4, #0
 800d3c0:	8014      	strh	r4, [r2, #0]
	  xbee_signal_error( __LINE__ );
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f44f 70bc 	mov.w	r0, #376	; 0x178
 800d3c8:	4798      	blx	r3
	  return 0;
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

  //sprintf( radio_log, "RECV-- %d", xbee_rx_len );

  *len = recvlen;

  *from = 0;
 800d3d0:	2700      	movs	r7, #0
  *len = recvlen;
 800d3d2:	8013      	strh	r3, [r2, #0]
  *from = 0;
 800d3d4:	463c      	mov	r4, r7
 800d3d6:	463a      	mov	r2, r7
 800d3d8:	6007      	str	r7, [r0, #0]
 800d3da:	6047      	str	r7, [r0, #4]
 800d3dc:	463d      	mov	r5, r7
  for ( i = 0 ; i < 8 ; i++ )
  {
	*from <<= 8;
	*from |= xbee_frames_head.rx[ i + 4 ];
 800d3de:	18b7      	adds	r7, r6, r2
	*from <<= 8;
 800d3e0:	ea4f 2905 	mov.w	r9, r5, lsl #8
	*from |= xbee_frames_head.rx[ i + 4 ];
 800d3e4:	f897 a004 	ldrb.w	sl, [r7, #4]
  for ( i = 0 ; i < 8 ; i++ )
 800d3e8:	3201      	adds	r2, #1
	*from <<= 8;
 800d3ea:	ea49 6914 	orr.w	r9, r9, r4, lsr #24
	*from |= xbee_frames_head.rx[ i + 4 ];
 800d3ee:	f04f 0b00 	mov.w	fp, #0
	*from <<= 8;
 800d3f2:	ea4f 2804 	mov.w	r8, r4, lsl #8
  for ( i = 0 ; i < 8 ; i++ )
 800d3f6:	2a08      	cmp	r2, #8
	*from |= xbee_frames_head.rx[ i + 4 ];
 800d3f8:	ea4a 0408 	orr.w	r4, sl, r8
 800d3fc:	ea4b 0509 	orr.w	r5, fp, r9
  for ( i = 0 ; i < 8 ; i++ )
 800d400:	d1ed      	bne.n	800d3de <xbee_recv+0x36>
 800d402:	e9c0 4500 	strd	r4, r5, [r0]
 800d406:	2200      	movs	r2, #0
  }

  for ( i = 0 ; i < recvlen ; i++ ) data[ i ] = xbee_frames_head.rx[ i + 15 ];
 800d408:	429a      	cmp	r2, r3
 800d40a:	db07      	blt.n	800d41c <xbee_recv+0x74>
  __ASM volatile ("cpsid i" : : : "memory");
 800d40c:	b672      	cpsid	i

  XBEE_UART_IT_DISABLE();
  xbee_frames_pop_head();
 800d40e:	2000      	movs	r0, #0
 800d410:	f7ff fe82 	bl	800d118 <xbee_frames_pop>
  __ASM volatile ("cpsie i" : : : "memory");
 800d414:	b662      	cpsie	i
  XBEE_UART_IT_ENABLE();
  return 1;
 800d416:	2001      	movs	r0, #1
}
 800d418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for ( i = 0 ; i < recvlen ; i++ ) data[ i ] = xbee_frames_head.rx[ i + 15 ];
 800d41c:	18b0      	adds	r0, r6, r2
 800d41e:	7bc0      	ldrb	r0, [r0, #15]
 800d420:	5488      	strb	r0, [r1, r2]
 800d422:	3201      	adds	r2, #1
 800d424:	e7f0      	b.n	800d408 <xbee_recv+0x60>
 800d426:	bf00      	nop
 800d428:	20000ed6 	.word	0x20000ed6
 800d42c:	2000a500 	.word	0x2000a500

0800d430 <xbee_notify_recv>:
// ...........................................................................

// ...........................................................................
void xbee_notify_recv( uint8_t c )
{
  XBEE_RX_LED_START();
 800d430:	4b13      	ldr	r3, [pc, #76]	; (800d480 <xbee_notify_recv+0x50>)
 800d432:	2250      	movs	r2, #80	; 0x50
{
 800d434:	b510      	push	{r4, lr}
  XBEE_RX_LED_START();
 800d436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d43a:	801a      	strh	r2, [r3, #0]
{
 800d43c:	4604      	mov	r4, r0
  XBEE_RX_LED_START();
 800d43e:	2201      	movs	r2, #1
 800d440:	4810      	ldr	r0, [pc, #64]	; (800d484 <xbee_notify_recv+0x54>)
 800d442:	f7f4 fcad 	bl	8001da0 <HAL_GPIO_WritePin>

  if ( xbee_rx_len < BUFFER_LEN )
 800d446:	4b10      	ldr	r3, [pc, #64]	; (800d488 <xbee_notify_recv+0x58>)
 800d448:	881a      	ldrh	r2, [r3, #0]
 800d44a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800d44e:	d20a      	bcs.n	800d466 <xbee_notify_recv+0x36>
  {
    xbee_rx[ xbee_rx_len++ ] = c;
 800d450:	1c51      	adds	r1, r2, #1
 800d452:	8019      	strh	r1, [r3, #0]
 800d454:	4b0d      	ldr	r3, [pc, #52]	; (800d48c <xbee_notify_recv+0x5c>)
 800d456:	549c      	strb	r4, [r3, r2]
  }

  //sprintf( radio_log, "%d", xbee_rx_len );


  if ( xbee_mode_AT ) return;
 800d458:	4b0d      	ldr	r3, [pc, #52]	; (800d490 <xbee_notify_recv+0x60>)
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	b973      	cbnz	r3, 800d47c <xbee_notify_recv+0x4c>

  xbee_analyse_resp();
}
 800d45e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  xbee_analyse_resp();
 800d462:	f7ff bf1b 	b.w	800d29c <xbee_analyse_resp>
	  xbee_recv_clear();
 800d466:	2200      	movs	r2, #0
 800d468:	801a      	strh	r2, [r3, #0]
 800d46a:	4b0a      	ldr	r3, [pc, #40]	; (800d494 <xbee_notify_recv+0x64>)
 800d46c:	801a      	strh	r2, [r3, #0]
	  xbee_signal_error( __LINE__ );
 800d46e:	4b0a      	ldr	r3, [pc, #40]	; (800d498 <xbee_notify_recv+0x68>)
 800d470:	f240 109d 	movw	r0, #413	; 0x19d
 800d474:	681b      	ldr	r3, [r3, #0]
}
 800d476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  xbee_signal_error( __LINE__ );
 800d47a:	4718      	bx	r3
 800d47c:	bd10      	pop	{r4, pc}
 800d47e:	bf00      	nop
 800d480:	20000ed2 	.word	0x20000ed2
 800d484:	40020c00 	.word	0x40020c00
 800d488:	20001ab8 	.word	0x20001ab8
 800d48c:	200016d0 	.word	0x200016d0
 800d490:	200016ce 	.word	0x200016ce
 800d494:	20000ed4 	.word	0x20000ed4
 800d498:	2000a500 	.word	0x2000a500

0800d49c <xbee_AT_check_OK>:

// ...........................................................................
int xbee_AT_check_OK()
{
 800d49c:	b538      	push	{r3, r4, r5, lr}
  int r = 0;

  if ( xbee_rx_len == 3 )
 800d49e:	4d09      	ldr	r5, [pc, #36]	; (800d4c4 <xbee_AT_check_OK+0x28>)
 800d4a0:	882b      	ldrh	r3, [r5, #0]
 800d4a2:	2b03      	cmp	r3, #3
 800d4a4:	f04f 0400 	mov.w	r4, #0
 800d4a8:	d109      	bne.n	800d4be <xbee_AT_check_OK+0x22>
  {
    xbee_rx[ 3 ] = 0;
 800d4aa:	4807      	ldr	r0, [pc, #28]	; (800d4c8 <xbee_AT_check_OK+0x2c>)
    if ( strcmp( ( char * )xbee_rx, "OK\r" ) == 0 ) { r = 1; }
 800d4ac:	4907      	ldr	r1, [pc, #28]	; (800d4cc <xbee_AT_check_OK+0x30>)
    xbee_rx[ 3 ] = 0;
 800d4ae:	70c4      	strb	r4, [r0, #3]
    if ( strcmp( ( char * )xbee_rx, "OK\r" ) == 0 ) { r = 1; }
 800d4b0:	f7f2 fe8e 	bl	80001d0 <strcmp>
 800d4b4:	fab0 f080 	clz	r0, r0
 800d4b8:	0940      	lsrs	r0, r0, #5
    xbee_rx_len = 0;
 800d4ba:	802c      	strh	r4, [r5, #0]
 800d4bc:	bd38      	pop	{r3, r4, r5, pc}
  int r = 0;
 800d4be:	4620      	mov	r0, r4
  }

  return r;
}
 800d4c0:	bd38      	pop	{r3, r4, r5, pc}
 800d4c2:	bf00      	nop
 800d4c4:	20001ab8 	.word	0x20001ab8
 800d4c8:	200016d0 	.word	0x200016d0
 800d4cc:	0801276a 	.word	0x0801276a

0800d4d0 <xbee_api_transmit>:
// ...........................................................................

// ...........................................................................
int xbee_api_transmit( uint8_t *data, uint16_t len, uint8_t ack_frame_type, uint8_t *rank )
{
 800d4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static uint8_t buffer[ FRAME_LEN ];

  xbee_ack_frame_type = ack_frame_type;

  buffer[ 0 ] = 0x7E;
 800d4d2:	4c1a      	ldr	r4, [pc, #104]	; (800d53c <xbee_api_transmit+0x6c>)
{
 800d4d4:	460f      	mov	r7, r1
 800d4d6:	4616      	mov	r6, r2
  buffer[ 1 ] = len << 8;
 800d4d8:	2100      	movs	r1, #0
  buffer[ 0 ] = 0x7E;
 800d4da:	227e      	movs	r2, #126	; 0x7e
{
 800d4dc:	461d      	mov	r5, r3
  buffer[ 0 ] = 0x7E;
 800d4de:	7022      	strb	r2, [r4, #0]
  buffer[ 1 ] = len << 8;
 800d4e0:	7061      	strb	r1, [r4, #1]
  buffer[ 2 ] = len & 0xFF;
 800d4e2:	70a7      	strb	r7, [r4, #2]
  for ( int i = 0 ; i < len ; i++ ) buffer[ 3 + i ] = data[ i ];
 800d4e4:	42b9      	cmp	r1, r7
 800d4e6:	db1b      	blt.n	800d520 <xbee_api_transmit+0x50>
  buffer[ len + 3 ] = xbee_checksum( data, len );
 800d4e8:	4639      	mov	r1, r7
 800d4ea:	f7ff fea5 	bl	800d238 <xbee_checksum>
 800d4ee:	19e3      	adds	r3, r4, r7

  int r = HAL_UART_Transmit( &huart3, buffer, len + 4, 1000 ) == HAL_OK ? 1 : 0;
 800d4f0:	1d3a      	adds	r2, r7, #4
  buffer[ len + 3 ] = xbee_checksum( data, len );
 800d4f2:	70d8      	strb	r0, [r3, #3]
  int r = HAL_UART_Transmit( &huart3, buffer, len + 4, 1000 ) == HAL_OK ? 1 : 0;
 800d4f4:	b292      	uxth	r2, r2
 800d4f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d4fa:	4910      	ldr	r1, [pc, #64]	; (800d53c <xbee_api_transmit+0x6c>)
 800d4fc:	4810      	ldr	r0, [pc, #64]	; (800d540 <xbee_api_transmit+0x70>)
 800d4fe:	f7f6 f8f7 	bl	80036f0 <HAL_UART_Transmit>
  if ( !r ) return 0;
 800d502:	b958      	cbnz	r0, 800d51c <xbee_api_transmit+0x4c>
 800d504:	240a      	movs	r4, #10

  // Wait for ack from the XBee board
  for ( int k = 0 ; k < 10 ; k++ )
  {
	  if ( xbee_wait_recv( 100 ) )
 800d506:	2064      	movs	r0, #100	; 0x64
 800d508:	f7ff fe78 	bl	800d1fc <xbee_wait_recv>
 800d50c:	b968      	cbnz	r0, 800d52a <xbee_api_transmit+0x5a>
  for ( int k = 0 ; k < 10 ; k++ )
 800d50e:	3c01      	subs	r4, #1
 800d510:	d1f9      	bne.n	800d506 <xbee_api_transmit+0x36>
			  return 1;
		  }
	  }
  }

  xbee_signal_error( __LINE__ );
 800d512:	4b0c      	ldr	r3, [pc, #48]	; (800d544 <xbee_api_transmit+0x74>)
 800d514:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4798      	blx	r3
  if ( !r ) return 0;
 800d51c:	2000      	movs	r0, #0
 800d51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for ( int i = 0 ; i < len ; i++ ) buffer[ 3 + i ] = data[ i ];
 800d520:	1863      	adds	r3, r4, r1
 800d522:	5c42      	ldrb	r2, [r0, r1]
 800d524:	70da      	strb	r2, [r3, #3]
 800d526:	3101      	adds	r1, #1
 800d528:	e7dc      	b.n	800d4e4 <xbee_api_transmit+0x14>
		  if ( xbee_frames_find( rank, ack_frame_type ) )
 800d52a:	4631      	mov	r1, r6
 800d52c:	4628      	mov	r0, r5
 800d52e:	f7ff fe49 	bl	800d1c4 <xbee_frames_find>
 800d532:	2800      	cmp	r0, #0
 800d534:	d0eb      	beq.n	800d50e <xbee_api_transmit+0x3e>
			  return 1;
 800d536:	2001      	movs	r0, #1
  return 0;
}
 800d538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d53a:	bf00      	nop
 800d53c:	20000e6d 	.word	0x20000e6d
 800d540:	20009a50 	.word	0x20009a50
 800d544:	2000a500 	.word	0x2000a500

0800d548 <xbee_api_send_to>:
#define INC_FRAME_ID() { frame_id++; if ( frame_id == 0 ) frame_id = 1; }

// ...........................................................................
// Note : len = 73 max
int xbee_api_send_to( uint64_t to, uint8_t *data, uint16_t len )
{
 800d548:	b570      	push	{r4, r5, r6, lr}
  
  // Type
  xreq[ 0 ] = 0x10;

  // Frame ID
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d54a:	4d23      	ldr	r5, [pc, #140]	; (800d5d8 <xbee_api_send_to+0x90>)
{
 800d54c:	b09a      	sub	sp, #104	; 0x68
  xreq[ 0 ] = 0x10;
 800d54e:	2410      	movs	r4, #16
 800d550:	f88d 4004 	strb.w	r4, [sp, #4]
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d554:	782c      	ldrb	r4, [r5, #0]
 800d556:	f88d 4005 	strb.w	r4, [sp, #5]
 800d55a:	3401      	adds	r4, #1
 800d55c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800d560:	bf08      	it	eq
 800d562:	2401      	moveq	r4, #1
 800d564:	702c      	strb	r4, [r5, #0]
  //   - Point-multipoint (0x40)
  //   - Directed Broadcast (0x80)
  //   - DigiMesh (0xC0)
  // Note: done here before we destroy the value of 'to'
  //xreq[ 13 ] = 0x80;
  xreq[ 13 ] = ( to == XBEE_BROADCAST ? 0x80 : 0x40 );
 800d566:	2500      	movs	r5, #0
 800d568:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800d56c:	42a9      	cmp	r1, r5
 800d56e:	bf06      	itte	eq
 800d570:	42a0      	cmpeq	r0, r4
 800d572:	2480      	moveq	r4, #128	; 0x80
 800d574:	2440      	movne	r4, #64	; 0x40
 800d576:	f88d 4011 	strb.w	r4, [sp, #17]
 800d57a:	2408      	movs	r4, #8

  // Dest address
  for ( i = 7 ; i >= 0 ; i-- )
  {
	xreq[ i + 2 ] = to & 0xFF;
 800d57c:	ad01      	add	r5, sp, #4
 800d57e:	4425      	add	r5, r4
	to >>= 8;
 800d580:	0a0e      	lsrs	r6, r1, #8
	xreq[ i + 2 ] = to & 0xFF;
 800d582:	7068      	strb	r0, [r5, #1]
	to >>= 8;
 800d584:	0a05      	lsrs	r5, r0, #8
 800d586:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
  for ( i = 7 ; i >= 0 ; i-- )
 800d58a:	3c01      	subs	r4, #1
	to >>= 8;
 800d58c:	4628      	mov	r0, r5
 800d58e:	4631      	mov	r1, r6
  for ( i = 7 ; i >= 0 ; i-- )
 800d590:	d1f4      	bne.n	800d57c <xbee_api_send_to+0x34>
  }
  
  // Reserved
  xreq[ 10 ] = 0xFF;
 800d592:	21ff      	movs	r1, #255	; 0xff
 800d594:	f88d 100e 	strb.w	r1, [sp, #14]
  xreq[ 11 ] = 0xFE;
 800d598:	21fe      	movs	r1, #254	; 0xfe
 800d59a:	f88d 100f 	strb.w	r1, [sp, #15]

  // Radius
  xreq[ 12 ] = 0;
 800d59e:	f88d 4010 	strb.w	r4, [sp, #16]

  for ( i = 0 ; i < len ; i++ ) xreq[ 14 + i ] = data[ i ];
 800d5a2:	429c      	cmp	r4, r3
 800d5a4:	db12      	blt.n	800d5cc <xbee_api_send_to+0x84>

  uint8_t rank;
  if ( xbee_api_transmit( xreq, 14 + len, 0x8B, &rank ) )
 800d5a6:	f103 010e 	add.w	r1, r3, #14
 800d5aa:	228b      	movs	r2, #139	; 0x8b
 800d5ac:	f10d 0303 	add.w	r3, sp, #3
 800d5b0:	b289      	uxth	r1, r1
 800d5b2:	a801      	add	r0, sp, #4
 800d5b4:	f7ff ff8c 	bl	800d4d0 <xbee_api_transmit>
 800d5b8:	b130      	cbz	r0, 800d5c8 <xbee_api_send_to+0x80>
  __ASM volatile ("cpsid i" : : : "memory");
 800d5ba:	b672      	cpsid	i
  {
	  XBEE_UART_IT_DISABLE();
	  xbee_frames_pop( rank ); // Discard the ACK
 800d5bc:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800d5c0:	f7ff fdaa 	bl	800d118 <xbee_frames_pop>
  __ASM volatile ("cpsie i" : : : "memory");
 800d5c4:	b662      	cpsie	i
	  XBEE_UART_IT_ENABLE();
	  return 1;
 800d5c6:	2001      	movs	r0, #1
  }

  return 0;
}
 800d5c8:	b01a      	add	sp, #104	; 0x68
 800d5ca:	bd70      	pop	{r4, r5, r6, pc}
  for ( i = 0 ; i < len ; i++ ) xreq[ 14 + i ] = data[ i ];
 800d5cc:	a901      	add	r1, sp, #4
 800d5ce:	4421      	add	r1, r4
 800d5d0:	5d10      	ldrb	r0, [r2, r4]
 800d5d2:	7388      	strb	r0, [r1, #14]
 800d5d4:	3401      	adds	r4, #1
 800d5d6:	e7e4      	b.n	800d5a2 <xbee_api_send_to+0x5a>
 800d5d8:	200005b8 	.word	0x200005b8

0800d5dc <xbee_api_AT16>:
// ...........................................................................

// ...........................................................................
int xbee_api_AT16( uint8_t *cmd, uint16_t val )
{
 800d5dc:	b500      	push	{lr}

  // Frame ID
#if XBEE_AT_NO_RESPONSE_NEEDED
  xreq[ 1 ] = 0;
#else
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d5de:	4a11      	ldr	r2, [pc, #68]	; (800d624 <xbee_api_AT16+0x48>)
{
 800d5e0:	b09b      	sub	sp, #108	; 0x6c
  xreq[ 0 ] = 0x08;
 800d5e2:	2308      	movs	r3, #8
 800d5e4:	f88d 3004 	strb.w	r3, [sp, #4]
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d5e8:	7813      	ldrb	r3, [r2, #0]
 800d5ea:	f88d 3005 	strb.w	r3, [sp, #5]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800d5f4:	bf08      	it	eq
 800d5f6:	2301      	moveq	r3, #1
 800d5f8:	7013      	strb	r3, [r2, #0]
#endif

  // Command and parameters
  for ( i = 0 ; i < 2 ; i++ ) xreq[ 2 + i ] = cmd[ i ]; // Works even with 1 char cmd (0 ended)
 800d5fa:	7803      	ldrb	r3, [r0, #0]
 800d5fc:	f88d 3006 	strb.w	r3, [sp, #6]
 800d600:	7843      	ldrb	r3, [r0, #1]
 800d602:	f88d 3007 	strb.w	r3, [sp, #7]

  xreq[ 4 ] = (val>>8) & 0xFF;
 800d606:	0a0b      	lsrs	r3, r1, #8
 800d608:	f88d 3008 	strb.w	r3, [sp, #8]
  xreq[ 5 ] = val & 0xFF;
 800d60c:	f88d 1009 	strb.w	r1, [sp, #9]

  uint8_t rank;
  return xbee_api_transmit( xreq, 6, 0x88, &rank );
 800d610:	f10d 0303 	add.w	r3, sp, #3
 800d614:	2288      	movs	r2, #136	; 0x88
 800d616:	2106      	movs	r1, #6
 800d618:	a801      	add	r0, sp, #4
 800d61a:	f7ff ff59 	bl	800d4d0 <xbee_api_transmit>
}
 800d61e:	b01b      	add	sp, #108	; 0x6c
 800d620:	f85d fb04 	ldr.w	pc, [sp], #4
 800d624:	200005b8 	.word	0x200005b8

0800d628 <xbee_api_AT8>:
// ...........................................................................

// ...........................................................................
int xbee_api_AT8( uint8_t *cmd, uint8_t val )
{
 800d628:	b500      	push	{lr}

  // Frame ID
#if XBEE_AT_NO_RESPONSE_NEEDED
  xreq[ 1 ] = 0;
#else
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d62a:	4a10      	ldr	r2, [pc, #64]	; (800d66c <xbee_api_AT8+0x44>)
{
 800d62c:	b09b      	sub	sp, #108	; 0x6c
  xreq[ 0 ] = 0x08;
 800d62e:	2308      	movs	r3, #8
 800d630:	f88d 3004 	strb.w	r3, [sp, #4]
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d634:	7813      	ldrb	r3, [r2, #0]
 800d636:	f88d 3005 	strb.w	r3, [sp, #5]
 800d63a:	3301      	adds	r3, #1
 800d63c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800d640:	bf08      	it	eq
 800d642:	2301      	moveq	r3, #1
 800d644:	7013      	strb	r3, [r2, #0]
#endif

  // Command and parameters
  for ( i = 0 ; i < 2 ; i++ ) xreq[ 2 + i ] = cmd[ i ]; // Works even with 1 char cmd (0 ended)
 800d646:	7803      	ldrb	r3, [r0, #0]
 800d648:	f88d 3006 	strb.w	r3, [sp, #6]
 800d64c:	7843      	ldrb	r3, [r0, #1]
 800d64e:	f88d 3007 	strb.w	r3, [sp, #7]

  xreq[ 4 ] = val;
 800d652:	f88d 1008 	strb.w	r1, [sp, #8]

  uint8_t rank;
  return xbee_api_transmit( xreq, 5, 0x88, &rank );
 800d656:	f10d 0303 	add.w	r3, sp, #3
 800d65a:	2288      	movs	r2, #136	; 0x88
 800d65c:	2105      	movs	r1, #5
 800d65e:	a801      	add	r0, sp, #4
 800d660:	f7ff ff36 	bl	800d4d0 <xbee_api_transmit>
}
 800d664:	b01b      	add	sp, #108	; 0x6c
 800d666:	f85d fb04 	ldr.w	pc, [sp], #4
 800d66a:	bf00      	nop
 800d66c:	200005b8 	.word	0x200005b8

0800d670 <xbee_init>:
	xbee_signal_error = f;
 800d670:	4b12      	ldr	r3, [pc, #72]	; (800d6bc <xbee_init+0x4c>)
	event_init( &xbee_evt );
 800d672:	4813      	ldr	r0, [pc, #76]	; (800d6c0 <xbee_init+0x50>)
{
 800d674:	b510      	push	{r4, lr}
	xbee_signal_error = f;
 800d676:	6019      	str	r1, [r3, #0]
	event_init( &xbee_evt );
 800d678:	f7fe fcac 	bl	800bfd4 <event_init>
	HAL_Delay( 1000 );
 800d67c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d680:	f7f3 fc80 	bl	8000f84 <HAL_Delay>
	xbee_recv_clear();
 800d684:	4b0f      	ldr	r3, [pc, #60]	; (800d6c4 <xbee_init+0x54>)
	xbee_api_AT16( ( uint8_t * )"ID", 0xAAAA );
 800d686:	4810      	ldr	r0, [pc, #64]	; (800d6c8 <xbee_init+0x58>)
	xbee_recv_clear();
 800d688:	2400      	movs	r4, #0
 800d68a:	801c      	strh	r4, [r3, #0]
 800d68c:	4b0f      	ldr	r3, [pc, #60]	; (800d6cc <xbee_init+0x5c>)
 800d68e:	801c      	strh	r4, [r3, #0]
	xbee_n_frames = 0;
 800d690:	4b0f      	ldr	r3, [pc, #60]	; (800d6d0 <xbee_init+0x60>)
	xbee_api_AT16( ( uint8_t * )"ID", 0xAAAA );
 800d692:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
	xbee_n_frames = 0;
 800d696:	701c      	strb	r4, [r3, #0]
	xbee_api_AT16( ( uint8_t * )"ID", 0xAAAA );
 800d698:	f7ff ffa0 	bl	800d5dc <xbee_api_AT16>
	xbee_recv_discard();
 800d69c:	f7ff fe7c 	bl	800d398 <xbee_recv_discard>
	xbee_api_AT8( ( uint8_t * )"CH", 0xC );
 800d6a0:	210c      	movs	r1, #12
 800d6a2:	480c      	ldr	r0, [pc, #48]	; (800d6d4 <xbee_init+0x64>)
 800d6a4:	f7ff ffc0 	bl	800d628 <xbee_api_AT8>
	xbee_recv_discard();
 800d6a8:	f7ff fe76 	bl	800d398 <xbee_recv_discard>
	xbee_api_AT8( ( uint8_t * )"CE", /*coordinator ? 1 :*/ 0 );
 800d6ac:	4621      	mov	r1, r4
 800d6ae:	480a      	ldr	r0, [pc, #40]	; (800d6d8 <xbee_init+0x68>)
 800d6b0:	f7ff ffba 	bl	800d628 <xbee_api_AT8>
}
 800d6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	xbee_recv_discard();
 800d6b8:	f7ff be6e 	b.w	800d398 <xbee_recv_discard>
 800d6bc:	2000a500 	.word	0x2000a500
 800d6c0:	2000a504 	.word	0x2000a504
 800d6c4:	20001ab8 	.word	0x20001ab8
 800d6c8:	08012791 	.word	0x08012791
 800d6cc:	20000ed4 	.word	0x20000ed4
 800d6d0:	200016cf 	.word	0x200016cf
 800d6d4:	08012794 	.word	0x08012794
 800d6d8:	08012797 	.word	0x08012797

0800d6dc <xbee_api_ATR>:

// ...........................................................................
int xbee_api_ATR( uint8_t *cmd )
{
 800d6dc:	b500      	push	{lr}

  // Frame ID
#if XBEE_AT_NO_RESPONSE_NEEDED
  xreq[ 1 ] = 0;
#else
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d6de:	4a0f      	ldr	r2, [pc, #60]	; (800d71c <xbee_api_ATR+0x40>)
{
 800d6e0:	b09b      	sub	sp, #108	; 0x6c
  xreq[ 0 ] = 0x08;
 800d6e2:	2308      	movs	r3, #8
 800d6e4:	f88d 3004 	strb.w	r3, [sp, #4]
  xreq[ 1 ] = frame_id; INC_FRAME_ID();
 800d6e8:	7813      	ldrb	r3, [r2, #0]
 800d6ea:	f88d 3005 	strb.w	r3, [sp, #5]
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800d6f4:	bf08      	it	eq
 800d6f6:	2301      	moveq	r3, #1
 800d6f8:	7013      	strb	r3, [r2, #0]
#endif

  // Command
  for ( i = 0 ; i < 2 ; i++ ) xreq[ 2 + i ] = cmd[ i ]; // Works even with 1 char cmd (0 ended)
 800d6fa:	7803      	ldrb	r3, [r0, #0]
 800d6fc:	f88d 3006 	strb.w	r3, [sp, #6]

  uint8_t rank;
  return xbee_api_transmit( xreq, 4, 0x88, &rank );
 800d700:	2104      	movs	r1, #4
  for ( i = 0 ; i < 2 ; i++ ) xreq[ 2 + i ] = cmd[ i ]; // Works even with 1 char cmd (0 ended)
 800d702:	7843      	ldrb	r3, [r0, #1]
 800d704:	f88d 3007 	strb.w	r3, [sp, #7]
  return xbee_api_transmit( xreq, 4, 0x88, &rank );
 800d708:	2288      	movs	r2, #136	; 0x88
 800d70a:	f10d 0303 	add.w	r3, sp, #3
 800d70e:	eb0d 0001 	add.w	r0, sp, r1
 800d712:	f7ff fedd 	bl	800d4d0 <xbee_api_transmit>
}
 800d716:	b01b      	add	sp, #108	; 0x6c
 800d718:	f85d fb04 	ldr.w	pc, [sp], #4
 800d71c:	200005b8 	.word	0x200005b8

0800d720 <xbee_api_read_unique_id>:
// ...........................................................................

// ...........................................................................
uint64_t xbee_api_read_unique_id()
{
 800d720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int i;

  uint64_t id = 0;

  // SH
  if ( !xbee_api_ATR( ( uint8_t * )"SH" ) )
 800d724:	483b      	ldr	r0, [pc, #236]	; (800d814 <xbee_api_read_unique_id+0xf4>)
{
 800d726:	b09a      	sub	sp, #104	; 0x68
  if ( !xbee_api_ATR( ( uint8_t * )"SH" ) )
 800d728:	f7ff ffd8 	bl	800d6dc <xbee_api_ATR>
 800d72c:	b938      	cbnz	r0, 800d73e <xbee_api_read_unique_id+0x1e>
  {
	  xbee_signal_error( __LINE__ );
 800d72e:	4b3a      	ldr	r3, [pc, #232]	; (800d818 <xbee_api_read_unique_id+0xf8>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f44f 701a 	mov.w	r0, #616	; 0x268
		  id |= buffer[ i + 5 ];
	  }
  }
  else
  {
	  xbee_signal_error( __LINE__ );
 800d736:	4798      	blx	r3
	  return 0;
 800d738:	2400      	movs	r4, #0
 800d73a:	2500      	movs	r5, #0
 800d73c:	e053      	b.n	800d7e6 <xbee_api_read_unique_id+0xc6>
  len = 100;
 800d73e:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800d742:	2364      	movs	r3, #100	; 0x64
 800d744:	f82a 3d66 	strh.w	r3, [sl, #-102]!
  if ( !xbee_recv_full( ( uint8_t * )buffer, &len ) )
 800d748:	a801      	add	r0, sp, #4
 800d74a:	4651      	mov	r1, sl
 800d74c:	f7ff fdfc 	bl	800d348 <xbee_recv_full>
 800d750:	b920      	cbnz	r0, 800d75c <xbee_api_read_unique_id+0x3c>
	  xbee_signal_error( __LINE__ );
 800d752:	4b31      	ldr	r3, [pc, #196]	; (800d818 <xbee_api_read_unique_id+0xf8>)
 800d754:	f240 206f 	movw	r0, #623	; 0x26f
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	e7ec      	b.n	800d736 <xbee_api_read_unique_id+0x16>
  if ( ( buffer[ 0 ] == 0x88 ) && ( buffer[ 4 ] == 0 ) )
 800d75c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d760:	2b88      	cmp	r3, #136	; 0x88
 800d762:	d122      	bne.n	800d7aa <xbee_api_read_unique_id+0x8a>
 800d764:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d768:	b9fb      	cbnz	r3, 800d7aa <xbee_api_read_unique_id+0x8a>
	  for ( i = 0 ; i < len - 5 ; i++ )
 800d76a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d76e:	2400      	movs	r4, #0
 800d770:	3a05      	subs	r2, #5
 800d772:	2500      	movs	r5, #0
 800d774:	4293      	cmp	r3, r2
 800d776:	db08      	blt.n	800d78a <xbee_api_read_unique_id+0x6a>
  if ( !xbee_api_ATR( ( uint8_t * )"SL" ) )
 800d778:	4828      	ldr	r0, [pc, #160]	; (800d81c <xbee_api_read_unique_id+0xfc>)
 800d77a:	f7ff ffaf 	bl	800d6dc <xbee_api_ATR>
 800d77e:	b9c8      	cbnz	r0, 800d7b4 <xbee_api_read_unique_id+0x94>
	  xbee_signal_error( __LINE__ );
 800d780:	4b25      	ldr	r3, [pc, #148]	; (800d818 <xbee_api_read_unique_id+0xf8>)
 800d782:	f240 2085 	movw	r0, #645	; 0x285
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	e7d5      	b.n	800d736 <xbee_api_read_unique_id+0x16>
		  id |= buffer[ i + 5 ];
 800d78a:	a901      	add	r1, sp, #4
 800d78c:	4419      	add	r1, r3
		  id <<= 8;
 800d78e:	ea4f 2905 	mov.w	r9, r5, lsl #8
 800d792:	ea49 6914 	orr.w	r9, r9, r4, lsr #24
 800d796:	ea4f 2804 	mov.w	r8, r4, lsl #8
		  id |= buffer[ i + 5 ];
 800d79a:	794c      	ldrb	r4, [r1, #5]
 800d79c:	2500      	movs	r5, #0
 800d79e:	ea44 0408 	orr.w	r4, r4, r8
 800d7a2:	ea45 0509 	orr.w	r5, r5, r9
	  for ( i = 0 ; i < len - 5 ; i++ )
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	e7e4      	b.n	800d774 <xbee_api_read_unique_id+0x54>
	  xbee_signal_error( __LINE__ );
 800d7aa:	4b1b      	ldr	r3, [pc, #108]	; (800d818 <xbee_api_read_unique_id+0xf8>)
 800d7ac:	f240 207e 	movw	r0, #638	; 0x27e
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	e7c0      	b.n	800d736 <xbee_api_read_unique_id+0x16>
  len = 100;
 800d7b4:	2364      	movs	r3, #100	; 0x64
  if ( !xbee_recv_full( ( uint8_t * )buffer, &len ) )
 800d7b6:	4651      	mov	r1, sl
 800d7b8:	a801      	add	r0, sp, #4
  len = 100;
 800d7ba:	f8ad 3002 	strh.w	r3, [sp, #2]
  if ( !xbee_recv_full( ( uint8_t * )buffer, &len ) )
 800d7be:	f7ff fdc3 	bl	800d348 <xbee_recv_full>
 800d7c2:	b920      	cbnz	r0, 800d7ce <xbee_api_read_unique_id+0xae>
	  xbee_signal_error( __LINE__ );
 800d7c4:	4b14      	ldr	r3, [pc, #80]	; (800d818 <xbee_api_read_unique_id+0xf8>)
 800d7c6:	f44f 7023 	mov.w	r0, #652	; 0x28c
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	e7b3      	b.n	800d736 <xbee_api_read_unique_id+0x16>
  if ( ( buffer[ 0 ] == 0x88 ) && ( buffer[ 4 ] == 0 ) )
 800d7ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d7d2:	2b88      	cmp	r3, #136	; 0x88
 800d7d4:	d118      	bne.n	800d808 <xbee_api_read_unique_id+0xe8>
 800d7d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d7da:	b9ab      	cbnz	r3, 800d808 <xbee_api_read_unique_id+0xe8>
	  for ( i = 0 ; i < len - 5 ; i++ )
 800d7dc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d7e0:	3a05      	subs	r2, #5
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	db04      	blt.n	800d7f0 <xbee_api_read_unique_id+0xd0>
  }

  return id;
}
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	4629      	mov	r1, r5
 800d7ea:	b01a      	add	sp, #104	; 0x68
 800d7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		  id |= buffer[ i + 5 ];
 800d7f0:	a901      	add	r1, sp, #4
 800d7f2:	4419      	add	r1, r3
		  id <<= 8;
 800d7f4:	022f      	lsls	r7, r5, #8
 800d7f6:	ea47 6714 	orr.w	r7, r7, r4, lsr #24
 800d7fa:	0226      	lsls	r6, r4, #8
		  id |= buffer[ i + 5 ];
 800d7fc:	794c      	ldrb	r4, [r1, #5]
 800d7fe:	2500      	movs	r5, #0
 800d800:	4334      	orrs	r4, r6
 800d802:	433d      	orrs	r5, r7
	  for ( i = 0 ; i < len - 5 ; i++ )
 800d804:	3301      	adds	r3, #1
 800d806:	e7ec      	b.n	800d7e2 <xbee_api_read_unique_id+0xc2>
	  xbee_signal_error( __LINE__ );
 800d808:	4b03      	ldr	r3, [pc, #12]	; (800d818 <xbee_api_read_unique_id+0xf8>)
 800d80a:	f240 209b 	movw	r0, #667	; 0x29b
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	e791      	b.n	800d736 <xbee_api_read_unique_id+0x16>
 800d812:	bf00      	nop
 800d814:	0801278b 	.word	0x0801278b
 800d818:	2000a500 	.word	0x2000a500
 800d81c:	0801278e 	.word	0x0801278e

0800d820 <xbee_process>:
// ...........................................................................

// ...........................................................................
void xbee_process( int ms )
{
	if ( led_ms )
 800d820:	4907      	ldr	r1, [pc, #28]	; (800d840 <xbee_process+0x20>)
 800d822:	880b      	ldrh	r3, [r1, #0]
 800d824:	b153      	cbz	r3, 800d83c <xbee_process+0x1c>
	{
		if ( led_ms <= ms )
 800d826:	4283      	cmp	r3, r0
 800d828:	dc06      	bgt.n	800d838 <xbee_process+0x18>
		{
			XBEE_RX_LED_STOP();
 800d82a:	2200      	movs	r2, #0
 800d82c:	800a      	strh	r2, [r1, #0]
 800d82e:	4805      	ldr	r0, [pc, #20]	; (800d844 <xbee_process+0x24>)
 800d830:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d834:	f7f4 bab4 	b.w	8001da0 <HAL_GPIO_WritePin>
		}
		else
		{
			led_ms -= ms;
 800d838:	1a1b      	subs	r3, r3, r0
 800d83a:	800b      	strh	r3, [r1, #0]
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	20000ed2 	.word	0x20000ed2
 800d844:	40020c00 	.word	0x40020c00

0800d848 <xbee_AT_configure_API1>:
}
// ...........................................................................

// ...........................................................................
int xbee_AT_configure_API1()
{
 800d848:	b570      	push	{r4, r5, r6, lr}
	  xbee_mode_AT = 1;
 800d84a:	4d2a      	ldr	r5, [pc, #168]	; (800d8f4 <xbee_AT_configure_API1+0xac>)

	  HAL_Delay( 1100 );
 800d84c:	f240 404c 	movw	r0, #1100	; 0x44c
	  xbee_mode_AT = 1;
 800d850:	2401      	movs	r4, #1
 800d852:	702c      	strb	r4, [r5, #0]
	  HAL_Delay( 1100 );
 800d854:	f7f3 fb96 	bl	8000f84 <HAL_Delay>
	  HAL_UART_Transmit( &huart3, ( uint8_t * )"+++", 3, 1000 );
 800d858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d85c:	2203      	movs	r2, #3
 800d85e:	4926      	ldr	r1, [pc, #152]	; (800d8f8 <xbee_AT_configure_API1+0xb0>)
 800d860:	4826      	ldr	r0, [pc, #152]	; (800d8fc <xbee_AT_configure_API1+0xb4>)
 800d862:	f7f5 ff45 	bl	80036f0 <HAL_UART_Transmit>
	  HAL_Delay( 1100 );
 800d866:	f240 404c 	movw	r0, #1100	; 0x44c
 800d86a:	f7f3 fb8b 	bl	8000f84 <HAL_Delay>

	  if ( !xbee_AT_check_OK() ) { xbee_mode_AT = 0; return 1; }
 800d86e:	f7ff fe15 	bl	800d49c <xbee_AT_check_OK>
 800d872:	462e      	mov	r6, r5
 800d874:	b910      	cbnz	r0, 800d87c <xbee_AT_configure_API1+0x34>
 800d876:	7028      	strb	r0, [r5, #0]
 800d878:	4620      	mov	r0, r4
 800d87a:	bd70      	pop	{r4, r5, r6, pc}

	  HAL_UART_Transmit( &huart3, ( uint8_t * )"ATRE\r", 5, 1000 );
 800d87c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d880:	2205      	movs	r2, #5
 800d882:	491f      	ldr	r1, [pc, #124]	; (800d900 <xbee_AT_configure_API1+0xb8>)
 800d884:	481d      	ldr	r0, [pc, #116]	; (800d8fc <xbee_AT_configure_API1+0xb4>)
 800d886:	f7f5 ff33 	bl	80036f0 <HAL_UART_Transmit>
	  HAL_Delay( 100 );
 800d88a:	2064      	movs	r0, #100	; 0x64
 800d88c:	f7f3 fb7a 	bl	8000f84 <HAL_Delay>
	  if ( !xbee_AT_check_OK() ) { xbee_mode_AT = 0; return 2; }
 800d890:	f7ff fe04 	bl	800d49c <xbee_AT_check_OK>
 800d894:	b918      	cbnz	r0, 800d89e <xbee_AT_configure_API1+0x56>
 800d896:	2300      	movs	r3, #0
 800d898:	7033      	strb	r3, [r6, #0]
 800d89a:	2002      	movs	r0, #2
 800d89c:	bd70      	pop	{r4, r5, r6, pc}


	  HAL_UART_Transmit( &huart3, ( uint8_t * )"ATAP1\r", 6, 1000 );
 800d89e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d8a2:	2206      	movs	r2, #6
 800d8a4:	4917      	ldr	r1, [pc, #92]	; (800d904 <xbee_AT_configure_API1+0xbc>)
 800d8a6:	4815      	ldr	r0, [pc, #84]	; (800d8fc <xbee_AT_configure_API1+0xb4>)
 800d8a8:	f7f5 ff22 	bl	80036f0 <HAL_UART_Transmit>
	  HAL_Delay( 100 );
 800d8ac:	2064      	movs	r0, #100	; 0x64
 800d8ae:	f7f3 fb69 	bl	8000f84 <HAL_Delay>
	  if ( !xbee_AT_check_OK() ) { xbee_mode_AT = 0; return 2; }
 800d8b2:	f7ff fdf3 	bl	800d49c <xbee_AT_check_OK>
 800d8b6:	2800      	cmp	r0, #0
 800d8b8:	d0ed      	beq.n	800d896 <xbee_AT_configure_API1+0x4e>

	  //HAL_UART_Transmit( &huart3, ( uint8_t * )"ATBD8\r", 6, 1000 ); // 230400
	  //HAL_Delay( 100 );
	  //if ( !xbee_AT_check_OK() ) { xbee_mode_AT = 0; return 3; }

	  HAL_UART_Transmit( &huart3, ( uint8_t * )"ATWR\r", 5, 1000 );
 800d8ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d8be:	2205      	movs	r2, #5
 800d8c0:	4911      	ldr	r1, [pc, #68]	; (800d908 <xbee_AT_configure_API1+0xc0>)
 800d8c2:	480e      	ldr	r0, [pc, #56]	; (800d8fc <xbee_AT_configure_API1+0xb4>)
 800d8c4:	f7f5 ff14 	bl	80036f0 <HAL_UART_Transmit>
	  HAL_Delay( 100 );
 800d8c8:	2064      	movs	r0, #100	; 0x64
 800d8ca:	f7f3 fb5b 	bl	8000f84 <HAL_Delay>
	  if ( !xbee_AT_check_OK() ) { xbee_mode_AT = 0; return 4; }
 800d8ce:	f7ff fde5 	bl	800d49c <xbee_AT_check_OK>
 800d8d2:	b910      	cbnz	r0, 800d8da <xbee_AT_configure_API1+0x92>
 800d8d4:	7028      	strb	r0, [r5, #0]
 800d8d6:	2004      	movs	r0, #4
 800d8d8:	bd70      	pop	{r4, r5, r6, pc}

	  HAL_UART_Transmit( &huart3, ( uint8_t * )"ATCN\r", 5, 1000 );
 800d8da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d8de:	2205      	movs	r2, #5
 800d8e0:	490a      	ldr	r1, [pc, #40]	; (800d90c <xbee_AT_configure_API1+0xc4>)
 800d8e2:	4806      	ldr	r0, [pc, #24]	; (800d8fc <xbee_AT_configure_API1+0xb4>)
 800d8e4:	f7f5 ff04 	bl	80036f0 <HAL_UART_Transmit>
	  HAL_Delay( 100 );
 800d8e8:	2064      	movs	r0, #100	; 0x64
 800d8ea:	f7f3 fb4b 	bl	8000f84 <HAL_Delay>

	  xbee_mode_AT = 0;
 800d8ee:	2000      	movs	r0, #0
 800d8f0:	7028      	strb	r0, [r5, #0]
	  return 0;
}
 800d8f2:	bd70      	pop	{r4, r5, r6, pc}
 800d8f4:	200016ce 	.word	0x200016ce
 800d8f8:	0801276e 	.word	0x0801276e
 800d8fc:	20009a50 	.word	0x20009a50
 800d900:	08012772 	.word	0x08012772
 800d904:	08012778 	.word	0x08012778
 800d908:	0801277f 	.word	0x0801277f
 800d90c:	08012785 	.word	0x08012785

0800d910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d910:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d948 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d914:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d916:	e003      	b.n	800d920 <LoopCopyDataInit>

0800d918 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d918:	4b0c      	ldr	r3, [pc, #48]	; (800d94c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d91a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d91c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d91e:	3104      	adds	r1, #4

0800d920 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d920:	480b      	ldr	r0, [pc, #44]	; (800d950 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d922:	4b0c      	ldr	r3, [pc, #48]	; (800d954 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d924:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d926:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d928:	d3f6      	bcc.n	800d918 <CopyDataInit>
  ldr  r2, =_sbss
 800d92a:	4a0b      	ldr	r2, [pc, #44]	; (800d958 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d92c:	e002      	b.n	800d934 <LoopFillZerobss>

0800d92e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d92e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d930:	f842 3b04 	str.w	r3, [r2], #4

0800d934 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d934:	4b09      	ldr	r3, [pc, #36]	; (800d95c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d936:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d938:	d3f9      	bcc.n	800d92e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d93a:	f7ff fa4b 	bl	800cdd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d93e:	f000 f815 	bl	800d96c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d942:	f7fe fd6d 	bl	800c420 <main>
  bx  lr    
 800d946:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d948:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d94c:	0801294c 	.word	0x0801294c
  ldr  r0, =_sdata
 800d950:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d954:	2000078c 	.word	0x2000078c
  ldr  r2, =_sbss
 800d958:	20000790 	.word	0x20000790
  ldr  r3, = _ebss
 800d95c:	2000a50c 	.word	0x2000a50c

0800d960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d960:	e7fe      	b.n	800d960 <ADC_IRQHandler>

0800d962 <atoi>:
 800d962:	220a      	movs	r2, #10
 800d964:	2100      	movs	r1, #0
 800d966:	f000 ba37 	b.w	800ddd8 <strtol>
	...

0800d96c <__libc_init_array>:
 800d96c:	b570      	push	{r4, r5, r6, lr}
 800d96e:	4e0d      	ldr	r6, [pc, #52]	; (800d9a4 <__libc_init_array+0x38>)
 800d970:	4c0d      	ldr	r4, [pc, #52]	; (800d9a8 <__libc_init_array+0x3c>)
 800d972:	1ba4      	subs	r4, r4, r6
 800d974:	10a4      	asrs	r4, r4, #2
 800d976:	2500      	movs	r5, #0
 800d978:	42a5      	cmp	r5, r4
 800d97a:	d109      	bne.n	800d990 <__libc_init_array+0x24>
 800d97c:	4e0b      	ldr	r6, [pc, #44]	; (800d9ac <__libc_init_array+0x40>)
 800d97e:	4c0c      	ldr	r4, [pc, #48]	; (800d9b0 <__libc_init_array+0x44>)
 800d980:	f001 fa20 	bl	800edc4 <_init>
 800d984:	1ba4      	subs	r4, r4, r6
 800d986:	10a4      	asrs	r4, r4, #2
 800d988:	2500      	movs	r5, #0
 800d98a:	42a5      	cmp	r5, r4
 800d98c:	d105      	bne.n	800d99a <__libc_init_array+0x2e>
 800d98e:	bd70      	pop	{r4, r5, r6, pc}
 800d990:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d994:	4798      	blx	r3
 800d996:	3501      	adds	r5, #1
 800d998:	e7ee      	b.n	800d978 <__libc_init_array+0xc>
 800d99a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d99e:	4798      	blx	r3
 800d9a0:	3501      	adds	r5, #1
 800d9a2:	e7f2      	b.n	800d98a <__libc_init_array+0x1e>
 800d9a4:	08012944 	.word	0x08012944
 800d9a8:	08012944 	.word	0x08012944
 800d9ac:	08012944 	.word	0x08012944
 800d9b0:	08012948 	.word	0x08012948

0800d9b4 <malloc>:
 800d9b4:	4b02      	ldr	r3, [pc, #8]	; (800d9c0 <malloc+0xc>)
 800d9b6:	4601      	mov	r1, r0
 800d9b8:	6818      	ldr	r0, [r3, #0]
 800d9ba:	f000 b87b 	b.w	800dab4 <_malloc_r>
 800d9be:	bf00      	nop
 800d9c0:	200005bc 	.word	0x200005bc

0800d9c4 <free>:
 800d9c4:	4b02      	ldr	r3, [pc, #8]	; (800d9d0 <free+0xc>)
 800d9c6:	4601      	mov	r1, r0
 800d9c8:	6818      	ldr	r0, [r3, #0]
 800d9ca:	f000 b825 	b.w	800da18 <_free_r>
 800d9ce:	bf00      	nop
 800d9d0:	200005bc 	.word	0x200005bc

0800d9d4 <memcmp>:
 800d9d4:	b510      	push	{r4, lr}
 800d9d6:	3901      	subs	r1, #1
 800d9d8:	4402      	add	r2, r0
 800d9da:	4290      	cmp	r0, r2
 800d9dc:	d101      	bne.n	800d9e2 <memcmp+0xe>
 800d9de:	2000      	movs	r0, #0
 800d9e0:	bd10      	pop	{r4, pc}
 800d9e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d9e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d9ea:	42a3      	cmp	r3, r4
 800d9ec:	d0f5      	beq.n	800d9da <memcmp+0x6>
 800d9ee:	1b18      	subs	r0, r3, r4
 800d9f0:	bd10      	pop	{r4, pc}

0800d9f2 <memcpy>:
 800d9f2:	b510      	push	{r4, lr}
 800d9f4:	1e43      	subs	r3, r0, #1
 800d9f6:	440a      	add	r2, r1
 800d9f8:	4291      	cmp	r1, r2
 800d9fa:	d100      	bne.n	800d9fe <memcpy+0xc>
 800d9fc:	bd10      	pop	{r4, pc}
 800d9fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da06:	e7f7      	b.n	800d9f8 <memcpy+0x6>

0800da08 <memset>:
 800da08:	4402      	add	r2, r0
 800da0a:	4603      	mov	r3, r0
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d100      	bne.n	800da12 <memset+0xa>
 800da10:	4770      	bx	lr
 800da12:	f803 1b01 	strb.w	r1, [r3], #1
 800da16:	e7f9      	b.n	800da0c <memset+0x4>

0800da18 <_free_r>:
 800da18:	b538      	push	{r3, r4, r5, lr}
 800da1a:	4605      	mov	r5, r0
 800da1c:	2900      	cmp	r1, #0
 800da1e:	d045      	beq.n	800daac <_free_r+0x94>
 800da20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da24:	1f0c      	subs	r4, r1, #4
 800da26:	2b00      	cmp	r3, #0
 800da28:	bfb8      	it	lt
 800da2a:	18e4      	addlt	r4, r4, r3
 800da2c:	f000 fac9 	bl	800dfc2 <__malloc_lock>
 800da30:	4a1f      	ldr	r2, [pc, #124]	; (800dab0 <_free_r+0x98>)
 800da32:	6813      	ldr	r3, [r2, #0]
 800da34:	4610      	mov	r0, r2
 800da36:	b933      	cbnz	r3, 800da46 <_free_r+0x2e>
 800da38:	6063      	str	r3, [r4, #4]
 800da3a:	6014      	str	r4, [r2, #0]
 800da3c:	4628      	mov	r0, r5
 800da3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da42:	f000 babf 	b.w	800dfc4 <__malloc_unlock>
 800da46:	42a3      	cmp	r3, r4
 800da48:	d90c      	bls.n	800da64 <_free_r+0x4c>
 800da4a:	6821      	ldr	r1, [r4, #0]
 800da4c:	1862      	adds	r2, r4, r1
 800da4e:	4293      	cmp	r3, r2
 800da50:	bf04      	itt	eq
 800da52:	681a      	ldreq	r2, [r3, #0]
 800da54:	685b      	ldreq	r3, [r3, #4]
 800da56:	6063      	str	r3, [r4, #4]
 800da58:	bf04      	itt	eq
 800da5a:	1852      	addeq	r2, r2, r1
 800da5c:	6022      	streq	r2, [r4, #0]
 800da5e:	6004      	str	r4, [r0, #0]
 800da60:	e7ec      	b.n	800da3c <_free_r+0x24>
 800da62:	4613      	mov	r3, r2
 800da64:	685a      	ldr	r2, [r3, #4]
 800da66:	b10a      	cbz	r2, 800da6c <_free_r+0x54>
 800da68:	42a2      	cmp	r2, r4
 800da6a:	d9fa      	bls.n	800da62 <_free_r+0x4a>
 800da6c:	6819      	ldr	r1, [r3, #0]
 800da6e:	1858      	adds	r0, r3, r1
 800da70:	42a0      	cmp	r0, r4
 800da72:	d10b      	bne.n	800da8c <_free_r+0x74>
 800da74:	6820      	ldr	r0, [r4, #0]
 800da76:	4401      	add	r1, r0
 800da78:	1858      	adds	r0, r3, r1
 800da7a:	4282      	cmp	r2, r0
 800da7c:	6019      	str	r1, [r3, #0]
 800da7e:	d1dd      	bne.n	800da3c <_free_r+0x24>
 800da80:	6810      	ldr	r0, [r2, #0]
 800da82:	6852      	ldr	r2, [r2, #4]
 800da84:	605a      	str	r2, [r3, #4]
 800da86:	4401      	add	r1, r0
 800da88:	6019      	str	r1, [r3, #0]
 800da8a:	e7d7      	b.n	800da3c <_free_r+0x24>
 800da8c:	d902      	bls.n	800da94 <_free_r+0x7c>
 800da8e:	230c      	movs	r3, #12
 800da90:	602b      	str	r3, [r5, #0]
 800da92:	e7d3      	b.n	800da3c <_free_r+0x24>
 800da94:	6820      	ldr	r0, [r4, #0]
 800da96:	1821      	adds	r1, r4, r0
 800da98:	428a      	cmp	r2, r1
 800da9a:	bf04      	itt	eq
 800da9c:	6811      	ldreq	r1, [r2, #0]
 800da9e:	6852      	ldreq	r2, [r2, #4]
 800daa0:	6062      	str	r2, [r4, #4]
 800daa2:	bf04      	itt	eq
 800daa4:	1809      	addeq	r1, r1, r0
 800daa6:	6021      	streq	r1, [r4, #0]
 800daa8:	605c      	str	r4, [r3, #4]
 800daaa:	e7c7      	b.n	800da3c <_free_r+0x24>
 800daac:	bd38      	pop	{r3, r4, r5, pc}
 800daae:	bf00      	nop
 800dab0:	20001abc 	.word	0x20001abc

0800dab4 <_malloc_r>:
 800dab4:	b570      	push	{r4, r5, r6, lr}
 800dab6:	1ccd      	adds	r5, r1, #3
 800dab8:	f025 0503 	bic.w	r5, r5, #3
 800dabc:	3508      	adds	r5, #8
 800dabe:	2d0c      	cmp	r5, #12
 800dac0:	bf38      	it	cc
 800dac2:	250c      	movcc	r5, #12
 800dac4:	2d00      	cmp	r5, #0
 800dac6:	4606      	mov	r6, r0
 800dac8:	db01      	blt.n	800dace <_malloc_r+0x1a>
 800daca:	42a9      	cmp	r1, r5
 800dacc:	d903      	bls.n	800dad6 <_malloc_r+0x22>
 800dace:	230c      	movs	r3, #12
 800dad0:	6033      	str	r3, [r6, #0]
 800dad2:	2000      	movs	r0, #0
 800dad4:	bd70      	pop	{r4, r5, r6, pc}
 800dad6:	f000 fa74 	bl	800dfc2 <__malloc_lock>
 800dada:	4a23      	ldr	r2, [pc, #140]	; (800db68 <_malloc_r+0xb4>)
 800dadc:	6814      	ldr	r4, [r2, #0]
 800dade:	4621      	mov	r1, r4
 800dae0:	b991      	cbnz	r1, 800db08 <_malloc_r+0x54>
 800dae2:	4c22      	ldr	r4, [pc, #136]	; (800db6c <_malloc_r+0xb8>)
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	b91b      	cbnz	r3, 800daf0 <_malloc_r+0x3c>
 800dae8:	4630      	mov	r0, r6
 800daea:	f000 f859 	bl	800dba0 <_sbrk_r>
 800daee:	6020      	str	r0, [r4, #0]
 800daf0:	4629      	mov	r1, r5
 800daf2:	4630      	mov	r0, r6
 800daf4:	f000 f854 	bl	800dba0 <_sbrk_r>
 800daf8:	1c43      	adds	r3, r0, #1
 800dafa:	d126      	bne.n	800db4a <_malloc_r+0x96>
 800dafc:	230c      	movs	r3, #12
 800dafe:	6033      	str	r3, [r6, #0]
 800db00:	4630      	mov	r0, r6
 800db02:	f000 fa5f 	bl	800dfc4 <__malloc_unlock>
 800db06:	e7e4      	b.n	800dad2 <_malloc_r+0x1e>
 800db08:	680b      	ldr	r3, [r1, #0]
 800db0a:	1b5b      	subs	r3, r3, r5
 800db0c:	d41a      	bmi.n	800db44 <_malloc_r+0x90>
 800db0e:	2b0b      	cmp	r3, #11
 800db10:	d90f      	bls.n	800db32 <_malloc_r+0x7e>
 800db12:	600b      	str	r3, [r1, #0]
 800db14:	50cd      	str	r5, [r1, r3]
 800db16:	18cc      	adds	r4, r1, r3
 800db18:	4630      	mov	r0, r6
 800db1a:	f000 fa53 	bl	800dfc4 <__malloc_unlock>
 800db1e:	f104 000b 	add.w	r0, r4, #11
 800db22:	1d23      	adds	r3, r4, #4
 800db24:	f020 0007 	bic.w	r0, r0, #7
 800db28:	1ac3      	subs	r3, r0, r3
 800db2a:	d01b      	beq.n	800db64 <_malloc_r+0xb0>
 800db2c:	425a      	negs	r2, r3
 800db2e:	50e2      	str	r2, [r4, r3]
 800db30:	bd70      	pop	{r4, r5, r6, pc}
 800db32:	428c      	cmp	r4, r1
 800db34:	bf0d      	iteet	eq
 800db36:	6863      	ldreq	r3, [r4, #4]
 800db38:	684b      	ldrne	r3, [r1, #4]
 800db3a:	6063      	strne	r3, [r4, #4]
 800db3c:	6013      	streq	r3, [r2, #0]
 800db3e:	bf18      	it	ne
 800db40:	460c      	movne	r4, r1
 800db42:	e7e9      	b.n	800db18 <_malloc_r+0x64>
 800db44:	460c      	mov	r4, r1
 800db46:	6849      	ldr	r1, [r1, #4]
 800db48:	e7ca      	b.n	800dae0 <_malloc_r+0x2c>
 800db4a:	1cc4      	adds	r4, r0, #3
 800db4c:	f024 0403 	bic.w	r4, r4, #3
 800db50:	42a0      	cmp	r0, r4
 800db52:	d005      	beq.n	800db60 <_malloc_r+0xac>
 800db54:	1a21      	subs	r1, r4, r0
 800db56:	4630      	mov	r0, r6
 800db58:	f000 f822 	bl	800dba0 <_sbrk_r>
 800db5c:	3001      	adds	r0, #1
 800db5e:	d0cd      	beq.n	800dafc <_malloc_r+0x48>
 800db60:	6025      	str	r5, [r4, #0]
 800db62:	e7d9      	b.n	800db18 <_malloc_r+0x64>
 800db64:	bd70      	pop	{r4, r5, r6, pc}
 800db66:	bf00      	nop
 800db68:	20001abc 	.word	0x20001abc
 800db6c:	20001ac0 	.word	0x20001ac0

0800db70 <iprintf>:
 800db70:	b40f      	push	{r0, r1, r2, r3}
 800db72:	4b0a      	ldr	r3, [pc, #40]	; (800db9c <iprintf+0x2c>)
 800db74:	b513      	push	{r0, r1, r4, lr}
 800db76:	681c      	ldr	r4, [r3, #0]
 800db78:	b124      	cbz	r4, 800db84 <iprintf+0x14>
 800db7a:	69a3      	ldr	r3, [r4, #24]
 800db7c:	b913      	cbnz	r3, 800db84 <iprintf+0x14>
 800db7e:	4620      	mov	r0, r4
 800db80:	f000 f980 	bl	800de84 <__sinit>
 800db84:	ab05      	add	r3, sp, #20
 800db86:	9a04      	ldr	r2, [sp, #16]
 800db88:	68a1      	ldr	r1, [r4, #8]
 800db8a:	9301      	str	r3, [sp, #4]
 800db8c:	4620      	mov	r0, r4
 800db8e:	f000 fb93 	bl	800e2b8 <_vfiprintf_r>
 800db92:	b002      	add	sp, #8
 800db94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db98:	b004      	add	sp, #16
 800db9a:	4770      	bx	lr
 800db9c:	200005bc 	.word	0x200005bc

0800dba0 <_sbrk_r>:
 800dba0:	b538      	push	{r3, r4, r5, lr}
 800dba2:	4c06      	ldr	r4, [pc, #24]	; (800dbbc <_sbrk_r+0x1c>)
 800dba4:	2300      	movs	r3, #0
 800dba6:	4605      	mov	r5, r0
 800dba8:	4608      	mov	r0, r1
 800dbaa:	6023      	str	r3, [r4, #0]
 800dbac:	f7ff f8ec 	bl	800cd88 <_sbrk>
 800dbb0:	1c43      	adds	r3, r0, #1
 800dbb2:	d102      	bne.n	800dbba <_sbrk_r+0x1a>
 800dbb4:	6823      	ldr	r3, [r4, #0]
 800dbb6:	b103      	cbz	r3, 800dbba <_sbrk_r+0x1a>
 800dbb8:	602b      	str	r3, [r5, #0]
 800dbba:	bd38      	pop	{r3, r4, r5, pc}
 800dbbc:	2000a508 	.word	0x2000a508

0800dbc0 <siprintf>:
 800dbc0:	b40e      	push	{r1, r2, r3}
 800dbc2:	b500      	push	{lr}
 800dbc4:	b09c      	sub	sp, #112	; 0x70
 800dbc6:	f44f 7102 	mov.w	r1, #520	; 0x208
 800dbca:	ab1d      	add	r3, sp, #116	; 0x74
 800dbcc:	f8ad 1014 	strh.w	r1, [sp, #20]
 800dbd0:	9002      	str	r0, [sp, #8]
 800dbd2:	9006      	str	r0, [sp, #24]
 800dbd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dbd8:	480a      	ldr	r0, [pc, #40]	; (800dc04 <siprintf+0x44>)
 800dbda:	9104      	str	r1, [sp, #16]
 800dbdc:	9107      	str	r1, [sp, #28]
 800dbde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800dbe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbe6:	f8ad 1016 	strh.w	r1, [sp, #22]
 800dbea:	6800      	ldr	r0, [r0, #0]
 800dbec:	9301      	str	r3, [sp, #4]
 800dbee:	a902      	add	r1, sp, #8
 800dbf0:	f000 fa44 	bl	800e07c <_svfiprintf_r>
 800dbf4:	9b02      	ldr	r3, [sp, #8]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	701a      	strb	r2, [r3, #0]
 800dbfa:	b01c      	add	sp, #112	; 0x70
 800dbfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc00:	b003      	add	sp, #12
 800dc02:	4770      	bx	lr
 800dc04:	200005bc 	.word	0x200005bc

0800dc08 <strcat>:
 800dc08:	b510      	push	{r4, lr}
 800dc0a:	4602      	mov	r2, r0
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	3201      	adds	r2, #1
 800dc10:	781c      	ldrb	r4, [r3, #0]
 800dc12:	2c00      	cmp	r4, #0
 800dc14:	d1fa      	bne.n	800dc0c <strcat+0x4>
 800dc16:	3b01      	subs	r3, #1
 800dc18:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc1c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc20:	2a00      	cmp	r2, #0
 800dc22:	d1f9      	bne.n	800dc18 <strcat+0x10>
 800dc24:	bd10      	pop	{r4, pc}

0800dc26 <strchr>:
 800dc26:	b2c9      	uxtb	r1, r1
 800dc28:	4603      	mov	r3, r0
 800dc2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc2e:	b11a      	cbz	r2, 800dc38 <strchr+0x12>
 800dc30:	4291      	cmp	r1, r2
 800dc32:	d1f9      	bne.n	800dc28 <strchr+0x2>
 800dc34:	4618      	mov	r0, r3
 800dc36:	4770      	bx	lr
 800dc38:	2900      	cmp	r1, #0
 800dc3a:	bf0c      	ite	eq
 800dc3c:	4618      	moveq	r0, r3
 800dc3e:	2000      	movne	r0, #0
 800dc40:	4770      	bx	lr

0800dc42 <strcpy>:
 800dc42:	4603      	mov	r3, r0
 800dc44:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc48:	f803 2b01 	strb.w	r2, [r3], #1
 800dc4c:	2a00      	cmp	r2, #0
 800dc4e:	d1f9      	bne.n	800dc44 <strcpy+0x2>
 800dc50:	4770      	bx	lr

0800dc52 <strncmp>:
 800dc52:	b510      	push	{r4, lr}
 800dc54:	b16a      	cbz	r2, 800dc72 <strncmp+0x20>
 800dc56:	3901      	subs	r1, #1
 800dc58:	1884      	adds	r4, r0, r2
 800dc5a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dc5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d103      	bne.n	800dc6e <strncmp+0x1c>
 800dc66:	42a0      	cmp	r0, r4
 800dc68:	d001      	beq.n	800dc6e <strncmp+0x1c>
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d1f5      	bne.n	800dc5a <strncmp+0x8>
 800dc6e:	1a98      	subs	r0, r3, r2
 800dc70:	bd10      	pop	{r4, pc}
 800dc72:	4610      	mov	r0, r2
 800dc74:	bd10      	pop	{r4, pc}

0800dc76 <strncpy>:
 800dc76:	b570      	push	{r4, r5, r6, lr}
 800dc78:	4604      	mov	r4, r0
 800dc7a:	b902      	cbnz	r2, 800dc7e <strncpy+0x8>
 800dc7c:	bd70      	pop	{r4, r5, r6, pc}
 800dc7e:	4623      	mov	r3, r4
 800dc80:	f811 5b01 	ldrb.w	r5, [r1], #1
 800dc84:	f803 5b01 	strb.w	r5, [r3], #1
 800dc88:	1e56      	subs	r6, r2, #1
 800dc8a:	b91d      	cbnz	r5, 800dc94 <strncpy+0x1e>
 800dc8c:	4414      	add	r4, r2
 800dc8e:	42a3      	cmp	r3, r4
 800dc90:	d103      	bne.n	800dc9a <strncpy+0x24>
 800dc92:	bd70      	pop	{r4, r5, r6, pc}
 800dc94:	461c      	mov	r4, r3
 800dc96:	4632      	mov	r2, r6
 800dc98:	e7ef      	b.n	800dc7a <strncpy+0x4>
 800dc9a:	f803 5b01 	strb.w	r5, [r3], #1
 800dc9e:	e7f6      	b.n	800dc8e <strncpy+0x18>

0800dca0 <strstr>:
 800dca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dca2:	7803      	ldrb	r3, [r0, #0]
 800dca4:	b133      	cbz	r3, 800dcb4 <strstr+0x14>
 800dca6:	4603      	mov	r3, r0
 800dca8:	4618      	mov	r0, r3
 800dcaa:	1c5e      	adds	r6, r3, #1
 800dcac:	781b      	ldrb	r3, [r3, #0]
 800dcae:	b933      	cbnz	r3, 800dcbe <strstr+0x1e>
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcb4:	780b      	ldrb	r3, [r1, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	bf18      	it	ne
 800dcba:	2000      	movne	r0, #0
 800dcbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcbe:	1e4d      	subs	r5, r1, #1
 800dcc0:	1e44      	subs	r4, r0, #1
 800dcc2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800dcc6:	2a00      	cmp	r2, #0
 800dcc8:	d0f3      	beq.n	800dcb2 <strstr+0x12>
 800dcca:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800dcce:	4297      	cmp	r7, r2
 800dcd0:	4633      	mov	r3, r6
 800dcd2:	d0f6      	beq.n	800dcc2 <strstr+0x22>
 800dcd4:	e7e8      	b.n	800dca8 <strstr+0x8>

0800dcd6 <_strtol_l.isra.0>:
 800dcd6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcda:	4680      	mov	r8, r0
 800dcdc:	4689      	mov	r9, r1
 800dcde:	4692      	mov	sl, r2
 800dce0:	461f      	mov	r7, r3
 800dce2:	468b      	mov	fp, r1
 800dce4:	465d      	mov	r5, fp
 800dce6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dce8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcec:	f000 f954 	bl	800df98 <__locale_ctype_ptr_l>
 800dcf0:	4420      	add	r0, r4
 800dcf2:	7846      	ldrb	r6, [r0, #1]
 800dcf4:	f016 0608 	ands.w	r6, r6, #8
 800dcf8:	d10b      	bne.n	800dd12 <_strtol_l.isra.0+0x3c>
 800dcfa:	2c2d      	cmp	r4, #45	; 0x2d
 800dcfc:	d10b      	bne.n	800dd16 <_strtol_l.isra.0+0x40>
 800dcfe:	782c      	ldrb	r4, [r5, #0]
 800dd00:	2601      	movs	r6, #1
 800dd02:	f10b 0502 	add.w	r5, fp, #2
 800dd06:	b167      	cbz	r7, 800dd22 <_strtol_l.isra.0+0x4c>
 800dd08:	2f10      	cmp	r7, #16
 800dd0a:	d114      	bne.n	800dd36 <_strtol_l.isra.0+0x60>
 800dd0c:	2c30      	cmp	r4, #48	; 0x30
 800dd0e:	d00a      	beq.n	800dd26 <_strtol_l.isra.0+0x50>
 800dd10:	e011      	b.n	800dd36 <_strtol_l.isra.0+0x60>
 800dd12:	46ab      	mov	fp, r5
 800dd14:	e7e6      	b.n	800dce4 <_strtol_l.isra.0+0xe>
 800dd16:	2c2b      	cmp	r4, #43	; 0x2b
 800dd18:	bf04      	itt	eq
 800dd1a:	782c      	ldrbeq	r4, [r5, #0]
 800dd1c:	f10b 0502 	addeq.w	r5, fp, #2
 800dd20:	e7f1      	b.n	800dd06 <_strtol_l.isra.0+0x30>
 800dd22:	2c30      	cmp	r4, #48	; 0x30
 800dd24:	d127      	bne.n	800dd76 <_strtol_l.isra.0+0xa0>
 800dd26:	782b      	ldrb	r3, [r5, #0]
 800dd28:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dd2c:	2b58      	cmp	r3, #88	; 0x58
 800dd2e:	d14b      	bne.n	800ddc8 <_strtol_l.isra.0+0xf2>
 800dd30:	786c      	ldrb	r4, [r5, #1]
 800dd32:	2710      	movs	r7, #16
 800dd34:	3502      	adds	r5, #2
 800dd36:	2e00      	cmp	r6, #0
 800dd38:	bf0c      	ite	eq
 800dd3a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800dd3e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800dd42:	2200      	movs	r2, #0
 800dd44:	fbb1 fef7 	udiv	lr, r1, r7
 800dd48:	4610      	mov	r0, r2
 800dd4a:	fb07 1c1e 	mls	ip, r7, lr, r1
 800dd4e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800dd52:	2b09      	cmp	r3, #9
 800dd54:	d811      	bhi.n	800dd7a <_strtol_l.isra.0+0xa4>
 800dd56:	461c      	mov	r4, r3
 800dd58:	42a7      	cmp	r7, r4
 800dd5a:	dd1d      	ble.n	800dd98 <_strtol_l.isra.0+0xc2>
 800dd5c:	1c53      	adds	r3, r2, #1
 800dd5e:	d007      	beq.n	800dd70 <_strtol_l.isra.0+0x9a>
 800dd60:	4586      	cmp	lr, r0
 800dd62:	d316      	bcc.n	800dd92 <_strtol_l.isra.0+0xbc>
 800dd64:	d101      	bne.n	800dd6a <_strtol_l.isra.0+0x94>
 800dd66:	45a4      	cmp	ip, r4
 800dd68:	db13      	blt.n	800dd92 <_strtol_l.isra.0+0xbc>
 800dd6a:	fb00 4007 	mla	r0, r0, r7, r4
 800dd6e:	2201      	movs	r2, #1
 800dd70:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd74:	e7eb      	b.n	800dd4e <_strtol_l.isra.0+0x78>
 800dd76:	270a      	movs	r7, #10
 800dd78:	e7dd      	b.n	800dd36 <_strtol_l.isra.0+0x60>
 800dd7a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800dd7e:	2b19      	cmp	r3, #25
 800dd80:	d801      	bhi.n	800dd86 <_strtol_l.isra.0+0xb0>
 800dd82:	3c37      	subs	r4, #55	; 0x37
 800dd84:	e7e8      	b.n	800dd58 <_strtol_l.isra.0+0x82>
 800dd86:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800dd8a:	2b19      	cmp	r3, #25
 800dd8c:	d804      	bhi.n	800dd98 <_strtol_l.isra.0+0xc2>
 800dd8e:	3c57      	subs	r4, #87	; 0x57
 800dd90:	e7e2      	b.n	800dd58 <_strtol_l.isra.0+0x82>
 800dd92:	f04f 32ff 	mov.w	r2, #4294967295
 800dd96:	e7eb      	b.n	800dd70 <_strtol_l.isra.0+0x9a>
 800dd98:	1c53      	adds	r3, r2, #1
 800dd9a:	d108      	bne.n	800ddae <_strtol_l.isra.0+0xd8>
 800dd9c:	2322      	movs	r3, #34	; 0x22
 800dd9e:	f8c8 3000 	str.w	r3, [r8]
 800dda2:	4608      	mov	r0, r1
 800dda4:	f1ba 0f00 	cmp.w	sl, #0
 800dda8:	d107      	bne.n	800ddba <_strtol_l.isra.0+0xe4>
 800ddaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddae:	b106      	cbz	r6, 800ddb2 <_strtol_l.isra.0+0xdc>
 800ddb0:	4240      	negs	r0, r0
 800ddb2:	f1ba 0f00 	cmp.w	sl, #0
 800ddb6:	d00c      	beq.n	800ddd2 <_strtol_l.isra.0+0xfc>
 800ddb8:	b122      	cbz	r2, 800ddc4 <_strtol_l.isra.0+0xee>
 800ddba:	3d01      	subs	r5, #1
 800ddbc:	f8ca 5000 	str.w	r5, [sl]
 800ddc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc4:	464d      	mov	r5, r9
 800ddc6:	e7f9      	b.n	800ddbc <_strtol_l.isra.0+0xe6>
 800ddc8:	2430      	movs	r4, #48	; 0x30
 800ddca:	2f00      	cmp	r7, #0
 800ddcc:	d1b3      	bne.n	800dd36 <_strtol_l.isra.0+0x60>
 800ddce:	2708      	movs	r7, #8
 800ddd0:	e7b1      	b.n	800dd36 <_strtol_l.isra.0+0x60>
 800ddd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ddd8 <strtol>:
 800ddd8:	4b08      	ldr	r3, [pc, #32]	; (800ddfc <strtol+0x24>)
 800ddda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dddc:	681c      	ldr	r4, [r3, #0]
 800ddde:	4d08      	ldr	r5, [pc, #32]	; (800de00 <strtol+0x28>)
 800dde0:	6a23      	ldr	r3, [r4, #32]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	bf08      	it	eq
 800dde6:	462b      	moveq	r3, r5
 800dde8:	9300      	str	r3, [sp, #0]
 800ddea:	4613      	mov	r3, r2
 800ddec:	460a      	mov	r2, r1
 800ddee:	4601      	mov	r1, r0
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	f7ff ff70 	bl	800dcd6 <_strtol_l.isra.0>
 800ddf6:	b003      	add	sp, #12
 800ddf8:	bd30      	pop	{r4, r5, pc}
 800ddfa:	bf00      	nop
 800ddfc:	200005bc 	.word	0x200005bc
 800de00:	20000620 	.word	0x20000620

0800de04 <_cleanup_r>:
 800de04:	4901      	ldr	r1, [pc, #4]	; (800de0c <_cleanup_r+0x8>)
 800de06:	f000 b8a9 	b.w	800df5c <_fwalk_reent>
 800de0a:	bf00      	nop
 800de0c:	0800eb89 	.word	0x0800eb89

0800de10 <std.isra.0>:
 800de10:	2300      	movs	r3, #0
 800de12:	b510      	push	{r4, lr}
 800de14:	4604      	mov	r4, r0
 800de16:	6003      	str	r3, [r0, #0]
 800de18:	6043      	str	r3, [r0, #4]
 800de1a:	6083      	str	r3, [r0, #8]
 800de1c:	8181      	strh	r1, [r0, #12]
 800de1e:	6643      	str	r3, [r0, #100]	; 0x64
 800de20:	81c2      	strh	r2, [r0, #14]
 800de22:	6103      	str	r3, [r0, #16]
 800de24:	6143      	str	r3, [r0, #20]
 800de26:	6183      	str	r3, [r0, #24]
 800de28:	4619      	mov	r1, r3
 800de2a:	2208      	movs	r2, #8
 800de2c:	305c      	adds	r0, #92	; 0x5c
 800de2e:	f7ff fdeb 	bl	800da08 <memset>
 800de32:	4b05      	ldr	r3, [pc, #20]	; (800de48 <std.isra.0+0x38>)
 800de34:	6263      	str	r3, [r4, #36]	; 0x24
 800de36:	4b05      	ldr	r3, [pc, #20]	; (800de4c <std.isra.0+0x3c>)
 800de38:	62a3      	str	r3, [r4, #40]	; 0x28
 800de3a:	4b05      	ldr	r3, [pc, #20]	; (800de50 <std.isra.0+0x40>)
 800de3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800de3e:	4b05      	ldr	r3, [pc, #20]	; (800de54 <std.isra.0+0x44>)
 800de40:	6224      	str	r4, [r4, #32]
 800de42:	6323      	str	r3, [r4, #48]	; 0x30
 800de44:	bd10      	pop	{r4, pc}
 800de46:	bf00      	nop
 800de48:	0800e811 	.word	0x0800e811
 800de4c:	0800e833 	.word	0x0800e833
 800de50:	0800e86b 	.word	0x0800e86b
 800de54:	0800e88f 	.word	0x0800e88f

0800de58 <__sfmoreglue>:
 800de58:	b570      	push	{r4, r5, r6, lr}
 800de5a:	1e4a      	subs	r2, r1, #1
 800de5c:	2568      	movs	r5, #104	; 0x68
 800de5e:	4355      	muls	r5, r2
 800de60:	460e      	mov	r6, r1
 800de62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800de66:	f7ff fe25 	bl	800dab4 <_malloc_r>
 800de6a:	4604      	mov	r4, r0
 800de6c:	b140      	cbz	r0, 800de80 <__sfmoreglue+0x28>
 800de6e:	2100      	movs	r1, #0
 800de70:	e880 0042 	stmia.w	r0, {r1, r6}
 800de74:	300c      	adds	r0, #12
 800de76:	60a0      	str	r0, [r4, #8]
 800de78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800de7c:	f7ff fdc4 	bl	800da08 <memset>
 800de80:	4620      	mov	r0, r4
 800de82:	bd70      	pop	{r4, r5, r6, pc}

0800de84 <__sinit>:
 800de84:	6983      	ldr	r3, [r0, #24]
 800de86:	b510      	push	{r4, lr}
 800de88:	4604      	mov	r4, r0
 800de8a:	bb33      	cbnz	r3, 800deda <__sinit+0x56>
 800de8c:	6483      	str	r3, [r0, #72]	; 0x48
 800de8e:	64c3      	str	r3, [r0, #76]	; 0x4c
 800de90:	6503      	str	r3, [r0, #80]	; 0x50
 800de92:	4b12      	ldr	r3, [pc, #72]	; (800dedc <__sinit+0x58>)
 800de94:	4a12      	ldr	r2, [pc, #72]	; (800dee0 <__sinit+0x5c>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	6282      	str	r2, [r0, #40]	; 0x28
 800de9a:	4298      	cmp	r0, r3
 800de9c:	bf04      	itt	eq
 800de9e:	2301      	moveq	r3, #1
 800dea0:	6183      	streq	r3, [r0, #24]
 800dea2:	f000 f81f 	bl	800dee4 <__sfp>
 800dea6:	6060      	str	r0, [r4, #4]
 800dea8:	4620      	mov	r0, r4
 800deaa:	f000 f81b 	bl	800dee4 <__sfp>
 800deae:	60a0      	str	r0, [r4, #8]
 800deb0:	4620      	mov	r0, r4
 800deb2:	f000 f817 	bl	800dee4 <__sfp>
 800deb6:	2200      	movs	r2, #0
 800deb8:	60e0      	str	r0, [r4, #12]
 800deba:	2104      	movs	r1, #4
 800debc:	6860      	ldr	r0, [r4, #4]
 800debe:	f7ff ffa7 	bl	800de10 <std.isra.0>
 800dec2:	2201      	movs	r2, #1
 800dec4:	2109      	movs	r1, #9
 800dec6:	68a0      	ldr	r0, [r4, #8]
 800dec8:	f7ff ffa2 	bl	800de10 <std.isra.0>
 800decc:	2202      	movs	r2, #2
 800dece:	2112      	movs	r1, #18
 800ded0:	68e0      	ldr	r0, [r4, #12]
 800ded2:	f7ff ff9d 	bl	800de10 <std.isra.0>
 800ded6:	2301      	movs	r3, #1
 800ded8:	61a3      	str	r3, [r4, #24]
 800deda:	bd10      	pop	{r4, pc}
 800dedc:	080127fc 	.word	0x080127fc
 800dee0:	0800de05 	.word	0x0800de05

0800dee4 <__sfp>:
 800dee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee6:	4b1c      	ldr	r3, [pc, #112]	; (800df58 <__sfp+0x74>)
 800dee8:	681e      	ldr	r6, [r3, #0]
 800deea:	69b3      	ldr	r3, [r6, #24]
 800deec:	4607      	mov	r7, r0
 800deee:	b913      	cbnz	r3, 800def6 <__sfp+0x12>
 800def0:	4630      	mov	r0, r6
 800def2:	f7ff ffc7 	bl	800de84 <__sinit>
 800def6:	3648      	adds	r6, #72	; 0x48
 800def8:	68b4      	ldr	r4, [r6, #8]
 800defa:	6873      	ldr	r3, [r6, #4]
 800defc:	3b01      	subs	r3, #1
 800defe:	d503      	bpl.n	800df08 <__sfp+0x24>
 800df00:	6833      	ldr	r3, [r6, #0]
 800df02:	b133      	cbz	r3, 800df12 <__sfp+0x2e>
 800df04:	6836      	ldr	r6, [r6, #0]
 800df06:	e7f7      	b.n	800def8 <__sfp+0x14>
 800df08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800df0c:	b16d      	cbz	r5, 800df2a <__sfp+0x46>
 800df0e:	3468      	adds	r4, #104	; 0x68
 800df10:	e7f4      	b.n	800defc <__sfp+0x18>
 800df12:	2104      	movs	r1, #4
 800df14:	4638      	mov	r0, r7
 800df16:	f7ff ff9f 	bl	800de58 <__sfmoreglue>
 800df1a:	6030      	str	r0, [r6, #0]
 800df1c:	2800      	cmp	r0, #0
 800df1e:	d1f1      	bne.n	800df04 <__sfp+0x20>
 800df20:	230c      	movs	r3, #12
 800df22:	603b      	str	r3, [r7, #0]
 800df24:	4604      	mov	r4, r0
 800df26:	4620      	mov	r0, r4
 800df28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df2e:	81e3      	strh	r3, [r4, #14]
 800df30:	2301      	movs	r3, #1
 800df32:	81a3      	strh	r3, [r4, #12]
 800df34:	6665      	str	r5, [r4, #100]	; 0x64
 800df36:	6025      	str	r5, [r4, #0]
 800df38:	60a5      	str	r5, [r4, #8]
 800df3a:	6065      	str	r5, [r4, #4]
 800df3c:	6125      	str	r5, [r4, #16]
 800df3e:	6165      	str	r5, [r4, #20]
 800df40:	61a5      	str	r5, [r4, #24]
 800df42:	2208      	movs	r2, #8
 800df44:	4629      	mov	r1, r5
 800df46:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800df4a:	f7ff fd5d 	bl	800da08 <memset>
 800df4e:	6365      	str	r5, [r4, #52]	; 0x34
 800df50:	63a5      	str	r5, [r4, #56]	; 0x38
 800df52:	64a5      	str	r5, [r4, #72]	; 0x48
 800df54:	64e5      	str	r5, [r4, #76]	; 0x4c
 800df56:	e7e6      	b.n	800df26 <__sfp+0x42>
 800df58:	080127fc 	.word	0x080127fc

0800df5c <_fwalk_reent>:
 800df5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df60:	4680      	mov	r8, r0
 800df62:	4689      	mov	r9, r1
 800df64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800df68:	2600      	movs	r6, #0
 800df6a:	b914      	cbnz	r4, 800df72 <_fwalk_reent+0x16>
 800df6c:	4630      	mov	r0, r6
 800df6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df72:	68a5      	ldr	r5, [r4, #8]
 800df74:	6867      	ldr	r7, [r4, #4]
 800df76:	3f01      	subs	r7, #1
 800df78:	d501      	bpl.n	800df7e <_fwalk_reent+0x22>
 800df7a:	6824      	ldr	r4, [r4, #0]
 800df7c:	e7f5      	b.n	800df6a <_fwalk_reent+0xe>
 800df7e:	89ab      	ldrh	r3, [r5, #12]
 800df80:	2b01      	cmp	r3, #1
 800df82:	d907      	bls.n	800df94 <_fwalk_reent+0x38>
 800df84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df88:	3301      	adds	r3, #1
 800df8a:	d003      	beq.n	800df94 <_fwalk_reent+0x38>
 800df8c:	4629      	mov	r1, r5
 800df8e:	4640      	mov	r0, r8
 800df90:	47c8      	blx	r9
 800df92:	4306      	orrs	r6, r0
 800df94:	3568      	adds	r5, #104	; 0x68
 800df96:	e7ee      	b.n	800df76 <_fwalk_reent+0x1a>

0800df98 <__locale_ctype_ptr_l>:
 800df98:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800df9c:	4770      	bx	lr

0800df9e <__ascii_mbtowc>:
 800df9e:	b082      	sub	sp, #8
 800dfa0:	b901      	cbnz	r1, 800dfa4 <__ascii_mbtowc+0x6>
 800dfa2:	a901      	add	r1, sp, #4
 800dfa4:	b142      	cbz	r2, 800dfb8 <__ascii_mbtowc+0x1a>
 800dfa6:	b14b      	cbz	r3, 800dfbc <__ascii_mbtowc+0x1e>
 800dfa8:	7813      	ldrb	r3, [r2, #0]
 800dfaa:	600b      	str	r3, [r1, #0]
 800dfac:	7812      	ldrb	r2, [r2, #0]
 800dfae:	1c10      	adds	r0, r2, #0
 800dfb0:	bf18      	it	ne
 800dfb2:	2001      	movne	r0, #1
 800dfb4:	b002      	add	sp, #8
 800dfb6:	4770      	bx	lr
 800dfb8:	4610      	mov	r0, r2
 800dfba:	e7fb      	b.n	800dfb4 <__ascii_mbtowc+0x16>
 800dfbc:	f06f 0001 	mvn.w	r0, #1
 800dfc0:	e7f8      	b.n	800dfb4 <__ascii_mbtowc+0x16>

0800dfc2 <__malloc_lock>:
 800dfc2:	4770      	bx	lr

0800dfc4 <__malloc_unlock>:
 800dfc4:	4770      	bx	lr

0800dfc6 <__ssputs_r>:
 800dfc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfca:	688e      	ldr	r6, [r1, #8]
 800dfcc:	429e      	cmp	r6, r3
 800dfce:	4682      	mov	sl, r0
 800dfd0:	460c      	mov	r4, r1
 800dfd2:	4691      	mov	r9, r2
 800dfd4:	4698      	mov	r8, r3
 800dfd6:	d835      	bhi.n	800e044 <__ssputs_r+0x7e>
 800dfd8:	898a      	ldrh	r2, [r1, #12]
 800dfda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dfde:	d031      	beq.n	800e044 <__ssputs_r+0x7e>
 800dfe0:	6825      	ldr	r5, [r4, #0]
 800dfe2:	6909      	ldr	r1, [r1, #16]
 800dfe4:	1a6f      	subs	r7, r5, r1
 800dfe6:	6965      	ldr	r5, [r4, #20]
 800dfe8:	2302      	movs	r3, #2
 800dfea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfee:	fb95 f5f3 	sdiv	r5, r5, r3
 800dff2:	f108 0301 	add.w	r3, r8, #1
 800dff6:	443b      	add	r3, r7
 800dff8:	429d      	cmp	r5, r3
 800dffa:	bf38      	it	cc
 800dffc:	461d      	movcc	r5, r3
 800dffe:	0553      	lsls	r3, r2, #21
 800e000:	d531      	bpl.n	800e066 <__ssputs_r+0xa0>
 800e002:	4629      	mov	r1, r5
 800e004:	f7ff fd56 	bl	800dab4 <_malloc_r>
 800e008:	4606      	mov	r6, r0
 800e00a:	b950      	cbnz	r0, 800e022 <__ssputs_r+0x5c>
 800e00c:	230c      	movs	r3, #12
 800e00e:	f8ca 3000 	str.w	r3, [sl]
 800e012:	89a3      	ldrh	r3, [r4, #12]
 800e014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e018:	81a3      	strh	r3, [r4, #12]
 800e01a:	f04f 30ff 	mov.w	r0, #4294967295
 800e01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e022:	463a      	mov	r2, r7
 800e024:	6921      	ldr	r1, [r4, #16]
 800e026:	f7ff fce4 	bl	800d9f2 <memcpy>
 800e02a:	89a3      	ldrh	r3, [r4, #12]
 800e02c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e034:	81a3      	strh	r3, [r4, #12]
 800e036:	6126      	str	r6, [r4, #16]
 800e038:	6165      	str	r5, [r4, #20]
 800e03a:	443e      	add	r6, r7
 800e03c:	1bed      	subs	r5, r5, r7
 800e03e:	6026      	str	r6, [r4, #0]
 800e040:	60a5      	str	r5, [r4, #8]
 800e042:	4646      	mov	r6, r8
 800e044:	4546      	cmp	r6, r8
 800e046:	bf28      	it	cs
 800e048:	4646      	movcs	r6, r8
 800e04a:	4632      	mov	r2, r6
 800e04c:	4649      	mov	r1, r9
 800e04e:	6820      	ldr	r0, [r4, #0]
 800e050:	f000 fe3a 	bl	800ecc8 <memmove>
 800e054:	68a3      	ldr	r3, [r4, #8]
 800e056:	1b9b      	subs	r3, r3, r6
 800e058:	60a3      	str	r3, [r4, #8]
 800e05a:	6823      	ldr	r3, [r4, #0]
 800e05c:	441e      	add	r6, r3
 800e05e:	6026      	str	r6, [r4, #0]
 800e060:	2000      	movs	r0, #0
 800e062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e066:	462a      	mov	r2, r5
 800e068:	f000 fe48 	bl	800ecfc <_realloc_r>
 800e06c:	4606      	mov	r6, r0
 800e06e:	2800      	cmp	r0, #0
 800e070:	d1e1      	bne.n	800e036 <__ssputs_r+0x70>
 800e072:	6921      	ldr	r1, [r4, #16]
 800e074:	4650      	mov	r0, sl
 800e076:	f7ff fccf 	bl	800da18 <_free_r>
 800e07a:	e7c7      	b.n	800e00c <__ssputs_r+0x46>

0800e07c <_svfiprintf_r>:
 800e07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e080:	b09d      	sub	sp, #116	; 0x74
 800e082:	4680      	mov	r8, r0
 800e084:	9303      	str	r3, [sp, #12]
 800e086:	898b      	ldrh	r3, [r1, #12]
 800e088:	061c      	lsls	r4, r3, #24
 800e08a:	460d      	mov	r5, r1
 800e08c:	4616      	mov	r6, r2
 800e08e:	d50f      	bpl.n	800e0b0 <_svfiprintf_r+0x34>
 800e090:	690b      	ldr	r3, [r1, #16]
 800e092:	b96b      	cbnz	r3, 800e0b0 <_svfiprintf_r+0x34>
 800e094:	2140      	movs	r1, #64	; 0x40
 800e096:	f7ff fd0d 	bl	800dab4 <_malloc_r>
 800e09a:	6028      	str	r0, [r5, #0]
 800e09c:	6128      	str	r0, [r5, #16]
 800e09e:	b928      	cbnz	r0, 800e0ac <_svfiprintf_r+0x30>
 800e0a0:	230c      	movs	r3, #12
 800e0a2:	f8c8 3000 	str.w	r3, [r8]
 800e0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e0aa:	e0c5      	b.n	800e238 <_svfiprintf_r+0x1bc>
 800e0ac:	2340      	movs	r3, #64	; 0x40
 800e0ae:	616b      	str	r3, [r5, #20]
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e0b4:	2320      	movs	r3, #32
 800e0b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0ba:	2330      	movs	r3, #48	; 0x30
 800e0bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0c0:	f04f 0b01 	mov.w	fp, #1
 800e0c4:	4637      	mov	r7, r6
 800e0c6:	463c      	mov	r4, r7
 800e0c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d13c      	bne.n	800e14a <_svfiprintf_r+0xce>
 800e0d0:	ebb7 0a06 	subs.w	sl, r7, r6
 800e0d4:	d00b      	beq.n	800e0ee <_svfiprintf_r+0x72>
 800e0d6:	4653      	mov	r3, sl
 800e0d8:	4632      	mov	r2, r6
 800e0da:	4629      	mov	r1, r5
 800e0dc:	4640      	mov	r0, r8
 800e0de:	f7ff ff72 	bl	800dfc6 <__ssputs_r>
 800e0e2:	3001      	adds	r0, #1
 800e0e4:	f000 80a3 	beq.w	800e22e <_svfiprintf_r+0x1b2>
 800e0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0ea:	4453      	add	r3, sl
 800e0ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e0ee:	783b      	ldrb	r3, [r7, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	f000 809c 	beq.w	800e22e <_svfiprintf_r+0x1b2>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0fc:	9304      	str	r3, [sp, #16]
 800e0fe:	9307      	str	r3, [sp, #28]
 800e100:	9205      	str	r2, [sp, #20]
 800e102:	9306      	str	r3, [sp, #24]
 800e104:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e108:	931a      	str	r3, [sp, #104]	; 0x68
 800e10a:	2205      	movs	r2, #5
 800e10c:	7821      	ldrb	r1, [r4, #0]
 800e10e:	4850      	ldr	r0, [pc, #320]	; (800e250 <_svfiprintf_r+0x1d4>)
 800e110:	f7f2 f876 	bl	8000200 <memchr>
 800e114:	1c67      	adds	r7, r4, #1
 800e116:	9b04      	ldr	r3, [sp, #16]
 800e118:	b9d8      	cbnz	r0, 800e152 <_svfiprintf_r+0xd6>
 800e11a:	06d9      	lsls	r1, r3, #27
 800e11c:	bf44      	itt	mi
 800e11e:	2220      	movmi	r2, #32
 800e120:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e124:	071a      	lsls	r2, r3, #28
 800e126:	bf44      	itt	mi
 800e128:	222b      	movmi	r2, #43	; 0x2b
 800e12a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e12e:	7822      	ldrb	r2, [r4, #0]
 800e130:	2a2a      	cmp	r2, #42	; 0x2a
 800e132:	d016      	beq.n	800e162 <_svfiprintf_r+0xe6>
 800e134:	9a07      	ldr	r2, [sp, #28]
 800e136:	2100      	movs	r1, #0
 800e138:	200a      	movs	r0, #10
 800e13a:	4627      	mov	r7, r4
 800e13c:	3401      	adds	r4, #1
 800e13e:	783b      	ldrb	r3, [r7, #0]
 800e140:	3b30      	subs	r3, #48	; 0x30
 800e142:	2b09      	cmp	r3, #9
 800e144:	d951      	bls.n	800e1ea <_svfiprintf_r+0x16e>
 800e146:	b1c9      	cbz	r1, 800e17c <_svfiprintf_r+0x100>
 800e148:	e011      	b.n	800e16e <_svfiprintf_r+0xf2>
 800e14a:	2b25      	cmp	r3, #37	; 0x25
 800e14c:	d0c0      	beq.n	800e0d0 <_svfiprintf_r+0x54>
 800e14e:	4627      	mov	r7, r4
 800e150:	e7b9      	b.n	800e0c6 <_svfiprintf_r+0x4a>
 800e152:	4a3f      	ldr	r2, [pc, #252]	; (800e250 <_svfiprintf_r+0x1d4>)
 800e154:	1a80      	subs	r0, r0, r2
 800e156:	fa0b f000 	lsl.w	r0, fp, r0
 800e15a:	4318      	orrs	r0, r3
 800e15c:	9004      	str	r0, [sp, #16]
 800e15e:	463c      	mov	r4, r7
 800e160:	e7d3      	b.n	800e10a <_svfiprintf_r+0x8e>
 800e162:	9a03      	ldr	r2, [sp, #12]
 800e164:	1d11      	adds	r1, r2, #4
 800e166:	6812      	ldr	r2, [r2, #0]
 800e168:	9103      	str	r1, [sp, #12]
 800e16a:	2a00      	cmp	r2, #0
 800e16c:	db01      	blt.n	800e172 <_svfiprintf_r+0xf6>
 800e16e:	9207      	str	r2, [sp, #28]
 800e170:	e004      	b.n	800e17c <_svfiprintf_r+0x100>
 800e172:	4252      	negs	r2, r2
 800e174:	f043 0302 	orr.w	r3, r3, #2
 800e178:	9207      	str	r2, [sp, #28]
 800e17a:	9304      	str	r3, [sp, #16]
 800e17c:	783b      	ldrb	r3, [r7, #0]
 800e17e:	2b2e      	cmp	r3, #46	; 0x2e
 800e180:	d10e      	bne.n	800e1a0 <_svfiprintf_r+0x124>
 800e182:	787b      	ldrb	r3, [r7, #1]
 800e184:	2b2a      	cmp	r3, #42	; 0x2a
 800e186:	f107 0101 	add.w	r1, r7, #1
 800e18a:	d132      	bne.n	800e1f2 <_svfiprintf_r+0x176>
 800e18c:	9b03      	ldr	r3, [sp, #12]
 800e18e:	1d1a      	adds	r2, r3, #4
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	9203      	str	r2, [sp, #12]
 800e194:	2b00      	cmp	r3, #0
 800e196:	bfb8      	it	lt
 800e198:	f04f 33ff 	movlt.w	r3, #4294967295
 800e19c:	3702      	adds	r7, #2
 800e19e:	9305      	str	r3, [sp, #20]
 800e1a0:	4c2c      	ldr	r4, [pc, #176]	; (800e254 <_svfiprintf_r+0x1d8>)
 800e1a2:	7839      	ldrb	r1, [r7, #0]
 800e1a4:	2203      	movs	r2, #3
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	f7f2 f82a 	bl	8000200 <memchr>
 800e1ac:	b138      	cbz	r0, 800e1be <_svfiprintf_r+0x142>
 800e1ae:	2340      	movs	r3, #64	; 0x40
 800e1b0:	1b00      	subs	r0, r0, r4
 800e1b2:	fa03 f000 	lsl.w	r0, r3, r0
 800e1b6:	9b04      	ldr	r3, [sp, #16]
 800e1b8:	4303      	orrs	r3, r0
 800e1ba:	9304      	str	r3, [sp, #16]
 800e1bc:	3701      	adds	r7, #1
 800e1be:	7839      	ldrb	r1, [r7, #0]
 800e1c0:	4825      	ldr	r0, [pc, #148]	; (800e258 <_svfiprintf_r+0x1dc>)
 800e1c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1c6:	2206      	movs	r2, #6
 800e1c8:	1c7e      	adds	r6, r7, #1
 800e1ca:	f7f2 f819 	bl	8000200 <memchr>
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	d035      	beq.n	800e23e <_svfiprintf_r+0x1c2>
 800e1d2:	4b22      	ldr	r3, [pc, #136]	; (800e25c <_svfiprintf_r+0x1e0>)
 800e1d4:	b9fb      	cbnz	r3, 800e216 <_svfiprintf_r+0x19a>
 800e1d6:	9b03      	ldr	r3, [sp, #12]
 800e1d8:	3307      	adds	r3, #7
 800e1da:	f023 0307 	bic.w	r3, r3, #7
 800e1de:	3308      	adds	r3, #8
 800e1e0:	9303      	str	r3, [sp, #12]
 800e1e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1e4:	444b      	add	r3, r9
 800e1e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e1e8:	e76c      	b.n	800e0c4 <_svfiprintf_r+0x48>
 800e1ea:	fb00 3202 	mla	r2, r0, r2, r3
 800e1ee:	2101      	movs	r1, #1
 800e1f0:	e7a3      	b.n	800e13a <_svfiprintf_r+0xbe>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	9305      	str	r3, [sp, #20]
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	240a      	movs	r4, #10
 800e1fa:	460f      	mov	r7, r1
 800e1fc:	3101      	adds	r1, #1
 800e1fe:	783a      	ldrb	r2, [r7, #0]
 800e200:	3a30      	subs	r2, #48	; 0x30
 800e202:	2a09      	cmp	r2, #9
 800e204:	d903      	bls.n	800e20e <_svfiprintf_r+0x192>
 800e206:	2b00      	cmp	r3, #0
 800e208:	d0ca      	beq.n	800e1a0 <_svfiprintf_r+0x124>
 800e20a:	9005      	str	r0, [sp, #20]
 800e20c:	e7c8      	b.n	800e1a0 <_svfiprintf_r+0x124>
 800e20e:	fb04 2000 	mla	r0, r4, r0, r2
 800e212:	2301      	movs	r3, #1
 800e214:	e7f1      	b.n	800e1fa <_svfiprintf_r+0x17e>
 800e216:	ab03      	add	r3, sp, #12
 800e218:	9300      	str	r3, [sp, #0]
 800e21a:	462a      	mov	r2, r5
 800e21c:	4b10      	ldr	r3, [pc, #64]	; (800e260 <_svfiprintf_r+0x1e4>)
 800e21e:	a904      	add	r1, sp, #16
 800e220:	4640      	mov	r0, r8
 800e222:	f3af 8000 	nop.w
 800e226:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e22a:	4681      	mov	r9, r0
 800e22c:	d1d9      	bne.n	800e1e2 <_svfiprintf_r+0x166>
 800e22e:	89ab      	ldrh	r3, [r5, #12]
 800e230:	065b      	lsls	r3, r3, #25
 800e232:	f53f af38 	bmi.w	800e0a6 <_svfiprintf_r+0x2a>
 800e236:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e238:	b01d      	add	sp, #116	; 0x74
 800e23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e23e:	ab03      	add	r3, sp, #12
 800e240:	9300      	str	r3, [sp, #0]
 800e242:	462a      	mov	r2, r5
 800e244:	4b06      	ldr	r3, [pc, #24]	; (800e260 <_svfiprintf_r+0x1e4>)
 800e246:	a904      	add	r1, sp, #16
 800e248:	4640      	mov	r0, r8
 800e24a:	f000 f9c1 	bl	800e5d0 <_printf_i>
 800e24e:	e7ea      	b.n	800e226 <_svfiprintf_r+0x1aa>
 800e250:	08012806 	.word	0x08012806
 800e254:	0801280c 	.word	0x0801280c
 800e258:	08012810 	.word	0x08012810
 800e25c:	00000000 	.word	0x00000000
 800e260:	0800dfc7 	.word	0x0800dfc7

0800e264 <__sfputc_r>:
 800e264:	6893      	ldr	r3, [r2, #8]
 800e266:	3b01      	subs	r3, #1
 800e268:	2b00      	cmp	r3, #0
 800e26a:	b410      	push	{r4}
 800e26c:	6093      	str	r3, [r2, #8]
 800e26e:	da09      	bge.n	800e284 <__sfputc_r+0x20>
 800e270:	6994      	ldr	r4, [r2, #24]
 800e272:	42a3      	cmp	r3, r4
 800e274:	db02      	blt.n	800e27c <__sfputc_r+0x18>
 800e276:	b2cb      	uxtb	r3, r1
 800e278:	2b0a      	cmp	r3, #10
 800e27a:	d103      	bne.n	800e284 <__sfputc_r+0x20>
 800e27c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e280:	f000 bb0a 	b.w	800e898 <__swbuf_r>
 800e284:	6813      	ldr	r3, [r2, #0]
 800e286:	1c58      	adds	r0, r3, #1
 800e288:	6010      	str	r0, [r2, #0]
 800e28a:	7019      	strb	r1, [r3, #0]
 800e28c:	b2c8      	uxtb	r0, r1
 800e28e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e292:	4770      	bx	lr

0800e294 <__sfputs_r>:
 800e294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e296:	4606      	mov	r6, r0
 800e298:	460f      	mov	r7, r1
 800e29a:	4614      	mov	r4, r2
 800e29c:	18d5      	adds	r5, r2, r3
 800e29e:	42ac      	cmp	r4, r5
 800e2a0:	d101      	bne.n	800e2a6 <__sfputs_r+0x12>
 800e2a2:	2000      	movs	r0, #0
 800e2a4:	e007      	b.n	800e2b6 <__sfputs_r+0x22>
 800e2a6:	463a      	mov	r2, r7
 800e2a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2ac:	4630      	mov	r0, r6
 800e2ae:	f7ff ffd9 	bl	800e264 <__sfputc_r>
 800e2b2:	1c43      	adds	r3, r0, #1
 800e2b4:	d1f3      	bne.n	800e29e <__sfputs_r+0xa>
 800e2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e2b8 <_vfiprintf_r>:
 800e2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2bc:	b09d      	sub	sp, #116	; 0x74
 800e2be:	460c      	mov	r4, r1
 800e2c0:	4617      	mov	r7, r2
 800e2c2:	9303      	str	r3, [sp, #12]
 800e2c4:	4606      	mov	r6, r0
 800e2c6:	b118      	cbz	r0, 800e2d0 <_vfiprintf_r+0x18>
 800e2c8:	6983      	ldr	r3, [r0, #24]
 800e2ca:	b90b      	cbnz	r3, 800e2d0 <_vfiprintf_r+0x18>
 800e2cc:	f7ff fdda 	bl	800de84 <__sinit>
 800e2d0:	4b7c      	ldr	r3, [pc, #496]	; (800e4c4 <_vfiprintf_r+0x20c>)
 800e2d2:	429c      	cmp	r4, r3
 800e2d4:	d157      	bne.n	800e386 <_vfiprintf_r+0xce>
 800e2d6:	6874      	ldr	r4, [r6, #4]
 800e2d8:	89a3      	ldrh	r3, [r4, #12]
 800e2da:	0718      	lsls	r0, r3, #28
 800e2dc:	d55d      	bpl.n	800e39a <_vfiprintf_r+0xe2>
 800e2de:	6923      	ldr	r3, [r4, #16]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d05a      	beq.n	800e39a <_vfiprintf_r+0xe2>
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e2e8:	2320      	movs	r3, #32
 800e2ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2ee:	2330      	movs	r3, #48	; 0x30
 800e2f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2f4:	f04f 0b01 	mov.w	fp, #1
 800e2f8:	46b8      	mov	r8, r7
 800e2fa:	4645      	mov	r5, r8
 800e2fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e300:	2b00      	cmp	r3, #0
 800e302:	d155      	bne.n	800e3b0 <_vfiprintf_r+0xf8>
 800e304:	ebb8 0a07 	subs.w	sl, r8, r7
 800e308:	d00b      	beq.n	800e322 <_vfiprintf_r+0x6a>
 800e30a:	4653      	mov	r3, sl
 800e30c:	463a      	mov	r2, r7
 800e30e:	4621      	mov	r1, r4
 800e310:	4630      	mov	r0, r6
 800e312:	f7ff ffbf 	bl	800e294 <__sfputs_r>
 800e316:	3001      	adds	r0, #1
 800e318:	f000 80c4 	beq.w	800e4a4 <_vfiprintf_r+0x1ec>
 800e31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e31e:	4453      	add	r3, sl
 800e320:	9309      	str	r3, [sp, #36]	; 0x24
 800e322:	f898 3000 	ldrb.w	r3, [r8]
 800e326:	2b00      	cmp	r3, #0
 800e328:	f000 80bc 	beq.w	800e4a4 <_vfiprintf_r+0x1ec>
 800e32c:	2300      	movs	r3, #0
 800e32e:	f04f 32ff 	mov.w	r2, #4294967295
 800e332:	9304      	str	r3, [sp, #16]
 800e334:	9307      	str	r3, [sp, #28]
 800e336:	9205      	str	r2, [sp, #20]
 800e338:	9306      	str	r3, [sp, #24]
 800e33a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e33e:	931a      	str	r3, [sp, #104]	; 0x68
 800e340:	2205      	movs	r2, #5
 800e342:	7829      	ldrb	r1, [r5, #0]
 800e344:	4860      	ldr	r0, [pc, #384]	; (800e4c8 <_vfiprintf_r+0x210>)
 800e346:	f7f1 ff5b 	bl	8000200 <memchr>
 800e34a:	f105 0801 	add.w	r8, r5, #1
 800e34e:	9b04      	ldr	r3, [sp, #16]
 800e350:	2800      	cmp	r0, #0
 800e352:	d131      	bne.n	800e3b8 <_vfiprintf_r+0x100>
 800e354:	06d9      	lsls	r1, r3, #27
 800e356:	bf44      	itt	mi
 800e358:	2220      	movmi	r2, #32
 800e35a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e35e:	071a      	lsls	r2, r3, #28
 800e360:	bf44      	itt	mi
 800e362:	222b      	movmi	r2, #43	; 0x2b
 800e364:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e368:	782a      	ldrb	r2, [r5, #0]
 800e36a:	2a2a      	cmp	r2, #42	; 0x2a
 800e36c:	d02c      	beq.n	800e3c8 <_vfiprintf_r+0x110>
 800e36e:	9a07      	ldr	r2, [sp, #28]
 800e370:	2100      	movs	r1, #0
 800e372:	200a      	movs	r0, #10
 800e374:	46a8      	mov	r8, r5
 800e376:	3501      	adds	r5, #1
 800e378:	f898 3000 	ldrb.w	r3, [r8]
 800e37c:	3b30      	subs	r3, #48	; 0x30
 800e37e:	2b09      	cmp	r3, #9
 800e380:	d96d      	bls.n	800e45e <_vfiprintf_r+0x1a6>
 800e382:	b371      	cbz	r1, 800e3e2 <_vfiprintf_r+0x12a>
 800e384:	e026      	b.n	800e3d4 <_vfiprintf_r+0x11c>
 800e386:	4b51      	ldr	r3, [pc, #324]	; (800e4cc <_vfiprintf_r+0x214>)
 800e388:	429c      	cmp	r4, r3
 800e38a:	d101      	bne.n	800e390 <_vfiprintf_r+0xd8>
 800e38c:	68b4      	ldr	r4, [r6, #8]
 800e38e:	e7a3      	b.n	800e2d8 <_vfiprintf_r+0x20>
 800e390:	4b4f      	ldr	r3, [pc, #316]	; (800e4d0 <_vfiprintf_r+0x218>)
 800e392:	429c      	cmp	r4, r3
 800e394:	bf08      	it	eq
 800e396:	68f4      	ldreq	r4, [r6, #12]
 800e398:	e79e      	b.n	800e2d8 <_vfiprintf_r+0x20>
 800e39a:	4621      	mov	r1, r4
 800e39c:	4630      	mov	r0, r6
 800e39e:	f000 faed 	bl	800e97c <__swsetup_r>
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	d09e      	beq.n	800e2e4 <_vfiprintf_r+0x2c>
 800e3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3aa:	b01d      	add	sp, #116	; 0x74
 800e3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b0:	2b25      	cmp	r3, #37	; 0x25
 800e3b2:	d0a7      	beq.n	800e304 <_vfiprintf_r+0x4c>
 800e3b4:	46a8      	mov	r8, r5
 800e3b6:	e7a0      	b.n	800e2fa <_vfiprintf_r+0x42>
 800e3b8:	4a43      	ldr	r2, [pc, #268]	; (800e4c8 <_vfiprintf_r+0x210>)
 800e3ba:	1a80      	subs	r0, r0, r2
 800e3bc:	fa0b f000 	lsl.w	r0, fp, r0
 800e3c0:	4318      	orrs	r0, r3
 800e3c2:	9004      	str	r0, [sp, #16]
 800e3c4:	4645      	mov	r5, r8
 800e3c6:	e7bb      	b.n	800e340 <_vfiprintf_r+0x88>
 800e3c8:	9a03      	ldr	r2, [sp, #12]
 800e3ca:	1d11      	adds	r1, r2, #4
 800e3cc:	6812      	ldr	r2, [r2, #0]
 800e3ce:	9103      	str	r1, [sp, #12]
 800e3d0:	2a00      	cmp	r2, #0
 800e3d2:	db01      	blt.n	800e3d8 <_vfiprintf_r+0x120>
 800e3d4:	9207      	str	r2, [sp, #28]
 800e3d6:	e004      	b.n	800e3e2 <_vfiprintf_r+0x12a>
 800e3d8:	4252      	negs	r2, r2
 800e3da:	f043 0302 	orr.w	r3, r3, #2
 800e3de:	9207      	str	r2, [sp, #28]
 800e3e0:	9304      	str	r3, [sp, #16]
 800e3e2:	f898 3000 	ldrb.w	r3, [r8]
 800e3e6:	2b2e      	cmp	r3, #46	; 0x2e
 800e3e8:	d110      	bne.n	800e40c <_vfiprintf_r+0x154>
 800e3ea:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e3ee:	2b2a      	cmp	r3, #42	; 0x2a
 800e3f0:	f108 0101 	add.w	r1, r8, #1
 800e3f4:	d137      	bne.n	800e466 <_vfiprintf_r+0x1ae>
 800e3f6:	9b03      	ldr	r3, [sp, #12]
 800e3f8:	1d1a      	adds	r2, r3, #4
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	9203      	str	r2, [sp, #12]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	bfb8      	it	lt
 800e402:	f04f 33ff 	movlt.w	r3, #4294967295
 800e406:	f108 0802 	add.w	r8, r8, #2
 800e40a:	9305      	str	r3, [sp, #20]
 800e40c:	4d31      	ldr	r5, [pc, #196]	; (800e4d4 <_vfiprintf_r+0x21c>)
 800e40e:	f898 1000 	ldrb.w	r1, [r8]
 800e412:	2203      	movs	r2, #3
 800e414:	4628      	mov	r0, r5
 800e416:	f7f1 fef3 	bl	8000200 <memchr>
 800e41a:	b140      	cbz	r0, 800e42e <_vfiprintf_r+0x176>
 800e41c:	2340      	movs	r3, #64	; 0x40
 800e41e:	1b40      	subs	r0, r0, r5
 800e420:	fa03 f000 	lsl.w	r0, r3, r0
 800e424:	9b04      	ldr	r3, [sp, #16]
 800e426:	4303      	orrs	r3, r0
 800e428:	9304      	str	r3, [sp, #16]
 800e42a:	f108 0801 	add.w	r8, r8, #1
 800e42e:	f898 1000 	ldrb.w	r1, [r8]
 800e432:	4829      	ldr	r0, [pc, #164]	; (800e4d8 <_vfiprintf_r+0x220>)
 800e434:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e438:	2206      	movs	r2, #6
 800e43a:	f108 0701 	add.w	r7, r8, #1
 800e43e:	f7f1 fedf 	bl	8000200 <memchr>
 800e442:	2800      	cmp	r0, #0
 800e444:	d034      	beq.n	800e4b0 <_vfiprintf_r+0x1f8>
 800e446:	4b25      	ldr	r3, [pc, #148]	; (800e4dc <_vfiprintf_r+0x224>)
 800e448:	bb03      	cbnz	r3, 800e48c <_vfiprintf_r+0x1d4>
 800e44a:	9b03      	ldr	r3, [sp, #12]
 800e44c:	3307      	adds	r3, #7
 800e44e:	f023 0307 	bic.w	r3, r3, #7
 800e452:	3308      	adds	r3, #8
 800e454:	9303      	str	r3, [sp, #12]
 800e456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e458:	444b      	add	r3, r9
 800e45a:	9309      	str	r3, [sp, #36]	; 0x24
 800e45c:	e74c      	b.n	800e2f8 <_vfiprintf_r+0x40>
 800e45e:	fb00 3202 	mla	r2, r0, r2, r3
 800e462:	2101      	movs	r1, #1
 800e464:	e786      	b.n	800e374 <_vfiprintf_r+0xbc>
 800e466:	2300      	movs	r3, #0
 800e468:	9305      	str	r3, [sp, #20]
 800e46a:	4618      	mov	r0, r3
 800e46c:	250a      	movs	r5, #10
 800e46e:	4688      	mov	r8, r1
 800e470:	3101      	adds	r1, #1
 800e472:	f898 2000 	ldrb.w	r2, [r8]
 800e476:	3a30      	subs	r2, #48	; 0x30
 800e478:	2a09      	cmp	r2, #9
 800e47a:	d903      	bls.n	800e484 <_vfiprintf_r+0x1cc>
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d0c5      	beq.n	800e40c <_vfiprintf_r+0x154>
 800e480:	9005      	str	r0, [sp, #20]
 800e482:	e7c3      	b.n	800e40c <_vfiprintf_r+0x154>
 800e484:	fb05 2000 	mla	r0, r5, r0, r2
 800e488:	2301      	movs	r3, #1
 800e48a:	e7f0      	b.n	800e46e <_vfiprintf_r+0x1b6>
 800e48c:	ab03      	add	r3, sp, #12
 800e48e:	9300      	str	r3, [sp, #0]
 800e490:	4622      	mov	r2, r4
 800e492:	4b13      	ldr	r3, [pc, #76]	; (800e4e0 <_vfiprintf_r+0x228>)
 800e494:	a904      	add	r1, sp, #16
 800e496:	4630      	mov	r0, r6
 800e498:	f3af 8000 	nop.w
 800e49c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e4a0:	4681      	mov	r9, r0
 800e4a2:	d1d8      	bne.n	800e456 <_vfiprintf_r+0x19e>
 800e4a4:	89a3      	ldrh	r3, [r4, #12]
 800e4a6:	065b      	lsls	r3, r3, #25
 800e4a8:	f53f af7d 	bmi.w	800e3a6 <_vfiprintf_r+0xee>
 800e4ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4ae:	e77c      	b.n	800e3aa <_vfiprintf_r+0xf2>
 800e4b0:	ab03      	add	r3, sp, #12
 800e4b2:	9300      	str	r3, [sp, #0]
 800e4b4:	4622      	mov	r2, r4
 800e4b6:	4b0a      	ldr	r3, [pc, #40]	; (800e4e0 <_vfiprintf_r+0x228>)
 800e4b8:	a904      	add	r1, sp, #16
 800e4ba:	4630      	mov	r0, r6
 800e4bc:	f000 f888 	bl	800e5d0 <_printf_i>
 800e4c0:	e7ec      	b.n	800e49c <_vfiprintf_r+0x1e4>
 800e4c2:	bf00      	nop
 800e4c4:	080127bc 	.word	0x080127bc
 800e4c8:	08012806 	.word	0x08012806
 800e4cc:	080127dc 	.word	0x080127dc
 800e4d0:	0801279c 	.word	0x0801279c
 800e4d4:	0801280c 	.word	0x0801280c
 800e4d8:	08012810 	.word	0x08012810
 800e4dc:	00000000 	.word	0x00000000
 800e4e0:	0800e295 	.word	0x0800e295

0800e4e4 <_printf_common>:
 800e4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4e8:	4691      	mov	r9, r2
 800e4ea:	461f      	mov	r7, r3
 800e4ec:	688a      	ldr	r2, [r1, #8]
 800e4ee:	690b      	ldr	r3, [r1, #16]
 800e4f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	bfb8      	it	lt
 800e4f8:	4613      	movlt	r3, r2
 800e4fa:	f8c9 3000 	str.w	r3, [r9]
 800e4fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e502:	4606      	mov	r6, r0
 800e504:	460c      	mov	r4, r1
 800e506:	b112      	cbz	r2, 800e50e <_printf_common+0x2a>
 800e508:	3301      	adds	r3, #1
 800e50a:	f8c9 3000 	str.w	r3, [r9]
 800e50e:	6823      	ldr	r3, [r4, #0]
 800e510:	0699      	lsls	r1, r3, #26
 800e512:	bf42      	ittt	mi
 800e514:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e518:	3302      	addmi	r3, #2
 800e51a:	f8c9 3000 	strmi.w	r3, [r9]
 800e51e:	6825      	ldr	r5, [r4, #0]
 800e520:	f015 0506 	ands.w	r5, r5, #6
 800e524:	d107      	bne.n	800e536 <_printf_common+0x52>
 800e526:	f104 0a19 	add.w	sl, r4, #25
 800e52a:	68e3      	ldr	r3, [r4, #12]
 800e52c:	f8d9 2000 	ldr.w	r2, [r9]
 800e530:	1a9b      	subs	r3, r3, r2
 800e532:	429d      	cmp	r5, r3
 800e534:	db29      	blt.n	800e58a <_printf_common+0xa6>
 800e536:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e53a:	6822      	ldr	r2, [r4, #0]
 800e53c:	3300      	adds	r3, #0
 800e53e:	bf18      	it	ne
 800e540:	2301      	movne	r3, #1
 800e542:	0692      	lsls	r2, r2, #26
 800e544:	d42e      	bmi.n	800e5a4 <_printf_common+0xc0>
 800e546:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e54a:	4639      	mov	r1, r7
 800e54c:	4630      	mov	r0, r6
 800e54e:	47c0      	blx	r8
 800e550:	3001      	adds	r0, #1
 800e552:	d021      	beq.n	800e598 <_printf_common+0xb4>
 800e554:	6823      	ldr	r3, [r4, #0]
 800e556:	68e5      	ldr	r5, [r4, #12]
 800e558:	f8d9 2000 	ldr.w	r2, [r9]
 800e55c:	f003 0306 	and.w	r3, r3, #6
 800e560:	2b04      	cmp	r3, #4
 800e562:	bf08      	it	eq
 800e564:	1aad      	subeq	r5, r5, r2
 800e566:	68a3      	ldr	r3, [r4, #8]
 800e568:	6922      	ldr	r2, [r4, #16]
 800e56a:	bf0c      	ite	eq
 800e56c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e570:	2500      	movne	r5, #0
 800e572:	4293      	cmp	r3, r2
 800e574:	bfc4      	itt	gt
 800e576:	1a9b      	subgt	r3, r3, r2
 800e578:	18ed      	addgt	r5, r5, r3
 800e57a:	f04f 0900 	mov.w	r9, #0
 800e57e:	341a      	adds	r4, #26
 800e580:	454d      	cmp	r5, r9
 800e582:	d11b      	bne.n	800e5bc <_printf_common+0xd8>
 800e584:	2000      	movs	r0, #0
 800e586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e58a:	2301      	movs	r3, #1
 800e58c:	4652      	mov	r2, sl
 800e58e:	4639      	mov	r1, r7
 800e590:	4630      	mov	r0, r6
 800e592:	47c0      	blx	r8
 800e594:	3001      	adds	r0, #1
 800e596:	d103      	bne.n	800e5a0 <_printf_common+0xbc>
 800e598:	f04f 30ff 	mov.w	r0, #4294967295
 800e59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5a0:	3501      	adds	r5, #1
 800e5a2:	e7c2      	b.n	800e52a <_printf_common+0x46>
 800e5a4:	18e1      	adds	r1, r4, r3
 800e5a6:	1c5a      	adds	r2, r3, #1
 800e5a8:	2030      	movs	r0, #48	; 0x30
 800e5aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e5ae:	4422      	add	r2, r4
 800e5b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e5b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e5b8:	3302      	adds	r3, #2
 800e5ba:	e7c4      	b.n	800e546 <_printf_common+0x62>
 800e5bc:	2301      	movs	r3, #1
 800e5be:	4622      	mov	r2, r4
 800e5c0:	4639      	mov	r1, r7
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	47c0      	blx	r8
 800e5c6:	3001      	adds	r0, #1
 800e5c8:	d0e6      	beq.n	800e598 <_printf_common+0xb4>
 800e5ca:	f109 0901 	add.w	r9, r9, #1
 800e5ce:	e7d7      	b.n	800e580 <_printf_common+0x9c>

0800e5d0 <_printf_i>:
 800e5d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5d4:	4617      	mov	r7, r2
 800e5d6:	7e0a      	ldrb	r2, [r1, #24]
 800e5d8:	b085      	sub	sp, #20
 800e5da:	2a6e      	cmp	r2, #110	; 0x6e
 800e5dc:	4698      	mov	r8, r3
 800e5de:	4606      	mov	r6, r0
 800e5e0:	460c      	mov	r4, r1
 800e5e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5e4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800e5e8:	f000 80bc 	beq.w	800e764 <_printf_i+0x194>
 800e5ec:	d81a      	bhi.n	800e624 <_printf_i+0x54>
 800e5ee:	2a63      	cmp	r2, #99	; 0x63
 800e5f0:	d02e      	beq.n	800e650 <_printf_i+0x80>
 800e5f2:	d80a      	bhi.n	800e60a <_printf_i+0x3a>
 800e5f4:	2a00      	cmp	r2, #0
 800e5f6:	f000 80c8 	beq.w	800e78a <_printf_i+0x1ba>
 800e5fa:	2a58      	cmp	r2, #88	; 0x58
 800e5fc:	f000 808a 	beq.w	800e714 <_printf_i+0x144>
 800e600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e604:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800e608:	e02a      	b.n	800e660 <_printf_i+0x90>
 800e60a:	2a64      	cmp	r2, #100	; 0x64
 800e60c:	d001      	beq.n	800e612 <_printf_i+0x42>
 800e60e:	2a69      	cmp	r2, #105	; 0x69
 800e610:	d1f6      	bne.n	800e600 <_printf_i+0x30>
 800e612:	6821      	ldr	r1, [r4, #0]
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	f011 0f80 	tst.w	r1, #128	; 0x80
 800e61a:	d023      	beq.n	800e664 <_printf_i+0x94>
 800e61c:	1d11      	adds	r1, r2, #4
 800e61e:	6019      	str	r1, [r3, #0]
 800e620:	6813      	ldr	r3, [r2, #0]
 800e622:	e027      	b.n	800e674 <_printf_i+0xa4>
 800e624:	2a73      	cmp	r2, #115	; 0x73
 800e626:	f000 80b4 	beq.w	800e792 <_printf_i+0x1c2>
 800e62a:	d808      	bhi.n	800e63e <_printf_i+0x6e>
 800e62c:	2a6f      	cmp	r2, #111	; 0x6f
 800e62e:	d02a      	beq.n	800e686 <_printf_i+0xb6>
 800e630:	2a70      	cmp	r2, #112	; 0x70
 800e632:	d1e5      	bne.n	800e600 <_printf_i+0x30>
 800e634:	680a      	ldr	r2, [r1, #0]
 800e636:	f042 0220 	orr.w	r2, r2, #32
 800e63a:	600a      	str	r2, [r1, #0]
 800e63c:	e003      	b.n	800e646 <_printf_i+0x76>
 800e63e:	2a75      	cmp	r2, #117	; 0x75
 800e640:	d021      	beq.n	800e686 <_printf_i+0xb6>
 800e642:	2a78      	cmp	r2, #120	; 0x78
 800e644:	d1dc      	bne.n	800e600 <_printf_i+0x30>
 800e646:	2278      	movs	r2, #120	; 0x78
 800e648:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800e64c:	496e      	ldr	r1, [pc, #440]	; (800e808 <_printf_i+0x238>)
 800e64e:	e064      	b.n	800e71a <_printf_i+0x14a>
 800e650:	681a      	ldr	r2, [r3, #0]
 800e652:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800e656:	1d11      	adds	r1, r2, #4
 800e658:	6019      	str	r1, [r3, #0]
 800e65a:	6813      	ldr	r3, [r2, #0]
 800e65c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e660:	2301      	movs	r3, #1
 800e662:	e0a3      	b.n	800e7ac <_printf_i+0x1dc>
 800e664:	f011 0f40 	tst.w	r1, #64	; 0x40
 800e668:	f102 0104 	add.w	r1, r2, #4
 800e66c:	6019      	str	r1, [r3, #0]
 800e66e:	d0d7      	beq.n	800e620 <_printf_i+0x50>
 800e670:	f9b2 3000 	ldrsh.w	r3, [r2]
 800e674:	2b00      	cmp	r3, #0
 800e676:	da03      	bge.n	800e680 <_printf_i+0xb0>
 800e678:	222d      	movs	r2, #45	; 0x2d
 800e67a:	425b      	negs	r3, r3
 800e67c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e680:	4962      	ldr	r1, [pc, #392]	; (800e80c <_printf_i+0x23c>)
 800e682:	220a      	movs	r2, #10
 800e684:	e017      	b.n	800e6b6 <_printf_i+0xe6>
 800e686:	6820      	ldr	r0, [r4, #0]
 800e688:	6819      	ldr	r1, [r3, #0]
 800e68a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800e68e:	d003      	beq.n	800e698 <_printf_i+0xc8>
 800e690:	1d08      	adds	r0, r1, #4
 800e692:	6018      	str	r0, [r3, #0]
 800e694:	680b      	ldr	r3, [r1, #0]
 800e696:	e006      	b.n	800e6a6 <_printf_i+0xd6>
 800e698:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e69c:	f101 0004 	add.w	r0, r1, #4
 800e6a0:	6018      	str	r0, [r3, #0]
 800e6a2:	d0f7      	beq.n	800e694 <_printf_i+0xc4>
 800e6a4:	880b      	ldrh	r3, [r1, #0]
 800e6a6:	4959      	ldr	r1, [pc, #356]	; (800e80c <_printf_i+0x23c>)
 800e6a8:	2a6f      	cmp	r2, #111	; 0x6f
 800e6aa:	bf14      	ite	ne
 800e6ac:	220a      	movne	r2, #10
 800e6ae:	2208      	moveq	r2, #8
 800e6b0:	2000      	movs	r0, #0
 800e6b2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800e6b6:	6865      	ldr	r5, [r4, #4]
 800e6b8:	60a5      	str	r5, [r4, #8]
 800e6ba:	2d00      	cmp	r5, #0
 800e6bc:	f2c0 809c 	blt.w	800e7f8 <_printf_i+0x228>
 800e6c0:	6820      	ldr	r0, [r4, #0]
 800e6c2:	f020 0004 	bic.w	r0, r0, #4
 800e6c6:	6020      	str	r0, [r4, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d13f      	bne.n	800e74c <_printf_i+0x17c>
 800e6cc:	2d00      	cmp	r5, #0
 800e6ce:	f040 8095 	bne.w	800e7fc <_printf_i+0x22c>
 800e6d2:	4675      	mov	r5, lr
 800e6d4:	2a08      	cmp	r2, #8
 800e6d6:	d10b      	bne.n	800e6f0 <_printf_i+0x120>
 800e6d8:	6823      	ldr	r3, [r4, #0]
 800e6da:	07da      	lsls	r2, r3, #31
 800e6dc:	d508      	bpl.n	800e6f0 <_printf_i+0x120>
 800e6de:	6923      	ldr	r3, [r4, #16]
 800e6e0:	6862      	ldr	r2, [r4, #4]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	bfde      	ittt	le
 800e6e6:	2330      	movle	r3, #48	; 0x30
 800e6e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6f0:	ebae 0305 	sub.w	r3, lr, r5
 800e6f4:	6123      	str	r3, [r4, #16]
 800e6f6:	f8cd 8000 	str.w	r8, [sp]
 800e6fa:	463b      	mov	r3, r7
 800e6fc:	aa03      	add	r2, sp, #12
 800e6fe:	4621      	mov	r1, r4
 800e700:	4630      	mov	r0, r6
 800e702:	f7ff feef 	bl	800e4e4 <_printf_common>
 800e706:	3001      	adds	r0, #1
 800e708:	d155      	bne.n	800e7b6 <_printf_i+0x1e6>
 800e70a:	f04f 30ff 	mov.w	r0, #4294967295
 800e70e:	b005      	add	sp, #20
 800e710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e714:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800e718:	493c      	ldr	r1, [pc, #240]	; (800e80c <_printf_i+0x23c>)
 800e71a:	6822      	ldr	r2, [r4, #0]
 800e71c:	6818      	ldr	r0, [r3, #0]
 800e71e:	f012 0f80 	tst.w	r2, #128	; 0x80
 800e722:	f100 0504 	add.w	r5, r0, #4
 800e726:	601d      	str	r5, [r3, #0]
 800e728:	d001      	beq.n	800e72e <_printf_i+0x15e>
 800e72a:	6803      	ldr	r3, [r0, #0]
 800e72c:	e002      	b.n	800e734 <_printf_i+0x164>
 800e72e:	0655      	lsls	r5, r2, #25
 800e730:	d5fb      	bpl.n	800e72a <_printf_i+0x15a>
 800e732:	8803      	ldrh	r3, [r0, #0]
 800e734:	07d0      	lsls	r0, r2, #31
 800e736:	bf44      	itt	mi
 800e738:	f042 0220 	orrmi.w	r2, r2, #32
 800e73c:	6022      	strmi	r2, [r4, #0]
 800e73e:	b91b      	cbnz	r3, 800e748 <_printf_i+0x178>
 800e740:	6822      	ldr	r2, [r4, #0]
 800e742:	f022 0220 	bic.w	r2, r2, #32
 800e746:	6022      	str	r2, [r4, #0]
 800e748:	2210      	movs	r2, #16
 800e74a:	e7b1      	b.n	800e6b0 <_printf_i+0xe0>
 800e74c:	4675      	mov	r5, lr
 800e74e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e752:	fb02 3310 	mls	r3, r2, r0, r3
 800e756:	5ccb      	ldrb	r3, [r1, r3]
 800e758:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e75c:	4603      	mov	r3, r0
 800e75e:	2800      	cmp	r0, #0
 800e760:	d1f5      	bne.n	800e74e <_printf_i+0x17e>
 800e762:	e7b7      	b.n	800e6d4 <_printf_i+0x104>
 800e764:	6808      	ldr	r0, [r1, #0]
 800e766:	681a      	ldr	r2, [r3, #0]
 800e768:	6949      	ldr	r1, [r1, #20]
 800e76a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800e76e:	d004      	beq.n	800e77a <_printf_i+0x1aa>
 800e770:	1d10      	adds	r0, r2, #4
 800e772:	6018      	str	r0, [r3, #0]
 800e774:	6813      	ldr	r3, [r2, #0]
 800e776:	6019      	str	r1, [r3, #0]
 800e778:	e007      	b.n	800e78a <_printf_i+0x1ba>
 800e77a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e77e:	f102 0004 	add.w	r0, r2, #4
 800e782:	6018      	str	r0, [r3, #0]
 800e784:	6813      	ldr	r3, [r2, #0]
 800e786:	d0f6      	beq.n	800e776 <_printf_i+0x1a6>
 800e788:	8019      	strh	r1, [r3, #0]
 800e78a:	2300      	movs	r3, #0
 800e78c:	6123      	str	r3, [r4, #16]
 800e78e:	4675      	mov	r5, lr
 800e790:	e7b1      	b.n	800e6f6 <_printf_i+0x126>
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	1d11      	adds	r1, r2, #4
 800e796:	6019      	str	r1, [r3, #0]
 800e798:	6815      	ldr	r5, [r2, #0]
 800e79a:	6862      	ldr	r2, [r4, #4]
 800e79c:	2100      	movs	r1, #0
 800e79e:	4628      	mov	r0, r5
 800e7a0:	f7f1 fd2e 	bl	8000200 <memchr>
 800e7a4:	b108      	cbz	r0, 800e7aa <_printf_i+0x1da>
 800e7a6:	1b40      	subs	r0, r0, r5
 800e7a8:	6060      	str	r0, [r4, #4]
 800e7aa:	6863      	ldr	r3, [r4, #4]
 800e7ac:	6123      	str	r3, [r4, #16]
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7b4:	e79f      	b.n	800e6f6 <_printf_i+0x126>
 800e7b6:	6923      	ldr	r3, [r4, #16]
 800e7b8:	462a      	mov	r2, r5
 800e7ba:	4639      	mov	r1, r7
 800e7bc:	4630      	mov	r0, r6
 800e7be:	47c0      	blx	r8
 800e7c0:	3001      	adds	r0, #1
 800e7c2:	d0a2      	beq.n	800e70a <_printf_i+0x13a>
 800e7c4:	6823      	ldr	r3, [r4, #0]
 800e7c6:	079b      	lsls	r3, r3, #30
 800e7c8:	d507      	bpl.n	800e7da <_printf_i+0x20a>
 800e7ca:	2500      	movs	r5, #0
 800e7cc:	f104 0919 	add.w	r9, r4, #25
 800e7d0:	68e3      	ldr	r3, [r4, #12]
 800e7d2:	9a03      	ldr	r2, [sp, #12]
 800e7d4:	1a9b      	subs	r3, r3, r2
 800e7d6:	429d      	cmp	r5, r3
 800e7d8:	db05      	blt.n	800e7e6 <_printf_i+0x216>
 800e7da:	68e0      	ldr	r0, [r4, #12]
 800e7dc:	9b03      	ldr	r3, [sp, #12]
 800e7de:	4298      	cmp	r0, r3
 800e7e0:	bfb8      	it	lt
 800e7e2:	4618      	movlt	r0, r3
 800e7e4:	e793      	b.n	800e70e <_printf_i+0x13e>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	464a      	mov	r2, r9
 800e7ea:	4639      	mov	r1, r7
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	47c0      	blx	r8
 800e7f0:	3001      	adds	r0, #1
 800e7f2:	d08a      	beq.n	800e70a <_printf_i+0x13a>
 800e7f4:	3501      	adds	r5, #1
 800e7f6:	e7eb      	b.n	800e7d0 <_printf_i+0x200>
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d1a7      	bne.n	800e74c <_printf_i+0x17c>
 800e7fc:	780b      	ldrb	r3, [r1, #0]
 800e7fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e802:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e806:	e765      	b.n	800e6d4 <_printf_i+0x104>
 800e808:	08012828 	.word	0x08012828
 800e80c:	08012817 	.word	0x08012817

0800e810 <__sread>:
 800e810:	b510      	push	{r4, lr}
 800e812:	460c      	mov	r4, r1
 800e814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e818:	f000 fa96 	bl	800ed48 <_read_r>
 800e81c:	2800      	cmp	r0, #0
 800e81e:	bfab      	itete	ge
 800e820:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e822:	89a3      	ldrhlt	r3, [r4, #12]
 800e824:	181b      	addge	r3, r3, r0
 800e826:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e82a:	bfac      	ite	ge
 800e82c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e82e:	81a3      	strhlt	r3, [r4, #12]
 800e830:	bd10      	pop	{r4, pc}

0800e832 <__swrite>:
 800e832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e836:	461f      	mov	r7, r3
 800e838:	898b      	ldrh	r3, [r1, #12]
 800e83a:	05db      	lsls	r3, r3, #23
 800e83c:	4605      	mov	r5, r0
 800e83e:	460c      	mov	r4, r1
 800e840:	4616      	mov	r6, r2
 800e842:	d505      	bpl.n	800e850 <__swrite+0x1e>
 800e844:	2302      	movs	r3, #2
 800e846:	2200      	movs	r2, #0
 800e848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e84c:	f000 f9c6 	bl	800ebdc <_lseek_r>
 800e850:	89a3      	ldrh	r3, [r4, #12]
 800e852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e85a:	81a3      	strh	r3, [r4, #12]
 800e85c:	4632      	mov	r2, r6
 800e85e:	463b      	mov	r3, r7
 800e860:	4628      	mov	r0, r5
 800e862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e866:	f000 b877 	b.w	800e958 <_write_r>

0800e86a <__sseek>:
 800e86a:	b510      	push	{r4, lr}
 800e86c:	460c      	mov	r4, r1
 800e86e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e872:	f000 f9b3 	bl	800ebdc <_lseek_r>
 800e876:	1c43      	adds	r3, r0, #1
 800e878:	89a3      	ldrh	r3, [r4, #12]
 800e87a:	bf15      	itete	ne
 800e87c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e87e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e882:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e886:	81a3      	strheq	r3, [r4, #12]
 800e888:	bf18      	it	ne
 800e88a:	81a3      	strhne	r3, [r4, #12]
 800e88c:	bd10      	pop	{r4, pc}

0800e88e <__sclose>:
 800e88e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e892:	f000 b8e1 	b.w	800ea58 <_close_r>
	...

0800e898 <__swbuf_r>:
 800e898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e89a:	460e      	mov	r6, r1
 800e89c:	4614      	mov	r4, r2
 800e89e:	4605      	mov	r5, r0
 800e8a0:	b118      	cbz	r0, 800e8aa <__swbuf_r+0x12>
 800e8a2:	6983      	ldr	r3, [r0, #24]
 800e8a4:	b90b      	cbnz	r3, 800e8aa <__swbuf_r+0x12>
 800e8a6:	f7ff faed 	bl	800de84 <__sinit>
 800e8aa:	4b21      	ldr	r3, [pc, #132]	; (800e930 <__swbuf_r+0x98>)
 800e8ac:	429c      	cmp	r4, r3
 800e8ae:	d12a      	bne.n	800e906 <__swbuf_r+0x6e>
 800e8b0:	686c      	ldr	r4, [r5, #4]
 800e8b2:	69a3      	ldr	r3, [r4, #24]
 800e8b4:	60a3      	str	r3, [r4, #8]
 800e8b6:	89a3      	ldrh	r3, [r4, #12]
 800e8b8:	071a      	lsls	r2, r3, #28
 800e8ba:	d52e      	bpl.n	800e91a <__swbuf_r+0x82>
 800e8bc:	6923      	ldr	r3, [r4, #16]
 800e8be:	b363      	cbz	r3, 800e91a <__swbuf_r+0x82>
 800e8c0:	6923      	ldr	r3, [r4, #16]
 800e8c2:	6820      	ldr	r0, [r4, #0]
 800e8c4:	1ac0      	subs	r0, r0, r3
 800e8c6:	6963      	ldr	r3, [r4, #20]
 800e8c8:	b2f6      	uxtb	r6, r6
 800e8ca:	4298      	cmp	r0, r3
 800e8cc:	4637      	mov	r7, r6
 800e8ce:	db04      	blt.n	800e8da <__swbuf_r+0x42>
 800e8d0:	4621      	mov	r1, r4
 800e8d2:	4628      	mov	r0, r5
 800e8d4:	f000 f958 	bl	800eb88 <_fflush_r>
 800e8d8:	bb28      	cbnz	r0, 800e926 <__swbuf_r+0x8e>
 800e8da:	68a3      	ldr	r3, [r4, #8]
 800e8dc:	3b01      	subs	r3, #1
 800e8de:	60a3      	str	r3, [r4, #8]
 800e8e0:	6823      	ldr	r3, [r4, #0]
 800e8e2:	1c5a      	adds	r2, r3, #1
 800e8e4:	6022      	str	r2, [r4, #0]
 800e8e6:	701e      	strb	r6, [r3, #0]
 800e8e8:	6963      	ldr	r3, [r4, #20]
 800e8ea:	3001      	adds	r0, #1
 800e8ec:	4298      	cmp	r0, r3
 800e8ee:	d004      	beq.n	800e8fa <__swbuf_r+0x62>
 800e8f0:	89a3      	ldrh	r3, [r4, #12]
 800e8f2:	07db      	lsls	r3, r3, #31
 800e8f4:	d519      	bpl.n	800e92a <__swbuf_r+0x92>
 800e8f6:	2e0a      	cmp	r6, #10
 800e8f8:	d117      	bne.n	800e92a <__swbuf_r+0x92>
 800e8fa:	4621      	mov	r1, r4
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	f000 f943 	bl	800eb88 <_fflush_r>
 800e902:	b190      	cbz	r0, 800e92a <__swbuf_r+0x92>
 800e904:	e00f      	b.n	800e926 <__swbuf_r+0x8e>
 800e906:	4b0b      	ldr	r3, [pc, #44]	; (800e934 <__swbuf_r+0x9c>)
 800e908:	429c      	cmp	r4, r3
 800e90a:	d101      	bne.n	800e910 <__swbuf_r+0x78>
 800e90c:	68ac      	ldr	r4, [r5, #8]
 800e90e:	e7d0      	b.n	800e8b2 <__swbuf_r+0x1a>
 800e910:	4b09      	ldr	r3, [pc, #36]	; (800e938 <__swbuf_r+0xa0>)
 800e912:	429c      	cmp	r4, r3
 800e914:	bf08      	it	eq
 800e916:	68ec      	ldreq	r4, [r5, #12]
 800e918:	e7cb      	b.n	800e8b2 <__swbuf_r+0x1a>
 800e91a:	4621      	mov	r1, r4
 800e91c:	4628      	mov	r0, r5
 800e91e:	f000 f82d 	bl	800e97c <__swsetup_r>
 800e922:	2800      	cmp	r0, #0
 800e924:	d0cc      	beq.n	800e8c0 <__swbuf_r+0x28>
 800e926:	f04f 37ff 	mov.w	r7, #4294967295
 800e92a:	4638      	mov	r0, r7
 800e92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e92e:	bf00      	nop
 800e930:	080127bc 	.word	0x080127bc
 800e934:	080127dc 	.word	0x080127dc
 800e938:	0801279c 	.word	0x0801279c

0800e93c <__ascii_wctomb>:
 800e93c:	b149      	cbz	r1, 800e952 <__ascii_wctomb+0x16>
 800e93e:	2aff      	cmp	r2, #255	; 0xff
 800e940:	bf85      	ittet	hi
 800e942:	238a      	movhi	r3, #138	; 0x8a
 800e944:	6003      	strhi	r3, [r0, #0]
 800e946:	700a      	strbls	r2, [r1, #0]
 800e948:	f04f 30ff 	movhi.w	r0, #4294967295
 800e94c:	bf98      	it	ls
 800e94e:	2001      	movls	r0, #1
 800e950:	4770      	bx	lr
 800e952:	4608      	mov	r0, r1
 800e954:	4770      	bx	lr
	...

0800e958 <_write_r>:
 800e958:	b538      	push	{r3, r4, r5, lr}
 800e95a:	4c07      	ldr	r4, [pc, #28]	; (800e978 <_write_r+0x20>)
 800e95c:	4605      	mov	r5, r0
 800e95e:	4608      	mov	r0, r1
 800e960:	4611      	mov	r1, r2
 800e962:	2200      	movs	r2, #0
 800e964:	6022      	str	r2, [r4, #0]
 800e966:	461a      	mov	r2, r3
 800e968:	f7fd fcd2 	bl	800c310 <_write>
 800e96c:	1c43      	adds	r3, r0, #1
 800e96e:	d102      	bne.n	800e976 <_write_r+0x1e>
 800e970:	6823      	ldr	r3, [r4, #0]
 800e972:	b103      	cbz	r3, 800e976 <_write_r+0x1e>
 800e974:	602b      	str	r3, [r5, #0]
 800e976:	bd38      	pop	{r3, r4, r5, pc}
 800e978:	2000a508 	.word	0x2000a508

0800e97c <__swsetup_r>:
 800e97c:	4b32      	ldr	r3, [pc, #200]	; (800ea48 <__swsetup_r+0xcc>)
 800e97e:	b570      	push	{r4, r5, r6, lr}
 800e980:	681d      	ldr	r5, [r3, #0]
 800e982:	4606      	mov	r6, r0
 800e984:	460c      	mov	r4, r1
 800e986:	b125      	cbz	r5, 800e992 <__swsetup_r+0x16>
 800e988:	69ab      	ldr	r3, [r5, #24]
 800e98a:	b913      	cbnz	r3, 800e992 <__swsetup_r+0x16>
 800e98c:	4628      	mov	r0, r5
 800e98e:	f7ff fa79 	bl	800de84 <__sinit>
 800e992:	4b2e      	ldr	r3, [pc, #184]	; (800ea4c <__swsetup_r+0xd0>)
 800e994:	429c      	cmp	r4, r3
 800e996:	d10f      	bne.n	800e9b8 <__swsetup_r+0x3c>
 800e998:	686c      	ldr	r4, [r5, #4]
 800e99a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e99e:	b29a      	uxth	r2, r3
 800e9a0:	0715      	lsls	r5, r2, #28
 800e9a2:	d42c      	bmi.n	800e9fe <__swsetup_r+0x82>
 800e9a4:	06d0      	lsls	r0, r2, #27
 800e9a6:	d411      	bmi.n	800e9cc <__swsetup_r+0x50>
 800e9a8:	2209      	movs	r2, #9
 800e9aa:	6032      	str	r2, [r6, #0]
 800e9ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9b0:	81a3      	strh	r3, [r4, #12]
 800e9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e9b6:	bd70      	pop	{r4, r5, r6, pc}
 800e9b8:	4b25      	ldr	r3, [pc, #148]	; (800ea50 <__swsetup_r+0xd4>)
 800e9ba:	429c      	cmp	r4, r3
 800e9bc:	d101      	bne.n	800e9c2 <__swsetup_r+0x46>
 800e9be:	68ac      	ldr	r4, [r5, #8]
 800e9c0:	e7eb      	b.n	800e99a <__swsetup_r+0x1e>
 800e9c2:	4b24      	ldr	r3, [pc, #144]	; (800ea54 <__swsetup_r+0xd8>)
 800e9c4:	429c      	cmp	r4, r3
 800e9c6:	bf08      	it	eq
 800e9c8:	68ec      	ldreq	r4, [r5, #12]
 800e9ca:	e7e6      	b.n	800e99a <__swsetup_r+0x1e>
 800e9cc:	0751      	lsls	r1, r2, #29
 800e9ce:	d512      	bpl.n	800e9f6 <__swsetup_r+0x7a>
 800e9d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9d2:	b141      	cbz	r1, 800e9e6 <__swsetup_r+0x6a>
 800e9d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9d8:	4299      	cmp	r1, r3
 800e9da:	d002      	beq.n	800e9e2 <__swsetup_r+0x66>
 800e9dc:	4630      	mov	r0, r6
 800e9de:	f7ff f81b 	bl	800da18 <_free_r>
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	6363      	str	r3, [r4, #52]	; 0x34
 800e9e6:	89a3      	ldrh	r3, [r4, #12]
 800e9e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e9ec:	81a3      	strh	r3, [r4, #12]
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	6063      	str	r3, [r4, #4]
 800e9f2:	6923      	ldr	r3, [r4, #16]
 800e9f4:	6023      	str	r3, [r4, #0]
 800e9f6:	89a3      	ldrh	r3, [r4, #12]
 800e9f8:	f043 0308 	orr.w	r3, r3, #8
 800e9fc:	81a3      	strh	r3, [r4, #12]
 800e9fe:	6923      	ldr	r3, [r4, #16]
 800ea00:	b94b      	cbnz	r3, 800ea16 <__swsetup_r+0x9a>
 800ea02:	89a3      	ldrh	r3, [r4, #12]
 800ea04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea0c:	d003      	beq.n	800ea16 <__swsetup_r+0x9a>
 800ea0e:	4621      	mov	r1, r4
 800ea10:	4630      	mov	r0, r6
 800ea12:	f000 f919 	bl	800ec48 <__smakebuf_r>
 800ea16:	89a2      	ldrh	r2, [r4, #12]
 800ea18:	f012 0301 	ands.w	r3, r2, #1
 800ea1c:	d00c      	beq.n	800ea38 <__swsetup_r+0xbc>
 800ea1e:	2300      	movs	r3, #0
 800ea20:	60a3      	str	r3, [r4, #8]
 800ea22:	6963      	ldr	r3, [r4, #20]
 800ea24:	425b      	negs	r3, r3
 800ea26:	61a3      	str	r3, [r4, #24]
 800ea28:	6923      	ldr	r3, [r4, #16]
 800ea2a:	b953      	cbnz	r3, 800ea42 <__swsetup_r+0xc6>
 800ea2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea30:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ea34:	d1ba      	bne.n	800e9ac <__swsetup_r+0x30>
 800ea36:	bd70      	pop	{r4, r5, r6, pc}
 800ea38:	0792      	lsls	r2, r2, #30
 800ea3a:	bf58      	it	pl
 800ea3c:	6963      	ldrpl	r3, [r4, #20]
 800ea3e:	60a3      	str	r3, [r4, #8]
 800ea40:	e7f2      	b.n	800ea28 <__swsetup_r+0xac>
 800ea42:	2000      	movs	r0, #0
 800ea44:	e7f7      	b.n	800ea36 <__swsetup_r+0xba>
 800ea46:	bf00      	nop
 800ea48:	200005bc 	.word	0x200005bc
 800ea4c:	080127bc 	.word	0x080127bc
 800ea50:	080127dc 	.word	0x080127dc
 800ea54:	0801279c 	.word	0x0801279c

0800ea58 <_close_r>:
 800ea58:	b538      	push	{r3, r4, r5, lr}
 800ea5a:	4c06      	ldr	r4, [pc, #24]	; (800ea74 <_close_r+0x1c>)
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	4605      	mov	r5, r0
 800ea60:	4608      	mov	r0, r1
 800ea62:	6023      	str	r3, [r4, #0]
 800ea64:	f7fe f9aa 	bl	800cdbc <_close>
 800ea68:	1c43      	adds	r3, r0, #1
 800ea6a:	d102      	bne.n	800ea72 <_close_r+0x1a>
 800ea6c:	6823      	ldr	r3, [r4, #0]
 800ea6e:	b103      	cbz	r3, 800ea72 <_close_r+0x1a>
 800ea70:	602b      	str	r3, [r5, #0]
 800ea72:	bd38      	pop	{r3, r4, r5, pc}
 800ea74:	2000a508 	.word	0x2000a508

0800ea78 <__sflush_r>:
 800ea78:	898a      	ldrh	r2, [r1, #12]
 800ea7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea7e:	4605      	mov	r5, r0
 800ea80:	0710      	lsls	r0, r2, #28
 800ea82:	460c      	mov	r4, r1
 800ea84:	d45a      	bmi.n	800eb3c <__sflush_r+0xc4>
 800ea86:	684b      	ldr	r3, [r1, #4]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	dc05      	bgt.n	800ea98 <__sflush_r+0x20>
 800ea8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	dc02      	bgt.n	800ea98 <__sflush_r+0x20>
 800ea92:	2000      	movs	r0, #0
 800ea94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea9a:	2e00      	cmp	r6, #0
 800ea9c:	d0f9      	beq.n	800ea92 <__sflush_r+0x1a>
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eaa4:	682f      	ldr	r7, [r5, #0]
 800eaa6:	602b      	str	r3, [r5, #0]
 800eaa8:	d033      	beq.n	800eb12 <__sflush_r+0x9a>
 800eaaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eaac:	89a3      	ldrh	r3, [r4, #12]
 800eaae:	075a      	lsls	r2, r3, #29
 800eab0:	d505      	bpl.n	800eabe <__sflush_r+0x46>
 800eab2:	6863      	ldr	r3, [r4, #4]
 800eab4:	1ac0      	subs	r0, r0, r3
 800eab6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eab8:	b10b      	cbz	r3, 800eabe <__sflush_r+0x46>
 800eaba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eabc:	1ac0      	subs	r0, r0, r3
 800eabe:	2300      	movs	r3, #0
 800eac0:	4602      	mov	r2, r0
 800eac2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eac4:	6a21      	ldr	r1, [r4, #32]
 800eac6:	4628      	mov	r0, r5
 800eac8:	47b0      	blx	r6
 800eaca:	1c43      	adds	r3, r0, #1
 800eacc:	89a3      	ldrh	r3, [r4, #12]
 800eace:	d106      	bne.n	800eade <__sflush_r+0x66>
 800ead0:	6829      	ldr	r1, [r5, #0]
 800ead2:	291d      	cmp	r1, #29
 800ead4:	d84b      	bhi.n	800eb6e <__sflush_r+0xf6>
 800ead6:	4a2b      	ldr	r2, [pc, #172]	; (800eb84 <__sflush_r+0x10c>)
 800ead8:	40ca      	lsrs	r2, r1
 800eada:	07d6      	lsls	r6, r2, #31
 800eadc:	d547      	bpl.n	800eb6e <__sflush_r+0xf6>
 800eade:	2200      	movs	r2, #0
 800eae0:	6062      	str	r2, [r4, #4]
 800eae2:	04d9      	lsls	r1, r3, #19
 800eae4:	6922      	ldr	r2, [r4, #16]
 800eae6:	6022      	str	r2, [r4, #0]
 800eae8:	d504      	bpl.n	800eaf4 <__sflush_r+0x7c>
 800eaea:	1c42      	adds	r2, r0, #1
 800eaec:	d101      	bne.n	800eaf2 <__sflush_r+0x7a>
 800eaee:	682b      	ldr	r3, [r5, #0]
 800eaf0:	b903      	cbnz	r3, 800eaf4 <__sflush_r+0x7c>
 800eaf2:	6560      	str	r0, [r4, #84]	; 0x54
 800eaf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eaf6:	602f      	str	r7, [r5, #0]
 800eaf8:	2900      	cmp	r1, #0
 800eafa:	d0ca      	beq.n	800ea92 <__sflush_r+0x1a>
 800eafc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb00:	4299      	cmp	r1, r3
 800eb02:	d002      	beq.n	800eb0a <__sflush_r+0x92>
 800eb04:	4628      	mov	r0, r5
 800eb06:	f7fe ff87 	bl	800da18 <_free_r>
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	6360      	str	r0, [r4, #52]	; 0x34
 800eb0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb12:	6a21      	ldr	r1, [r4, #32]
 800eb14:	2301      	movs	r3, #1
 800eb16:	4628      	mov	r0, r5
 800eb18:	47b0      	blx	r6
 800eb1a:	1c41      	adds	r1, r0, #1
 800eb1c:	d1c6      	bne.n	800eaac <__sflush_r+0x34>
 800eb1e:	682b      	ldr	r3, [r5, #0]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d0c3      	beq.n	800eaac <__sflush_r+0x34>
 800eb24:	2b1d      	cmp	r3, #29
 800eb26:	d001      	beq.n	800eb2c <__sflush_r+0xb4>
 800eb28:	2b16      	cmp	r3, #22
 800eb2a:	d101      	bne.n	800eb30 <__sflush_r+0xb8>
 800eb2c:	602f      	str	r7, [r5, #0]
 800eb2e:	e7b0      	b.n	800ea92 <__sflush_r+0x1a>
 800eb30:	89a3      	ldrh	r3, [r4, #12]
 800eb32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb36:	81a3      	strh	r3, [r4, #12]
 800eb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb3c:	690f      	ldr	r7, [r1, #16]
 800eb3e:	2f00      	cmp	r7, #0
 800eb40:	d0a7      	beq.n	800ea92 <__sflush_r+0x1a>
 800eb42:	0793      	lsls	r3, r2, #30
 800eb44:	680e      	ldr	r6, [r1, #0]
 800eb46:	bf08      	it	eq
 800eb48:	694b      	ldreq	r3, [r1, #20]
 800eb4a:	600f      	str	r7, [r1, #0]
 800eb4c:	bf18      	it	ne
 800eb4e:	2300      	movne	r3, #0
 800eb50:	eba6 0807 	sub.w	r8, r6, r7
 800eb54:	608b      	str	r3, [r1, #8]
 800eb56:	f1b8 0f00 	cmp.w	r8, #0
 800eb5a:	dd9a      	ble.n	800ea92 <__sflush_r+0x1a>
 800eb5c:	4643      	mov	r3, r8
 800eb5e:	463a      	mov	r2, r7
 800eb60:	6a21      	ldr	r1, [r4, #32]
 800eb62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eb64:	4628      	mov	r0, r5
 800eb66:	47b0      	blx	r6
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	dc07      	bgt.n	800eb7c <__sflush_r+0x104>
 800eb6c:	89a3      	ldrh	r3, [r4, #12]
 800eb6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb72:	81a3      	strh	r3, [r4, #12]
 800eb74:	f04f 30ff 	mov.w	r0, #4294967295
 800eb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb7c:	4407      	add	r7, r0
 800eb7e:	eba8 0800 	sub.w	r8, r8, r0
 800eb82:	e7e8      	b.n	800eb56 <__sflush_r+0xde>
 800eb84:	20400001 	.word	0x20400001

0800eb88 <_fflush_r>:
 800eb88:	b538      	push	{r3, r4, r5, lr}
 800eb8a:	690b      	ldr	r3, [r1, #16]
 800eb8c:	4605      	mov	r5, r0
 800eb8e:	460c      	mov	r4, r1
 800eb90:	b1db      	cbz	r3, 800ebca <_fflush_r+0x42>
 800eb92:	b118      	cbz	r0, 800eb9c <_fflush_r+0x14>
 800eb94:	6983      	ldr	r3, [r0, #24]
 800eb96:	b90b      	cbnz	r3, 800eb9c <_fflush_r+0x14>
 800eb98:	f7ff f974 	bl	800de84 <__sinit>
 800eb9c:	4b0c      	ldr	r3, [pc, #48]	; (800ebd0 <_fflush_r+0x48>)
 800eb9e:	429c      	cmp	r4, r3
 800eba0:	d109      	bne.n	800ebb6 <_fflush_r+0x2e>
 800eba2:	686c      	ldr	r4, [r5, #4]
 800eba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eba8:	b17b      	cbz	r3, 800ebca <_fflush_r+0x42>
 800ebaa:	4621      	mov	r1, r4
 800ebac:	4628      	mov	r0, r5
 800ebae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebb2:	f7ff bf61 	b.w	800ea78 <__sflush_r>
 800ebb6:	4b07      	ldr	r3, [pc, #28]	; (800ebd4 <_fflush_r+0x4c>)
 800ebb8:	429c      	cmp	r4, r3
 800ebba:	d101      	bne.n	800ebc0 <_fflush_r+0x38>
 800ebbc:	68ac      	ldr	r4, [r5, #8]
 800ebbe:	e7f1      	b.n	800eba4 <_fflush_r+0x1c>
 800ebc0:	4b05      	ldr	r3, [pc, #20]	; (800ebd8 <_fflush_r+0x50>)
 800ebc2:	429c      	cmp	r4, r3
 800ebc4:	bf08      	it	eq
 800ebc6:	68ec      	ldreq	r4, [r5, #12]
 800ebc8:	e7ec      	b.n	800eba4 <_fflush_r+0x1c>
 800ebca:	2000      	movs	r0, #0
 800ebcc:	bd38      	pop	{r3, r4, r5, pc}
 800ebce:	bf00      	nop
 800ebd0:	080127bc 	.word	0x080127bc
 800ebd4:	080127dc 	.word	0x080127dc
 800ebd8:	0801279c 	.word	0x0801279c

0800ebdc <_lseek_r>:
 800ebdc:	b538      	push	{r3, r4, r5, lr}
 800ebde:	4c07      	ldr	r4, [pc, #28]	; (800ebfc <_lseek_r+0x20>)
 800ebe0:	4605      	mov	r5, r0
 800ebe2:	4608      	mov	r0, r1
 800ebe4:	4611      	mov	r1, r2
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	6022      	str	r2, [r4, #0]
 800ebea:	461a      	mov	r2, r3
 800ebec:	f7fe f8f0 	bl	800cdd0 <_lseek>
 800ebf0:	1c43      	adds	r3, r0, #1
 800ebf2:	d102      	bne.n	800ebfa <_lseek_r+0x1e>
 800ebf4:	6823      	ldr	r3, [r4, #0]
 800ebf6:	b103      	cbz	r3, 800ebfa <_lseek_r+0x1e>
 800ebf8:	602b      	str	r3, [r5, #0]
 800ebfa:	bd38      	pop	{r3, r4, r5, pc}
 800ebfc:	2000a508 	.word	0x2000a508

0800ec00 <__swhatbuf_r>:
 800ec00:	b570      	push	{r4, r5, r6, lr}
 800ec02:	460e      	mov	r6, r1
 800ec04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec08:	2900      	cmp	r1, #0
 800ec0a:	b090      	sub	sp, #64	; 0x40
 800ec0c:	4614      	mov	r4, r2
 800ec0e:	461d      	mov	r5, r3
 800ec10:	da07      	bge.n	800ec22 <__swhatbuf_r+0x22>
 800ec12:	2300      	movs	r3, #0
 800ec14:	602b      	str	r3, [r5, #0]
 800ec16:	89b3      	ldrh	r3, [r6, #12]
 800ec18:	061a      	lsls	r2, r3, #24
 800ec1a:	d410      	bmi.n	800ec3e <__swhatbuf_r+0x3e>
 800ec1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec20:	e00e      	b.n	800ec40 <__swhatbuf_r+0x40>
 800ec22:	aa01      	add	r2, sp, #4
 800ec24:	f000 f8a2 	bl	800ed6c <_fstat_r>
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	dbf2      	blt.n	800ec12 <__swhatbuf_r+0x12>
 800ec2c:	9a02      	ldr	r2, [sp, #8]
 800ec2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ec32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ec36:	425a      	negs	r2, r3
 800ec38:	415a      	adcs	r2, r3
 800ec3a:	602a      	str	r2, [r5, #0]
 800ec3c:	e7ee      	b.n	800ec1c <__swhatbuf_r+0x1c>
 800ec3e:	2340      	movs	r3, #64	; 0x40
 800ec40:	2000      	movs	r0, #0
 800ec42:	6023      	str	r3, [r4, #0]
 800ec44:	b010      	add	sp, #64	; 0x40
 800ec46:	bd70      	pop	{r4, r5, r6, pc}

0800ec48 <__smakebuf_r>:
 800ec48:	898b      	ldrh	r3, [r1, #12]
 800ec4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec4c:	079d      	lsls	r5, r3, #30
 800ec4e:	4606      	mov	r6, r0
 800ec50:	460c      	mov	r4, r1
 800ec52:	d507      	bpl.n	800ec64 <__smakebuf_r+0x1c>
 800ec54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ec58:	6023      	str	r3, [r4, #0]
 800ec5a:	6123      	str	r3, [r4, #16]
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	6163      	str	r3, [r4, #20]
 800ec60:	b002      	add	sp, #8
 800ec62:	bd70      	pop	{r4, r5, r6, pc}
 800ec64:	ab01      	add	r3, sp, #4
 800ec66:	466a      	mov	r2, sp
 800ec68:	f7ff ffca 	bl	800ec00 <__swhatbuf_r>
 800ec6c:	9900      	ldr	r1, [sp, #0]
 800ec6e:	4605      	mov	r5, r0
 800ec70:	4630      	mov	r0, r6
 800ec72:	f7fe ff1f 	bl	800dab4 <_malloc_r>
 800ec76:	b948      	cbnz	r0, 800ec8c <__smakebuf_r+0x44>
 800ec78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec7c:	059a      	lsls	r2, r3, #22
 800ec7e:	d4ef      	bmi.n	800ec60 <__smakebuf_r+0x18>
 800ec80:	f023 0303 	bic.w	r3, r3, #3
 800ec84:	f043 0302 	orr.w	r3, r3, #2
 800ec88:	81a3      	strh	r3, [r4, #12]
 800ec8a:	e7e3      	b.n	800ec54 <__smakebuf_r+0xc>
 800ec8c:	4b0d      	ldr	r3, [pc, #52]	; (800ecc4 <__smakebuf_r+0x7c>)
 800ec8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ec90:	89a3      	ldrh	r3, [r4, #12]
 800ec92:	6020      	str	r0, [r4, #0]
 800ec94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec98:	81a3      	strh	r3, [r4, #12]
 800ec9a:	9b00      	ldr	r3, [sp, #0]
 800ec9c:	6163      	str	r3, [r4, #20]
 800ec9e:	9b01      	ldr	r3, [sp, #4]
 800eca0:	6120      	str	r0, [r4, #16]
 800eca2:	b15b      	cbz	r3, 800ecbc <__smakebuf_r+0x74>
 800eca4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eca8:	4630      	mov	r0, r6
 800ecaa:	f000 f871 	bl	800ed90 <_isatty_r>
 800ecae:	b128      	cbz	r0, 800ecbc <__smakebuf_r+0x74>
 800ecb0:	89a3      	ldrh	r3, [r4, #12]
 800ecb2:	f023 0303 	bic.w	r3, r3, #3
 800ecb6:	f043 0301 	orr.w	r3, r3, #1
 800ecba:	81a3      	strh	r3, [r4, #12]
 800ecbc:	89a3      	ldrh	r3, [r4, #12]
 800ecbe:	431d      	orrs	r5, r3
 800ecc0:	81a5      	strh	r5, [r4, #12]
 800ecc2:	e7cd      	b.n	800ec60 <__smakebuf_r+0x18>
 800ecc4:	0800de05 	.word	0x0800de05

0800ecc8 <memmove>:
 800ecc8:	4288      	cmp	r0, r1
 800ecca:	b510      	push	{r4, lr}
 800eccc:	eb01 0302 	add.w	r3, r1, r2
 800ecd0:	d803      	bhi.n	800ecda <memmove+0x12>
 800ecd2:	1e42      	subs	r2, r0, #1
 800ecd4:	4299      	cmp	r1, r3
 800ecd6:	d10c      	bne.n	800ecf2 <memmove+0x2a>
 800ecd8:	bd10      	pop	{r4, pc}
 800ecda:	4298      	cmp	r0, r3
 800ecdc:	d2f9      	bcs.n	800ecd2 <memmove+0xa>
 800ecde:	1881      	adds	r1, r0, r2
 800ece0:	1ad2      	subs	r2, r2, r3
 800ece2:	42d3      	cmn	r3, r2
 800ece4:	d100      	bne.n	800ece8 <memmove+0x20>
 800ece6:	bd10      	pop	{r4, pc}
 800ece8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ecec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ecf0:	e7f7      	b.n	800ece2 <memmove+0x1a>
 800ecf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecf6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ecfa:	e7eb      	b.n	800ecd4 <memmove+0xc>

0800ecfc <_realloc_r>:
 800ecfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecfe:	4607      	mov	r7, r0
 800ed00:	4614      	mov	r4, r2
 800ed02:	460e      	mov	r6, r1
 800ed04:	b921      	cbnz	r1, 800ed10 <_realloc_r+0x14>
 800ed06:	4611      	mov	r1, r2
 800ed08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ed0c:	f7fe bed2 	b.w	800dab4 <_malloc_r>
 800ed10:	b922      	cbnz	r2, 800ed1c <_realloc_r+0x20>
 800ed12:	f7fe fe81 	bl	800da18 <_free_r>
 800ed16:	4625      	mov	r5, r4
 800ed18:	4628      	mov	r0, r5
 800ed1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed1c:	f000 f848 	bl	800edb0 <_malloc_usable_size_r>
 800ed20:	4284      	cmp	r4, r0
 800ed22:	d90f      	bls.n	800ed44 <_realloc_r+0x48>
 800ed24:	4621      	mov	r1, r4
 800ed26:	4638      	mov	r0, r7
 800ed28:	f7fe fec4 	bl	800dab4 <_malloc_r>
 800ed2c:	4605      	mov	r5, r0
 800ed2e:	2800      	cmp	r0, #0
 800ed30:	d0f2      	beq.n	800ed18 <_realloc_r+0x1c>
 800ed32:	4631      	mov	r1, r6
 800ed34:	4622      	mov	r2, r4
 800ed36:	f7fe fe5c 	bl	800d9f2 <memcpy>
 800ed3a:	4631      	mov	r1, r6
 800ed3c:	4638      	mov	r0, r7
 800ed3e:	f7fe fe6b 	bl	800da18 <_free_r>
 800ed42:	e7e9      	b.n	800ed18 <_realloc_r+0x1c>
 800ed44:	4635      	mov	r5, r6
 800ed46:	e7e7      	b.n	800ed18 <_realloc_r+0x1c>

0800ed48 <_read_r>:
 800ed48:	b538      	push	{r3, r4, r5, lr}
 800ed4a:	4c07      	ldr	r4, [pc, #28]	; (800ed68 <_read_r+0x20>)
 800ed4c:	4605      	mov	r5, r0
 800ed4e:	4608      	mov	r0, r1
 800ed50:	4611      	mov	r1, r2
 800ed52:	2200      	movs	r2, #0
 800ed54:	6022      	str	r2, [r4, #0]
 800ed56:	461a      	mov	r2, r3
 800ed58:	f7fe f808 	bl	800cd6c <_read>
 800ed5c:	1c43      	adds	r3, r0, #1
 800ed5e:	d102      	bne.n	800ed66 <_read_r+0x1e>
 800ed60:	6823      	ldr	r3, [r4, #0]
 800ed62:	b103      	cbz	r3, 800ed66 <_read_r+0x1e>
 800ed64:	602b      	str	r3, [r5, #0]
 800ed66:	bd38      	pop	{r3, r4, r5, pc}
 800ed68:	2000a508 	.word	0x2000a508

0800ed6c <_fstat_r>:
 800ed6c:	b538      	push	{r3, r4, r5, lr}
 800ed6e:	4c07      	ldr	r4, [pc, #28]	; (800ed8c <_fstat_r+0x20>)
 800ed70:	2300      	movs	r3, #0
 800ed72:	4605      	mov	r5, r0
 800ed74:	4608      	mov	r0, r1
 800ed76:	4611      	mov	r1, r2
 800ed78:	6023      	str	r3, [r4, #0]
 800ed7a:	f7fe f822 	bl	800cdc2 <_fstat>
 800ed7e:	1c43      	adds	r3, r0, #1
 800ed80:	d102      	bne.n	800ed88 <_fstat_r+0x1c>
 800ed82:	6823      	ldr	r3, [r4, #0]
 800ed84:	b103      	cbz	r3, 800ed88 <_fstat_r+0x1c>
 800ed86:	602b      	str	r3, [r5, #0]
 800ed88:	bd38      	pop	{r3, r4, r5, pc}
 800ed8a:	bf00      	nop
 800ed8c:	2000a508 	.word	0x2000a508

0800ed90 <_isatty_r>:
 800ed90:	b538      	push	{r3, r4, r5, lr}
 800ed92:	4c06      	ldr	r4, [pc, #24]	; (800edac <_isatty_r+0x1c>)
 800ed94:	2300      	movs	r3, #0
 800ed96:	4605      	mov	r5, r0
 800ed98:	4608      	mov	r0, r1
 800ed9a:	6023      	str	r3, [r4, #0]
 800ed9c:	f7fe f816 	bl	800cdcc <_isatty>
 800eda0:	1c43      	adds	r3, r0, #1
 800eda2:	d102      	bne.n	800edaa <_isatty_r+0x1a>
 800eda4:	6823      	ldr	r3, [r4, #0]
 800eda6:	b103      	cbz	r3, 800edaa <_isatty_r+0x1a>
 800eda8:	602b      	str	r3, [r5, #0]
 800edaa:	bd38      	pop	{r3, r4, r5, pc}
 800edac:	2000a508 	.word	0x2000a508

0800edb0 <_malloc_usable_size_r>:
 800edb0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800edb4:	2800      	cmp	r0, #0
 800edb6:	f1a0 0004 	sub.w	r0, r0, #4
 800edba:	bfbc      	itt	lt
 800edbc:	580b      	ldrlt	r3, [r1, r0]
 800edbe:	18c0      	addlt	r0, r0, r3
 800edc0:	4770      	bx	lr
	...

0800edc4 <_init>:
 800edc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edc6:	bf00      	nop
 800edc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edca:	bc08      	pop	{r3}
 800edcc:	469e      	mov	lr, r3
 800edce:	4770      	bx	lr

0800edd0 <_fini>:
 800edd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edd2:	bf00      	nop
 800edd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edd6:	bc08      	pop	{r3}
 800edd8:	469e      	mov	lr, r3
 800edda:	4770      	bx	lr
